#!tvf

tvf::VERBATIM {


// xCalibre/calibre  RC/LVS command file based on the follow calibre command file//
/////////////////////////////////////////////////////////////////////////////////
// 
// 
// 
// 
///////////////////////////////////////////////////////////////////////// 
//// 
////                      TSMC CONFIDENTIAL 
//// 
///////////////////////////////////////////////////////////////////////// 
//   @(#) TSMC N3 CALIBRE LVS/CCI COMMAND FILE  
//   @(#) COMMAND FILE DOCUMENT: T-N03-CL-SP-005-C1 
//   @(#) COMMAND FILE VERSION: 1.0b  
//   @(#) COMMAND FILE METAL SCHEME: 1P18M  
//   @(#) COMMAND FILE DATE: 01/28/2022  
//   @(#) EDA TOOL VERSION: Calibre v2020.4_35.19  
////////////////////////////////////////////////////////////////// 
//    
//   TSMC has developed this deck using Mentor Graphics proprietary SVRF and TVF formats.  
//   The deck is to be used only in Calibre tools  
// 
////////////////////////////////////////////////////////////////// 
//////////////////////////////////////////////////////////////////////////////// 
// DISCLAIMER 
// 
// This file usually contains the super set of device extraction rule at TSMC
// processes. However, all of device in basic deck may not be offered at current
// SPICE model. PLEASE ALWAYS REFER TO THE CORRESPONDING SPICE MODEL DOCUMENT
// FOR ANY DEVICE YOU WOULD LIKE USE.
// 
// The information contained herein is provided by TSMC on an "AS IS" basis 
// without any warranty, and TSMC has no obligation to support or otherwise 
// maintain the information.  TSMC disclaims any representation that the 
// information does not infringe any intellectual property rights or proprietary 
// rights of any third parties.  There are no other warranties given by TSMC, 
// whether express, implied or statutory, including, without limitation, implied 
// warranties of merchantability and fitness for a particular purpose. 
// 
// STATEMENT OF USE 
// 
// This information contains confidential and proprietary information of TSMC. 
// No part of this information may be reproduced, transmitted, transcribed, 
// stored in a retrieval system, or translated into any human or computer 
// language, in any form or by any means, electronic, mechanical, magnetic, 
// optical, chemical, manual, or otherwise, without the prior written permission 
// of TSMC.  This information was prepared for informational purpose and is for 
// use by TSMC's customers only.  TSMC reserves the right to make changes in the 
// information at any time and without notice. 
// 
//////////////////////////////////////////////////////////////////////////////// 
// 
//////////////////////////////////////////////////////////////////////////////// 
// 
//                             DEVICE FORMULA 
//   CORE == 0.75V  
//   I/O  == 1.2V  
//   ----- ----------------------------- ---------------------------------- 
//   NAME     DESCRIPTION                   DEVICE LAYER OPERATION 
//   ----- ----------------------------- ---------------------------------- 
// 
// 
//   M[nch_svt_mac]             CORE SVT     NMOS                                 (NGATES-OD12-NT_N*VTS_N-VTL_N-VTUL_N-VTEL_N-VTL_NLL-VTUL_NLL-SRM-SR_ESD-DNWDMY-PO_P81_WPO) 
//   M[nch_lvt_mac]             CORE LVT     NMOS                                 (NGATES-OD12-NT_N-VTS_N*VTL_N-VTUL_N-VTEL_N-VTL_NLL-VTUL_NLL-SRM-SR_ESD-DNWDMY-PO_P81_WPO) 
//   M[nch_ulvt_mac]            CORE ULVT    NMOS                                 (NGATES-OD12-NT_N-VTS_N-VTL_N*VTUL_N-VTEL_N-VTL_NLL-VTUL_NLL-SRM-SR_ESD-DNWDMY-PO_P81_WPO) 
//   M[nch_elvt_mac]            CORE ELVT    NMOS                                 (NGATES-OD12-NT_N-VTS_N-VTL_N-VTUL_N*VTEL_N-VTL_NLL-VTUL_NLL-SRM-SR_ESD-DNWDMY-PO_P81_WPO) 
//   M[nch_lvtll_mac]           CORE LVT-LL  NMOS                                 (NGATES-OD12-NT_N-VTS_N-VTL_N-VTUL_N-VTEL_N*VTL_NLL-VTUL_NLL-SRM-SR_ESD-DNWDMY-PO_P81_WPO) 
//   M[nch_ulvtll_mac]          CORE ULVT-LL NMOS                                 (NGATES-OD12-NT_N-VTS_N-VTL_N-VTUL_N-VTEL_N-VTL_NLL*VTUL_NLL-SRM-SR_ESD-DNWDMY-PO_P81_WPO) 
//   M[nch_12_mac]              I/O 1.2V  NMOS                                    (NGATES*OD12-NT_N-DNWDMY-PO_P81_WPO) 
//   M[nch_svt_dnw_mac]         CORE SVT     NMOS in DNW                          (NGATES-OD12-NT_N*VTS_N-VTL_N-VTUL_N-VTEL_N-VTL_NLL-VTUL_NLL-SRM-SR_ESD*DNWDMY-PO_P81_WPO) 
//   M[nch_lvt_dnw_mac]         CORE LVT     NMOS in DNW                          (NGATES-OD12-NT_N-VTS_N*VTL_N-VTUL_N-VTEL_N-VTL_NLL-VTUL_NLL-SRM-SR_ESD*DNWDMY-PO_P81_WPO) 
//   M[nch_ulvt_dnw_mac]        CORE ULVT    NMOS in DNW                          (NGATES-OD12-NT_N-VTS_N-VTL_N*VTUL_N-VTEL_N-VTL_NLL-VTUL_NLL-SRM-SR_ESD*DNWDMY-PO_P81_WPO) 
//   M[nch_elvt_dnw_mac]        CORE ELVT    NMOS in DNW                          (NGATES-OD12-NT_N-VTS_N-VTL_N-VTUL_N*VTEL_N-VTL_NLL-VTUL_NLL-SRM-SR_ESD*DNWDMY-PO_P81_WPO) 
//   M[nch_lvtll_dnw_mac]       CORE LVT-LL  NMOS in DNW                          (NGATES-OD12-NT_N-VTS_N-VTL_N-VTUL_N-VTEL_N*VTL_NLL-VTUL_NLL-SRM-SR_ESD*DNWDMY-PO_P81_WPO) 
//   M[nch_ulvtll_dnw_mac]      CORE ULVT-LL NMOS in DNW                          (NGATES-OD12-NT_N-VTS_N-VTL_N-VTUL_N-VTEL_N-VTL_NLL*VTUL_NLL-SRM-SR_ESD*DNWDMY-PO_P81_WPO) 
//   M[nch_12_dnw_mac]          I/O 1.2V  NMOS in DNW                             (NGATES*OD12-NT_N*DNWDMY) 
//   M[nch_eflvt_dnw_mac]       CORE LVT eFuse NMOS in DNW                        (NGATES*PO_P81_WPO*METALFUSE-OD12-NT_N-VTS_N*VTL_N-VTUL_N-VTEL_N-VTL_NLL-VTUL_NLL-SRM-SR_ESD*DNWDMY-PO_P81_WPO) 
//   M[nch_efsvt_dnw_mac]       CORE SVT eFuse NMOS in DNW                        (NGATES*PO_P81_WPO*METALFUSE-OD12-NT_N*VTS_N-VTL_N-VTUL_N-VTEL_N-VTL_NLL-VTUL_NLL-SRM-SR_ESD*DNWDMY-PO_P81_WPO) 
// 
//   M[nch_hia12_mac]           ESD 1.2V HIA NMOS                                 (NGATES*OD12*SR_ESD*SDI*SDI_2-DNW-PO_P81_WPO)  
// 
//   M[pch_svt_mac]             CORE SVT     PMOS                                 (PGATES-OD12*VTS_P-VTL_P-VTUL_P-VTEL_P-VTL_PLL-VTUL_PLL-SRM-PO_P81_WPO) 
//   M[pch_lvt_mac]             CORE LVT     PMOS                                 (PGATES-OD12-VTS_P*VTL_P-VTUL_P-VTEL_P-VTL_PLL-VTUL_PLL-SRM-PO_P81_WPO) 
//   M[pch_ulvt_mac]            CORE ULVT    PMOS                                 (PGATES-OD12-VTS_P-VTL_P*VTUL_P-VTEL_P-VTL_PLL-VTUL_PLL-SRM-PO_P81_WPO) 
//   M[pch_elvt_mac]            CORE ELVT    PMOS                                 (PGATES-OD12-VTS_P-VTL_P-VTUL_P*VTEL_P-VTL_PLL-VTUL_PLL-SRM-PO_P81_WPO) 
//   M[pch_lvtll_mac]           CORE LVT-LL  PMOS                                 (PGATES-OD12-VTS_P-VTL_P-VTUL_P-VTEL_P*VTL_PLL-VTUL_PLL-SRM-PO_P81_WPO) 
//   M[pch_ulvtll_mac]          CORE ULVT-LL PMOS                                 (PGATES-OD12-VTS_P-VTL_P-VTUL_P-VTEL_P-VTL_PLL*VTUL_PLL-SRM-PO_P81_WPO) 
// 
//   M[pch_12_mac]              I/O 1.2V  PMOS                                    (PGATES*OD12-PO_P81_WPO) 
// 
//   M[nch_eflvt_mac]           CORE LVT eFuse NMOS                             (NGATES*PO_P81_WPO*METALFUSE-OD12-NT_N-VTS_N*VTL_N-VTUL_N-VTEL_N-VTL_NLL-VTUL_NLL-SRM-SR_ESD-DNWDMY) 
//   M[pch_eflvt_mac]           CORE LVT eFuse PMOS                             (PGATES*PO_P81_WPO*METALFUSE-OD12-VTS_P*VTL_P-VTUL_P-VTEL_P-VTL_PLL-VTUL_PLL-SRM) 
//   M[nch_efsvt_mac]           CORE SVT eFuse NMOS                             (NGATES*PO_P81_WPO*METALFUSE-OD12-NT_N*VTS_N-VTL_N-VTUL_N-VTEL_N-VTL_NLL-VTUL_NLL-SRM-SR_ESD-DNWDMY) 
//   M[pch_efsvt_mac]           CORE SVT eFuse PMOS                             (PGATES*PO_P81_WPO*METALFUSE-OD12*VTS_P-VTL_P-VTUL_P-VTEL_P-VTL_PLL-VTUL_PLL-SRM) 
// 
// 
//   M[nchpg_hdsr_mac]           SP-HD (1 fin) (pass-gate)                                 (NGATES*SRMDEVi*SRM*SRM11*SRAMDMY*SRAMPG) 
//   M[nchpd_hdsr_mac]           SP-HD (1 fin) (pull-down)                                 (NGATES*SRMDEVi*SRM*SRM11*SRAMDMY)       
//   M[pchpu_hdsr_mac]           SP-HD (1 fin) (pull-up)                                   (PGATES*SRMDEVi*SRM*SRM11*SRAMDMY)       
//   M[nchpg_hcsr_mac]           SP-HC (2 fin) (pass-gate)                                 (NGATES*SRMDEVi*SRM*SRM12*SRAMDMY*SRAMPG) 
//   M[nchpd_hcsr_mac]           SP-HC (2 fin) (pull-down)                                 (NGATES*SRMDEVi*SRM*SRM12*SRAMDMY)       
//   M[pchpu_hcsr_mac]           SP-HC (1 fin) (pull-up)                                   (PGATES*SRMDEVi*SRM*SRM12*SRAMDMY)       
//   M[nchpg_hshcsr_mac]         SP-HSHC (2 fin) (pass-gate)                               (NGATES*SRMDEVi*SRM*SRM12*SRM21*SRAMDMY*SRAMPG) 
//   M[nchpd_hshcsr_mac]         SP-HSHC (2 fin) (pull-down)                               (NGATES*SRMDEVi*SRM*SRM12*SRM21*SRAMDMY) 
//   M[pchpu_hshcsr_mac]         SP-HSHC (1 fin) (pull-up)                                 (PGATES*SRMDEVi*SRM*SRM12*SRM21*SRAMDMY) 
//   M[nchpg_8tsr_mac]           2P-8T(SVT WP:2 finLVT_RP:2 fin) (2 fin) (pass-gate)       (NGATES*SRMDEVi*SRM*SRM14*SRAMDMY*SRAMPG) 
//   M[nchpd_8tsr_mac]           2P-8T(SVT WP:2 finLVT_RP:2 fin) (2 fin) (pull-down)       (NGATES*SRMDEVi*SRM*SRM14*SRAMDMY)       
//   M[pchpu_8tsr_mac]           2P-8T(SVT WP:2 finLVT_RP:2 fin) (1 fin) (pull-up)         (PGATES*SRMDEVi*SRM*SRM14*SRAMDMY)       
//   M[nchpg_8trpsr_mac]         2P-8T(SVT WP:2 finLVT_RP:2 fin) (2 fin) (pass-gate)       (NGATES*SRMDEVi*SRM*SRM14*SRAMDMY*SRAMPG*SRAMRP) 
//   M[nchpd_8trpsr_mac]         2P-8T(SVT WP:2 finLVT_RP:2 fin) (2 fin) (pull-down)       (NGATES*SRMDEVi*SRM*SRM14*SRAMDMY*SRAMRP) 
//   M[nchpg_hc8tsr_mac]         2P-8T(SVT_WP:2 finLVT_RP:3 fin) (2 fin) (pass-gate)       (NGATES*SRMDEVi*SRM*SRM15*SRAMDMY*SRAMPG) 
//   M[nchpd_hc8tsr_mac]         2P-8T(SVT_WP:2 finLVT_RP:3 fin) (2 fin) (pull-down)       (NGATES*SRMDEVi*SRM*SRM15*SRAMDMY)       
//   M[pchpu_hc8tsr_mac]         2P-8T(SVT_WP:2 finLVT_RP:3 fin) (1 fin) (pull-up)         (PGATES*SRMDEVi*SRM*SRM15*SRAMDMY)       
//   M[nchpg_hc8trpsr_mac]       2P-8T(SVT_WP:2 finLVT_RP:3 fin) (3 fin) (pass-gate)       (NGATES*SRMDEVi*SRM*SRM15*SRAMDMY*SRAMPG*SRAMRP) 
//   M[nchpd_hc8trpsr_mac]       2P-8T(SVT_WP:2 finLVT_RP:3 fin) (3 fin) (pull-down)       (NGATES*SRMDEVi*SRM*SRM15*SRAMDMY*SRAMRP) 
//   M[nchpg_ulvtll8tsr_mac]     2P-8T(WP:2 finuLVTLL_RP:2 fin) (2 fin) (pass-gate)        (NGATES*SRMDEVi*SRM*SRM6*SRM14*SRAMDMY*SRAMPG) 
//   M[nchpd_ulvtll8tsr_mac]     2P-8T(WP:2 finuLVTLL_RP:2 fin) (2 fin) (pull-down)        (NGATES*SRMDEVi*SRM*SRM6*SRM14*SRAMDMY)  
//   M[pchpu_ulvtll8tsr_mac]     2P-8T(WP:2 finuLVTLL_RP:2 fin) (1 fin) (pull-up)          (PGATES*SRMDEVi*SRM*SRM6*SRM14*SRAMDMY)  
//   M[nchpg_ulvtll8trpsr_mac]    2P-8T(WP:2 finuLVTLL_RP:2 fin) (2 fin) (pass-gate)        (NGATES*SRMDEVi*SRM*SRM6*SRM14*SRAMDMY*SRAMPG*SRAMRP) 
//   M[nchpd_ulvtll8trpsr_mac]    2P-8T(WP:2 finuLVTLL_RP:2 fin) (2 fin) (pull-down)        (NGATES*SRMDEVi*SRM*SRM6*SRM14*SRAMDMY*SRAMRP) 
//   M[nchpg_ulvtllhc8tsr_mac]    2P-8T(WP:2 finuLVTLL_RP:3 fin) (2 fin) (pass-gate)        (NGATES*SRMDEVi*SRM*SRM6*SRM15*SRAMDMY*SRAMPG) 
//   M[nchpd_ulvtllhc8tsr_mac]    2P-8T(WP:2 finuLVTLL_RP:3 fin) (2 fin) (pull-down)        (NGATES*SRMDEVi*SRM*SRM6*SRM15*SRAMDMY)  
//   M[pchpu_ulvtllhc8tsr_mac]    2P-8T(WP:2 finuLVTLL_RP:3 fin) (1 fin) (pull-up)          (PGATES*SRMDEVi*SRM*SRM6*SRM15*SRAMDMY)  
//   M[nchpg_ulvtllhc8trpsr_mac]    2P-8T(WP:2 finuLVTLL_RP:3 fin) (3 fin) (pass-gate)        (NGATES*SRMDEVi*SRM*SRM6*SRM15*SRAMDMY*SRAMPG*SRAMRP) 
//   M[nchpd_ulvtllhc8trpsr_mac]    2P-8T(WP:2 finuLVTLL_RP:3 fin) (3 fin) (pull-down)        (NGATES*SRMDEVi*SRM*SRM6*SRM15*SRAMDMY*SRAMRP) 
//   M[nchpg_10tsr_mac]          3P-10T(WP:2 finLVT_RP:3 fin) (2 fin) (pass-gate)          (NGATES*SRMDEVi*SRM*SRM13*SRAMDMY*SRAMPG) 
//   M[nchpd_10tsr_mac]          3P-10T(WP:2 finLVT_RP:3 fin) (2 fin) (pull-down)          (NGATES*SRMDEVi*SRM*SRM13*SRAMDMY)       
//   M[pchpu_10tsr_mac]          3P-10T(WP:2 finLVT_RP:3 fin) (1 fin) (pull-up)            (PGATES*SRMDEVi*SRM*SRM13*SRAMDMY)       
//   M[nchpg_10trpsr_mac]        3P-10T(WP:2 finLVT_RP:3 fin) (3 fin) (pass-gate)          (NGATES*SRMDEVi*SRM*SRM13*SRAMDMY*SRAMPG*SRAMRP) 
//   M[nchpd_10trpsr_mac]        3P-10T(WP:2 finLVT_RP:3 fin) (3 fin) (pull-down)          (NGATES*SRMDEVi*SRM*SRM13*SRAMDMY*SRAMRP) 
//   M[nchpg_ulvtll10tsr_mac]    3P-10T(WP:2 finuLVT_LL_RP:3 fin) (2 fin) (pass-gate)      (NGATES*SRMDEVi*SRM*SRM6*SRM13*SRAMDMY*SRAMPG) 
//   M[nchpd_ulvtll10tsr_mac]    3P-10T(WP:2 finuLVT_LL_RP:3 fin) (2 fin) (pull-down)      (NGATES*SRMDEVi*SRM*SRM6*SRM13*SRAMDMY)  
//   M[pchpu_ulvtll10tsr_mac]    3P-10T(WP:2 finuLVT_LL_RP:3 fin) (1 fin) (pull-up)        (PGATES*SRMDEVi*SRM*SRM6*SRM13*SRAMDMY)  
//   M[nchpg_ulvtll10trpsr_mac]    3P-10T(WP:2 finuLVT_LL_RP:3 fin) (3 fin) (pass-gate)      (NGATES*SRMDEVi*SRM*SRM6*SRM13*SRAMDMY*SRAMPG*SRAMRP) 
//   M[nchpd_ulvtll10trpsr_mac]    3P-10T(WP:2 finuLVT_LL_RP:3 fin) (3 fin) (pull-down)      (NGATES*SRMDEVi*SRM*SRM6*SRM13*SRAMDMY*SRAMRP) 
//   M[nchpg_dpsr_mac]           DP-T (2 fin) (pass-gate)                                  (NGATES*SRMDEVi*SRM*SRM16*SRAMDMY*SRAMPG) 
//   M[nchpd_dpsr_mac]           DP-T (2 fin) (pull-down)                                  (NGATES*SRMDEVi*SRM*SRM16*SRAMDMY)       
//   M[pchpu_dpsr_mac]           DP-T (1 fin) (pull-up)                                    (PGATES*SRMDEVi*SRM*SRM16*SRAMDMY)       
// 
// 
// 
//   npode_svt_mac              CORE SVT     NPODE                                (PODE_GATE*NGATES-OD12-NT_N*VTS_N-VTL_N-VTUL_N-VTEL_N-VTL_NLL-VTUL_NLL-SRM-SR_ESD) 
//   npode_lvt_mac              CORE LVT     NPODE                                (PODE_GATE*NGATES-OD12-NT_N-VTS_N*VTL_N-VTUL_N-VTEL_N-VTL_NLL-VTUL_NLL-SRM-SR_ESD) 
//   npode_ulvt_mac             CORE ULVT    NPODE                                (PODE_GATE*NGATES-OD12-NT_N-VTS_N-VTL_N*VTUL_N-VTEL_N-VTL_NLL-VTUL_NLL-SRM-SR_ESD) 
//   npode_elvt_mac             CORE ELVT    NPODE                                (PODE_GATE*NGATES-OD12-NT_N-VTS_N-VTL_N-VTUL_N*VTEL_N-VTL_NLL-VTUL_NLL-SRM-SR_ESD) 
//   npode_lvtll_mac            CORE LVT-LL  NPODE                                (PODE_GATE*NGATES-OD12-NT_N-VTS_N-VTL_N-VTUL_N-VTEL_N*VTL_NLL-VTUL_NLL-SRM-SR_ESD) 
//   npode_ulvtll_mac           CORE ULVT-LL NPODE                                (PODE_GATE*NGATES-OD12-NT_N-VTS_N-VTL_N-VTUL_N-VTEL_N-VTL_NLL*VTUL_NLL-SRM-SR_ESD) 
// 
//   npode_12_mac               I/O 1.2V  NPODE                                   (PODE_GATE*NGATES*OD12-NT_N) 
// 
//   ppode_svt_mac              CORE SVT     PPODE                                (PODE_GATE*PGATES-OD12*VTS_P-VTL_P-VTUL_P-VTEL_P-VTL_PLL-VTUL_PLL-SRM) 
//   ppode_lvt_mac              CORE LVT     PPODE                                (PODE_GATE*PGATES-OD12-VTS_P*VTL_P-VTUL_P-VTEL_P-VTL_PLL-VTUL_PLL-SRM) 
//   ppode_ulvt_mac             CORE ULVT    PPODE                                (PODE_GATE*PGATES-OD12-VTS_P-VTL_P*VTUL_P-VTEL_P-VTL_PLL-VTUL_PLL-SRM) 
//   ppode_elvt_mac             CORE ELVT    PPODE                                (PODE_GATE*PGATES-OD12-VTS_P-VTL_P-VTUL_P*VTEL_P-VTL_PLL-VTUL_PLL-SRM) 
//   ppode_lvtll_mac            CORE LVT-LL  PPODE                                (PODE_GATE*PGATES-OD12-VTS_P-VTL_P-VTUL_P-VTEL_P*VTL_PLL-VTUL_PLL-SRM) 
//   ppode_ulvtll_mac           CORE ULVT-LL PPODE                                (PODE_GATE*PGATES-OD12-VTS_P-VTL_P-VTUL_P-VTEL_P-VTL_PLL*VTUL_PLL-SRM) 
// 
//   ppode_12_mac               I/O 1.2V  PPODE                                   (PODE_GATE*PGATES*OD12) 
// 
//   npode_eflvt_mac            CORE LVT eFuse NPODE                              (PODE_GATE*PO_P81_WPO*METALFUSE*NGATES-OD12-NT_N-VTS_N*VTL_N-VTUL_N-VTEL_N-VTL_NLL-VTUL_NLL-SRM-SR_ESD) 
//   ppode_eflvt_mac            CORE LVT eFuse PPODE                              (PODE_GATE*PO_P81_WPO*METALFUSE*PGATES-OD12-VTS_P*VTL_P-VTUL_P-VTEL_P-VTL_PLL-VTUL_PLL-SRM) 
//   npode_efsvt_mac            CORE SVT eFuse NPODE                              (PODE_GATE*PO_P81_WPO*METALFUSE*NGATES-OD12-NT_N*VTS_N-VTL_N-VTUL_N-VTEL_N-VTL_NLL-VTUL_NLL-SRM-SR_ESD) 
//   ppode_efsvt_mac            CORE SVT eFuse PPODE                              (PODE_GATE*PO_P81_WPO*METALFUSE*PGATES-OD12*VTS_P-VTL_P-VTUL_P-VTEL_P-VTL_PLL-VTUL_PLL-SRM) 
// 
//   M[nch_mpodesvt_mac]        4T Core SVT     N-type MPODE                      (PODE_GATE*NGATES-OD12-NT_N*VTS_N-VTL_N-VTUL_N-VTEL_N-VTL_NLL-VTUL_NLL-SRM-SR_ESD) 
//   M[nch_mpodelvt_mac]        4T Core LVT     N-type MPODE                      (PODE_GATE*NGATES-OD12-NT_N-VTS_N*VTL_N-VTUL_N-VTEL_N-VTL_NLL-VTUL_NLL-SRM-SR_ESD) 
//   M[nch_mpodeulvt_mac]       4T Core ULVT    N-type MPODE                      (PODE_GATE*NGATES-OD12-NT_N-VTS_N-VTL_N*VTUL_N-VTEL_N-VTL_NLL-VTUL_NLL-SRM-SR_ESD) 
//   M[nch_mpodeelvt_mac]       4T Core ELVT    N-type MPODE                      (PODE_GATE*NGATES-OD12-NT_N-VTS_N-VTL_N-VTUL_N*VTEL_N-VTL_NLL-VTUL_NLL-SRM-SR_ESD) 
//   M[nch_mpodelvtll_mac]      4T Core LVT-LL  N-type MPODE                      (PODE_GATE*NGATES-OD12-NT_N-VTS_N-VTL_N-VTUL_N-VTEL_N*VTL_NLL-VTUL_NLL-SRM-SR_ESD) 
//   M[nch_mpodeulvtll_mac]     4T Core ULVT-LL N-type MPODE                      (PODE_GATE*NGATES-OD12-NT_N-VTS_N-VTL_N-VTUL_N-VTEL_N-VTL_NLL*VTUL_NLL-SRM-SR_ESD) 
// 
//   M[nch_mpode12_mac]         4T I/O 1.2V  N-type MPODE                         (PODE_GATE*NGATES*OD12-NT_N) 
// 
//   M[pch_mpodesvt_mac]        4T Core SVT     P-type MPODE                      (PODE_GATE*PGATES-OD12*VTS_P-VTL_P-VTUL_P-VTEL_P-VTL_PLL-VTUL_PLL-SRM) 
//   M[pch_mpodelvt_mac]        4T Core LVS     P-type MPODE                      (PODE_GATE*PGATES-OD12-VTS_P*VTL_P-VTUL_P-VTEL_P-VTL_PLL-VTUL_PLL-SRM) 
//   M[pch_mpodeulvt_mac]       4T Core ULVT    P-type MPODE                      (PODE_GATE*PGATES-OD12-VTS_P-VTL_P*VTUL_P-VTEL_P-VTL_PLL-VTUL_PLL-SRM) 
//   M[pch_mpodeelvt_mac]       4T Core ELVT    P-type MPODE                      (PODE_GATE*PGATES-OD12-VTS_P-VTL_P-VTUL_P*VTEL_P-VTL_PLL-VTUL_PLL-SRM) 
//   M[pch_mpodelvtll_mac]      4T Core LVT-LL  P-type MPODE                      (PODE_GATE*PGATES-OD12-VTS_P-VTL_P-VTUL_P-VTEL_P*VTL_PLL-VTUL_PLL-SRM) 
//   M[pch_mpodeulvtll_mac]     4T Core ULVT-LL P-type MPODE                      (PODE_GATE*PGATES-OD12-VTS_P-VTL_P-VTUL_P-VTEL_P-VTL_PLL*VTUL_PLL-SRM) 
// 
//   M[pch_mpode12_mac]         4T I/O 1.2V  P-type MPODE                         (PODE_GATE*PGATES*OD12) 
// 
// 
//   D[nwdio]                   NW/PW diode                                       (DIODMY*PO*OD*NP*NW-OD12-DNWDMY)  
// 
//   D[dnwpsub]                 Diode DNW/PSUB                                    (DNW*PSUB) 
//   D[pwdnw]                   Diode PW/DNW                                      (DNW-NW) 
//   D[pnwdio]                  Parasitic NW/PW diode                             (NW-DIODMY)    
// 
//   ndio_mac                   CORE N+/PW diode                                  (DIODMY*OD*PO*NP-OD12-NW) 
//   pdio_mac                   CORE P+/NW diode                                  (DIODMY*OD*PO*PP-OD12*NW) 
//   ndio_12_mac                I/O 1.2V N+/PW diode                              (DIODMY*OD*PO*NP*OD12-NW-NT_N) 
//   pdio_12_mac                I/O 1.2V P+/NW diode                              (DIODMY*OD*PO*PP*OD12*NW) 
// 
//   ndio_12_ntn_mac            I/O 1.2V NT_N diode                               (DIODMY*OD*PO*NP*OD12-NW*NT_N-DNWDMY) 
// 
//   ndio_hia12_mac             I/O 1.2V N-HIA diode                              (HIA_DUMMY*DIODMY*OD*NP*OD12-NW*POI-NT_N) 
//   pdio_hia12_mac             I/O 1.2V P-HIA diode                              (HIA_DUMMY*DIODMY*OD*PP*OD12*NW*POI)    
// 
//   ndio_hia12_ntn_mac         I/O 1.2V NTN-HIA diode                            (HIA_DUMMY*DIODMY*OD*NP*OD12-NW*POI*NT_N-DNWDMY) 
//   Q[pnp_i1_mac]              Cascade PNP (P+/NW/Psub)                          (IBJTDMY*NW*BJTEDMY*OD*OD12*PO*PP-DNWDMY) 
//   Q[pnp_i2_mac]              Cascade PNP (P+/NW/Psub)                          (IBJTDMY*NW*BJTEDMY*OD*OD12*PO*PP-DNWDMY) 
//   Q[pnp_p1_mac]              Cascade PNP (PW/DNW/Psub)                         (IBJTDMY*DNW*NW*BJTEDMY*OD*OD12*PO*PP) 
// 
//   nmoscap                    CORE MOSCAP                                       (VARGT-OD12) 
//   nmoscap_12                 I/O 1.2V MOSCAP                                   (VARGT*OD12) 
// 
//   crtmom_wo                  3T RTMOM                                          ((ALL_M1i*MOMDMY1*ALL_M2i*MOMDMY2*ALL_M3i*MOMDMY3)*RTMOMDMY-RFDMYi-MOMDMY_MX*MOMDMY_NPO-MOMDMY_ARY-MOMDMY_TSHD-RFMOMDMY_2T) 
//   crtmom_2t                  2T RTMOM                                          ((ALL_M1i*MOMDMY1*ALL_M2i*MOMDMY2*ALL_M3i*MOMDMY3)*RTMOMDMY-MOMDMY_MX*MOMDMY_2T-MOMDMY_ARY-MOMDMY_TSHD-RFMOMDMY_2T) 
//   crtmom_wo_mx               5T RTMOM                                          ((ALL_M1i*MOMDMY1*ALL_M2i*MOMDMY2*ALL_M3i*MOMDMY3)*RTMOMDMY-RFDMYi*MOMDMY_MX*MOMDMY_NPO-MOMDMY_ARY-MOMDMY_TSHD-RFMOMDMY_2T) 
//   crtmom_mx_4t               4T RTMOM                                          ((ALL_M1i*MOMDMY1*ALL_M2i*MOMDMY2*ALL_M3i*MOMDMY3)*RTMOMDMY*MOMDMY_MX*MOMDMY_2T-MOMDMY_ARY-MOMDMY_TSHD-RFMOMDMY_2T)  
//   crtmom_wo_rf               RF RTMOM                                          ((ALL_M1i*MOMDMY1*ALL_M2i*MOMDMY2*ALL_M3i*MOMDMY3)*RTMOMDMY*RFDMYi-MOMDMY_MX*MOMDMY_NPO-MOMDMY_ARY-MOMDMY_TSHD-RFMOMDMY_2T) 
//   crtmom_ary                 3T Array RTMOM                                    ((ALL_M1i*MOMDMY1*ALL_M2i*MOMDMY2*ALL_M3i*MOMDMY3)*RTMOMDMY-MOMDMY_MX-MOMDMY_2T*MOMDMY_NWi-MOMDMY_PWi-MOMDMY_NTNi-RFDMYi*MOMDMY_ARY-MOMDMY_TSHD-RFMOMDMY_2T) 
//   crtmom_ary_sm              3T Array RTMOM with metal shielding               ((ALL_M1i*MOMDMY1*ALL_M2i*MOMDMY2*ALL_M3i*MOMDMY3)*RTMOMDMY-MOMDMY_MX-MOMDMY_2T-MOMDMY_NWi-MOMDMY_PWi-MOMDMY_NTNi*MOMDMY_ARY*MOMDMY_TSHD-RFMOMDMY_2T) 
//   crtmom_ary_sm_4t           4T ARY RTMOM with metal shielding                 ((ALL_M1i*MOMDMY1*ALL_M2i*MOMDMY2*ALL_M3i*MOMDMY3)*RTMOMDMY-MOMDMY_MX-MOMDMY_2T*MOMDMY_NWi-MOMDMY_PWi-MOMDMY_NTNi-RFDMYi*MOMDMY_ARY*MOMDMY_TSHD-RFMOMDMY_2T) 
//   crtmom_sm_rf               RF RTMOM with metal shielding                     ((ALL_M1i*MOMDMY1*ALL_M2i*MOMDMY2*ALL_M3i*MOMDMY3)*RTMOMDMY-MOMDMY_MX-MOMDMY_2T-MOMDMY_NWi-MOMDMY_PWi-MOMDMY_NTNi-MOMDMY_ARY*MOMDMY_TSHD*RFMOMDMY_2T) 
//   crtmom_sm_4t_rf            4T RF RTMOM with matal shielding                  ((ALL_M1i*MOMDMY1*ALL_M2i*MOMDMY2*ALL_M3i*MOMDMY3)*RTMOMDMY-MOMDMY_MX-MOMDMY_2T*MOMDMY_NWi-MOMDMY_PWi-MOMDMY_NTNi*RFDMYi-MOMDMY_ARY*MOMDMY_TSHD-RFMOMDMY_2T) 
// 
// 
//   moscap_rf                  CORE RF MOSCAP Varactor with DNW                  (VARGT-OD12*DNW*RFDMYi*VTUL_P) 
//   moscap_rf12                IO RF MOSCAP Varactor with DNW                    (VARGT*OD12*DNW*RFDMYi) 
//   moscap_rf_nw               CORE RF MOSCAP Varactor without DNW               (VARGT-OD12-DNW*RFDMYi*VTUL_P) 
//   moscap_rf12_nw             IO RF MOSCAP Varactor without DNW                 (VARGT*OD12-DNW*RFDMYi) 
// 
//   mimcap_sin_shd_3t          SHDMIM CAPACITOR                                  (BPCi*MPCi*TPCi*TPCDMY_Cu-TPCDMY_AP)	 
// 
//   mimcap_shp1_4tlv           SHPMIM 4T LV CAPACITOR                            (PMIM_1-PMIM_2-PMIM_2_1*BPC_LVi*BPC_GNDi*MPC_LVi*TPC_GNDi-BPC_HV1i) 
//   mimcap_shp1_5thv           SHPMIM 5T LV+HV CAPACITOR                         (PMIM_1-PMIM_2-PMIM_2_1*BPC_LVi*BPC_GNDi*MPC_LVi*TPC_GNDi*BPC_HV1i) 
//   mimcap_shp2_4thv           SHPMIM 4T LV+HV CAPACITOR                         (PMIM_2_1-PMIM_1-PMIM_2*BPC_HV2i*BPC_GNDi*MPC_LVi*TPC_GNDi) 
//   mimcap_shp2_4tlv           SHPMIM 4T LV CAPACITOR                            (PMIM_2-PMIM_1-PMIM_2_1*BPC_LVi*BPC_GNDi*MPC_LVi*TPC_GNDi-BPC_HV2i) 
//   mimcap_shp2_5thv           SHPMIM 5T LV+HV CAPACITOR                         (PMIM_2-PMIM_1-PMIM_2_1*BPC_LVi*BPC_GNDi*MPC_LVi*TPC_GNDi*BPC_HV2i) 
// 
// 
//   rmsp                     M0 Net Splitter                                   (RMDMY0*ALL_M0i) 
//   rmsp                     M1 Net Splitter                                   (RMDMY1*ALL_M1i) 
//   rmsp                     M2 Net Splitter                                   (RMDMY2*ALL_M2i) 
//   rmsp                     M3 Net Splitter                                   (RMDMY3*ALL_M3i) 
//   rmsp                     M4 Net Splitter                                   (RMDMY4*ALL_M4i) 
//   rmsp                     M5 Net Splitter                                   (RMDMY5*ALL_M5i) 
//   rmsp                     M6 Net Splitter                                   (RMDMY6*ALL_M6i) 
//   rmsp                     M7 Net Splitter                                   (RMDMY7*ALL_M7i) 
//   rmsp                     M8 Net Splitter                                   (RMDMY8*ALL_M8i) 
//   rmsp                     M9 Net Splitter                                   (RMDMY9*ALL_M9i) 
//   rmsp                     M10 Net Splitter                                   (RMDMY10*ALL_M10i) 
//   rmsp                     M11 Net Splitter                                   (RMDMY11*ALL_M11i) 
//   rmsp                     M12 Net Splitter                                   (RMDMY12*ALL_M12i) 
//   rmsp                     M13 Net Splitter                                   (RMDMY13*ALL_M13i) 
//   rmsp                     M14 Net Splitter                                   (RMDMY14*ALL_M14i) 
//   rmsp                     M15 Net Splitter                                   (RMDMY15*ALL_M15i) 
//   rmsp                     M16 Net Splitter                                   (RMDMY16*ALL_M16i) 
//   rmsp                     M17 Net Splitter                                   (RMDMY17*ALL_M17i) 
//   rmsp                     M18 Net Splitter                                   (RMDMY18*ALL_M18i) 
//   rmsp                     Cu Net Splitter                                   (RMDMYCu*Cu_RDLi) 
// 
//   rhim                       High Resistor (TiN)                               (RH_TN*RHDMY_ALL*RHDMYn)  
//   efuse_m0                   M0 efuse                                          (MFUSE*M0_Ai-M1_Ai-M2_Ai_X-M4i_Xc-RMDMY0) 
//   efuse_m1                   M1 efuse                                          (MFUSE-M0_Ai*M1_Ai-M2_Ai_X-M4i_Xc-RMDMY1) 
//   efuse_mx                   M2 efuse                                          (MFUSE-M0_Ai-M1_Ai*M2_Ai_X-M4i_Xc-RMDMY2) 
//   efuse_m4                   M4 efuse                                          (MFUSE-M0_Ai-M1_Ai-M2_Ai_X*M4i_Xc-RMDMY4) 
// 
//   ----- ----------------------------- ---------------------------------- 
//   * OD    = ODI 
//   * PO    = POI 
//   * PSUB  = BULK 
//   * PODE_GATE = PODE_GATEi 
//   * ALL_M0i   = M0_Ai + M0_Bi 
//   * ALL_M1i   = M1_Ai + M1_Bi 
//   * ALL_M2i   = M2_Ai1 + M2_Ai_X + M2_Bi 
//   * ALL_M3i   = M3i 
//   * ALL_M4i   = M4i1 + M4i_Xc 
//   * ALL_M5i   = M5_Ai + M5_Bi 
// 
//   * ALL_M6i   = M6i 
// 
//   * ALL_M7i   = M7i 
// 
//   * ALL_M8i   = M8i 
// 
//   * ALL_M9i   = M9i 
// 
//   * ALL_M10i   = M10i 
// 
//   * ALL_M11i   = M11i 
// 
//   * ALL_M12i   = M12i 
// 
//   * ALL_M13i   = M13i 
// 
//   * ALL_M14i   = M14i 
// 
//   * ALL_M15i   = M15i 
// 
//   * ALL_M16i   = M16i 
// 
//   * ALL_M17i   = M17i 
// 
//   * ALL_M18i   = M18i 
// 
//   * DNWDMY  = DNW * LVSDMY4 
//   * NGATES = ODI * POI * NPi - NW 
//   * PGATES = ODI * POI * PPi * NW 
//   * VARGT = ODI * POI * NPi * NW * VARi 
//   * PP = PPi 
//   * NP = NPi 
//   * VTS_N  = VTS_Ni  
//   * VTL_N  = VTL_Ni  
//   * VTUL_N = VTUL_Ni  
//   * VTEL_N = VTEL_Ni  
//   * VTL_NLL  = VTL_NLLi  
//   * VTUL_NLL = VTUL_NLLi  
//   * VTS_P  = VTS_Pi  
//   * VTL_P  = VTL_Pi  
//   * VTUL_P = VTUL_Pi  
//   * VTEL_P = VTEL_Pi  
//   * VTL_PLL  = VTL_PLLi  
//   * VTUL_PLL = VTUL_PLLi  
//   * DIODMY = DIODMYi 
//   * RH_TN = RH_TNi 
//   * RHDMYn = RHDMY7i 
// 
//   * MOMDMY_NPO = MOMDMY_NWi + MOMDMY_PWi + MOMDMY_NTNi  
// 
//////////////////////////////////////////////////////////////////////////////// 
// 
// USER NOTES :  
//  
// 1) Must execute LVS_install.pl to get correct LVS decks . 
// 
// 2) For Calibre "EDTEXT" file, use .INCLUDE strings.txt.  
//        LAYOUT TEXT  "text string" [x] [y]  (layer num) (cell name)  
//  
// 3) Input layer 'OD' is defined as thin oxide (OD) area which would   
//    be drawn by one generic od mask or by seperated N+OD and P+OD.   
//    Remove layers in the 'OD' entries you don't want to use at   
//    layer definition block.  
//  
// 4) Default setting for property check is 0%. Users should check with  
//    IP/Designe providers for proper tolerance.  
//  
// 5) It's recommended to run Calibre LVS by hierarchical mode since false  
//    errors have been encountered by only flat mode option '-lvs'.  
//  
// 6) Default property resolution for ambiguity is set to 32. It could be  
//    necessary to increase this setting to resolve serious ambiguity.  
//    Uncomment statement 'LVS PROPERTY RESOLUTION MAXIMUM' in this deck  
//    to reset the capability of property resolution.  
//  
// 7) Thin oxide layers PDIFF (7;0) and NDIFF (8;0) are not recommended to be  
//    used as tape out layers. Please use OD (6:0) for thin oxide tape out layers.  
//    If PDIFF (7;0) and NDIFF (8;0) layers are used, be sure to check MT (tape out)  
//    form for correctness after modifying this LVS deck (to pass LVS check)  
//  
// 8) Layer number 2000 - 2050 is saved for pseudo layer purpose.  
//    Please don't adopt these layers. 
// 
// 9) By default, VIRTUAL CONNECT COLON is set yes. Please set to "NO" as doing full-chip checking. 
// 
// 10) change default setting of option "LVS INJECT LOGIC NO". 
//     Set for "NO" to align the default setting of Calibre version before 2008 to do backward compatible. 
// 
// 11) This file usually reads all datatypes for each CAD layer defined.  
//     User customization datatype maybe already included in the layout mapping of this deck.  
//     PLEASE ALWAYS REVIEW THE LAYER DEFINITION AND MODIFY IT FOR USERS' PARTICULAR LAYER USAGE.      
//lvs_gen.pl version: 1.501
//calibre_ff.pl version: 1.624

// LVS/RC_DFM switch option
// --------------------
#define LVS_DECK   //uncomment this line when this deck would be used as a LVS command file
//#define CCI_DFM_RULE   //uncomment this line when this deck would be used as a DFM CCI command file
//#define SKIP_ODSE  //uncomment this line to skip od_space_effect
//#define FILTER_DGS_TIED_MOS // uncomment this line to filter MOS with D, G and S tied together (default filter MOS with all pins tied)
#define WELL_TO_PG_CHECK 
// Default is on. Turn on to highlight if nwell connects to ground or psub connects to power.
//#define GATE_TO_PG_CHECK 
// Default is off. Turn on to highlight if a mos gate directly connects to power or ground.
//#define PATH_CHECK 
// Default is off. Turn on to highlight if
//(1) nodes have a path to power but no path to ground
//(2) nodes have a path to ground but no path to power
//(3) nodes have no path to power or ground
//(4) nodes have no path to any label net
#define DS_TO_PG_CHECK 
// Default is on. Turn on to highlight if drain connects to power and source connects to ground.
#define FLOATING_WELL_CHECK 
// Default is on. Turn on to highlight if well does not connect to power or ground. 
//The nwell of moscaps and nwell-resistor are excluded.
#define LVSDMY4_CHECK   
// Default is on. Turn on to highlight if LVSDMY4 without DNW region interact NMOS.

VARIABLE PRESCALE 1.0

//#define NW_RING	//uncomment this line to enable the NW ring to separate the node from BULK

// POWER and GROUND name string variable setting
VARIABLE POWER_NAME  "AHVDD"  "AHVDDB"  "AHVDDG"  "AHVDDR"  "AHVDDWELL"  "AVDD"  "AVDDB"  "AVDDBG"  "AVDDG"  "AVDDR"  "AVDWELL"  "DHVDD"  "DVDD"  "HVDDWELL"  "TACVDD"  "TAVD33"  "TAVD33PST"  "TAVDD"  "TAVDDPST"  "TVDD"  "VD33"  "VDD"  "VDD5V"  "VDDESD"  "VDDG"  "VDDM"  "VDDPST"  "VDDSA"  "VDWELL" 

VARIABLE GROUND_NAME  "AGND"  "AHVSS"  "AHVSSB"  "AHVSSG"  "AHVSSR"  "AHVSSUB"  "AVSS"  "AVSSB"  "AVSSBG"  "AVSSG"  "AVSSR"  "AVSSUB"  "DHVSS"  "DVSS"  "GND"  "HVSSUB"  "TACVSS"  "TAVSS"  "TAVSSPST"  "TVSS"  "VS33"  "VSS"  "VSSESD"  "VSSG"  "VSSM"  "VSSPST"  "VSSUB" 

//#########################################################################
//# ENVIRONMENT SETTING                              
//#########################################################################

//  RC_BLOCKING SETTING
LAYOUT CELL LIST pcells "crtmom_2t*" "crtmom_ary*" "crtmom_ary_sm*" "crtmom_ary_sm_4t*" "crtmom_mx_4t*" "crtmom_sm_4t_rf*" "crtmom_sm_rf*" "crtmom_wo*" "crtmom_wo_mx*" "crtmom_wo_rf*" "moscap_rf*" "moscap_rf12*" "moscap_rf12_nw*" "moscap_rf_nw*" 
#IFDEF CCI_DFM_RULE
PEX PRESERVE CELL LIST pcells
#ENDIF


//#define unrecognized_device_checking   // uncomment this line to do unrecognized device checking
#define PICKUP_CHECK                     // comment this line to disable dummy pickup checking
#define PSUB2_ERC_CHECK                  // comment this line to disable SR_DOD cut PSUB2 checking
//#define MNPP_MPGG_VIRT_PWR_ENABLE      // Default is off. Uncomment this line to enable virtual power recognition for mnpp and mpgg related check
#define REGMOS_MNPP_MPGG_CHECK           // Default is on. Perform mnpp and mpgg related check for all devices except MPODE devices
#define MPODE_MNPP_MPGG_CHECK            // Default is on. Perform mnpp and mpgg related check for MPODE device which is covered by PODE_GATE(206;28) layer
//#define MNPP_MPGG_LAYER_WAIVER_ENABLE	 // Default is off. Uncomment this line to enable LUPVTWDMY cad layer waiver for mnpp and mpgg    
#define METAL_MAIN_CHECK		 // Default is on. Turn on to highlight if the layout has non-color main metal layer
//#define WELL_TEXT                      // uncomment this line to enable well pin, nxwell_text and psub_text  
//#define SKIP_XVTMBE                    // uncomment this line to skip Mixed VT MBE effect
//#define SKIP_LPCCN                     // uncomment this line to skip LOD/PXE/CPO/CPODE/NPB effect

#define FILTER_PODE                      // comment this line to compare pode device, default will filter both layout and source pode device at LVS comparison stage
#define FILTER_MPODE                     // comment this line to compare mpode device, default will filter both layout and source mpode device at LVS comparison stage
#define MATCHFLAG                        // Turn on to extract matchingflag and edgeflag for high sensitivity mismatching design

//LVS HEAP DIRECTORY "/tmp"
//#define extract_dnwpsub                // Turn on to extract parasitic dnw/psub diode
//#define extract_pwdnw                  // Turn on to extract parasitic pwell/dnw diode
//#define extract_pnwdio                 // Turn on to extract parasitic nw-psub diode
//#define LVS_REDUCE_PARALLEL_MOS        // Turn on this switch to enable MOS parallel reduction
//#define LVS_REDUCE_PARALLEL_MIMCAP     // Turn on this switch to enable SHDMIMCAP parallel reduction
//#define LVS_REDUCE_SPLIT_GATES         // Turn on this switch to enable MOS SPLIT GATE reduction
#define unexpected_device_checking_SHDMIM             //comment this line to disable unexpected SHDMIM device checking
#define unexpected_device_checking_SHPMIM_server      //comment this line to disable unexpected server SHPMIM device checking
#define unexpected_device_checking_SHPMIM_client      //comment this line to disable unexpected client SHPMIM device checking
//#define PARAMETERIZED_CPODE            // uncomment this line to enable parameterized_cpode extraction
//#define FLICKER_CORNER_EXTRACTION      // uncomment this line to enable flicker corner extraction.
//#define SELF_HEATING_EFFECT_EXTRACTION // uncomment this line to enable self heating effect extraction.

#IFDEF FLICKER_CORNER_EXTRACTION
  #define MULTI_DEVICE_EXTRACTION
#ENDIF
#IFDEF SELF_HEATING_EFFECT_EXTRACTION
  #define MULTI_DEVICE_EXTRACTION
#ENDIF

    
#IFDEF LVS_REDUCE_SPLIT_GATES
#define LVS_REDUCE_PARALLEL_MOS
LVS SHORT EQUIVALENT NODES SPLIT
#ELSE
LVS SHORT EQUIVALENT NODES NO
#ENDIF

VARIABLE  MOS_Lerr         0
VARIABLE  MOS_NFINerr      0
VARIABLE  MOS_PPITCHerr    0
VARIABLE  DIO_Aerr         0
VARIABLE  DIO_Lerr         0
VARIABLE  DIO_NFINerr      0
VARIABLE  DIOWELL_Aerr     0
VARIABLE  RES_Werr         0
VARIABLE  RES_Lerr         0
VARIABLE  RES_HIEMerr      0
VARIABLE  MOSCAP_Lerr      0
VARIABLE  MOSCAP_NFINerr   0
VARIABLE  MIMCAP_Aerr      0
VARIABLE  SPIRAL_Werr      0
VARIABLE  SPIRAL_Serr      0

VARIABLE  DEFAULT_WP       0.054
VARIABLE  OSEY_LEXT        0.55

VARIABLE  FIN_WIDTH        0.006
VARIABLE  FIN_SPACE        0.020
VARIABLE  FIN_PITCH        0.026
VARIABLE  FIN_WIDTH_IO     0.006
VARIABLE  FIN_SPACE_IO     0.022
VARIABLE  FIN_PITCH_IO     0.028
VARIABLE  HALF_FIN_WIDTH   ( FIN_WIDTH / 2 )
VARIABLE  L_SHAPE_OD_GATE_LEN 0.221 
VARIABLE  ANARRAY_SHRINK   15
// MINGRID_xxx variables are for internal using. Please do not change
VARIABLE  MINGRID_RECT1            0.0001
VARIABLE  MINGRID_RECT2            ( MINGRID_RECT1 * 2 )
VARIABLE  MINGRID_RECT3            ( MINGRID_RECT1 * 3 )
VARIABLE  MINGRID_RECT4            ( MINGRID_RECT1 * 4 )
VARIABLE  MINGRID_RECT5            ( MINGRID_RECT1 * 5 )
VARIABLE  MINGRID_RECT6            ( MINGRID_RECT1 * 6 )
VARIABLE  MINGRID_RECT7            ( MINGRID_RECT1 * 7 )
VARIABLE  MINGRID_RECT8            ( MINGRID_RECT1 * 8 )
VARIABLE  MINGRID_RECT9            ( MINGRID_RECT1 * 9 )
VARIABLE  MINGRID_RECT10            ( MINGRID_RECT1 * 10 )
VARIABLE  MINGRID_RECT11            ( MINGRID_RECT1 * 11 )
VARIABLE  MINGRID_RECT12            ( MINGRID_RECT1 * 12 )
VARIABLE  MINGRID_RECT13            ( MINGRID_RECT1 * 13 )
VARIABLE  MINGRID_RECT14            ( MINGRID_RECT1 * 14 )
VARIABLE  MINGRID_RECT15            ( MINGRID_RECT1 * 15 )
VARIABLE  MINGRID_RECT16            ( MINGRID_RECT1 * 16 )
VARIABLE  MINGRID_RECT17            ( MINGRID_RECT1 * 17 )
VARIABLE  MINGRID_RECT18            ( MINGRID_RECT1 * 18 )
VARIABLE  MINGRID_RECT1_UNIT       ( MINGRID_RECT1 * 1e-6 )
VARIABLE  MINGRID_RECT1_01_UNIT    (( MINGRID_RECT1 + MINGRID_RECT1 * 0.01 ) * 1e-6)

//It's recommended to turn on the "FLATTEN CELL" option when dummy patterns are insered.
//======================================================================================
//FLATTEN CELL TOP_CELL_DM TOP_CELL_DODDPO  // fill in topcell name of dummy patterns.   
    
LAYOUT PRIMARY "lvs_top"
LAYOUT PATH "lvs_top.gds"
LAYOUT SYSTEM GDSII
//LAYOUT PATH "layout.net"
//LAYOUT SYSTEM SPICE

SOURCE PRIMARY "lvs_top"
SOURCE PATH "lvs_top.cdl"
SOURCE SYSTEM SPICE

DRC RESULTS DATABASE "calibre_drc.db" ASCII // ASCII or GDSII
DRC SUMMARY REPORT "calibre_drc.sum"

ERC RESULTS DATABASE "calibre_erc.db" ASCII // ASCII or GDSII
ERC SUMMARY REPORT "calibre_erc.sum"

LVS REPORT "lvs.rep"
LVS REPORT MAXIMUM 1000 // ALL
MASK RESULTS DATABASE NONE //"mask.db"

#IFDEF CCI_DFM_RULE
#IFDEF MULTI_DEVICE_EXTRACTION
  MASK SVDB DIRECTORY "svdb" QUERY CCI SI
#ELSE
  MASK SVDB DIRECTORY "svdb" QUERY CCI
#ENDIF
#ENDIF

#IFDEF LVS_DECK
  MASK SVDB DIRECTORY "svdb" QUERY
#ENDIF

LVS ISOLATE SHORTS YES
LVS REPORT OPTION S

SOURCE CASE YES                 // set case sensitivity for the source 
LAYOUT CASE YES                 // set case sensitivity for the layout
LVS COMPARE CASE NAMES TYPES SUBTYPES VALUES    // set case sensititive during LVS comparison

LAYOUT PRECISION 2000
PRECISION 20000
LAYOUT MAGNIFY AUTO
RESOLUTION 1
UNIT LENGTH U

TEXT DEPTH PRIMARY
PORT DEPTH PRIMARY

FLAG SKEW YES
FLAG OFFGRID YES
//LAYOUT ALLOW DUPLICATE CELL YES

LVS INJECT LOGIC                 NO
LVS SPICE PREFER PINS            YES
LVS SPICE REPLICATE DEVICES      LPI
LVS SPICE STRICT WL              YES
LVS ABORT ON SUPPLY ERROR        NO
LVS ALL CAPACITOR PINS SWAPPABLE YES
LVS RECOGNIZE GATES              NONE
LVS IGNORE PORTS                 NO
LVS CHECK PORT NAMES             YES
LVS REDUCE PARALLEL BIPOLAR      NO    // NOT recommend to set YES 
LVS REDUCE PARALLEL DIODES       NO    // NOT recommend to set YES 
LVS REDUCE PARALLEL CAPACITORS   NO    // NOT recommend to set YES 
LVS REDUCE PARALLEL RESISTORS    NO    // NOT recommend to set YES 
LVS REDUCE SERIES RESISTORS      NO    // NOT recommend to set YES   
LVS REDUCE SERIES CAPACITORS     NO    // NOT recommend to set YES  
// For tied S/D together and Gate is floating
//LVS FILTER UNUSED OPTION AC AD RC RE RG
//LVS FILTER UNUSED OPTION B D E O
//Strongly recommand to comment FILTER_DGS_TIED_MOS switch
//AG is to filter MOS with all pins tied together, AB is to filter MOS with D,G,S tied together
#IFNDEF FILTER_DGS_TIED_MOS
LVS FILTER UNUSED OPTION AG RC RE RG
#ELSE
LVS FILTER UNUSED OPTION AB RC RE RG
#ENDIF
LVS PROPERTY RESOLUTION MAXIMUM 65536 // ALL

//User Define Device Reduce
//====================================================================


#IFDEF LVS_REDUCE_PARALLEL_MIMCAP
LVS REDUCE mimcap_sin_shd_3t PARALLEL YES
[ 
  EFFECTIVE area_top_mim, area_bot_mim
  area_top_mim = sum(area_top_mim)
  area_bot_mim = sum(area_bot_mim)
]
#ENDIF

#IFDEF LVS_REDUCE_PARALLEL_MIMCAP
LVS REDUCE mimcap_shp1_4tlv PARALLEL YES
[ 
  EFFECTIVE area_mt_mim, area_mb_mim, area_blv_mim
  area_mt_mim  = sum(area_mt_mim)
  area_mb_mim  = sum(area_mb_mim)
  area_blv_mim = sum(area_blv_mim)
]
LVS REDUCE mimcap_shp1_5thv PARALLEL YES
[ 
  EFFECTIVE area_mt_mim, area_mb_mim, area_blv_mim, area_mbhv_mim
  area_mt_mim   = sum(area_mt_mim)
  area_mb_mim   = sum(area_mb_mim)
  area_blv_mim  = sum(area_blv_mim)
  area_mbhv_mim = sum(area_mbhv_mim)
]
LVS REDUCE mimcap_shp2_4thv PARALLEL YES
[ 
  EFFECTIVE area_mt_mim, area_mb_mim, area_bhv_mim
  area_mt_mim  = sum(area_mt_mim)
  area_mb_mim  = sum(area_mb_mim)
  area_bhv_mim = sum(area_bhv_mim)
]
LVS REDUCE mimcap_shp2_4tlv PARALLEL YES
[ 
  EFFECTIVE area_mt_mim, area_mb_mim, area_blv_mim
  area_mt_mim  = sum(area_mt_mim)
  area_mb_mim  = sum(area_mb_mim)
  area_blv_mim = sum(area_blv_mim)
]
LVS REDUCE mimcap_shp2_5thv PARALLEL YES
[ 
  EFFECTIVE area_mt_mim, area_mb_mim, area_blv_mim, area_bhv_mim
  area_mt_mim  = sum(area_mt_mim)
  area_mb_mim  = sum(area_mb_mim)
  area_blv_mim = sum(area_blv_mim)
  area_bhv_mim = sum(area_bhv_mim)
]
#ENDIF


LVS REDUCE rhim PARALLEL NO               // NOT recommend to set YES 
LVS REDUCE rhim SERIES PLUS MINUS NO      // NOT recommend to set YES 

//================================================================
// Only list layers relative with device formation, exclude wells

VIRTUAL CONNECT COLON YES

LVS DB LAYER  n_cpode p_cpode fin_lay    VD_mkr VD_SRM   VD2_MD_TAP_mkr VD2_MD_TAP_FB8P45 VD2_MD_TAP_FB6P45 VD2_MD_TAP_P51    VD2_MD_TAP_FB11  VD2_MD_TAP_FB16  VD2_MD_TAP_FB18    n_odtap_ext n_odtap_fb9b_ext n_odtap_fb8b_cpp45_ext n_odtap_fb8c_cpp45_ext n_odtap_fb6b_cpp45_ext   p_odtap_ext p_odtap_fb9b_ext p_odtap_fb8b_cpp45_ext p_odtap_fb8c_cpp45_ext p_odtap_fb6b_cpp45_ext   n_odtap_cpp51_ext p_odtap_cpp51_ext    mkr_cfi_ncore_fb9a mkr_cfi_ncore_fb8b_fb9b mkr_cfi_ncore_fb8c mkr_cfi_ncore_others   mkr_cfi_pcore_fb9a mkr_cfi_pcore_fb8b_fb9b mkr_cfi_pcore_fb8c mkr_cfi_pcore_others   mkr_cfi_ncore_p51 mkr_cfi_pcore_p51   M0_A_SRM01 M0_B_SRM01 M0_A_SRM02 M0_B_SRM02 M0_A_SRM03 M0_B_SRM03   M1_A_SRM01 M1_B_SRM01 M1_A_SRM02 M1_B_SRM02 M1_A_SRM03 M1_B_SRM03   M3_SRM01 M3_SRM02   mkr_cfi_n_srm_sp mkr_cfi_n_srm_mp mkr_cfi_p_srm_sp mkr_cfi_p_srm_mp 	// Preserve layers for RC
#IFDEF CCI_DFM_RULE
LVS PUSH DEVICES SEPARATE PROPERTIES YES
LVS CENTER DEVICE PINS YES
LVS CENTER DEVICE LOCATION YES
#ENDIF

DMACRO LVS_PROPERTY_INITIALIZE ELEMENT {
    LVS PROPERTY INITIALIZE ELEMENT [
        PROPERTY m, nf
        in_NF = INP_NUM_VAL(nf)
        IF ( IS_MISSING( in_NF ) ) {
            nf = 1
        } ELSE {   
            nf = in_NF
        }
        in_m  = INP_NUM_VAL(m)
        IF ( IS_MISSING( in_M ) ) {
            m  = 1
        } ELSE {   
            m = in_m
        }	
        m = m * nf
    ]
}

CMACRO LVS_PROPERTY_INITIALIZE MN
CMACRO LVS_PROPERTY_INITIALIZE MP
CMACRO LVS_PROPERTY_INITIALIZE LDDN
CMACRO LVS_PROPERTY_INITIALIZE LDDP

#IFDEF LVS_REDUCE_PARALLEL_MOS
LVS REDUCE PARALLEL MOS YES [
	TOLERANCE l 0
	EFFECTIVE nfin, l
	nfin = SUM( nfin )
	l = min(l)
]
LVS REDUCE MN(nch_eflvt_dnw_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MN(nch_eflvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MN(nch_efsvt_dnw_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MN(nch_efsvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MN(nch_elvt_dnw_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MN(nch_elvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MN(nch_lvt_dnw_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MN(nch_lvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MN(nch_lvtll_dnw_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MN(nch_lvtll_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MN(nch_mpodeelvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MN(nch_mpodelvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MN(nch_mpodelvtll_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MN(nch_mpodesvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MN(nch_mpodeulvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MN(nch_mpodeulvtll_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MN(nch_svt_dnw_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MN(nch_svt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MN(nch_ulvt_dnw_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MN(nch_ulvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MN(nch_ulvtll_dnw_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MN(nch_ulvtll_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MP(pch_eflvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MP(pch_efsvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MP(pch_elvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MP(pch_lvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MP(pch_lvtll_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MP(pch_mpodeelvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MP(pch_mpodelvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MP(pch_mpodelvtll_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MP(pch_mpodesvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MP(pch_mpodeulvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MP(pch_mpodeulvtll_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MP(pch_svt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MP(pch_ulvt_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
LVS REDUCE MP(pch_ulvtll_mac) PARALLEL YES [
    TOLERANCE l 0 ppitch 0
    EFFECTIVE nfin, l, ppitch
    nfin = SUM( nfin )
    l = min(l)
    ppitch = min(ppitch)
]
#ELSE
LVS REDUCE PARALLEL MOS NO
#ENDIF

LVS REDUCE SPLIT GATES NO

LAYOUT BASE LAYER ODI POI MDi VDi VGi VD2i MOMDMY0 MOMDMY1 MOMDMY2 MOMDMY3 MOMDMY4 MOMDMY5 MOMDMY6 MOMDMY7 MOMDMY8 MOMDMY9 MOMDMY10 MOMDMY11 MOMDMY12 MOMDMY13 MOMDMY14 MOMDMY15 MOMDMY16 MOMDMY17 MOMDMY18 MPi
LVS POWER NAME POWER_NAME 
LVS GROUND NAME GROUND_NAME 
//#############################################
//# MAPPING                                   #
//#############################################
LAYER DNW            3000 
LAYER MAP 1 DATATYPE 0 3000 //  Deep N-Well
LAYER NW             3001 
LAYER MAP 3 DATATYPE 0 3001 //  N-Well
LAYER ODI            3002 
LAYER MAP 6 DATATYPE 0 3002 //  Active area, thin oxide for device, or interconnection
LAYER SR_DOD         3003 
LAYER MAP 6 DATATYPE 7 3003 //  For special rule dummy OD
LAYER OD12           3004 
LAYER MAP 14 DATATYPE 0 3004 //  Define thick oxide area of 1.2V
LAYER POI            3005 
LAYER MAP 17 DATATYPE 0 3005 //  Poly
LAYER SR_DPO         3006 
LAYER MAP 17 DATATYPE 7 3006 //  dummy PO
LAYER CPO_SRMi       3007 
LAYER MAP 17 DATATYPE 12 3007 //  CPO for SRAM
LAYER CPOi           3008 
LAYER MAP 17 DATATYPE 30 3008 //  Cut poly
LAYER DCPO           3009 
LAYER MAP 17 DATATYPE 50 3009 //  Dummy CPO
LAYER PO_P51         3010 
LAYER MAP 17 DATATYPE 92 3010 //  Poly pitch 51
LAYER PO_P81_WPO     3011 
LAYER MAP 17 DATATYPE 94 3011 //  Poly pitch 81 for eFUSE
LAYER NT_N           3012 
LAYER MAP 11 DATATYPE 0 3012 //  NT_N 
LAYER VTS_Ni         3013 
LAYER MAP 23 DATATYPE 0 3013 //  CORE SVTN
LAYER VTS_Pi         3014 
LAYER MAP 24 DATATYPE 0 3014 //  CORE SVTP
LAYER VTL_Ni         3015 
LAYER MAP 12 DATATYPE 0 3015 //  CORE LVTN
LAYER VTL_Pi         3016 
LAYER MAP 13 DATATYPE 0 3016 //  CORE LVTP
LAYER VTUL_Ni        3017 
LAYER MAP 151 DATATYPE 0 3017 //  CORE ULVTN
LAYER VTUL_Pi        3018 
LAYER MAP 152 DATATYPE 0 3018 //  CORE ULVTP
LAYER VTL_NLLi       3019 
LAYER MAP 12 DATATYPE 4 3019 //  CORE LVTN_LL
LAYER VTL_PLLi       3020 
LAYER MAP 13 DATATYPE 4 3020 //  CORE LVTP_LL
LAYER VTEL_Ni        3021 
LAYER MAP 12 DATATYPE 6 3021 //  CORE ELVTN
LAYER VTEL_Pi        3022 
LAYER MAP 13 DATATYPE 6 3022 //  CORE ELVTP
LAYER VTUL_NLLi      3023 
LAYER MAP 151 DATATYPE 4 3023 //  CORE ULVTN_LL
LAYER VTUL_PLLi      3024 
LAYER MAP 152 DATATYPE 4 3024 //  CORE ULVTP_LL
LAYER PPi            3025 
LAYER MAP 25 DATATYPE 0 3025 //  P+ S/D Implant
LAYER NPi            3026 
LAYER MAP 26 DATATYPE 0 3026 //  N+ S/D Implant
LAYER M0_Ai          3027 
LAYER MAP 30 DATATYPE 151 3027 //  metal0a
LAYER M0_Bi          3028 
LAYER MAP 30 DATATYPE 152 3028 //  metal0b
LAYER DUM0_Ai        3029 3030 
LAYER MAP 330 DATATYPE 151 3029
LAYER MAP 330 DATATYPE 161 3030 //  Dummy metal0a
LAYER DUM0_Bi        3031 3032 
LAYER MAP 330 DATATYPE 152 3031
LAYER MAP 330 DATATYPE 162 3032 //  Dummy metal0b
LAYER CM0A           3033 3034 
LAYER MAP 430 DATATYPE 150 3033
LAYER MAP 530 DATATYPE 150 3034 //  Cut metal0a
LAYER CM0B           3035 3036 
LAYER MAP 430 DATATYPE 155 3035
LAYER MAP 530 DATATYPE 155 3036 //  Cut metal0b
LAYER M1_Ai          3037 
LAYER MAP 31 DATATYPE 171 3037 //  metal1a
LAYER M1_Bi          3038 
LAYER MAP 31 DATATYPE 172 3038 //  metal1b
LAYER DUM1_Ai        3039 3040 
LAYER MAP 331 DATATYPE 171 3039
LAYER MAP 331 DATATYPE 181 3040 //  Dummy metal1a
LAYER DUM1_Bi        3041 3042 
LAYER MAP 331 DATATYPE 172 3041
LAYER MAP 331 DATATYPE 182 3042 //  Dummy metal1b
LAYER CM1A           3043 3044 
LAYER MAP 431 DATATYPE 170 3043
LAYER MAP 531 DATATYPE 170 3044 //  Cut M1A
LAYER M2_Ai_X        3045 
LAYER MAP 32 DATATYPE 151 3045 // 
LAYER M2_Ai1         3046 3047 3048 
LAYER MAP 32 DATATYPE 171 3046
LAYER MAP 32 DATATYPE 351 3047
LAYER MAP 32 DATATYPE 371 3048 // 
LAYER M2_Bi          3049 3050 3051 3052 
LAYER MAP 32 DATATYPE 152 3049
LAYER MAP 32 DATATYPE 172 3050
LAYER MAP 32 DATATYPE 352 3051
LAYER MAP 32 DATATYPE 372 3052 // 
LAYER DUM2_Ai        3053 3054 3055 3056 3057 3058 3059 3060 
LAYER MAP 332 DATATYPE 151 3053
LAYER MAP 332 DATATYPE 161 3054
LAYER MAP 332 DATATYPE 171 3055
LAYER MAP 332 DATATYPE 181 3056
LAYER MAP 332 DATATYPE 351 3057
LAYER MAP 332 DATATYPE 361 3058
LAYER MAP 332 DATATYPE 371 3059
LAYER MAP 332 DATATYPE 381 3060 // 
LAYER DUM2_Bi        3061 3062 3063 3064 3065 3066 3067 3068 
LAYER MAP 332 DATATYPE 152 3061
LAYER MAP 332 DATATYPE 162 3062
LAYER MAP 332 DATATYPE 172 3063
LAYER MAP 332 DATATYPE 182 3064
LAYER MAP 332 DATATYPE 352 3065
LAYER MAP 332 DATATYPE 362 3066
LAYER MAP 332 DATATYPE 372 3067
LAYER MAP 332 DATATYPE 382 3068 // 
LAYER M3_Ai          3069 3070 3071 3072 
LAYER MAP 33 DATATYPE 151 3069
LAYER MAP 33 DATATYPE 171 3070
LAYER MAP 33 DATATYPE 351 3071
LAYER MAP 33 DATATYPE 371 3072 // 
LAYER M3_Bi          3073 3074 3075 3076 
LAYER MAP 33 DATATYPE 152 3073
LAYER MAP 33 DATATYPE 172 3074
LAYER MAP 33 DATATYPE 352 3075
LAYER MAP 33 DATATYPE 372 3076 // 
LAYER DUM3_Ai        3077 3078 3079 3080 3081 3082 3083 3084 
LAYER MAP 333 DATATYPE 151 3077
LAYER MAP 333 DATATYPE 161 3078
LAYER MAP 333 DATATYPE 171 3079
LAYER MAP 333 DATATYPE 181 3080
LAYER MAP 333 DATATYPE 351 3081
LAYER MAP 333 DATATYPE 361 3082
LAYER MAP 333 DATATYPE 371 3083
LAYER MAP 333 DATATYPE 381 3084 // 
LAYER DUM3_Bi        3085 3086 3087 3088 3089 3090 3091 3092 
LAYER MAP 333 DATATYPE 152 3085
LAYER MAP 333 DATATYPE 162 3086
LAYER MAP 333 DATATYPE 172 3087
LAYER MAP 333 DATATYPE 182 3088
LAYER MAP 333 DATATYPE 352 3089
LAYER MAP 333 DATATYPE 362 3090
LAYER MAP 333 DATATYPE 372 3091
LAYER MAP 333 DATATYPE 382 3092 // 
LAYER M4_Ai          3093 3094 3095 3096 
LAYER MAP 34 DATATYPE 151 3093
LAYER MAP 34 DATATYPE 171 3094
LAYER MAP 34 DATATYPE 351 3095
LAYER MAP 34 DATATYPE 371 3096 // 
LAYER M4_Bi          3097 3098 3099 3100 
LAYER MAP 34 DATATYPE 152 3097
LAYER MAP 34 DATATYPE 172 3098
LAYER MAP 34 DATATYPE 352 3099
LAYER MAP 34 DATATYPE 372 3100 // 
LAYER DUM4_Ai        3101 3102 3103 3104 3105 3106 3107 3108 
LAYER MAP 334 DATATYPE 151 3101
LAYER MAP 334 DATATYPE 161 3102
LAYER MAP 334 DATATYPE 171 3103
LAYER MAP 334 DATATYPE 181 3104
LAYER MAP 334 DATATYPE 351 3105
LAYER MAP 334 DATATYPE 361 3106
LAYER MAP 334 DATATYPE 371 3107
LAYER MAP 334 DATATYPE 381 3108 // 
LAYER DUM4_Bi        3109 3110 3111 3112 3113 3114 3115 3116 
LAYER MAP 334 DATATYPE 152 3109
LAYER MAP 334 DATATYPE 162 3110
LAYER MAP 334 DATATYPE 172 3111
LAYER MAP 334 DATATYPE 182 3112
LAYER MAP 334 DATATYPE 352 3113
LAYER MAP 334 DATATYPE 362 3114
LAYER MAP 334 DATATYPE 372 3115
LAYER MAP 334 DATATYPE 382 3116 // 
LAYER M5_Ai          3117 3118 3119 3120 
LAYER MAP 35 DATATYPE 151 3117
LAYER MAP 35 DATATYPE 171 3118
LAYER MAP 35 DATATYPE 351 3119
LAYER MAP 35 DATATYPE 371 3120 // 
LAYER M5_Bi          3121 3122 3123 3124 
LAYER MAP 35 DATATYPE 152 3121
LAYER MAP 35 DATATYPE 172 3122
LAYER MAP 35 DATATYPE 352 3123
LAYER MAP 35 DATATYPE 372 3124 // 
LAYER DUM5_Ai        3125 3126 3127 3128 3129 3130 3131 3132 
LAYER MAP 335 DATATYPE 151 3125
LAYER MAP 335 DATATYPE 161 3126
LAYER MAP 335 DATATYPE 171 3127
LAYER MAP 335 DATATYPE 181 3128
LAYER MAP 335 DATATYPE 351 3129
LAYER MAP 335 DATATYPE 361 3130
LAYER MAP 335 DATATYPE 371 3131
LAYER MAP 335 DATATYPE 381 3132 // 
LAYER DUM5_Bi        3133 3134 3135 3136 3137 3138 3139 3140 
LAYER MAP 335 DATATYPE 152 3133
LAYER MAP 335 DATATYPE 162 3134
LAYER MAP 335 DATATYPE 172 3135
LAYER MAP 335 DATATYPE 182 3136
LAYER MAP 335 DATATYPE 352 3137
LAYER MAP 335 DATATYPE 362 3138
LAYER MAP 335 DATATYPE 372 3139
LAYER MAP 335 DATATYPE 382 3140 // 
LAYER M6_Ai          3141 3142 3143 3144 
LAYER MAP 36 DATATYPE 151 3141
LAYER MAP 36 DATATYPE 171 3142
LAYER MAP 36 DATATYPE 351 3143
LAYER MAP 36 DATATYPE 371 3144 // 
LAYER M6_Bi          3145 3146 3147 3148 
LAYER MAP 36 DATATYPE 152 3145
LAYER MAP 36 DATATYPE 172 3146
LAYER MAP 36 DATATYPE 352 3147
LAYER MAP 36 DATATYPE 372 3148 // 
LAYER DUM6_Ai        3149 3150 3151 3152 3153 3154 3155 3156 
LAYER MAP 336 DATATYPE 151 3149
LAYER MAP 336 DATATYPE 161 3150
LAYER MAP 336 DATATYPE 171 3151
LAYER MAP 336 DATATYPE 181 3152
LAYER MAP 336 DATATYPE 351 3153
LAYER MAP 336 DATATYPE 361 3154
LAYER MAP 336 DATATYPE 371 3155
LAYER MAP 336 DATATYPE 381 3156 // 
LAYER DUM6_Bi        3157 3158 3159 3160 3161 3162 3163 3164 
LAYER MAP 336 DATATYPE 152 3157
LAYER MAP 336 DATATYPE 162 3158
LAYER MAP 336 DATATYPE 172 3159
LAYER MAP 336 DATATYPE 182 3160
LAYER MAP 336 DATATYPE 352 3161
LAYER MAP 336 DATATYPE 362 3162
LAYER MAP 336 DATATYPE 372 3163
LAYER MAP 336 DATATYPE 382 3164 // 
LAYER M7_Ai          3165 3166 3167 3168 
LAYER MAP 37 DATATYPE 151 3165
LAYER MAP 37 DATATYPE 171 3166
LAYER MAP 37 DATATYPE 351 3167
LAYER MAP 37 DATATYPE 371 3168 // 
LAYER M7_Bi          3169 3170 3171 3172 
LAYER MAP 37 DATATYPE 152 3169
LAYER MAP 37 DATATYPE 172 3170
LAYER MAP 37 DATATYPE 352 3171
LAYER MAP 37 DATATYPE 372 3172 // 
LAYER DUM7_Ai        3173 3174 3175 3176 3177 3178 3179 3180 
LAYER MAP 337 DATATYPE 151 3173
LAYER MAP 337 DATATYPE 161 3174
LAYER MAP 337 DATATYPE 171 3175
LAYER MAP 337 DATATYPE 181 3176
LAYER MAP 337 DATATYPE 351 3177
LAYER MAP 337 DATATYPE 361 3178
LAYER MAP 337 DATATYPE 371 3179
LAYER MAP 337 DATATYPE 381 3180 // 
LAYER DUM7_Bi        3181 3182 3183 3184 3185 3186 3187 3188 
LAYER MAP 337 DATATYPE 152 3181
LAYER MAP 337 DATATYPE 162 3182
LAYER MAP 337 DATATYPE 172 3183
LAYER MAP 337 DATATYPE 182 3184
LAYER MAP 337 DATATYPE 352 3185
LAYER MAP 337 DATATYPE 362 3186
LAYER MAP 337 DATATYPE 372 3187
LAYER MAP 337 DATATYPE 382 3188 // 
LAYER M8_Ai          3189 3190 3191 3192 
LAYER MAP 38 DATATYPE 151 3189
LAYER MAP 38 DATATYPE 171 3190
LAYER MAP 38 DATATYPE 351 3191
LAYER MAP 38 DATATYPE 371 3192 // 
LAYER M8_Bi          3193 3194 3195 3196 
LAYER MAP 38 DATATYPE 152 3193
LAYER MAP 38 DATATYPE 172 3194
LAYER MAP 38 DATATYPE 352 3195
LAYER MAP 38 DATATYPE 372 3196 // 
LAYER DUM8_Ai        3197 3198 3199 3200 3201 3202 3203 3204 
LAYER MAP 338 DATATYPE 151 3197
LAYER MAP 338 DATATYPE 161 3198
LAYER MAP 338 DATATYPE 171 3199
LAYER MAP 338 DATATYPE 181 3200
LAYER MAP 338 DATATYPE 351 3201
LAYER MAP 338 DATATYPE 361 3202
LAYER MAP 338 DATATYPE 371 3203
LAYER MAP 338 DATATYPE 381 3204 // 
LAYER DUM8_Bi        3205 3206 3207 3208 3209 3210 3211 3212 
LAYER MAP 338 DATATYPE 152 3205
LAYER MAP 338 DATATYPE 162 3206
LAYER MAP 338 DATATYPE 172 3207
LAYER MAP 338 DATATYPE 182 3208
LAYER MAP 338 DATATYPE 352 3209
LAYER MAP 338 DATATYPE 362 3210
LAYER MAP 338 DATATYPE 372 3211
LAYER MAP 338 DATATYPE 382 3212 // 
LAYER M9_Ai          3213 3214 3215 3216 
LAYER MAP 39 DATATYPE 151 3213
LAYER MAP 39 DATATYPE 171 3214
LAYER MAP 39 DATATYPE 351 3215
LAYER MAP 39 DATATYPE 371 3216 // 
LAYER M9_Bi          3217 3218 3219 3220 
LAYER MAP 39 DATATYPE 152 3217
LAYER MAP 39 DATATYPE 172 3218
LAYER MAP 39 DATATYPE 352 3219
LAYER MAP 39 DATATYPE 372 3220 // 
LAYER DUM9_Ai        3221 3222 3223 3224 3225 3226 3227 3228 
LAYER MAP 339 DATATYPE 151 3221
LAYER MAP 339 DATATYPE 161 3222
LAYER MAP 339 DATATYPE 171 3223
LAYER MAP 339 DATATYPE 181 3224
LAYER MAP 339 DATATYPE 351 3225
LAYER MAP 339 DATATYPE 361 3226
LAYER MAP 339 DATATYPE 371 3227
LAYER MAP 339 DATATYPE 381 3228 // 
LAYER DUM9_Bi        3229 3230 3231 3232 3233 3234 3235 3236 
LAYER MAP 339 DATATYPE 152 3229
LAYER MAP 339 DATATYPE 162 3230
LAYER MAP 339 DATATYPE 172 3231
LAYER MAP 339 DATATYPE 182 3232
LAYER MAP 339 DATATYPE 352 3233
LAYER MAP 339 DATATYPE 362 3234
LAYER MAP 339 DATATYPE 372 3235
LAYER MAP 339 DATATYPE 382 3236 // 
LAYER M10_Ai         3237 3238 3239 3240 
LAYER MAP 40 DATATYPE 151 3237
LAYER MAP 40 DATATYPE 171 3238
LAYER MAP 40 DATATYPE 351 3239
LAYER MAP 40 DATATYPE 371 3240 // 
LAYER M10_Bi         3241 3242 3243 3244 
LAYER MAP 40 DATATYPE 152 3241
LAYER MAP 40 DATATYPE 172 3242
LAYER MAP 40 DATATYPE 352 3243
LAYER MAP 40 DATATYPE 372 3244 // 
LAYER DUM10_Ai       3245 3246 3247 3248 3249 3250 3251 3252 
LAYER MAP 340 DATATYPE 151 3245
LAYER MAP 340 DATATYPE 161 3246
LAYER MAP 340 DATATYPE 171 3247
LAYER MAP 340 DATATYPE 181 3248
LAYER MAP 340 DATATYPE 351 3249
LAYER MAP 340 DATATYPE 361 3250
LAYER MAP 340 DATATYPE 371 3251
LAYER MAP 340 DATATYPE 381 3252 // 
LAYER DUM10_Bi       3253 3254 3255 3256 3257 3258 3259 3260 
LAYER MAP 340 DATATYPE 152 3253
LAYER MAP 340 DATATYPE 162 3254
LAYER MAP 340 DATATYPE 172 3255
LAYER MAP 340 DATATYPE 182 3256
LAYER MAP 340 DATATYPE 352 3257
LAYER MAP 340 DATATYPE 362 3258
LAYER MAP 340 DATATYPE 372 3259
LAYER MAP 340 DATATYPE 382 3260 // 
LAYER M11_Ai         3261 3262 3263 3264 
LAYER MAP 41 DATATYPE 151 3261
LAYER MAP 41 DATATYPE 171 3262
LAYER MAP 41 DATATYPE 351 3263
LAYER MAP 41 DATATYPE 371 3264 // 
LAYER M11_Bi         3265 3266 3267 3268 
LAYER MAP 41 DATATYPE 152 3265
LAYER MAP 41 DATATYPE 172 3266
LAYER MAP 41 DATATYPE 352 3267
LAYER MAP 41 DATATYPE 372 3268 // 
LAYER DUM11_Ai       3269 3270 3271 3272 3273 3274 3275 3276 
LAYER MAP 341 DATATYPE 151 3269
LAYER MAP 341 DATATYPE 161 3270
LAYER MAP 341 DATATYPE 171 3271
LAYER MAP 341 DATATYPE 181 3272
LAYER MAP 341 DATATYPE 351 3273
LAYER MAP 341 DATATYPE 361 3274
LAYER MAP 341 DATATYPE 371 3275
LAYER MAP 341 DATATYPE 381 3276 // 
LAYER DUM11_Bi       3277 3278 3279 3280 3281 3282 3283 3284 
LAYER MAP 341 DATATYPE 152 3277
LAYER MAP 341 DATATYPE 162 3278
LAYER MAP 341 DATATYPE 172 3279
LAYER MAP 341 DATATYPE 182 3280
LAYER MAP 341 DATATYPE 352 3281
LAYER MAP 341 DATATYPE 362 3282
LAYER MAP 341 DATATYPE 372 3283
LAYER MAP 341 DATATYPE 382 3284 // 
LAYER M12_Ai         3285 3286 3287 3288 
LAYER MAP 42 DATATYPE 151 3285
LAYER MAP 42 DATATYPE 171 3286
LAYER MAP 42 DATATYPE 351 3287
LAYER MAP 42 DATATYPE 371 3288 // 
LAYER M12_Bi         3289 3290 3291 3292 
LAYER MAP 42 DATATYPE 152 3289
LAYER MAP 42 DATATYPE 172 3290
LAYER MAP 42 DATATYPE 352 3291
LAYER MAP 42 DATATYPE 372 3292 // 
LAYER DUM12_Ai       3293 3294 3295 3296 3297 3298 3299 3300 
LAYER MAP 342 DATATYPE 151 3293
LAYER MAP 342 DATATYPE 161 3294
LAYER MAP 342 DATATYPE 171 3295
LAYER MAP 342 DATATYPE 181 3296
LAYER MAP 342 DATATYPE 351 3297
LAYER MAP 342 DATATYPE 361 3298
LAYER MAP 342 DATATYPE 371 3299
LAYER MAP 342 DATATYPE 381 3300 // 
LAYER DUM12_Bi       3301 3302 3303 3304 3305 3306 3307 3308 
LAYER MAP 342 DATATYPE 152 3301
LAYER MAP 342 DATATYPE 162 3302
LAYER MAP 342 DATATYPE 172 3303
LAYER MAP 342 DATATYPE 182 3304
LAYER MAP 342 DATATYPE 352 3305
LAYER MAP 342 DATATYPE 362 3306
LAYER MAP 342 DATATYPE 372 3307
LAYER MAP 342 DATATYPE 382 3308 // 
LAYER M13_Ai         3309 3310 3311 3312 
LAYER MAP 43 DATATYPE 151 3309
LAYER MAP 43 DATATYPE 171 3310
LAYER MAP 43 DATATYPE 351 3311
LAYER MAP 43 DATATYPE 371 3312 // 
LAYER M13_Bi         3313 3314 3315 3316 
LAYER MAP 43 DATATYPE 152 3313
LAYER MAP 43 DATATYPE 172 3314
LAYER MAP 43 DATATYPE 352 3315
LAYER MAP 43 DATATYPE 372 3316 // 
LAYER DUM13_Ai       3317 3318 3319 3320 3321 3322 3323 3324 
LAYER MAP 343 DATATYPE 151 3317
LAYER MAP 343 DATATYPE 161 3318
LAYER MAP 343 DATATYPE 171 3319
LAYER MAP 343 DATATYPE 181 3320
LAYER MAP 343 DATATYPE 351 3321
LAYER MAP 343 DATATYPE 361 3322
LAYER MAP 343 DATATYPE 371 3323
LAYER MAP 343 DATATYPE 381 3324 // 
LAYER DUM13_Bi       3325 3326 3327 3328 3329 3330 3331 3332 
LAYER MAP 343 DATATYPE 152 3325
LAYER MAP 343 DATATYPE 162 3326
LAYER MAP 343 DATATYPE 172 3327
LAYER MAP 343 DATATYPE 182 3328
LAYER MAP 343 DATATYPE 352 3329
LAYER MAP 343 DATATYPE 362 3330
LAYER MAP 343 DATATYPE 372 3331
LAYER MAP 343 DATATYPE 382 3332 // 
LAYER M14_Ai         3333 3334 3335 3336 
LAYER MAP 44 DATATYPE 151 3333
LAYER MAP 44 DATATYPE 171 3334
LAYER MAP 44 DATATYPE 351 3335
LAYER MAP 44 DATATYPE 371 3336 // 
LAYER M14_Bi         3337 3338 3339 3340 
LAYER MAP 44 DATATYPE 152 3337
LAYER MAP 44 DATATYPE 172 3338
LAYER MAP 44 DATATYPE 352 3339
LAYER MAP 44 DATATYPE 372 3340 // 
LAYER DUM14_Ai       3341 3342 3343 3344 3345 3346 3347 3348 
LAYER MAP 344 DATATYPE 151 3341
LAYER MAP 344 DATATYPE 161 3342
LAYER MAP 344 DATATYPE 171 3343
LAYER MAP 344 DATATYPE 181 3344
LAYER MAP 344 DATATYPE 351 3345
LAYER MAP 344 DATATYPE 361 3346
LAYER MAP 344 DATATYPE 371 3347
LAYER MAP 344 DATATYPE 381 3348 // 
LAYER DUM14_Bi       3349 3350 3351 3352 3353 3354 3355 3356 
LAYER MAP 344 DATATYPE 152 3349
LAYER MAP 344 DATATYPE 162 3350
LAYER MAP 344 DATATYPE 172 3351
LAYER MAP 344 DATATYPE 182 3352
LAYER MAP 344 DATATYPE 352 3353
LAYER MAP 344 DATATYPE 362 3354
LAYER MAP 344 DATATYPE 372 3355
LAYER MAP 344 DATATYPE 382 3356 // 
LAYER M15_Ai         3357 3358 3359 3360 
LAYER MAP 45 DATATYPE 151 3357
LAYER MAP 45 DATATYPE 171 3358
LAYER MAP 45 DATATYPE 351 3359
LAYER MAP 45 DATATYPE 371 3360 // 
LAYER M15_Bi         3361 3362 3363 3364 
LAYER MAP 45 DATATYPE 152 3361
LAYER MAP 45 DATATYPE 172 3362
LAYER MAP 45 DATATYPE 352 3363
LAYER MAP 45 DATATYPE 372 3364 // 
LAYER DUM15_Ai       3365 3366 3367 3368 3369 3370 3371 3372 
LAYER MAP 345 DATATYPE 151 3365
LAYER MAP 345 DATATYPE 161 3366
LAYER MAP 345 DATATYPE 171 3367
LAYER MAP 345 DATATYPE 181 3368
LAYER MAP 345 DATATYPE 351 3369
LAYER MAP 345 DATATYPE 361 3370
LAYER MAP 345 DATATYPE 371 3371
LAYER MAP 345 DATATYPE 381 3372 // 
LAYER DUM15_Bi       3373 3374 3375 3376 3377 3378 3379 3380 
LAYER MAP 345 DATATYPE 152 3373
LAYER MAP 345 DATATYPE 162 3374
LAYER MAP 345 DATATYPE 172 3375
LAYER MAP 345 DATATYPE 182 3376
LAYER MAP 345 DATATYPE 352 3377
LAYER MAP 345 DATATYPE 362 3378
LAYER MAP 345 DATATYPE 372 3379
LAYER MAP 345 DATATYPE 382 3380 // 
LAYER M16_Ai         3381 3382 3383 3384 
LAYER MAP 46 DATATYPE 151 3381
LAYER MAP 46 DATATYPE 171 3382
LAYER MAP 46 DATATYPE 351 3383
LAYER MAP 46 DATATYPE 371 3384 // 
LAYER M16_Bi         3385 3386 3387 3388 
LAYER MAP 46 DATATYPE 152 3385
LAYER MAP 46 DATATYPE 172 3386
LAYER MAP 46 DATATYPE 352 3387
LAYER MAP 46 DATATYPE 372 3388 // 
LAYER DUM16_Ai       3389 3390 3391 3392 3393 3394 3395 3396 
LAYER MAP 346 DATATYPE 151 3389
LAYER MAP 346 DATATYPE 161 3390
LAYER MAP 346 DATATYPE 171 3391
LAYER MAP 346 DATATYPE 181 3392
LAYER MAP 346 DATATYPE 351 3393
LAYER MAP 346 DATATYPE 361 3394
LAYER MAP 346 DATATYPE 371 3395
LAYER MAP 346 DATATYPE 381 3396 // 
LAYER DUM16_Bi       3397 3398 3399 3400 3401 3402 3403 3404 
LAYER MAP 346 DATATYPE 152 3397
LAYER MAP 346 DATATYPE 162 3398
LAYER MAP 346 DATATYPE 172 3399
LAYER MAP 346 DATATYPE 182 3400
LAYER MAP 346 DATATYPE 352 3401
LAYER MAP 346 DATATYPE 362 3402
LAYER MAP 346 DATATYPE 372 3403
LAYER MAP 346 DATATYPE 382 3404 // 
LAYER M17_Ai         3405 3406 3407 3408 
LAYER MAP 47 DATATYPE 151 3405
LAYER MAP 47 DATATYPE 171 3406
LAYER MAP 47 DATATYPE 351 3407
LAYER MAP 47 DATATYPE 371 3408 // 
LAYER M17_Bi         3409 3410 3411 3412 
LAYER MAP 47 DATATYPE 152 3409
LAYER MAP 47 DATATYPE 172 3410
LAYER MAP 47 DATATYPE 352 3411
LAYER MAP 47 DATATYPE 372 3412 // 
LAYER DUM17_Ai       3413 3414 3415 3416 3417 3418 3419 3420 
LAYER MAP 347 DATATYPE 151 3413
LAYER MAP 347 DATATYPE 161 3414
LAYER MAP 347 DATATYPE 171 3415
LAYER MAP 347 DATATYPE 181 3416
LAYER MAP 347 DATATYPE 351 3417
LAYER MAP 347 DATATYPE 361 3418
LAYER MAP 347 DATATYPE 371 3419
LAYER MAP 347 DATATYPE 381 3420 // 
LAYER DUM17_Bi       3421 3422 3423 3424 3425 3426 3427 3428 
LAYER MAP 347 DATATYPE 152 3421
LAYER MAP 347 DATATYPE 162 3422
LAYER MAP 347 DATATYPE 172 3423
LAYER MAP 347 DATATYPE 182 3424
LAYER MAP 347 DATATYPE 352 3425
LAYER MAP 347 DATATYPE 362 3426
LAYER MAP 347 DATATYPE 372 3427
LAYER MAP 347 DATATYPE 382 3428 // 
LAYER M18_Ai         3429 3430 3431 3432 
LAYER MAP 48 DATATYPE 151 3429
LAYER MAP 48 DATATYPE 171 3430
LAYER MAP 48 DATATYPE 351 3431
LAYER MAP 48 DATATYPE 371 3432 // 
LAYER M18_Bi         3433 3434 3435 3436 
LAYER MAP 48 DATATYPE 152 3433
LAYER MAP 48 DATATYPE 172 3434
LAYER MAP 48 DATATYPE 352 3435
LAYER MAP 48 DATATYPE 372 3436 // 
LAYER DUM18_Ai       3437 3438 3439 3440 3441 3442 3443 3444 
LAYER MAP 348 DATATYPE 151 3437
LAYER MAP 348 DATATYPE 161 3438
LAYER MAP 348 DATATYPE 171 3439
LAYER MAP 348 DATATYPE 181 3440
LAYER MAP 348 DATATYPE 351 3441
LAYER MAP 348 DATATYPE 361 3442
LAYER MAP 348 DATATYPE 371 3443
LAYER MAP 348 DATATYPE 381 3444 // 
LAYER DUM18_Bi       3445 3446 3447 3448 3449 3450 3451 3452 
LAYER MAP 348 DATATYPE 152 3445
LAYER MAP 348 DATATYPE 162 3446
LAYER MAP 348 DATATYPE 172 3447
LAYER MAP 348 DATATYPE 182 3448
LAYER MAP 348 DATATYPE 352 3449
LAYER MAP 348 DATATYPE 362 3450
LAYER MAP 348 DATATYPE 372 3451
LAYER MAP 348 DATATYPE 382 3452 // 
LAYER M2i            3453 3454 3455 3456 3457 3458 3459 3460 3461 3462 3463 3464 3465 3466 3467 
LAYER MAP 32 DATATYPE 250 3453
LAYER MAP 32 DATATYPE 270 3454
LAYER MAP 32 DATATYPE 300 3455
LAYER MAP 32 DATATYPE 320 3456
LAYER MAP 32 DATATYPE 40 3457
LAYER MAP 32 DATATYPE 60 3458
LAYER MAP 32 DATATYPE 70 3459
LAYER MAP 32 DATATYPE 80 3460
LAYER MAP 32 DATATYPE 800 3461
LAYER MAP 32 DATATYPE 810 3462
LAYER MAP 32 DATATYPE 90 3463
LAYER MAP 32 DATATYPE 950 3464
LAYER MAP 32 DATATYPE 960 3465
LAYER MAP 32 DATATYPE 970 3466
LAYER MAP 32 DATATYPE 980 3467 // 
LAYER DUM2i          3468 3469 3470 3471 3472 3473 3474 3475 3476 3477 3478 3479 3480 3481 3482 3483 3484 3485 3486 3487 3488 3489 3490 3491 3492 3493 3494 
LAYER MAP 332 DATATYPE 250 3468
LAYER MAP 332 DATATYPE 260 3469
LAYER MAP 332 DATATYPE 270 3470
LAYER MAP 332 DATATYPE 280 3471
LAYER MAP 332 DATATYPE 300 3472
LAYER MAP 332 DATATYPE 310 3473
LAYER MAP 332 DATATYPE 320 3474
LAYER MAP 332 DATATYPE 330 3475
LAYER MAP 332 DATATYPE 45 3476
LAYER MAP 332 DATATYPE 65 3477
LAYER MAP 332 DATATYPE 70 3478
LAYER MAP 332 DATATYPE 75 3479
LAYER MAP 332 DATATYPE 800 3480
LAYER MAP 332 DATATYPE 805 3481
LAYER MAP 332 DATATYPE 810 3482
LAYER MAP 332 DATATYPE 815 3483
LAYER MAP 332 DATATYPE 85 3484
LAYER MAP 332 DATATYPE 90 3485
LAYER MAP 332 DATATYPE 95 3486
LAYER MAP 332 DATATYPE 950 3487
LAYER MAP 332 DATATYPE 955 3488
LAYER MAP 332 DATATYPE 960 3489
LAYER MAP 332 DATATYPE 965 3490
LAYER MAP 332 DATATYPE 970 3491
LAYER MAP 332 DATATYPE 975 3492
LAYER MAP 332 DATATYPE 980 3493
LAYER MAP 332 DATATYPE 985 3494 // 
LAYER M3i            3495 3496 3497 3498 3499 3500 3501 3502 3503 3504 3505 3506 3507 3508 3509 
LAYER MAP 33 DATATYPE 250 3495
LAYER MAP 33 DATATYPE 270 3496
LAYER MAP 33 DATATYPE 300 3497
LAYER MAP 33 DATATYPE 320 3498
LAYER MAP 33 DATATYPE 40 3499
LAYER MAP 33 DATATYPE 60 3500
LAYER MAP 33 DATATYPE 70 3501
LAYER MAP 33 DATATYPE 80 3502
LAYER MAP 33 DATATYPE 800 3503
LAYER MAP 33 DATATYPE 810 3504
LAYER MAP 33 DATATYPE 90 3505
LAYER MAP 33 DATATYPE 950 3506
LAYER MAP 33 DATATYPE 960 3507
LAYER MAP 33 DATATYPE 970 3508
LAYER MAP 33 DATATYPE 980 3509 // 
LAYER DUM3i          3510 3511 3512 3513 3514 3515 3516 3517 3518 3519 3520 3521 3522 3523 3524 3525 3526 3527 3528 3529 3530 3531 3532 3533 3534 3535 3536 
LAYER MAP 333 DATATYPE 250 3510
LAYER MAP 333 DATATYPE 260 3511
LAYER MAP 333 DATATYPE 270 3512
LAYER MAP 333 DATATYPE 280 3513
LAYER MAP 333 DATATYPE 300 3514
LAYER MAP 333 DATATYPE 310 3515
LAYER MAP 333 DATATYPE 320 3516
LAYER MAP 333 DATATYPE 330 3517
LAYER MAP 333 DATATYPE 45 3518
LAYER MAP 333 DATATYPE 65 3519
LAYER MAP 333 DATATYPE 70 3520
LAYER MAP 333 DATATYPE 75 3521
LAYER MAP 333 DATATYPE 800 3522
LAYER MAP 333 DATATYPE 805 3523
LAYER MAP 333 DATATYPE 810 3524
LAYER MAP 333 DATATYPE 815 3525
LAYER MAP 333 DATATYPE 85 3526
LAYER MAP 333 DATATYPE 90 3527
LAYER MAP 333 DATATYPE 95 3528
LAYER MAP 333 DATATYPE 950 3529
LAYER MAP 333 DATATYPE 955 3530
LAYER MAP 333 DATATYPE 960 3531
LAYER MAP 333 DATATYPE 965 3532
LAYER MAP 333 DATATYPE 970 3533
LAYER MAP 333 DATATYPE 975 3534
LAYER MAP 333 DATATYPE 980 3535
LAYER MAP 333 DATATYPE 985 3536 // 
LAYER M4i_Xc         3537 
LAYER MAP 34 DATATYPE 300 3537 // 
LAYER M4i1           3538 3539 3540 3541 3542 3543 3544 3545 3546 3547 3548 3549 3550 3551 
LAYER MAP 34 DATATYPE 250 3538
LAYER MAP 34 DATATYPE 270 3539
LAYER MAP 34 DATATYPE 320 3540
LAYER MAP 34 DATATYPE 40 3541
LAYER MAP 34 DATATYPE 60 3542
LAYER MAP 34 DATATYPE 70 3543
LAYER MAP 34 DATATYPE 80 3544
LAYER MAP 34 DATATYPE 800 3545
LAYER MAP 34 DATATYPE 810 3546
LAYER MAP 34 DATATYPE 90 3547
LAYER MAP 34 DATATYPE 950 3548
LAYER MAP 34 DATATYPE 960 3549
LAYER MAP 34 DATATYPE 970 3550
LAYER MAP 34 DATATYPE 980 3551 // 
LAYER DUM4i          3552 3553 3554 3555 3556 3557 3558 3559 3560 3561 3562 3563 3564 3565 3566 3567 3568 3569 3570 3571 3572 3573 3574 3575 3576 3577 3578 
LAYER MAP 334 DATATYPE 250 3552
LAYER MAP 334 DATATYPE 260 3553
LAYER MAP 334 DATATYPE 270 3554
LAYER MAP 334 DATATYPE 280 3555
LAYER MAP 334 DATATYPE 300 3556
LAYER MAP 334 DATATYPE 310 3557
LAYER MAP 334 DATATYPE 320 3558
LAYER MAP 334 DATATYPE 330 3559
LAYER MAP 334 DATATYPE 45 3560
LAYER MAP 334 DATATYPE 65 3561
LAYER MAP 334 DATATYPE 70 3562
LAYER MAP 334 DATATYPE 75 3563
LAYER MAP 334 DATATYPE 800 3564
LAYER MAP 334 DATATYPE 805 3565
LAYER MAP 334 DATATYPE 810 3566
LAYER MAP 334 DATATYPE 815 3567
LAYER MAP 334 DATATYPE 85 3568
LAYER MAP 334 DATATYPE 90 3569
LAYER MAP 334 DATATYPE 95 3570
LAYER MAP 334 DATATYPE 950 3571
LAYER MAP 334 DATATYPE 955 3572
LAYER MAP 334 DATATYPE 960 3573
LAYER MAP 334 DATATYPE 965 3574
LAYER MAP 334 DATATYPE 970 3575
LAYER MAP 334 DATATYPE 975 3576
LAYER MAP 334 DATATYPE 980 3577
LAYER MAP 334 DATATYPE 985 3578 // 
LAYER M5i            3579 3580 3581 3582 3583 3584 3585 3586 3587 3588 3589 3590 3591 3592 3593 
LAYER MAP 35 DATATYPE 250 3579
LAYER MAP 35 DATATYPE 270 3580
LAYER MAP 35 DATATYPE 300 3581
LAYER MAP 35 DATATYPE 320 3582
LAYER MAP 35 DATATYPE 40 3583
LAYER MAP 35 DATATYPE 60 3584
LAYER MAP 35 DATATYPE 70 3585
LAYER MAP 35 DATATYPE 80 3586
LAYER MAP 35 DATATYPE 800 3587
LAYER MAP 35 DATATYPE 810 3588
LAYER MAP 35 DATATYPE 90 3589
LAYER MAP 35 DATATYPE 950 3590
LAYER MAP 35 DATATYPE 960 3591
LAYER MAP 35 DATATYPE 970 3592
LAYER MAP 35 DATATYPE 980 3593 // 
LAYER DUM5i          3594 3595 3596 3597 3598 3599 3600 3601 3602 3603 3604 3605 3606 3607 3608 3609 3610 3611 3612 3613 3614 3615 3616 3617 3618 3619 3620 
LAYER MAP 335 DATATYPE 250 3594
LAYER MAP 335 DATATYPE 260 3595
LAYER MAP 335 DATATYPE 270 3596
LAYER MAP 335 DATATYPE 280 3597
LAYER MAP 335 DATATYPE 300 3598
LAYER MAP 335 DATATYPE 310 3599
LAYER MAP 335 DATATYPE 320 3600
LAYER MAP 335 DATATYPE 330 3601
LAYER MAP 335 DATATYPE 45 3602
LAYER MAP 335 DATATYPE 65 3603
LAYER MAP 335 DATATYPE 70 3604
LAYER MAP 335 DATATYPE 75 3605
LAYER MAP 335 DATATYPE 800 3606
LAYER MAP 335 DATATYPE 805 3607
LAYER MAP 335 DATATYPE 810 3608
LAYER MAP 335 DATATYPE 815 3609
LAYER MAP 335 DATATYPE 85 3610
LAYER MAP 335 DATATYPE 90 3611
LAYER MAP 335 DATATYPE 95 3612
LAYER MAP 335 DATATYPE 950 3613
LAYER MAP 335 DATATYPE 955 3614
LAYER MAP 335 DATATYPE 960 3615
LAYER MAP 335 DATATYPE 965 3616
LAYER MAP 335 DATATYPE 970 3617
LAYER MAP 335 DATATYPE 975 3618
LAYER MAP 335 DATATYPE 980 3619
LAYER MAP 335 DATATYPE 985 3620 // 
LAYER M6i            3621 3622 3623 3624 3625 3626 3627 3628 3629 3630 3631 3632 3633 3634 3635 
LAYER MAP 36 DATATYPE 250 3621
LAYER MAP 36 DATATYPE 270 3622
LAYER MAP 36 DATATYPE 300 3623
LAYER MAP 36 DATATYPE 320 3624
LAYER MAP 36 DATATYPE 40 3625
LAYER MAP 36 DATATYPE 60 3626
LAYER MAP 36 DATATYPE 70 3627
LAYER MAP 36 DATATYPE 80 3628
LAYER MAP 36 DATATYPE 800 3629
LAYER MAP 36 DATATYPE 810 3630
LAYER MAP 36 DATATYPE 90 3631
LAYER MAP 36 DATATYPE 950 3632
LAYER MAP 36 DATATYPE 960 3633
LAYER MAP 36 DATATYPE 970 3634
LAYER MAP 36 DATATYPE 980 3635 // 
LAYER DUM6i          3636 3637 3638 3639 3640 3641 3642 3643 3644 3645 3646 3647 3648 3649 3650 3651 3652 3653 3654 3655 3656 3657 3658 3659 3660 3661 3662 
LAYER MAP 336 DATATYPE 250 3636
LAYER MAP 336 DATATYPE 260 3637
LAYER MAP 336 DATATYPE 270 3638
LAYER MAP 336 DATATYPE 280 3639
LAYER MAP 336 DATATYPE 300 3640
LAYER MAP 336 DATATYPE 310 3641
LAYER MAP 336 DATATYPE 320 3642
LAYER MAP 336 DATATYPE 330 3643
LAYER MAP 336 DATATYPE 45 3644
LAYER MAP 336 DATATYPE 65 3645
LAYER MAP 336 DATATYPE 70 3646
LAYER MAP 336 DATATYPE 75 3647
LAYER MAP 336 DATATYPE 800 3648
LAYER MAP 336 DATATYPE 805 3649
LAYER MAP 336 DATATYPE 810 3650
LAYER MAP 336 DATATYPE 815 3651
LAYER MAP 336 DATATYPE 85 3652
LAYER MAP 336 DATATYPE 90 3653
LAYER MAP 336 DATATYPE 95 3654
LAYER MAP 336 DATATYPE 950 3655
LAYER MAP 336 DATATYPE 955 3656
LAYER MAP 336 DATATYPE 960 3657
LAYER MAP 336 DATATYPE 965 3658
LAYER MAP 336 DATATYPE 970 3659
LAYER MAP 336 DATATYPE 975 3660
LAYER MAP 336 DATATYPE 980 3661
LAYER MAP 336 DATATYPE 985 3662 // 
LAYER M7i            3663 3664 3665 3666 3667 3668 3669 3670 3671 3672 3673 3674 3675 3676 3677 
LAYER MAP 37 DATATYPE 250 3663
LAYER MAP 37 DATATYPE 270 3664
LAYER MAP 37 DATATYPE 300 3665
LAYER MAP 37 DATATYPE 320 3666
LAYER MAP 37 DATATYPE 40 3667
LAYER MAP 37 DATATYPE 60 3668
LAYER MAP 37 DATATYPE 70 3669
LAYER MAP 37 DATATYPE 80 3670
LAYER MAP 37 DATATYPE 800 3671
LAYER MAP 37 DATATYPE 810 3672
LAYER MAP 37 DATATYPE 90 3673
LAYER MAP 37 DATATYPE 950 3674
LAYER MAP 37 DATATYPE 960 3675
LAYER MAP 37 DATATYPE 970 3676
LAYER MAP 37 DATATYPE 980 3677 // 
LAYER DUM7i          3678 3679 3680 3681 3682 3683 3684 3685 3686 3687 3688 3689 3690 3691 3692 3693 3694 3695 3696 3697 3698 3699 3700 3701 3702 3703 3704 
LAYER MAP 337 DATATYPE 250 3678
LAYER MAP 337 DATATYPE 260 3679
LAYER MAP 337 DATATYPE 270 3680
LAYER MAP 337 DATATYPE 280 3681
LAYER MAP 337 DATATYPE 300 3682
LAYER MAP 337 DATATYPE 310 3683
LAYER MAP 337 DATATYPE 320 3684
LAYER MAP 337 DATATYPE 330 3685
LAYER MAP 337 DATATYPE 45 3686
LAYER MAP 337 DATATYPE 65 3687
LAYER MAP 337 DATATYPE 70 3688
LAYER MAP 337 DATATYPE 75 3689
LAYER MAP 337 DATATYPE 800 3690
LAYER MAP 337 DATATYPE 805 3691
LAYER MAP 337 DATATYPE 810 3692
LAYER MAP 337 DATATYPE 815 3693
LAYER MAP 337 DATATYPE 85 3694
LAYER MAP 337 DATATYPE 90 3695
LAYER MAP 337 DATATYPE 95 3696
LAYER MAP 337 DATATYPE 950 3697
LAYER MAP 337 DATATYPE 955 3698
LAYER MAP 337 DATATYPE 960 3699
LAYER MAP 337 DATATYPE 965 3700
LAYER MAP 337 DATATYPE 970 3701
LAYER MAP 337 DATATYPE 975 3702
LAYER MAP 337 DATATYPE 980 3703
LAYER MAP 337 DATATYPE 985 3704 // 
LAYER M8i            3705 3706 3707 3708 3709 3710 3711 3712 3713 3714 3715 3716 3717 3718 3719 
LAYER MAP 38 DATATYPE 250 3705
LAYER MAP 38 DATATYPE 270 3706
LAYER MAP 38 DATATYPE 300 3707
LAYER MAP 38 DATATYPE 320 3708
LAYER MAP 38 DATATYPE 40 3709
LAYER MAP 38 DATATYPE 60 3710
LAYER MAP 38 DATATYPE 70 3711
LAYER MAP 38 DATATYPE 80 3712
LAYER MAP 38 DATATYPE 800 3713
LAYER MAP 38 DATATYPE 810 3714
LAYER MAP 38 DATATYPE 90 3715
LAYER MAP 38 DATATYPE 950 3716
LAYER MAP 38 DATATYPE 960 3717
LAYER MAP 38 DATATYPE 970 3718
LAYER MAP 38 DATATYPE 980 3719 // 
LAYER DUM8i          3720 3721 3722 3723 3724 3725 3726 3727 3728 3729 3730 3731 3732 3733 3734 3735 3736 3737 3738 3739 3740 3741 3742 3743 3744 3745 3746 
LAYER MAP 338 DATATYPE 250 3720
LAYER MAP 338 DATATYPE 260 3721
LAYER MAP 338 DATATYPE 270 3722
LAYER MAP 338 DATATYPE 280 3723
LAYER MAP 338 DATATYPE 300 3724
LAYER MAP 338 DATATYPE 310 3725
LAYER MAP 338 DATATYPE 320 3726
LAYER MAP 338 DATATYPE 330 3727
LAYER MAP 338 DATATYPE 45 3728
LAYER MAP 338 DATATYPE 65 3729
LAYER MAP 338 DATATYPE 70 3730
LAYER MAP 338 DATATYPE 75 3731
LAYER MAP 338 DATATYPE 800 3732
LAYER MAP 338 DATATYPE 805 3733
LAYER MAP 338 DATATYPE 810 3734
LAYER MAP 338 DATATYPE 815 3735
LAYER MAP 338 DATATYPE 85 3736
LAYER MAP 338 DATATYPE 90 3737
LAYER MAP 338 DATATYPE 95 3738
LAYER MAP 338 DATATYPE 950 3739
LAYER MAP 338 DATATYPE 955 3740
LAYER MAP 338 DATATYPE 960 3741
LAYER MAP 338 DATATYPE 965 3742
LAYER MAP 338 DATATYPE 970 3743
LAYER MAP 338 DATATYPE 975 3744
LAYER MAP 338 DATATYPE 980 3745
LAYER MAP 338 DATATYPE 985 3746 // 
LAYER M9i            3747 3748 3749 3750 3751 3752 3753 3754 3755 3756 3757 3758 3759 3760 3761 
LAYER MAP 39 DATATYPE 250 3747
LAYER MAP 39 DATATYPE 270 3748
LAYER MAP 39 DATATYPE 300 3749
LAYER MAP 39 DATATYPE 320 3750
LAYER MAP 39 DATATYPE 40 3751
LAYER MAP 39 DATATYPE 60 3752
LAYER MAP 39 DATATYPE 70 3753
LAYER MAP 39 DATATYPE 80 3754
LAYER MAP 39 DATATYPE 800 3755
LAYER MAP 39 DATATYPE 810 3756
LAYER MAP 39 DATATYPE 90 3757
LAYER MAP 39 DATATYPE 950 3758
LAYER MAP 39 DATATYPE 960 3759
LAYER MAP 39 DATATYPE 970 3760
LAYER MAP 39 DATATYPE 980 3761 // 
LAYER DUM9i          3762 3763 3764 3765 3766 3767 3768 3769 3770 3771 3772 3773 3774 3775 3776 3777 3778 3779 3780 3781 3782 3783 3784 3785 3786 3787 3788 
LAYER MAP 339 DATATYPE 250 3762
LAYER MAP 339 DATATYPE 260 3763
LAYER MAP 339 DATATYPE 270 3764
LAYER MAP 339 DATATYPE 280 3765
LAYER MAP 339 DATATYPE 300 3766
LAYER MAP 339 DATATYPE 310 3767
LAYER MAP 339 DATATYPE 320 3768
LAYER MAP 339 DATATYPE 330 3769
LAYER MAP 339 DATATYPE 45 3770
LAYER MAP 339 DATATYPE 65 3771
LAYER MAP 339 DATATYPE 70 3772
LAYER MAP 339 DATATYPE 75 3773
LAYER MAP 339 DATATYPE 800 3774
LAYER MAP 339 DATATYPE 805 3775
LAYER MAP 339 DATATYPE 810 3776
LAYER MAP 339 DATATYPE 815 3777
LAYER MAP 339 DATATYPE 85 3778
LAYER MAP 339 DATATYPE 90 3779
LAYER MAP 339 DATATYPE 95 3780
LAYER MAP 339 DATATYPE 950 3781
LAYER MAP 339 DATATYPE 955 3782
LAYER MAP 339 DATATYPE 960 3783
LAYER MAP 339 DATATYPE 965 3784
LAYER MAP 339 DATATYPE 970 3785
LAYER MAP 339 DATATYPE 975 3786
LAYER MAP 339 DATATYPE 980 3787
LAYER MAP 339 DATATYPE 985 3788 // 
LAYER M10i           3789 3790 3791 3792 3793 3794 3795 3796 3797 3798 3799 3800 3801 3802 3803 
LAYER MAP 40 DATATYPE 250 3789
LAYER MAP 40 DATATYPE 270 3790
LAYER MAP 40 DATATYPE 300 3791
LAYER MAP 40 DATATYPE 320 3792
LAYER MAP 40 DATATYPE 40 3793
LAYER MAP 40 DATATYPE 60 3794
LAYER MAP 40 DATATYPE 70 3795
LAYER MAP 40 DATATYPE 80 3796
LAYER MAP 40 DATATYPE 800 3797
LAYER MAP 40 DATATYPE 810 3798
LAYER MAP 40 DATATYPE 90 3799
LAYER MAP 40 DATATYPE 950 3800
LAYER MAP 40 DATATYPE 960 3801
LAYER MAP 40 DATATYPE 970 3802
LAYER MAP 40 DATATYPE 980 3803 // 
LAYER DUM10i         3804 3805 3806 3807 3808 3809 3810 3811 3812 3813 3814 3815 3816 3817 3818 3819 3820 3821 3822 3823 3824 3825 3826 3827 3828 3829 3830 
LAYER MAP 340 DATATYPE 250 3804
LAYER MAP 340 DATATYPE 260 3805
LAYER MAP 340 DATATYPE 270 3806
LAYER MAP 340 DATATYPE 280 3807
LAYER MAP 340 DATATYPE 300 3808
LAYER MAP 340 DATATYPE 310 3809
LAYER MAP 340 DATATYPE 320 3810
LAYER MAP 340 DATATYPE 330 3811
LAYER MAP 340 DATATYPE 45 3812
LAYER MAP 340 DATATYPE 65 3813
LAYER MAP 340 DATATYPE 70 3814
LAYER MAP 340 DATATYPE 75 3815
LAYER MAP 340 DATATYPE 800 3816
LAYER MAP 340 DATATYPE 805 3817
LAYER MAP 340 DATATYPE 810 3818
LAYER MAP 340 DATATYPE 815 3819
LAYER MAP 340 DATATYPE 85 3820
LAYER MAP 340 DATATYPE 90 3821
LAYER MAP 340 DATATYPE 95 3822
LAYER MAP 340 DATATYPE 950 3823
LAYER MAP 340 DATATYPE 955 3824
LAYER MAP 340 DATATYPE 960 3825
LAYER MAP 340 DATATYPE 965 3826
LAYER MAP 340 DATATYPE 970 3827
LAYER MAP 340 DATATYPE 975 3828
LAYER MAP 340 DATATYPE 980 3829
LAYER MAP 340 DATATYPE 985 3830 // 
LAYER M11i           3831 3832 3833 3834 3835 3836 3837 3838 3839 3840 3841 3842 3843 3844 3845 
LAYER MAP 41 DATATYPE 250 3831
LAYER MAP 41 DATATYPE 270 3832
LAYER MAP 41 DATATYPE 300 3833
LAYER MAP 41 DATATYPE 320 3834
LAYER MAP 41 DATATYPE 40 3835
LAYER MAP 41 DATATYPE 60 3836
LAYER MAP 41 DATATYPE 70 3837
LAYER MAP 41 DATATYPE 80 3838
LAYER MAP 41 DATATYPE 800 3839
LAYER MAP 41 DATATYPE 810 3840
LAYER MAP 41 DATATYPE 90 3841
LAYER MAP 41 DATATYPE 950 3842
LAYER MAP 41 DATATYPE 960 3843
LAYER MAP 41 DATATYPE 970 3844
LAYER MAP 41 DATATYPE 980 3845 // 
LAYER DUM11i         3846 3847 3848 3849 3850 3851 3852 3853 3854 3855 3856 3857 3858 3859 3860 3861 3862 3863 3864 3865 3866 3867 3868 3869 3870 3871 3872 
LAYER MAP 341 DATATYPE 250 3846
LAYER MAP 341 DATATYPE 260 3847
LAYER MAP 341 DATATYPE 270 3848
LAYER MAP 341 DATATYPE 280 3849
LAYER MAP 341 DATATYPE 300 3850
LAYER MAP 341 DATATYPE 310 3851
LAYER MAP 341 DATATYPE 320 3852
LAYER MAP 341 DATATYPE 330 3853
LAYER MAP 341 DATATYPE 45 3854
LAYER MAP 341 DATATYPE 65 3855
LAYER MAP 341 DATATYPE 70 3856
LAYER MAP 341 DATATYPE 75 3857
LAYER MAP 341 DATATYPE 800 3858
LAYER MAP 341 DATATYPE 805 3859
LAYER MAP 341 DATATYPE 810 3860
LAYER MAP 341 DATATYPE 815 3861
LAYER MAP 341 DATATYPE 85 3862
LAYER MAP 341 DATATYPE 90 3863
LAYER MAP 341 DATATYPE 95 3864
LAYER MAP 341 DATATYPE 950 3865
LAYER MAP 341 DATATYPE 955 3866
LAYER MAP 341 DATATYPE 960 3867
LAYER MAP 341 DATATYPE 965 3868
LAYER MAP 341 DATATYPE 970 3869
LAYER MAP 341 DATATYPE 975 3870
LAYER MAP 341 DATATYPE 980 3871
LAYER MAP 341 DATATYPE 985 3872 // 
LAYER M12i           3873 3874 3875 3876 3877 3878 3879 3880 3881 3882 3883 3884 3885 3886 3887 
LAYER MAP 42 DATATYPE 250 3873
LAYER MAP 42 DATATYPE 270 3874
LAYER MAP 42 DATATYPE 300 3875
LAYER MAP 42 DATATYPE 320 3876
LAYER MAP 42 DATATYPE 40 3877
LAYER MAP 42 DATATYPE 60 3878
LAYER MAP 42 DATATYPE 70 3879
LAYER MAP 42 DATATYPE 80 3880
LAYER MAP 42 DATATYPE 800 3881
LAYER MAP 42 DATATYPE 810 3882
LAYER MAP 42 DATATYPE 90 3883
LAYER MAP 42 DATATYPE 950 3884
LAYER MAP 42 DATATYPE 960 3885
LAYER MAP 42 DATATYPE 970 3886
LAYER MAP 42 DATATYPE 980 3887 // 
LAYER DUM12i         3888 3889 3890 3891 3892 3893 3894 3895 3896 3897 3898 3899 3900 3901 3902 3903 3904 3905 3906 3907 3908 3909 3910 3911 3912 3913 3914 
LAYER MAP 342 DATATYPE 250 3888
LAYER MAP 342 DATATYPE 260 3889
LAYER MAP 342 DATATYPE 270 3890
LAYER MAP 342 DATATYPE 280 3891
LAYER MAP 342 DATATYPE 300 3892
LAYER MAP 342 DATATYPE 310 3893
LAYER MAP 342 DATATYPE 320 3894
LAYER MAP 342 DATATYPE 330 3895
LAYER MAP 342 DATATYPE 45 3896
LAYER MAP 342 DATATYPE 65 3897
LAYER MAP 342 DATATYPE 70 3898
LAYER MAP 342 DATATYPE 75 3899
LAYER MAP 342 DATATYPE 800 3900
LAYER MAP 342 DATATYPE 805 3901
LAYER MAP 342 DATATYPE 810 3902
LAYER MAP 342 DATATYPE 815 3903
LAYER MAP 342 DATATYPE 85 3904
LAYER MAP 342 DATATYPE 90 3905
LAYER MAP 342 DATATYPE 95 3906
LAYER MAP 342 DATATYPE 950 3907
LAYER MAP 342 DATATYPE 955 3908
LAYER MAP 342 DATATYPE 960 3909
LAYER MAP 342 DATATYPE 965 3910
LAYER MAP 342 DATATYPE 970 3911
LAYER MAP 342 DATATYPE 975 3912
LAYER MAP 342 DATATYPE 980 3913
LAYER MAP 342 DATATYPE 985 3914 // 
LAYER M13i           3915 3916 3917 3918 3919 3920 3921 3922 3923 3924 3925 3926 3927 3928 3929 
LAYER MAP 43 DATATYPE 250 3915
LAYER MAP 43 DATATYPE 270 3916
LAYER MAP 43 DATATYPE 300 3917
LAYER MAP 43 DATATYPE 320 3918
LAYER MAP 43 DATATYPE 40 3919
LAYER MAP 43 DATATYPE 60 3920
LAYER MAP 43 DATATYPE 70 3921
LAYER MAP 43 DATATYPE 80 3922
LAYER MAP 43 DATATYPE 800 3923
LAYER MAP 43 DATATYPE 810 3924
LAYER MAP 43 DATATYPE 90 3925
LAYER MAP 43 DATATYPE 950 3926
LAYER MAP 43 DATATYPE 960 3927
LAYER MAP 43 DATATYPE 970 3928
LAYER MAP 43 DATATYPE 980 3929 // 
LAYER DUM13i         3930 3931 3932 3933 3934 3935 3936 3937 3938 3939 3940 3941 3942 3943 3944 3945 3946 3947 3948 3949 3950 3951 3952 3953 3954 3955 3956 
LAYER MAP 343 DATATYPE 250 3930
LAYER MAP 343 DATATYPE 260 3931
LAYER MAP 343 DATATYPE 270 3932
LAYER MAP 343 DATATYPE 280 3933
LAYER MAP 343 DATATYPE 300 3934
LAYER MAP 343 DATATYPE 310 3935
LAYER MAP 343 DATATYPE 320 3936
LAYER MAP 343 DATATYPE 330 3937
LAYER MAP 343 DATATYPE 45 3938
LAYER MAP 343 DATATYPE 65 3939
LAYER MAP 343 DATATYPE 70 3940
LAYER MAP 343 DATATYPE 75 3941
LAYER MAP 343 DATATYPE 800 3942
LAYER MAP 343 DATATYPE 805 3943
LAYER MAP 343 DATATYPE 810 3944
LAYER MAP 343 DATATYPE 815 3945
LAYER MAP 343 DATATYPE 85 3946
LAYER MAP 343 DATATYPE 90 3947
LAYER MAP 343 DATATYPE 95 3948
LAYER MAP 343 DATATYPE 950 3949
LAYER MAP 343 DATATYPE 955 3950
LAYER MAP 343 DATATYPE 960 3951
LAYER MAP 343 DATATYPE 965 3952
LAYER MAP 343 DATATYPE 970 3953
LAYER MAP 343 DATATYPE 975 3954
LAYER MAP 343 DATATYPE 980 3955
LAYER MAP 343 DATATYPE 985 3956 // 
LAYER M14i           3957 3958 3959 3960 3961 3962 3963 3964 3965 3966 3967 3968 3969 3970 3971 
LAYER MAP 44 DATATYPE 250 3957
LAYER MAP 44 DATATYPE 270 3958
LAYER MAP 44 DATATYPE 300 3959
LAYER MAP 44 DATATYPE 320 3960
LAYER MAP 44 DATATYPE 40 3961
LAYER MAP 44 DATATYPE 60 3962
LAYER MAP 44 DATATYPE 70 3963
LAYER MAP 44 DATATYPE 80 3964
LAYER MAP 44 DATATYPE 800 3965
LAYER MAP 44 DATATYPE 810 3966
LAYER MAP 44 DATATYPE 90 3967
LAYER MAP 44 DATATYPE 950 3968
LAYER MAP 44 DATATYPE 960 3969
LAYER MAP 44 DATATYPE 970 3970
LAYER MAP 44 DATATYPE 980 3971 // 
LAYER DUM14i         3972 3973 3974 3975 3976 3977 3978 3979 3980 3981 3982 3983 3984 3985 3986 3987 3988 3989 3990 3991 3992 3993 3994 3995 3996 3997 3998 
LAYER MAP 344 DATATYPE 250 3972
LAYER MAP 344 DATATYPE 260 3973
LAYER MAP 344 DATATYPE 270 3974
LAYER MAP 344 DATATYPE 280 3975
LAYER MAP 344 DATATYPE 300 3976
LAYER MAP 344 DATATYPE 310 3977
LAYER MAP 344 DATATYPE 320 3978
LAYER MAP 344 DATATYPE 330 3979
LAYER MAP 344 DATATYPE 45 3980
LAYER MAP 344 DATATYPE 65 3981
LAYER MAP 344 DATATYPE 70 3982
LAYER MAP 344 DATATYPE 75 3983
LAYER MAP 344 DATATYPE 800 3984
LAYER MAP 344 DATATYPE 805 3985
LAYER MAP 344 DATATYPE 810 3986
LAYER MAP 344 DATATYPE 815 3987
LAYER MAP 344 DATATYPE 85 3988
LAYER MAP 344 DATATYPE 90 3989
LAYER MAP 344 DATATYPE 95 3990
LAYER MAP 344 DATATYPE 950 3991
LAYER MAP 344 DATATYPE 955 3992
LAYER MAP 344 DATATYPE 960 3993
LAYER MAP 344 DATATYPE 965 3994
LAYER MAP 344 DATATYPE 970 3995
LAYER MAP 344 DATATYPE 975 3996
LAYER MAP 344 DATATYPE 980 3997
LAYER MAP 344 DATATYPE 985 3998 // 
LAYER M15i           3999 4000 4001 4002 4003 4004 4005 4006 4007 4008 4009 4010 4011 4012 4013 
LAYER MAP 45 DATATYPE 250 3999
LAYER MAP 45 DATATYPE 270 4000
LAYER MAP 45 DATATYPE 300 4001
LAYER MAP 45 DATATYPE 320 4002
LAYER MAP 45 DATATYPE 40 4003
LAYER MAP 45 DATATYPE 60 4004
LAYER MAP 45 DATATYPE 70 4005
LAYER MAP 45 DATATYPE 80 4006
LAYER MAP 45 DATATYPE 800 4007
LAYER MAP 45 DATATYPE 810 4008
LAYER MAP 45 DATATYPE 90 4009
LAYER MAP 45 DATATYPE 950 4010
LAYER MAP 45 DATATYPE 960 4011
LAYER MAP 45 DATATYPE 970 4012
LAYER MAP 45 DATATYPE 980 4013 // 
LAYER DUM15i         4014 4015 4016 4017 4018 4019 4020 4021 4022 4023 4024 4025 4026 4027 4028 4029 4030 4031 4032 4033 4034 4035 4036 4037 4038 4039 4040 
LAYER MAP 345 DATATYPE 250 4014
LAYER MAP 345 DATATYPE 260 4015
LAYER MAP 345 DATATYPE 270 4016
LAYER MAP 345 DATATYPE 280 4017
LAYER MAP 345 DATATYPE 300 4018
LAYER MAP 345 DATATYPE 310 4019
LAYER MAP 345 DATATYPE 320 4020
LAYER MAP 345 DATATYPE 330 4021
LAYER MAP 345 DATATYPE 45 4022
LAYER MAP 345 DATATYPE 65 4023
LAYER MAP 345 DATATYPE 70 4024
LAYER MAP 345 DATATYPE 75 4025
LAYER MAP 345 DATATYPE 800 4026
LAYER MAP 345 DATATYPE 805 4027
LAYER MAP 345 DATATYPE 810 4028
LAYER MAP 345 DATATYPE 815 4029
LAYER MAP 345 DATATYPE 85 4030
LAYER MAP 345 DATATYPE 90 4031
LAYER MAP 345 DATATYPE 95 4032
LAYER MAP 345 DATATYPE 950 4033
LAYER MAP 345 DATATYPE 955 4034
LAYER MAP 345 DATATYPE 960 4035
LAYER MAP 345 DATATYPE 965 4036
LAYER MAP 345 DATATYPE 970 4037
LAYER MAP 345 DATATYPE 975 4038
LAYER MAP 345 DATATYPE 980 4039
LAYER MAP 345 DATATYPE 985 4040 // 
LAYER M16i           4041 4042 4043 4044 4045 4046 4047 4048 4049 4050 4051 4052 4053 4054 4055 
LAYER MAP 46 DATATYPE 250 4041
LAYER MAP 46 DATATYPE 270 4042
LAYER MAP 46 DATATYPE 300 4043
LAYER MAP 46 DATATYPE 320 4044
LAYER MAP 46 DATATYPE 40 4045
LAYER MAP 46 DATATYPE 60 4046
LAYER MAP 46 DATATYPE 70 4047
LAYER MAP 46 DATATYPE 80 4048
LAYER MAP 46 DATATYPE 800 4049
LAYER MAP 46 DATATYPE 810 4050
LAYER MAP 46 DATATYPE 90 4051
LAYER MAP 46 DATATYPE 950 4052
LAYER MAP 46 DATATYPE 960 4053
LAYER MAP 46 DATATYPE 970 4054
LAYER MAP 46 DATATYPE 980 4055 // 
LAYER DUM16i         4056 4057 4058 4059 4060 4061 4062 4063 4064 4065 4066 4067 4068 4069 4070 4071 4072 4073 4074 4075 4076 4077 4078 4079 4080 4081 4082 
LAYER MAP 346 DATATYPE 250 4056
LAYER MAP 346 DATATYPE 260 4057
LAYER MAP 346 DATATYPE 270 4058
LAYER MAP 346 DATATYPE 280 4059
LAYER MAP 346 DATATYPE 300 4060
LAYER MAP 346 DATATYPE 310 4061
LAYER MAP 346 DATATYPE 320 4062
LAYER MAP 346 DATATYPE 330 4063
LAYER MAP 346 DATATYPE 45 4064
LAYER MAP 346 DATATYPE 65 4065
LAYER MAP 346 DATATYPE 70 4066
LAYER MAP 346 DATATYPE 75 4067
LAYER MAP 346 DATATYPE 800 4068
LAYER MAP 346 DATATYPE 805 4069
LAYER MAP 346 DATATYPE 810 4070
LAYER MAP 346 DATATYPE 815 4071
LAYER MAP 346 DATATYPE 85 4072
LAYER MAP 346 DATATYPE 90 4073
LAYER MAP 346 DATATYPE 95 4074
LAYER MAP 346 DATATYPE 950 4075
LAYER MAP 346 DATATYPE 955 4076
LAYER MAP 346 DATATYPE 960 4077
LAYER MAP 346 DATATYPE 965 4078
LAYER MAP 346 DATATYPE 970 4079
LAYER MAP 346 DATATYPE 975 4080
LAYER MAP 346 DATATYPE 980 4081
LAYER MAP 346 DATATYPE 985 4082 // 
LAYER M17i           4083 4084 4085 4086 4087 4088 4089 4090 4091 4092 4093 4094 4095 4096 4097 
LAYER MAP 47 DATATYPE 250 4083
LAYER MAP 47 DATATYPE 270 4084
LAYER MAP 47 DATATYPE 300 4085
LAYER MAP 47 DATATYPE 320 4086
LAYER MAP 47 DATATYPE 40 4087
LAYER MAP 47 DATATYPE 60 4088
LAYER MAP 47 DATATYPE 70 4089
LAYER MAP 47 DATATYPE 80 4090
LAYER MAP 47 DATATYPE 800 4091
LAYER MAP 47 DATATYPE 810 4092
LAYER MAP 47 DATATYPE 90 4093
LAYER MAP 47 DATATYPE 950 4094
LAYER MAP 47 DATATYPE 960 4095
LAYER MAP 47 DATATYPE 970 4096
LAYER MAP 47 DATATYPE 980 4097 // 
LAYER DUM17i         4098 4099 4100 4101 4102 4103 4104 4105 4106 4107 4108 4109 4110 4111 4112 4113 4114 4115 4116 4117 4118 4119 4120 4121 4122 4123 4124 
LAYER MAP 347 DATATYPE 250 4098
LAYER MAP 347 DATATYPE 260 4099
LAYER MAP 347 DATATYPE 270 4100
LAYER MAP 347 DATATYPE 280 4101
LAYER MAP 347 DATATYPE 300 4102
LAYER MAP 347 DATATYPE 310 4103
LAYER MAP 347 DATATYPE 320 4104
LAYER MAP 347 DATATYPE 330 4105
LAYER MAP 347 DATATYPE 45 4106
LAYER MAP 347 DATATYPE 65 4107
LAYER MAP 347 DATATYPE 70 4108
LAYER MAP 347 DATATYPE 75 4109
LAYER MAP 347 DATATYPE 800 4110
LAYER MAP 347 DATATYPE 805 4111
LAYER MAP 347 DATATYPE 810 4112
LAYER MAP 347 DATATYPE 815 4113
LAYER MAP 347 DATATYPE 85 4114
LAYER MAP 347 DATATYPE 90 4115
LAYER MAP 347 DATATYPE 95 4116
LAYER MAP 347 DATATYPE 950 4117
LAYER MAP 347 DATATYPE 955 4118
LAYER MAP 347 DATATYPE 960 4119
LAYER MAP 347 DATATYPE 965 4120
LAYER MAP 347 DATATYPE 970 4121
LAYER MAP 347 DATATYPE 975 4122
LAYER MAP 347 DATATYPE 980 4123
LAYER MAP 347 DATATYPE 985 4124 // 
LAYER M18i           4125 4126 4127 4128 4129 4130 4131 4132 4133 4134 4135 4136 4137 4138 4139 
LAYER MAP 48 DATATYPE 250 4125
LAYER MAP 48 DATATYPE 270 4126
LAYER MAP 48 DATATYPE 300 4127
LAYER MAP 48 DATATYPE 320 4128
LAYER MAP 48 DATATYPE 40 4129
LAYER MAP 48 DATATYPE 60 4130
LAYER MAP 48 DATATYPE 70 4131
LAYER MAP 48 DATATYPE 80 4132
LAYER MAP 48 DATATYPE 800 4133
LAYER MAP 48 DATATYPE 810 4134
LAYER MAP 48 DATATYPE 90 4135
LAYER MAP 48 DATATYPE 950 4136
LAYER MAP 48 DATATYPE 960 4137
LAYER MAP 48 DATATYPE 970 4138
LAYER MAP 48 DATATYPE 980 4139 // 
LAYER DUM18i         4140 4141 4142 4143 4144 4145 4146 4147 4148 4149 4150 4151 4152 4153 4154 4155 4156 4157 4158 4159 4160 4161 4162 4163 4164 4165 4166 
LAYER MAP 348 DATATYPE 250 4140
LAYER MAP 348 DATATYPE 260 4141
LAYER MAP 348 DATATYPE 270 4142
LAYER MAP 348 DATATYPE 280 4143
LAYER MAP 348 DATATYPE 300 4144
LAYER MAP 348 DATATYPE 310 4145
LAYER MAP 348 DATATYPE 320 4146
LAYER MAP 348 DATATYPE 330 4147
LAYER MAP 348 DATATYPE 45 4148
LAYER MAP 348 DATATYPE 65 4149
LAYER MAP 348 DATATYPE 70 4150
LAYER MAP 348 DATATYPE 75 4151
LAYER MAP 348 DATATYPE 800 4152
LAYER MAP 348 DATATYPE 805 4153
LAYER MAP 348 DATATYPE 810 4154
LAYER MAP 348 DATATYPE 815 4155
LAYER MAP 348 DATATYPE 85 4156
LAYER MAP 348 DATATYPE 90 4157
LAYER MAP 348 DATATYPE 95 4158
LAYER MAP 348 DATATYPE 950 4159
LAYER MAP 348 DATATYPE 955 4160
LAYER MAP 348 DATATYPE 960 4161
LAYER MAP 348 DATATYPE 965 4162
LAYER MAP 348 DATATYPE 970 4163
LAYER MAP 348 DATATYPE 975 4164
LAYER MAP 348 DATATYPE 980 4165
LAYER MAP 348 DATATYPE 985 4166 // 
LAYER VIA0i          4167 4168 4169 4170 4171 
LAYER MAP 350 DATATYPE 151 4167
LAYER MAP 350 DATATYPE 152 4168
LAYER MAP 50 DATATYPE 150 4169
LAYER MAP 50 DATATYPE 151 4170
LAYER MAP 50 DATATYPE 152 4171 //  Via layer between metal0 and metal1
LAYER VIA1i          4172 4173 4174 4175 4176 4177 4178 4179 4180 4181 4182 4183 4184 4185 4186 4187 4188 4189 4190 4191 4192 4193 4194 4195 4196 4197 
LAYER MAP 351 DATATYPE 151 4172
LAYER MAP 351 DATATYPE 152 4173
LAYER MAP 351 DATATYPE 250 4174
LAYER MAP 351 DATATYPE 301 4175
LAYER MAP 351 DATATYPE 302 4176
LAYER MAP 351 DATATYPE 351 4177
LAYER MAP 351 DATATYPE 352 4178
LAYER MAP 351 DATATYPE 75 4179
LAYER MAP 351 DATATYPE 805 4180
LAYER MAP 351 DATATYPE 95 4181
LAYER MAP 351 DATATYPE 955 4182
LAYER MAP 351 DATATYPE 975 4183
LAYER MAP 51 DATATYPE 150 4184
LAYER MAP 51 DATATYPE 250 4185
LAYER MAP 51 DATATYPE 300 4186
LAYER MAP 51 DATATYPE 301 4187
LAYER MAP 51 DATATYPE 302 4188
LAYER MAP 51 DATATYPE 350 4189
LAYER MAP 51 DATATYPE 40 4190
LAYER MAP 51 DATATYPE 60 4191
LAYER MAP 51 DATATYPE 70 4192
LAYER MAP 51 DATATYPE 80 4193
LAYER MAP 51 DATATYPE 800 4194
LAYER MAP 51 DATATYPE 90 4195
LAYER MAP 51 DATATYPE 950 4196
LAYER MAP 51 DATATYPE 970 4197 // 
LAYER VIA2i          4198 4199 4200 4201 4202 4203 4204 4205 4206 4207 4208 4209 4210 4211 4212 4213 4214 4215 4216 4217 4218 4219 4220 4221 4222 4223 
LAYER MAP 352 DATATYPE 151 4198
LAYER MAP 352 DATATYPE 152 4199
LAYER MAP 352 DATATYPE 250 4200
LAYER MAP 352 DATATYPE 301 4201
LAYER MAP 352 DATATYPE 302 4202
LAYER MAP 352 DATATYPE 351 4203
LAYER MAP 352 DATATYPE 352 4204
LAYER MAP 352 DATATYPE 75 4205
LAYER MAP 352 DATATYPE 805 4206
LAYER MAP 352 DATATYPE 95 4207
LAYER MAP 352 DATATYPE 955 4208
LAYER MAP 352 DATATYPE 975 4209
LAYER MAP 52 DATATYPE 150 4210
LAYER MAP 52 DATATYPE 250 4211
LAYER MAP 52 DATATYPE 300 4212
LAYER MAP 52 DATATYPE 301 4213
LAYER MAP 52 DATATYPE 302 4214
LAYER MAP 52 DATATYPE 350 4215
LAYER MAP 52 DATATYPE 40 4216
LAYER MAP 52 DATATYPE 60 4217
LAYER MAP 52 DATATYPE 70 4218
LAYER MAP 52 DATATYPE 80 4219
LAYER MAP 52 DATATYPE 800 4220
LAYER MAP 52 DATATYPE 90 4221
LAYER MAP 52 DATATYPE 950 4222
LAYER MAP 52 DATATYPE 970 4223 // 
LAYER VIA3i          4224 4225 4226 4227 4228 4229 4230 4231 4232 4233 4234 4235 4236 4237 4238 4239 4240 4241 4242 4243 4244 4245 4246 4247 4248 4249 
LAYER MAP 353 DATATYPE 151 4224
LAYER MAP 353 DATATYPE 152 4225
LAYER MAP 353 DATATYPE 250 4226
LAYER MAP 353 DATATYPE 301 4227
LAYER MAP 353 DATATYPE 302 4228
LAYER MAP 353 DATATYPE 351 4229
LAYER MAP 353 DATATYPE 352 4230
LAYER MAP 353 DATATYPE 75 4231
LAYER MAP 353 DATATYPE 805 4232
LAYER MAP 353 DATATYPE 95 4233
LAYER MAP 353 DATATYPE 955 4234
LAYER MAP 353 DATATYPE 975 4235
LAYER MAP 53 DATATYPE 150 4236
LAYER MAP 53 DATATYPE 250 4237
LAYER MAP 53 DATATYPE 300 4238
LAYER MAP 53 DATATYPE 301 4239
LAYER MAP 53 DATATYPE 302 4240
LAYER MAP 53 DATATYPE 350 4241
LAYER MAP 53 DATATYPE 40 4242
LAYER MAP 53 DATATYPE 60 4243
LAYER MAP 53 DATATYPE 70 4244
LAYER MAP 53 DATATYPE 80 4245
LAYER MAP 53 DATATYPE 800 4246
LAYER MAP 53 DATATYPE 90 4247
LAYER MAP 53 DATATYPE 950 4248
LAYER MAP 53 DATATYPE 970 4249 // 
LAYER VIA4i          4250 4251 4252 4253 4254 4255 4256 4257 4258 4259 4260 4261 4262 4263 4264 4265 4266 4267 4268 4269 4270 4271 4272 4273 4274 4275 
LAYER MAP 354 DATATYPE 151 4250
LAYER MAP 354 DATATYPE 152 4251
LAYER MAP 354 DATATYPE 250 4252
LAYER MAP 354 DATATYPE 301 4253
LAYER MAP 354 DATATYPE 302 4254
LAYER MAP 354 DATATYPE 351 4255
LAYER MAP 354 DATATYPE 352 4256
LAYER MAP 354 DATATYPE 75 4257
LAYER MAP 354 DATATYPE 805 4258
LAYER MAP 354 DATATYPE 95 4259
LAYER MAP 354 DATATYPE 955 4260
LAYER MAP 354 DATATYPE 975 4261
LAYER MAP 54 DATATYPE 150 4262
LAYER MAP 54 DATATYPE 250 4263
LAYER MAP 54 DATATYPE 300 4264
LAYER MAP 54 DATATYPE 301 4265
LAYER MAP 54 DATATYPE 302 4266
LAYER MAP 54 DATATYPE 350 4267
LAYER MAP 54 DATATYPE 40 4268
LAYER MAP 54 DATATYPE 60 4269
LAYER MAP 54 DATATYPE 70 4270
LAYER MAP 54 DATATYPE 80 4271
LAYER MAP 54 DATATYPE 800 4272
LAYER MAP 54 DATATYPE 90 4273
LAYER MAP 54 DATATYPE 950 4274
LAYER MAP 54 DATATYPE 970 4275 // 
LAYER VIA5i          4276 4277 4278 4279 4280 4281 4282 4283 4284 4285 4286 4287 4288 4289 4290 4291 4292 4293 4294 4295 4296 4297 4298 4299 4300 4301 
LAYER MAP 355 DATATYPE 151 4276
LAYER MAP 355 DATATYPE 152 4277
LAYER MAP 355 DATATYPE 250 4278
LAYER MAP 355 DATATYPE 301 4279
LAYER MAP 355 DATATYPE 302 4280
LAYER MAP 355 DATATYPE 351 4281
LAYER MAP 355 DATATYPE 352 4282
LAYER MAP 355 DATATYPE 75 4283
LAYER MAP 355 DATATYPE 805 4284
LAYER MAP 355 DATATYPE 95 4285
LAYER MAP 355 DATATYPE 955 4286
LAYER MAP 355 DATATYPE 975 4287
LAYER MAP 55 DATATYPE 150 4288
LAYER MAP 55 DATATYPE 250 4289
LAYER MAP 55 DATATYPE 300 4290
LAYER MAP 55 DATATYPE 301 4291
LAYER MAP 55 DATATYPE 302 4292
LAYER MAP 55 DATATYPE 350 4293
LAYER MAP 55 DATATYPE 40 4294
LAYER MAP 55 DATATYPE 60 4295
LAYER MAP 55 DATATYPE 70 4296
LAYER MAP 55 DATATYPE 80 4297
LAYER MAP 55 DATATYPE 800 4298
LAYER MAP 55 DATATYPE 90 4299
LAYER MAP 55 DATATYPE 950 4300
LAYER MAP 55 DATATYPE 970 4301 // 
LAYER VIA6i          4302 4303 4304 4305 4306 4307 4308 4309 4310 4311 4312 4313 4314 4315 4316 4317 4318 4319 4320 4321 4322 4323 4324 4325 4326 4327 
LAYER MAP 356 DATATYPE 151 4302
LAYER MAP 356 DATATYPE 152 4303
LAYER MAP 356 DATATYPE 250 4304
LAYER MAP 356 DATATYPE 301 4305
LAYER MAP 356 DATATYPE 302 4306
LAYER MAP 356 DATATYPE 351 4307
LAYER MAP 356 DATATYPE 352 4308
LAYER MAP 356 DATATYPE 75 4309
LAYER MAP 356 DATATYPE 805 4310
LAYER MAP 356 DATATYPE 95 4311
LAYER MAP 356 DATATYPE 955 4312
LAYER MAP 356 DATATYPE 975 4313
LAYER MAP 56 DATATYPE 150 4314
LAYER MAP 56 DATATYPE 250 4315
LAYER MAP 56 DATATYPE 300 4316
LAYER MAP 56 DATATYPE 301 4317
LAYER MAP 56 DATATYPE 302 4318
LAYER MAP 56 DATATYPE 350 4319
LAYER MAP 56 DATATYPE 40 4320
LAYER MAP 56 DATATYPE 60 4321
LAYER MAP 56 DATATYPE 70 4322
LAYER MAP 56 DATATYPE 80 4323
LAYER MAP 56 DATATYPE 800 4324
LAYER MAP 56 DATATYPE 90 4325
LAYER MAP 56 DATATYPE 950 4326
LAYER MAP 56 DATATYPE 970 4327 // 
LAYER VIA7i          4328 4329 4330 4331 4332 4333 4334 4335 4336 4337 4338 4339 4340 4341 4342 4343 4344 4345 4346 4347 4348 4349 4350 4351 4352 4353 
LAYER MAP 357 DATATYPE 151 4328
LAYER MAP 357 DATATYPE 152 4329
LAYER MAP 357 DATATYPE 250 4330
LAYER MAP 357 DATATYPE 301 4331
LAYER MAP 357 DATATYPE 302 4332
LAYER MAP 357 DATATYPE 351 4333
LAYER MAP 357 DATATYPE 352 4334
LAYER MAP 357 DATATYPE 75 4335
LAYER MAP 357 DATATYPE 805 4336
LAYER MAP 357 DATATYPE 95 4337
LAYER MAP 357 DATATYPE 955 4338
LAYER MAP 357 DATATYPE 975 4339
LAYER MAP 57 DATATYPE 150 4340
LAYER MAP 57 DATATYPE 250 4341
LAYER MAP 57 DATATYPE 300 4342
LAYER MAP 57 DATATYPE 301 4343
LAYER MAP 57 DATATYPE 302 4344
LAYER MAP 57 DATATYPE 350 4345
LAYER MAP 57 DATATYPE 40 4346
LAYER MAP 57 DATATYPE 60 4347
LAYER MAP 57 DATATYPE 70 4348
LAYER MAP 57 DATATYPE 80 4349
LAYER MAP 57 DATATYPE 800 4350
LAYER MAP 57 DATATYPE 90 4351
LAYER MAP 57 DATATYPE 950 4352
LAYER MAP 57 DATATYPE 970 4353 // 
LAYER VIA8i          4354 4355 4356 4357 4358 4359 4360 4361 4362 4363 4364 4365 4366 4367 4368 4369 4370 4371 4372 4373 4374 4375 4376 4377 4378 4379 
LAYER MAP 358 DATATYPE 151 4354
LAYER MAP 358 DATATYPE 152 4355
LAYER MAP 358 DATATYPE 250 4356
LAYER MAP 358 DATATYPE 301 4357
LAYER MAP 358 DATATYPE 302 4358
LAYER MAP 358 DATATYPE 351 4359
LAYER MAP 358 DATATYPE 352 4360
LAYER MAP 358 DATATYPE 75 4361
LAYER MAP 358 DATATYPE 805 4362
LAYER MAP 358 DATATYPE 95 4363
LAYER MAP 358 DATATYPE 955 4364
LAYER MAP 358 DATATYPE 975 4365
LAYER MAP 58 DATATYPE 150 4366
LAYER MAP 58 DATATYPE 250 4367
LAYER MAP 58 DATATYPE 300 4368
LAYER MAP 58 DATATYPE 301 4369
LAYER MAP 58 DATATYPE 302 4370
LAYER MAP 58 DATATYPE 350 4371
LAYER MAP 58 DATATYPE 40 4372
LAYER MAP 58 DATATYPE 60 4373
LAYER MAP 58 DATATYPE 70 4374
LAYER MAP 58 DATATYPE 80 4375
LAYER MAP 58 DATATYPE 800 4376
LAYER MAP 58 DATATYPE 90 4377
LAYER MAP 58 DATATYPE 950 4378
LAYER MAP 58 DATATYPE 970 4379 // 
LAYER VIA9i          4380 4381 4382 4383 4384 4385 4386 4387 4388 4389 4390 4391 4392 4393 4394 4395 4396 4397 4398 4399 4400 4401 4402 4403 4404 4405 
LAYER MAP 359 DATATYPE 151 4380
LAYER MAP 359 DATATYPE 152 4381
LAYER MAP 359 DATATYPE 250 4382
LAYER MAP 359 DATATYPE 301 4383
LAYER MAP 359 DATATYPE 302 4384
LAYER MAP 359 DATATYPE 351 4385
LAYER MAP 359 DATATYPE 352 4386
LAYER MAP 359 DATATYPE 75 4387
LAYER MAP 359 DATATYPE 805 4388
LAYER MAP 359 DATATYPE 95 4389
LAYER MAP 359 DATATYPE 955 4390
LAYER MAP 359 DATATYPE 975 4391
LAYER MAP 59 DATATYPE 150 4392
LAYER MAP 59 DATATYPE 250 4393
LAYER MAP 59 DATATYPE 300 4394
LAYER MAP 59 DATATYPE 301 4395
LAYER MAP 59 DATATYPE 302 4396
LAYER MAP 59 DATATYPE 350 4397
LAYER MAP 59 DATATYPE 40 4398
LAYER MAP 59 DATATYPE 60 4399
LAYER MAP 59 DATATYPE 70 4400
LAYER MAP 59 DATATYPE 80 4401
LAYER MAP 59 DATATYPE 800 4402
LAYER MAP 59 DATATYPE 90 4403
LAYER MAP 59 DATATYPE 950 4404
LAYER MAP 59 DATATYPE 970 4405 // 
LAYER VIA10i         4406 4407 4408 4409 4410 4411 4412 4413 4414 4415 4416 4417 4418 4419 4420 4421 4422 4423 4424 4425 4426 4427 4428 4429 4430 4431 
LAYER MAP 360 DATATYPE 151 4406
LAYER MAP 360 DATATYPE 152 4407
LAYER MAP 360 DATATYPE 250 4408
LAYER MAP 360 DATATYPE 301 4409
LAYER MAP 360 DATATYPE 302 4410
LAYER MAP 360 DATATYPE 351 4411
LAYER MAP 360 DATATYPE 352 4412
LAYER MAP 360 DATATYPE 75 4413
LAYER MAP 360 DATATYPE 805 4414
LAYER MAP 360 DATATYPE 95 4415
LAYER MAP 360 DATATYPE 955 4416
LAYER MAP 360 DATATYPE 975 4417
LAYER MAP 60 DATATYPE 150 4418
LAYER MAP 60 DATATYPE 250 4419
LAYER MAP 60 DATATYPE 300 4420
LAYER MAP 60 DATATYPE 301 4421
LAYER MAP 60 DATATYPE 302 4422
LAYER MAP 60 DATATYPE 350 4423
LAYER MAP 60 DATATYPE 40 4424
LAYER MAP 60 DATATYPE 60 4425
LAYER MAP 60 DATATYPE 70 4426
LAYER MAP 60 DATATYPE 80 4427
LAYER MAP 60 DATATYPE 800 4428
LAYER MAP 60 DATATYPE 90 4429
LAYER MAP 60 DATATYPE 950 4430
LAYER MAP 60 DATATYPE 970 4431 // 
LAYER VIA11i         4432 4433 4434 4435 4436 4437 4438 4439 4440 4441 4442 4443 4444 4445 4446 4447 4448 4449 4450 4451 4452 4453 4454 4455 4456 4457 
LAYER MAP 361 DATATYPE 151 4432
LAYER MAP 361 DATATYPE 152 4433
LAYER MAP 361 DATATYPE 250 4434
LAYER MAP 361 DATATYPE 301 4435
LAYER MAP 361 DATATYPE 302 4436
LAYER MAP 361 DATATYPE 351 4437
LAYER MAP 361 DATATYPE 352 4438
LAYER MAP 361 DATATYPE 75 4439
LAYER MAP 361 DATATYPE 805 4440
LAYER MAP 361 DATATYPE 95 4441
LAYER MAP 361 DATATYPE 955 4442
LAYER MAP 361 DATATYPE 975 4443
LAYER MAP 61 DATATYPE 150 4444
LAYER MAP 61 DATATYPE 250 4445
LAYER MAP 61 DATATYPE 300 4446
LAYER MAP 61 DATATYPE 301 4447
LAYER MAP 61 DATATYPE 302 4448
LAYER MAP 61 DATATYPE 350 4449
LAYER MAP 61 DATATYPE 40 4450
LAYER MAP 61 DATATYPE 60 4451
LAYER MAP 61 DATATYPE 70 4452
LAYER MAP 61 DATATYPE 80 4453
LAYER MAP 61 DATATYPE 800 4454
LAYER MAP 61 DATATYPE 90 4455
LAYER MAP 61 DATATYPE 950 4456
LAYER MAP 61 DATATYPE 970 4457 // 
LAYER VIA12i         4458 4459 4460 4461 4462 4463 4464 4465 4466 4467 4468 4469 4470 4471 4472 4473 4474 4475 4476 4477 4478 4479 4480 4481 4482 4483 
LAYER MAP 362 DATATYPE 151 4458
LAYER MAP 362 DATATYPE 152 4459
LAYER MAP 362 DATATYPE 250 4460
LAYER MAP 362 DATATYPE 301 4461
LAYER MAP 362 DATATYPE 302 4462
LAYER MAP 362 DATATYPE 351 4463
LAYER MAP 362 DATATYPE 352 4464
LAYER MAP 362 DATATYPE 75 4465
LAYER MAP 362 DATATYPE 805 4466
LAYER MAP 362 DATATYPE 95 4467
LAYER MAP 362 DATATYPE 955 4468
LAYER MAP 362 DATATYPE 975 4469
LAYER MAP 62 DATATYPE 150 4470
LAYER MAP 62 DATATYPE 250 4471
LAYER MAP 62 DATATYPE 300 4472
LAYER MAP 62 DATATYPE 301 4473
LAYER MAP 62 DATATYPE 302 4474
LAYER MAP 62 DATATYPE 350 4475
LAYER MAP 62 DATATYPE 40 4476
LAYER MAP 62 DATATYPE 60 4477
LAYER MAP 62 DATATYPE 70 4478
LAYER MAP 62 DATATYPE 80 4479
LAYER MAP 62 DATATYPE 800 4480
LAYER MAP 62 DATATYPE 90 4481
LAYER MAP 62 DATATYPE 950 4482
LAYER MAP 62 DATATYPE 970 4483 // 
LAYER VIA13i         4484 4485 4486 4487 4488 4489 4490 4491 4492 4493 4494 4495 4496 4497 4498 4499 4500 4501 4502 4503 4504 4505 4506 4507 4508 4509 
LAYER MAP 363 DATATYPE 151 4484
LAYER MAP 363 DATATYPE 152 4485
LAYER MAP 363 DATATYPE 250 4486
LAYER MAP 363 DATATYPE 301 4487
LAYER MAP 363 DATATYPE 302 4488
LAYER MAP 363 DATATYPE 351 4489
LAYER MAP 363 DATATYPE 352 4490
LAYER MAP 363 DATATYPE 75 4491
LAYER MAP 363 DATATYPE 805 4492
LAYER MAP 363 DATATYPE 95 4493
LAYER MAP 363 DATATYPE 955 4494
LAYER MAP 363 DATATYPE 975 4495
LAYER MAP 63 DATATYPE 150 4496
LAYER MAP 63 DATATYPE 250 4497
LAYER MAP 63 DATATYPE 300 4498
LAYER MAP 63 DATATYPE 301 4499
LAYER MAP 63 DATATYPE 302 4500
LAYER MAP 63 DATATYPE 350 4501
LAYER MAP 63 DATATYPE 40 4502
LAYER MAP 63 DATATYPE 60 4503
LAYER MAP 63 DATATYPE 70 4504
LAYER MAP 63 DATATYPE 80 4505
LAYER MAP 63 DATATYPE 800 4506
LAYER MAP 63 DATATYPE 90 4507
LAYER MAP 63 DATATYPE 950 4508
LAYER MAP 63 DATATYPE 970 4509 // 
LAYER VIA14i         4510 4511 4512 4513 4514 4515 4516 4517 4518 4519 4520 4521 4522 4523 4524 4525 4526 4527 4528 4529 4530 4531 4532 4533 4534 4535 
LAYER MAP 364 DATATYPE 151 4510
LAYER MAP 364 DATATYPE 152 4511
LAYER MAP 364 DATATYPE 250 4512
LAYER MAP 364 DATATYPE 301 4513
LAYER MAP 364 DATATYPE 302 4514
LAYER MAP 364 DATATYPE 351 4515
LAYER MAP 364 DATATYPE 352 4516
LAYER MAP 364 DATATYPE 75 4517
LAYER MAP 364 DATATYPE 805 4518
LAYER MAP 364 DATATYPE 95 4519
LAYER MAP 364 DATATYPE 955 4520
LAYER MAP 364 DATATYPE 975 4521
LAYER MAP 64 DATATYPE 150 4522
LAYER MAP 64 DATATYPE 250 4523
LAYER MAP 64 DATATYPE 300 4524
LAYER MAP 64 DATATYPE 301 4525
LAYER MAP 64 DATATYPE 302 4526
LAYER MAP 64 DATATYPE 350 4527
LAYER MAP 64 DATATYPE 40 4528
LAYER MAP 64 DATATYPE 60 4529
LAYER MAP 64 DATATYPE 70 4530
LAYER MAP 64 DATATYPE 80 4531
LAYER MAP 64 DATATYPE 800 4532
LAYER MAP 64 DATATYPE 90 4533
LAYER MAP 64 DATATYPE 950 4534
LAYER MAP 64 DATATYPE 970 4535 // 
LAYER VIA15i         4536 4537 4538 4539 4540 4541 4542 4543 4544 4545 4546 4547 4548 4549 4550 4551 4552 4553 4554 4555 4556 4557 4558 4559 4560 4561 
LAYER MAP 365 DATATYPE 151 4536
LAYER MAP 365 DATATYPE 152 4537
LAYER MAP 365 DATATYPE 250 4538
LAYER MAP 365 DATATYPE 301 4539
LAYER MAP 365 DATATYPE 302 4540
LAYER MAP 365 DATATYPE 351 4541
LAYER MAP 365 DATATYPE 352 4542
LAYER MAP 365 DATATYPE 75 4543
LAYER MAP 365 DATATYPE 805 4544
LAYER MAP 365 DATATYPE 95 4545
LAYER MAP 365 DATATYPE 955 4546
LAYER MAP 365 DATATYPE 975 4547
LAYER MAP 65 DATATYPE 150 4548
LAYER MAP 65 DATATYPE 250 4549
LAYER MAP 65 DATATYPE 300 4550
LAYER MAP 65 DATATYPE 301 4551
LAYER MAP 65 DATATYPE 302 4552
LAYER MAP 65 DATATYPE 350 4553
LAYER MAP 65 DATATYPE 40 4554
LAYER MAP 65 DATATYPE 60 4555
LAYER MAP 65 DATATYPE 70 4556
LAYER MAP 65 DATATYPE 80 4557
LAYER MAP 65 DATATYPE 800 4558
LAYER MAP 65 DATATYPE 90 4559
LAYER MAP 65 DATATYPE 950 4560
LAYER MAP 65 DATATYPE 970 4561 // 
LAYER VIA16i         4562 4563 4564 4565 4566 4567 4568 4569 4570 4571 4572 4573 4574 4575 4576 4577 4578 4579 4580 4581 4582 4583 4584 4585 4586 4587 
LAYER MAP 366 DATATYPE 151 4562
LAYER MAP 366 DATATYPE 152 4563
LAYER MAP 366 DATATYPE 250 4564
LAYER MAP 366 DATATYPE 301 4565
LAYER MAP 366 DATATYPE 302 4566
LAYER MAP 366 DATATYPE 351 4567
LAYER MAP 366 DATATYPE 352 4568
LAYER MAP 366 DATATYPE 75 4569
LAYER MAP 366 DATATYPE 805 4570
LAYER MAP 366 DATATYPE 95 4571
LAYER MAP 366 DATATYPE 955 4572
LAYER MAP 366 DATATYPE 975 4573
LAYER MAP 66 DATATYPE 150 4574
LAYER MAP 66 DATATYPE 250 4575
LAYER MAP 66 DATATYPE 300 4576
LAYER MAP 66 DATATYPE 301 4577
LAYER MAP 66 DATATYPE 302 4578
LAYER MAP 66 DATATYPE 350 4579
LAYER MAP 66 DATATYPE 40 4580
LAYER MAP 66 DATATYPE 60 4581
LAYER MAP 66 DATATYPE 70 4582
LAYER MAP 66 DATATYPE 80 4583
LAYER MAP 66 DATATYPE 800 4584
LAYER MAP 66 DATATYPE 90 4585
LAYER MAP 66 DATATYPE 950 4586
LAYER MAP 66 DATATYPE 970 4587 // 
LAYER VIA17i         4588 4589 4590 4591 4592 4593 4594 4595 4596 4597 4598 4599 4600 4601 4602 4603 4604 4605 4606 4607 4608 4609 4610 4611 4612 4613 
LAYER MAP 367 DATATYPE 151 4588
LAYER MAP 367 DATATYPE 152 4589
LAYER MAP 367 DATATYPE 250 4590
LAYER MAP 367 DATATYPE 301 4591
LAYER MAP 367 DATATYPE 302 4592
LAYER MAP 367 DATATYPE 351 4593
LAYER MAP 367 DATATYPE 352 4594
LAYER MAP 367 DATATYPE 75 4595
LAYER MAP 367 DATATYPE 805 4596
LAYER MAP 367 DATATYPE 95 4597
LAYER MAP 367 DATATYPE 955 4598
LAYER MAP 367 DATATYPE 975 4599
LAYER MAP 67 DATATYPE 150 4600
LAYER MAP 67 DATATYPE 250 4601
LAYER MAP 67 DATATYPE 300 4602
LAYER MAP 67 DATATYPE 301 4603
LAYER MAP 67 DATATYPE 302 4604
LAYER MAP 67 DATATYPE 350 4605
LAYER MAP 67 DATATYPE 40 4606
LAYER MAP 67 DATATYPE 60 4607
LAYER MAP 67 DATATYPE 70 4608
LAYER MAP 67 DATATYPE 80 4609
LAYER MAP 67 DATATYPE 800 4610
LAYER MAP 67 DATATYPE 90 4611
LAYER MAP 67 DATATYPE 950 4612
LAYER MAP 67 DATATYPE 970 4613 // 
LAYER MAIN_M0        4614 
LAYER MAP 30 DATATYPE 150 4614 //  main non-color M0
LAYER MAIN_M1        4615 
LAYER MAP 31 DATATYPE 170 4615 //  main non-color M1
LAYER MAIN_M2        4616 4617 4618 4619 
LAYER MAP 32 DATATYPE 150 4616
LAYER MAP 32 DATATYPE 170 4617
LAYER MAP 32 DATATYPE 350 4618
LAYER MAP 32 DATATYPE 370 4619 //  main non-color MX,MXd
LAYER MAIN_M3        4620 4621 4622 4623 
LAYER MAP 33 DATATYPE 150 4620
LAYER MAP 33 DATATYPE 170 4621
LAYER MAP 33 DATATYPE 350 4622
LAYER MAP 33 DATATYPE 370 4623 //  main non-color MX,MXd
LAYER MAIN_M4        4624 4625 4626 4627 
LAYER MAP 34 DATATYPE 150 4624
LAYER MAP 34 DATATYPE 170 4625
LAYER MAP 34 DATATYPE 350 4626
LAYER MAP 34 DATATYPE 370 4627 //  main non-color MX,MXd
LAYER MAIN_M5        4628 4629 4630 4631 
LAYER MAP 35 DATATYPE 150 4628
LAYER MAP 35 DATATYPE 170 4629
LAYER MAP 35 DATATYPE 350 4630
LAYER MAP 35 DATATYPE 370 4631 //  main non-color MX,MXd
LAYER MAIN_M6        4632 4633 4634 4635 
LAYER MAP 36 DATATYPE 150 4632
LAYER MAP 36 DATATYPE 170 4633
LAYER MAP 36 DATATYPE 350 4634
LAYER MAP 36 DATATYPE 370 4635 //  main non-color MX,MXd
LAYER MAIN_M7        4636 4637 4638 4639 
LAYER MAP 37 DATATYPE 150 4636
LAYER MAP 37 DATATYPE 170 4637
LAYER MAP 37 DATATYPE 350 4638
LAYER MAP 37 DATATYPE 370 4639 //  main non-color MX,MXd
LAYER MAIN_M8        4640 4641 4642 4643 
LAYER MAP 38 DATATYPE 150 4640
LAYER MAP 38 DATATYPE 170 4641
LAYER MAP 38 DATATYPE 350 4642
LAYER MAP 38 DATATYPE 370 4643 //  main non-color MX,MXd
LAYER MAIN_M9        4644 4645 4646 4647 
LAYER MAP 39 DATATYPE 150 4644
LAYER MAP 39 DATATYPE 170 4645
LAYER MAP 39 DATATYPE 350 4646
LAYER MAP 39 DATATYPE 370 4647 //  main non-color MX,MXd
LAYER MAIN_M10       4648 4649 4650 4651 
LAYER MAP 40 DATATYPE 150 4648
LAYER MAP 40 DATATYPE 170 4649
LAYER MAP 40 DATATYPE 350 4650
LAYER MAP 40 DATATYPE 370 4651 //  main non-color MX,MXd
LAYER MAIN_M11       4652 4653 4654 4655 
LAYER MAP 41 DATATYPE 150 4652
LAYER MAP 41 DATATYPE 170 4653
LAYER MAP 41 DATATYPE 350 4654
LAYER MAP 41 DATATYPE 370 4655 //  main non-color MX,MXd
LAYER MAIN_M12       4656 4657 4658 4659 
LAYER MAP 42 DATATYPE 150 4656
LAYER MAP 42 DATATYPE 170 4657
LAYER MAP 42 DATATYPE 350 4658
LAYER MAP 42 DATATYPE 370 4659 //  main non-color MX,MXd
LAYER MAIN_M13       4660 4661 4662 4663 
LAYER MAP 43 DATATYPE 150 4660
LAYER MAP 43 DATATYPE 170 4661
LAYER MAP 43 DATATYPE 350 4662
LAYER MAP 43 DATATYPE 370 4663 //  main non-color MX,MXd
LAYER MAIN_M14       4664 4665 4666 4667 
LAYER MAP 44 DATATYPE 150 4664
LAYER MAP 44 DATATYPE 170 4665
LAYER MAP 44 DATATYPE 350 4666
LAYER MAP 44 DATATYPE 370 4667 //  main non-color MX,MXd
LAYER MAIN_M15       4668 4669 4670 4671 
LAYER MAP 45 DATATYPE 150 4668
LAYER MAP 45 DATATYPE 170 4669
LAYER MAP 45 DATATYPE 350 4670
LAYER MAP 45 DATATYPE 370 4671 //  main non-color MX,MXd
LAYER MAIN_M16       4672 4673 4674 4675 
LAYER MAP 46 DATATYPE 150 4672
LAYER MAP 46 DATATYPE 170 4673
LAYER MAP 46 DATATYPE 350 4674
LAYER MAP 46 DATATYPE 370 4675 //  main non-color MX,MXd
LAYER MAIN_M17       4676 4677 4678 4679 
LAYER MAP 47 DATATYPE 150 4676
LAYER MAP 47 DATATYPE 170 4677
LAYER MAP 47 DATATYPE 350 4678
LAYER MAP 47 DATATYPE 370 4679 //  main non-color MX,MXd
LAYER MAIN_M18       4680 4681 4682 4683 
LAYER MAP 48 DATATYPE 150 4680
LAYER MAP 48 DATATYPE 170 4681
LAYER MAP 48 DATATYPE 350 4682
LAYER MAP 48 DATATYPE 370 4683 //  main non-color MX,MXd
LAYER SRM            4684 
LAYER MAP 20 DATATYPE 0 4684 //  SRAM dummy layer
LAYER SRMDEVi        4685 
LAYER MAP 6 DATATYPE 11 4685 //  SRAM OD
LAYER OD_DA          4686 
LAYER MAP 6 DATATYPE 30 4686 //  OD mandrel for SRAM
LAYER SRM6           4687 
LAYER MAP 20 DATATYPE 6 4687 //  SRAM dummy layer
LAYER SRM7           4688 
LAYER MAP 20 DATATYPE 7 4688 //  SRAM dummy layer 
LAYER SRM8           4689 
LAYER MAP 20 DATATYPE 8 4689 //  SRAM dummy layer 
LAYER SRM9           4690 
LAYER MAP 20 DATATYPE 9 4690 //  SRAM dummy layer 
LAYER SRM10          4691 
LAYER MAP 20 DATATYPE 10 4691 //  SRAM dummy layer 
LAYER SRM11          4692 
LAYER MAP 20 DATATYPE 11 4692 //  SRAM dummy layer 
LAYER SRM12          4693 
LAYER MAP 20 DATATYPE 12 4693 //  SRAM dummy layer 
LAYER SRM13          4694 
LAYER MAP 20 DATATYPE 13 4694 //  SRAM dummy layer 
LAYER SRM14          4695 
LAYER MAP 20 DATATYPE 14 4695 //  SRAM dummy layer 
LAYER SRM15          4696 
LAYER MAP 20 DATATYPE 15 4696 //  SRAM dummy layer 
LAYER SRM16          4697 
LAYER MAP 20 DATATYPE 16 4697 //  SRAM dummy layer 
LAYER SRM17          4698 
LAYER MAP 20 DATATYPE 17 4698 //  SRAM dummy layer 
LAYER SRM18          4699 
LAYER MAP 20 DATATYPE 18 4699 //  SRAM dummy layer 
LAYER SRM19          4700 
LAYER MAP 20 DATATYPE 19 4700 //  SRAM dummy layer 
LAYER SRM20          4701 
LAYER MAP 20 DATATYPE 20 4701 //  SRAM dummy layer 
LAYER SRM21          4702 
LAYER MAP 20 DATATYPE 21 4702 //  SRAM dummy layer 
LAYER RODMY          4703 
LAYER MAP 20 DATATYPE 100 4703 //  Dummy layer for LVS to exclude OD area inside SRM region
LAYER SRAMDMY        4704 
LAYER MAP 186 DATATYPE 0 4704 //  SRAM dummy layer 
LAYER SRAMPG         4705 
LAYER MAP 186 DATATYPE 1 4705 //  SRAM dummy layer 
LAYER SRAMRP         4706 
LAYER MAP 186 DATATYPE 2 4706 //  SRAM dummy layer 
LAYER CO_SRAM        4707 
LAYER MAP 82 DATATYPE 12 4707 //  SRAM purpose
LAYER Cu_RDLi        4708 
LAYER MAP 73 DATATYPE 0 4708 //  Cu RDL
LAYER DCu_RDL        4709 
LAYER MAP 373 DATATYPE 0 4709 //  Dummy Cu RDL
LAYER CB             4710 
LAYER MAP 76 DATATYPE 0 4710 //  Passivation opening for Bond Pad
LAYER MDi            4711 
LAYER MAP 82 DATATYPE 150 4711 //  Interconnection layer between OD and VD 
LAYER DMD            4712 
LAYER MAP 82 DATATYPE 170 4712 //  Dummy MD 
LAYER CMDi           4713 
LAYER MAP 82 DATATYPE 250 4713 //  Cut MD
LAYER DCMD           4714 
LAYER MAP 82 DATATYPE 270 4714 //  Dummy CMD
LAYER MPi            4715 
LAYER MAP 83 DATATYPE 150 4715 //  MP interconnection layer 
LAYER Cu_RVi         4716 
LAYER MAP 85 DATATYPE 300 4716 //  VIA hole between APRDL and top metal
LAYER CB2            4717 4718 
LAYER MAP 86 DATATYPE 0 4717
LAYER MAP 86 DATATYPE 20 4718 //  Passivation-2 opening for Bond-Pad or Flip-Chip
LAYER IBJTDMY        4719 
LAYER MAP 110 DATATYPE 3 4719 //  BJT dummy layer for IO BJT devices
LAYER PSUB2          4720 
LAYER MAP 111 DATATYPE 0 4720 //  Dummy layer for isolation power domains of PW
LAYER BJTDMYi        4721 
LAYER MAP 110 DATATYPE 0 4721 //  BJT dummy layer 
LAYER BJTEDMY        4722 
LAYER MAP 110 DATATYPE 2 4722 //  BJT emit dummy layer
LAYER RMDMY0         4723 
LAYER MAP 116 DATATYPE 30 4723 //  Dummy layer to form M0 net divider
LAYER RMDMY1         4724 
LAYER MAP 116 DATATYPE 31 4724 //  Dummy layer to form M1 net divider
LAYER RMDMY2         4725 
LAYER MAP 116 DATATYPE 32 4725 //  Dummy layer to form M2 net divider
LAYER RMDMY3         4726 
LAYER MAP 116 DATATYPE 33 4726 //  Dummy layer to form M3 net divider
LAYER RMDMY4         4727 
LAYER MAP 116 DATATYPE 34 4727 //  Dummy layer to form M4 net divider
LAYER RMDMY5         4728 
LAYER MAP 116 DATATYPE 35 4728 //  Dummy layer to form M5 net divider
LAYER RMDMY6         4729 
LAYER MAP 116 DATATYPE 36 4729 //  Dummy layer to form M6 net divider
LAYER RMDMY7         4730 
LAYER MAP 116 DATATYPE 37 4730 //  Dummy layer to form M7 net divider
LAYER RMDMY8         4731 
LAYER MAP 116 DATATYPE 38 4731 //  Dummy layer to form M8 net divider
LAYER RMDMY9         4732 
LAYER MAP 116 DATATYPE 39 4732 //  Dummy layer to form M9 net divider
LAYER RMDMY10        4733 
LAYER MAP 116 DATATYPE 40 4733 //  Dummy layer to form M10 net divider
LAYER RMDMY11        4734 
LAYER MAP 116 DATATYPE 41 4734 //  Dummy layer to form M11 net divider
LAYER RMDMY12        4735 
LAYER MAP 116 DATATYPE 42 4735 //  Dummy layer to form M12 net divider
LAYER RMDMY13        4736 
LAYER MAP 116 DATATYPE 43 4736 //  Dummy layer to form M13 net divider
LAYER RMDMY14        4737 
LAYER MAP 116 DATATYPE 44 4737 //  Dummy layer to form M14 net divider
LAYER RMDMY15        4738 
LAYER MAP 116 DATATYPE 45 4738 //  Dummy layer to form M15 net divider
LAYER RMDMY16        4739 
LAYER MAP 116 DATATYPE 46 4739 //  Dummy layer to form M16 net divider
LAYER RMDMY17        4740 
LAYER MAP 116 DATATYPE 47 4740 //  Dummy layer to form M17 net divider
LAYER RMDMY18        4741 
LAYER MAP 116 DATATYPE 48 4741 //  Dummy layer to form M18 net divider
LAYER RMDMYCu        4742 
LAYER MAP 116 DATATYPE 73 4742 //  Dummy layer to form Cu net divider
LAYER RH_TNi         4743 
LAYER MAP 117 DATATYPE 6 4743 //  Layer to form HiR TiN resistor
LAYER SR_DTN         4744 
LAYER MAP 117 DATATYPE 7 4744 //  Dummy TiN
LAYER RH_TNB         4745 
LAYER MAP 117 DATATYPE 8 4745 //  HiR block
LAYER RHDMY_ALL      4746 
LAYER MAP 117 DATATYPE 9 4746 //  HiR resistor device
LAYER RH_TNE         4747 
LAYER MAP 117 DATATYPE 10 4747 //  HiR block layer
LAYER RHDMY0i        4748 
LAYER MAP 117 DATATYPE 30 4748 //  Metal 0 HiR resistor dummy layer
LAYER RHDMY1i        4749 
LAYER MAP 117 DATATYPE 31 4749 //  Metal 1 HiR resistor dummy layer
LAYER RHDMY2i        4750 
LAYER MAP 117 DATATYPE 32 4750 //  Metal 2 HiR resistor dummy layer
LAYER RHDMY3i        4751 
LAYER MAP 117 DATATYPE 33 4751 //  Metal 3 HiR resistor dummy layer
LAYER RHDMY4i        4752 
LAYER MAP 117 DATATYPE 34 4752 //  Metal 4 HiR resistor dummy layer
LAYER RHDMY5i        4753 
LAYER MAP 117 DATATYPE 35 4753 //  Metal 5 HiR resistor dummy layer
LAYER RHDMY6i        4754 
LAYER MAP 117 DATATYPE 36 4754 //  Metal 6 HiR resistor dummy layer
LAYER RHDMY7i        4755 
LAYER MAP 117 DATATYPE 37 4755 //  Metal 7 HiR resistor dummy layer
LAYER RHDMY8i        4756 
LAYER MAP 117 DATATYPE 38 4756 //  Metal 8 HiR resistor dummy layer
LAYER RHDMY9i        4757 
LAYER MAP 117 DATATYPE 39 4757 //  Metal 9 HiR resistor dummy layer
LAYER RHDMY10i       4758 
LAYER MAP 117 DATATYPE 40 4758 //  Metal 10 HiR resistor dummy layer
LAYER RHDMY11i       4759 
LAYER MAP 117 DATATYPE 41 4759 //  Metal 11 HiR resistor dummy layer
LAYER RHDMY12i       4760 
LAYER MAP 117 DATATYPE 42 4760 //  Metal 12 HiR resistor dummy layer
LAYER RHDMY13i       4761 
LAYER MAP 117 DATATYPE 43 4761 //  Metal 13 HiR resistor dummy layer
LAYER RHDMY14i       4762 
LAYER MAP 117 DATATYPE 44 4762 //  Metal 14 HiR resistor dummy layer
LAYER RHDMY15i       4763 
LAYER MAP 117 DATATYPE 45 4763 //  Metal 15 HiR resistor dummy layer
LAYER RHDMY16i       4764 
LAYER MAP 117 DATATYPE 46 4764 //  Metal 16 HiR resistor dummy layer
LAYER RHDMY17i       4765 
LAYER MAP 117 DATATYPE 47 4765 //  Metal 17 HiR resistor dummy layer
LAYER RHDMY18i       4766 
LAYER MAP 117 DATATYPE 48 4766 //  Metal 18 HiR resistor dummy layer
LAYER DIODMYi        4767 
LAYER MAP 119 DATATYPE 0 4767 //  Diode dummy layer 
LAYER SR_ESD         4768 
LAYER MAP 121 DATATYPE 0 4768 //  Used for ESD HIA MOS devices
LAYER SDI            4769 
LAYER MAP 122 DATATYPE 0 4769 //  Used for ESD HIA MOS devices
LAYER SDI_2          4770 
LAYER MAP 122 DATATYPE 2 4770 //  Used for ESD HIA MOS devices and covered on drain terminal
LAYER VARi           4771 
LAYER MAP 143 DATATYPE 0 4771 //  Varactor dummy layer
LAYER RTMOMDMY       4772 
LAYER MAP 155 DATATYPE 0 4772 //  Dummy layer for RT MOM devices
LAYER MOMDMY0        4773 
LAYER MAP 155 DATATYPE 30 4773 //  Dummy layer for MOM device M0
LAYER MOMDMY1        4774 
LAYER MAP 155 DATATYPE 31 4774 //  Dummy layer for MOM device M1
LAYER MOMDMY2        4775 
LAYER MAP 155 DATATYPE 32 4775 //  Dummy layer for MOM device M2
LAYER MOMDMY3        4776 
LAYER MAP 155 DATATYPE 33 4776 //  Dummy layer for MOM device M3
LAYER MOMDMY4        4777 
LAYER MAP 155 DATATYPE 34 4777 //  Dummy layer for MOM device M4
LAYER MOMDMY5        4778 
LAYER MAP 155 DATATYPE 35 4778 //  Dummy layer for MOM device M5
LAYER MOMDMY6        4779 
LAYER MAP 155 DATATYPE 36 4779 //  Dummy layer for MOM device M6
LAYER MOMDMY7        4780 
LAYER MAP 155 DATATYPE 37 4780 //  Dummy layer for MOM device M7
LAYER MOMDMY8        4781 
LAYER MAP 155 DATATYPE 38 4781 //  Dummy layer for MOM device M8
LAYER MOMDMY9        4782 
LAYER MAP 155 DATATYPE 39 4782 //  Dummy layer for MOM device M9
LAYER MOMDMY10       4783 
LAYER MAP 155 DATATYPE 40 4783 //  Dummy layer for MOM device M10
LAYER MOMDMY11       4784 
LAYER MAP 155 DATATYPE 41 4784 //  Dummy layer for MOM device M11
LAYER MOMDMY12       4785 
LAYER MAP 155 DATATYPE 42 4785 //  Dummy layer for MOM device M12
LAYER MOMDMY13       4786 
LAYER MAP 155 DATATYPE 43 4786 //  Dummy layer for MOM device M13
LAYER MOMDMY14       4787 
LAYER MAP 155 DATATYPE 44 4787 //  Dummy layer for MOM device M14
LAYER MOMDMY15       4788 
LAYER MAP 155 DATATYPE 45 4788 //  Dummy layer for MOM device M15
LAYER MOMDMY16       4789 
LAYER MAP 155 DATATYPE 46 4789 //  Dummy layer for MOM device M16
LAYER MOMDMY17       4790 
LAYER MAP 155 DATATYPE 47 4790 //  Dummy layer for MOM device M17
LAYER MOMDMY18       4791 
LAYER MAP 155 DATATYPE 48 4791 //  Dummy layer for MOM device M18
LAYER MOMDMY_VAP     4792 
LAYER MAP 155 DATATYPE 1 4792 //  Dummy layer for vapmod
LAYER MOMDMY_MXC     4793 
LAYER MAP 155 DATATYPE 2 4793 //  Dummy layer for n_mxc
LAYER MOMDMY_NH      4794 
LAYER MAP 155 DATATYPE 3 4794 //  Dummy layer for nh
LAYER MOMDMY_NV      4795 
LAYER MAP 155 DATATYPE 4 4795 //  Dummy layer for nv
LAYER MOMDMY_2T      4796 
LAYER MAP 155 DATATYPE 5 4796 //  Dummy layer for MOM wo shield (2T)
LAYER MOMDMY_MX      4797 
LAYER MAP 155 DATATYPE 6 4797 //  Dummy layer for MX MOM device
LAYER MOMDMY_MXP1    4798 
LAYER MAP 155 DATATYPE 7 4798 //  Dummy layer for MX plus1
LAYER MOMDMY_MXP2    4799 
LAYER MAP 155 DATATYPE 8 4799 //  Dummy layer for MX plus2
LAYER MOMDMY_MXP12   4800 
LAYER MAP 155 DATATYPE 9 4800 //  Dummy layer for MX MOM plus1 & plus2
LAYER MOMDMY_NWi     4801 
LAYER MAP 155 DATATYPE 11 4801 //  Dummy layer for MOM wi NW shield
LAYER MOMDMY_PWi     4802 
LAYER MAP 155 DATATYPE 12 4802 //  Dummy layer for MOM wi PW shield
LAYER MOMDMY_NTNi    4803 
LAYER MAP 155 DATATYPE 13 4803 //  Dummy layer for MOM wi NTN shield
LAYER MOMDMY_MINUS   4804 
LAYER MAP 155 DATATYPE 14 4804 //  Dummy layer for MOM MINUS
LAYER MOMDMY_PLUS    4805 
LAYER MAP 155 DATATYPE 15 4805 //  Dummy layer for MOM PLUS
LAYER MOMDMY_ARY     4806 
LAYER MAP 155 DATATYPE 16 4806 //  Dummy layer for array MOM recognition
LAYER MOMDMY_ARYX    4807 
LAYER MAP 155 DATATYPE 17 4807 //  Dummy layer for X array number recognition
LAYER MOMDMY_ARYY    4808 
LAYER MAP 155 DATATYPE 18 4808 //  Dummy layer for Y array number recognition
LAYER MOMDMY_TSHD    4809 
LAYER MAP 155 DATATYPE 19 4809 //  Dummy layer for top shielding MOM recognition
LAYER METALFUSE      4810 
LAYER MAP 156 DATATYPE 2 4810 //  eFuse dummy layer
LAYER MFUSE          4811 
LAYER MAP 156 DATATYPE 3 4811 //  Metal fuse recognition
LAYER RFDMYi         4812 
LAYER MAP 161 DATATYPE 0 4812 //  For RF Device using only 
LAYER SEALRING_ALL   4813 
LAYER MAP 162 DATATYPE 2 4813 //  DRC recognition layer for the general seal ring region
LAYER TCDDMY         4814 
LAYER MAP 165 DATATYPE 1 4814 //  Dummy layer to cover CDU pattern for TCD purpose
LAYER ICOVL          4815 
LAYER MAP 165 DATATYPE 320 4815 //  Dummy layer for ICOVL purpose
LAYER HIA_DUMMY      4816 
LAYER MAP 168 DATATYPE 0 4816 //  Dummy layer for ESD HIA diode devices
LAYER CBD            4817 
LAYER MAP 169 DATATYPE 0 4817 //  Passivation window solder bump and ALRDL
LAYER VDi            4818 
LAYER MAP 179 DATATYPE 150 4818 //  Via between MD and M0
LAYER VGi            4819 
LAYER MAP 178 DATATYPE 150 4819 //  Via between MG and M0
LAYER VD2i           4820 
LAYER MAP 179 DATATYPE 151 4820 //  Via between MD and M0 (VD Rail)
LAYER PODE_GATEi     4821 
LAYER MAP 206 DATATYPE 28 4821 //  To define GATE abutting OD vertical edge for LVS recognize MOS, diode and turn-off transistor
LAYER PODE_TrGATE    4822 
LAYER MAP 206 DATATYPE 29 4822 //  To define the transistor (with S/D area) which gate abut PODE_GATE
LAYER CPODEi         4823 
LAYER MAP 206 DATATYPE 150 4823 //  CPODE region
LAYER DCPODE         4824 
LAYER MAP 206 DATATYPE 170 4824 //  Dummy CPODE
LAYER LVSDMY4        4825 
LAYER MAP 208 DATATYPE 4 4825 //  Dummy layer to define NMOS devices in DNW region
LAYER RFMOMDMY_2T    4826 
LAYER MAP 208 DATATYPE 21 4826 //  Dummy layer RF MOM that allows other devices be put underneath it 
LAYER FB1            4827 
LAYER MAP 250 DATATYPE 1 4827 //  finboundary 1
LAYER FB2            4828 
LAYER MAP 250 DATATYPE 2 4828 //  finboundary 2 for IO
LAYER FB6            4829 
LAYER MAP 250 DATATYPE 6 4829 //  finboundary 6
LAYER FB8            4830 
LAYER MAP 250 DATATYPE 8 4830 //  finboundary 8
LAYER FB9            4831 
LAYER MAP 250 DATATYPE 9 4831 //  finboundary 9
LAYER FB11           4832 
LAYER MAP 250 DATATYPE 11 4832 //  finboundary 11
LAYER FB16           4833 
LAYER MAP 250 DATATYPE 16 4833 //  finboundary 16
LAYER FB18           4834 
LAYER MAP 250 DATATYPE 18 4834 //  finboundary 18
LAYER FB_A           4835 
LAYER MAP 250 DATATYPE 50 4835 //  Std-cell A
LAYER FB_B           4836 
LAYER MAP 250 DATATYPE 51 4836 //  Std-cell B
LAYER FB_C           4837 
LAYER MAP 250 DATATYPE 52 4837 //  Std-cell C
LAYER LUPVTWDMY      4838 
LAYER MAP 255 DATATYPE 93 4838 // 
LAYER ANARRAY_HS     4839 
LAYER MAP 255 DATATYPE 23 4839 //  Dummy layer to define high-matching region for sensitive analog MOS
LAYER DC1            4840 
LAYER MAP 257 DATATYPE 11 4840 //  Dummy Cell
LAYER DC_WINP        4841 4842 
LAYER MAP 257 DATATYPE 61 4841
LAYER MAP 257 DATATYPE 62 4842 //  Dummy Cell 
LAYER DC_WONP        4843 4844 4845 4846 4847 4848 4849 4850 
LAYER MAP 257 DATATYPE 153 4843
LAYER MAP 257 DATATYPE 21 4844
LAYER MAP 257 DATATYPE 22 4845
LAYER MAP 257 DATATYPE 25 4846
LAYER MAP 257 DATATYPE 42 4847
LAYER MAP 257 DATATYPE 44 4848
LAYER MAP 257 DATATYPE 51 4849
LAYER MAP 257 DATATYPE 52 4850 //  Dummy Cell 
LAYER TPCDMY_Cu      4851 
LAYER MAP 148 DATATYPE 73 4851 //  DRC/LVS dummy layer for Cu 3-plates MiM region
LAYER TPCDMY_AP      4852 
LAYER MAP 148 DATATYPE 74 4852 //  DRC/LVS dummy layer for AP 3-plates MiM region
LAYER TPCi           4853 
LAYER MAP 260 DATATYPE 0 4853 //  MiM capacitor top plate for 3-plates MiM process
LAYER TPC_O          4854 
LAYER MAP 260 DATATYPE 1 4854 //  TPC opening region for 3-plates MIM use
LAYER TPCDMY         4855 
LAYER MAP 260 DATATYPE 4 4855 //  TPC Dummy for 3-plates MIM use
LAYER MPCi           4856 
LAYER MAP 261 DATATYPE 0 4856 //  MiM capacitor middle plate for 3-plates MiM process
LAYER MPC_O          4857 
LAYER MAP 261 DATATYPE 1 4857 //  MPC opening region for 3-plates MIM use
LAYER MPCDMY         4858 
LAYER MAP 261 DATATYPE 4 4858 //  MPC Dummy for 3-plates MIM use
LAYER BPCi           4859 
LAYER MAP 262 DATATYPE 0 4859 //  MiM capacitor bottom plate for 3-plates MiM process
LAYER BPC_O          4860 
LAYER MAP 262 DATATYPE 1 4860 //  BPC opening region for 3-plates MIM use
LAYER BPCDMY         4861 
LAYER MAP 262 DATATYPE 4 4861 //  BPC Dummy for 3-plates MIM use
LAYER PMIM_1         4862 
LAYER MAP 148 DATATYPE 81 4862 //  SHPMIM client region
LAYER PMIM_2         4863 
LAYER MAP 148 DATATYPE 82 4863 //  SHPMIM server region
LAYER PMIM_2_1       4864 
LAYER MAP 148 DATATYPE 83 4864 //  SHPMIM server HV region
LAYER BPC_LVi        4865 
LAYER MAP 263 DATATYPE 0 4865 //  BPC_LV for SHPMIM
LAYER BPC_HV1i       4866 
LAYER MAP 263 DATATYPE 11 4866 //  BPC_HV1 for SHPMIM
LAYER BPC_HV2i       4867 
LAYER MAP 263 DATATYPE 12 4867 //  BPC_HV2 for SHPMIM
LAYER BPC_HV2_O      4868 
LAYER MAP 263 DATATYPE 13 4868 //  BPC_HV2 opening
LAYER BPC_HV1_O      4869 
LAYER MAP 263 DATATYPE 14 4869 //  BPC_HV1 opening
LAYER BPC_LV_O       4870 
LAYER MAP 263 DATATYPE 1 4870 //  BPC_LV opening
LAYER BPC_LVHV_DMY   4871 
LAYER MAP 263 DATATYPE 4 4871 //  BPC_LV/BPC_HV1/BPC_HV2 dummy layer
LAYER BPC_GNDi       4872 
LAYER MAP 264 DATATYPE 0 4872 //  BPC_GND for SHPMIM
LAYER BPC_GND_O      4873 
LAYER MAP 264 DATATYPE 1 4873 //  BPC_GND opening
LAYER BPC_GND_DMY    4874 
LAYER MAP 264 DATATYPE 4 4874 //  BPC_GND dummy layer
LAYER MPC_LVi        4875 
LAYER MAP 265 DATATYPE 0 4875 //  MPC_LV for SHPMIM
LAYER MPC_LV_O       4876 
LAYER MAP 265 DATATYPE 1 4876 //  MPC_LV opening
LAYER MPC_LV_DMY     4877 
LAYER MAP 265 DATATYPE 4 4877 //  MPC_LV dummy layer
LAYER TPC_GNDi       4878 
LAYER MAP 266 DATATYPE 0 4878 //  TPC_GND for SHPMIM
LAYER TPC_GND_O      4879 
LAYER MAP 266 DATATYPE 1 4879 //  TPC_GND opening
LAYER TPC_GND_DMY    4880 
LAYER MAP 266 DATATYPE 4 4880 //  TPC_GND dummy layer
LAYER DUT            4881 
LAYER MAP 206 DATATYPE 200 4881 //  STD DUT dummy layer
LAYER DUT_ROW_ID_TEXT      4882
LAYER MAP 206 TEXTTYPE 201 4882
LAYER Cu_RDL_text    4883
LAYER MAP 202 TEXTTYPE 73 4883
TEXT LAYER 4883 ATTACH 4883 Cu_RDL
PORT LAYER TEXT 4883
LAYER M0_text        4884 
LAYER MAP 202 TEXTTYPE 30 4884
PORT LAYER TEXT 4884
TEXT LAYER 4884 ATTACH 4884 M0_A
TEXT LAYER 4884 ATTACH 4884 M0_B
LAYER M10_text       4885 
LAYER MAP 202 TEXTTYPE 40 4885
PORT LAYER TEXT 4885
TEXT LAYER 4885 ATTACH 4885 M10
LAYER M11_text       4886 
LAYER MAP 202 TEXTTYPE 41 4886
PORT LAYER TEXT 4886
TEXT LAYER 4886 ATTACH 4886 M11
LAYER M12_text       4887 
LAYER MAP 202 TEXTTYPE 42 4887
PORT LAYER TEXT 4887
TEXT LAYER 4887 ATTACH 4887 M12
LAYER M13_text       4888 
LAYER MAP 202 TEXTTYPE 43 4888
PORT LAYER TEXT 4888
TEXT LAYER 4888 ATTACH 4888 M13
LAYER M14_text       4889 
LAYER MAP 202 TEXTTYPE 44 4889
PORT LAYER TEXT 4889
TEXT LAYER 4889 ATTACH 4889 M14
LAYER M15_text       4890 
LAYER MAP 202 TEXTTYPE 45 4890
PORT LAYER TEXT 4890
TEXT LAYER 4890 ATTACH 4890 M15
LAYER M16_text       4891 
LAYER MAP 202 TEXTTYPE 46 4891
PORT LAYER TEXT 4891
TEXT LAYER 4891 ATTACH 4891 M16
LAYER M17_text       4892 
LAYER MAP 202 TEXTTYPE 47 4892
PORT LAYER TEXT 4892
TEXT LAYER 4892 ATTACH 4892 M17
LAYER M18_text       4893 
LAYER MAP 202 TEXTTYPE 48 4893
PORT LAYER TEXT 4893
TEXT LAYER 4893 ATTACH 4893 M18
LAYER M1_text        4894 
LAYER MAP 202 TEXTTYPE 31 4894
PORT LAYER TEXT 4894
TEXT LAYER 4894 ATTACH 4894 M1_A
TEXT LAYER 4894 ATTACH 4894 M1_B
LAYER M2_text        4895 
LAYER MAP 202 TEXTTYPE 32 4895
PORT LAYER TEXT 4895
TEXT LAYER 4895 ATTACH 4895 M2_A
TEXT LAYER 4895 ATTACH 4895 M2_B
LAYER M3_text        4896 
LAYER MAP 202 TEXTTYPE 33 4896
PORT LAYER TEXT 4896
TEXT LAYER 4896 ATTACH 4896 M3
LAYER M4_text        4897 
LAYER MAP 202 TEXTTYPE 34 4897
PORT LAYER TEXT 4897
TEXT LAYER 4897 ATTACH 4897 M4
LAYER M5_text        4898 
LAYER MAP 202 TEXTTYPE 35 4898
PORT LAYER TEXT 4898
TEXT LAYER 4898 ATTACH 4898 M5_A
TEXT LAYER 4898 ATTACH 4898 M5_B
LAYER M6_text        4899 
LAYER MAP 202 TEXTTYPE 36 4899
PORT LAYER TEXT 4899
TEXT LAYER 4899 ATTACH 4899 M6
LAYER M7_text        4900 
LAYER MAP 202 TEXTTYPE 37 4900
PORT LAYER TEXT 4900
TEXT LAYER 4900 ATTACH 4900 M7
LAYER M8_text        4901 
LAYER MAP 202 TEXTTYPE 38 4901
PORT LAYER TEXT 4901
TEXT LAYER 4901 ATTACH 4901 M8
LAYER M9_text        4902 
LAYER MAP 202 TEXTTYPE 39 4902
PORT LAYER TEXT 4902
TEXT LAYER 4902 ATTACH 4902 M9
LAYER MD_text        4903 
LAYER MAP 202 TEXTTYPE 82 4903
PORT LAYER TEXT 4903
TEXT LAYER 4903 ATTACH 4903 MD_OD_N
TEXT LAYER 4903 ATTACH 4903 MD_OD_P
TEXT LAYER 4903 ATTACH 4903 MD_STI
TEXT LAYER 4903 ATTACH 4903 MD_OD_N_SRM
TEXT LAYER 4903 ATTACH 4903 MD_OD_P_SRM
TEXT LAYER 4903 ATTACH 4903 MD_STI_SRM
LAYER poly_text      4904 
LAYER MAP 202 TEXTTYPE 17 4904
PORT LAYER TEXT 4904
TEXT LAYER 4904 ATTACH 4904 n_fpoly_svt
TEXT LAYER 4904 ATTACH 4904 n_fpoly_lvt
TEXT LAYER 4904 ATTACH 4904 n_fpoly_ulvt
TEXT LAYER 4904 ATTACH 4904 n_fpoly_elvt
TEXT LAYER 4904 ATTACH 4904 n_fpoly_lvtll
TEXT LAYER 4904 ATTACH 4904 n_fpoly_ulvtll
TEXT LAYER 4904 ATTACH 4904 n_fpoly_io
TEXT LAYER 4904 ATTACH 4904 n_fpoly_srm
TEXT LAYER 4904 ATTACH 4904 p_fpoly_svt
TEXT LAYER 4904 ATTACH 4904 p_fpoly_lvt
TEXT LAYER 4904 ATTACH 4904 p_fpoly_ulvt
TEXT LAYER 4904 ATTACH 4904 p_fpoly_elvt
TEXT LAYER 4904 ATTACH 4904 p_fpoly_lvtll
TEXT LAYER 4904 ATTACH 4904 p_fpoly_ulvtll
TEXT LAYER 4904 ATTACH 4904 p_fpoly_io
TEXT LAYER 4904 ATTACH 4904 p_fpoly_srm
#IFDEF WELL_TEXT
LAYER nxwell_text    4905
LAYER MAP 202 TEXTTYPE 3 4905
TEXT LAYER 4905 ATTACH 4905 nxwell
PORT LAYER TEXT 4905
#ENDIF
#IFDEF WELL_TEXT
LAYER psub_text      4906
LAYER MAP 202 TEXTTYPE 2 4906
TEXT LAYER 4906 ATTACH 4906 psub
PORT LAYER TEXT 4906
#ENDIF
LAYER TCu_RDL_text   4907
LAYER MAP 127 TEXTTYPE 73 4907
TEXT LAYER 4907 ATTACH 4907 Cu_RDL
LAYER TM0_text       4908 
LAYER MAP 127 TEXTTYPE 30 4908
TEXT LAYER 4908 ATTACH 4908 M0_A
TEXT LAYER 4908 ATTACH 4908 M0_B
LAYER TM10_text      4909 
LAYER MAP 127 TEXTTYPE 40 4909
TEXT LAYER 4909 ATTACH 4909 M10
LAYER TM11_text      4910 
LAYER MAP 127 TEXTTYPE 41 4910
TEXT LAYER 4910 ATTACH 4910 M11
LAYER TM12_text      4911 
LAYER MAP 127 TEXTTYPE 42 4911
TEXT LAYER 4911 ATTACH 4911 M12
LAYER TM13_text      4912 
LAYER MAP 127 TEXTTYPE 43 4912
TEXT LAYER 4912 ATTACH 4912 M13
LAYER TM14_text      4913 
LAYER MAP 127 TEXTTYPE 44 4913
TEXT LAYER 4913 ATTACH 4913 M14
LAYER TM15_text      4914 
LAYER MAP 127 TEXTTYPE 45 4914
TEXT LAYER 4914 ATTACH 4914 M15
LAYER TM16_text      4915 
LAYER MAP 127 TEXTTYPE 46 4915
TEXT LAYER 4915 ATTACH 4915 M16
LAYER TM17_text      4916 
LAYER MAP 127 TEXTTYPE 47 4916
TEXT LAYER 4916 ATTACH 4916 M17
LAYER TM18_text      4917 
LAYER MAP 127 TEXTTYPE 48 4917
TEXT LAYER 4917 ATTACH 4917 M18
LAYER TM1_text       4918 
LAYER MAP 127 TEXTTYPE 31 4918
TEXT LAYER 4918 ATTACH 4918 M1_A
TEXT LAYER 4918 ATTACH 4918 M1_B
LAYER TM2_text       4919 
LAYER MAP 127 TEXTTYPE 32 4919
TEXT LAYER 4919 ATTACH 4919 M2_A
TEXT LAYER 4919 ATTACH 4919 M2_B
LAYER TM3_text       4920 
LAYER MAP 127 TEXTTYPE 33 4920
TEXT LAYER 4920 ATTACH 4920 M3
LAYER TM4_text       4921 
LAYER MAP 127 TEXTTYPE 34 4921
TEXT LAYER 4921 ATTACH 4921 M4
LAYER TM5_text       4922 
LAYER MAP 127 TEXTTYPE 35 4922
TEXT LAYER 4922 ATTACH 4922 M5_A
TEXT LAYER 4922 ATTACH 4922 M5_B
LAYER TM6_text       4923 
LAYER MAP 127 TEXTTYPE 36 4923
TEXT LAYER 4923 ATTACH 4923 M6
LAYER TM7_text       4924 
LAYER MAP 127 TEXTTYPE 37 4924
TEXT LAYER 4924 ATTACH 4924 M7
LAYER TM8_text       4925 
LAYER MAP 127 TEXTTYPE 38 4925
TEXT LAYER 4925 ATTACH 4925 M8
LAYER TM9_text       4926 
LAYER MAP 127 TEXTTYPE 39 4926
TEXT LAYER 4926 ATTACH 4926 M9
LAYER TMD_text       4927 
LAYER MAP 127 TEXTTYPE 82 4927
TEXT LAYER 4927 ATTACH 4927 MD_OD_N
TEXT LAYER 4927 ATTACH 4927 MD_OD_P
TEXT LAYER 4927 ATTACH 4927 MD_STI
TEXT LAYER 4927 ATTACH 4927 MD_OD_N_SRM
TEXT LAYER 4927 ATTACH 4927 MD_OD_P_SRM
TEXT LAYER 4927 ATTACH 4927 MD_STI_SRM
LAYER Tpoly_text     4928 
LAYER MAP 127 TEXTTYPE 17 4928
TEXT LAYER 4928 ATTACH 4928 n_fpoly_svt
TEXT LAYER 4928 ATTACH 4928 n_fpoly_lvt
TEXT LAYER 4928 ATTACH 4928 n_fpoly_ulvt
TEXT LAYER 4928 ATTACH 4928 n_fpoly_elvt
TEXT LAYER 4928 ATTACH 4928 n_fpoly_lvtll
TEXT LAYER 4928 ATTACH 4928 n_fpoly_ulvtll
TEXT LAYER 4928 ATTACH 4928 n_fpoly_io
TEXT LAYER 4928 ATTACH 4928 n_fpoly_srm
TEXT LAYER 4928 ATTACH 4928 p_fpoly_svt
TEXT LAYER 4928 ATTACH 4928 p_fpoly_lvt
TEXT LAYER 4928 ATTACH 4928 p_fpoly_ulvt
TEXT LAYER 4928 ATTACH 4928 p_fpoly_elvt
TEXT LAYER 4928 ATTACH 4928 p_fpoly_lvtll
TEXT LAYER 4928 ATTACH 4928 p_fpoly_ulvtll
TEXT LAYER 4928 ATTACH 4928 p_fpoly_io
TEXT LAYER 4928 ATTACH 4928 p_fpoly_srm
//#############################################
//# LOGIC OPERATION POOL                      #
//#############################################

//Form BULK layer
DRC:1 = EXTENT
BULK  = SIZE DRC:1 BY 0.005

//***** Define connectivity/via layer -- nch_svt_mac_gate ****

//* Define layer -- ngate_hia12_mac
ngate_hia12_mac_tmp01 = ngate_hia_reg NOT DNW
ngate_hia12_mac_tmp02 = ngate_hia12_mac_tmp01 AND ODI
ngate_hia12_mac_tmp03 = ngate_hia12_mac_tmp02 NOT NW
ngate_hia12_mac_tmp04 = ngate_hia12_mac_tmp03 NOT NT_N
ngate_hia12_mac_tmp05 = ngate_hia12_mac_tmp04 AND OD12
ngate_hia12_mac_tmp06 = ngate_hia12_mac_tmp05 AND POI
ngate_hia12_mac_tmp07 = ngate_hia12_mac_tmp06 NOT VTEL_Ni
ngate_hia12_mac_tmp08 = ngate_hia12_mac_tmp07 NOT VTEL_Pi
ngate_hia12_mac_tmp09 = ngate_hia12_mac_tmp08 NOT VTUL_Ni
ngate_hia12_mac_tmp10 = ngate_hia12_mac_tmp09 NOT VTUL_Pi
ngate_hia12_mac_tmp11 = ngate_hia12_mac_tmp10 NOT VTL_Ni
ngate_hia12_mac_tmp12 = ngate_hia12_mac_tmp11 NOT VTL_Pi
ngate_hia12_mac_tmp13 = ngate_hia12_mac_tmp12 NOT VTS_Ni
ngate_hia12_mac_tmp14 = ngate_hia12_mac_tmp13 NOT VTS_Pi
ngate_hia12_mac_tmp15 = ngate_hia12_mac_tmp14 NOT VTUL_NLLi
ngate_hia12_mac_tmp16 = ngate_hia12_mac_tmp15 NOT VTUL_PLLi
ngate_hia12_mac_tmp17 = ngate_hia12_mac_tmp16 NOT VTL_NLLi
ngate_hia12_mac_tmp18 = ngate_hia12_mac_tmp17 NOT VTL_PLLi
ngate_hia12_mac_tmp19 = ngate_hia12_mac_tmp18 AND NPi
ngate_hia12_mac_tmp20 = ngate_hia12_mac_tmp19 NOT PPi
ngate_hia12_mac_tmp21 = ngate_hia12_mac_tmp20 NOT PO_P81_WPO
ngate_hia12_mac_tmp22 = ngate_hia12_mac_tmp21 NOT VARi
ngate_hia12_mac_tmp23 = ngate_hia12_mac_tmp22 NOT IBJTDMY
ngate_hia12_mac_tmp24 = ngate_hia12_mac_tmp23 NOT DIODMYi
ngate_hia12_mac_tmp25 = ngate_hia12_mac_tmp24 AND SR_ESD
ngate_hia12_mac_tmp26 = ngate_hia12_mac_tmp25 AND SDI
ngate_hia12_mac = ngate_hia12_mac_tmp26 NOT HIA_DUMMY


//* Define layer -- nch_svt_mac_gate
nch_svt_mac_gate_tmp01 = tngate3a NOT dnwdmy
nch_svt_mac_gate_tmp02 = nch_svt_mac_gate_tmp01 AND ODI
nch_svt_mac_gate_tmp03 = nch_svt_mac_gate_tmp02 NOT NW
nch_svt_mac_gate_tmp04 = nch_svt_mac_gate_tmp03 NOT NT_N
nch_svt_mac_gate_tmp05 = nch_svt_mac_gate_tmp04 NOT OD12
nch_svt_mac_gate_tmp06 = nch_svt_mac_gate_tmp05 AND POI
nch_svt_mac_gate_tmp07 = nch_svt_mac_gate_tmp06 NOT VTEL_Ni
nch_svt_mac_gate_tmp08 = nch_svt_mac_gate_tmp07 NOT VTEL_Pi
nch_svt_mac_gate_tmp09 = nch_svt_mac_gate_tmp08 NOT VTUL_Ni
nch_svt_mac_gate_tmp10 = nch_svt_mac_gate_tmp09 NOT VTUL_Pi
nch_svt_mac_gate_tmp11 = nch_svt_mac_gate_tmp10 NOT VTL_Ni
nch_svt_mac_gate_tmp12 = nch_svt_mac_gate_tmp11 NOT VTL_Pi
nch_svt_mac_gate_tmp13 = nch_svt_mac_gate_tmp12 AND VTS_Ni
nch_svt_mac_gate_tmp14 = nch_svt_mac_gate_tmp13 NOT VTS_Pi
nch_svt_mac_gate_tmp15 = nch_svt_mac_gate_tmp14 NOT VTUL_NLLi
nch_svt_mac_gate_tmp16 = nch_svt_mac_gate_tmp15 NOT VTUL_PLLi
nch_svt_mac_gate_tmp17 = nch_svt_mac_gate_tmp16 NOT VTL_NLLi
nch_svt_mac_gate_tmp18 = nch_svt_mac_gate_tmp17 NOT VTL_PLLi
nch_svt_mac_gate_tmp19 = nch_svt_mac_gate_tmp18 AND NPi
nch_svt_mac_gate_tmp20 = nch_svt_mac_gate_tmp19 NOT PPi
nch_svt_mac_gate_tmp21 = nch_svt_mac_gate_tmp20 NOT PO_P81_WPO
nch_svt_mac_gate_tmp22 = nch_svt_mac_gate_tmp21 NOT VARi
nch_svt_mac_gate_tmp23 = nch_svt_mac_gate_tmp22 NOT IBJTDMY
nch_svt_mac_gate_tmp24 = nch_svt_mac_gate_tmp23 NOT DIODMYi
nch_svt_mac_gate_tmp25 = nch_svt_mac_gate_tmp24 NOT SR_ESD
nch_svt_mac_gate_tmp26 = nch_svt_mac_gate_tmp25 NOT HIA_DUMMY
nch_svt_mac_gate = nch_svt_mac_gate_tmp26 NOT SDI_2


//***** Define connectivity/via layer -- psub ****
ppsub = BULK NOT NW 
sr_dod_s = SIZE SR_DOD BY 0.002 
psub2_ring_1 = SIZE PSUB2 BY 0.001 
psub2_ring = psub2_ring_1 NOT PSUB2 
psub2_exl = sr_dod_s INTERACT psub2_ring 
PSUB2_final = PSUB2 NOT psub2_exl 
psub2s = SIZE PSUB2_final BY 0.001 
psubband = psub2s NOT PSUB2_final 
psub = ppsub NOT psubband 

//***** Define connectivity/via layer -- nch_lvt_mac_gate ****

//* Define layer -- nch_lvt_mac_gate
nch_lvt_mac_gate_tmp01 = tngate3a NOT dnwdmy
nch_lvt_mac_gate_tmp02 = nch_lvt_mac_gate_tmp01 AND ODI
nch_lvt_mac_gate_tmp03 = nch_lvt_mac_gate_tmp02 NOT NW
nch_lvt_mac_gate_tmp04 = nch_lvt_mac_gate_tmp03 NOT NT_N
nch_lvt_mac_gate_tmp05 = nch_lvt_mac_gate_tmp04 NOT OD12
nch_lvt_mac_gate_tmp06 = nch_lvt_mac_gate_tmp05 AND POI
nch_lvt_mac_gate_tmp07 = nch_lvt_mac_gate_tmp06 NOT VTEL_Ni
nch_lvt_mac_gate_tmp08 = nch_lvt_mac_gate_tmp07 NOT VTEL_Pi
nch_lvt_mac_gate_tmp09 = nch_lvt_mac_gate_tmp08 NOT VTUL_Ni
nch_lvt_mac_gate_tmp10 = nch_lvt_mac_gate_tmp09 NOT VTUL_Pi
nch_lvt_mac_gate_tmp11 = nch_lvt_mac_gate_tmp10 AND VTL_Ni
nch_lvt_mac_gate_tmp12 = nch_lvt_mac_gate_tmp11 NOT VTL_Pi
nch_lvt_mac_gate_tmp13 = nch_lvt_mac_gate_tmp12 NOT VTS_Ni
nch_lvt_mac_gate_tmp14 = nch_lvt_mac_gate_tmp13 NOT VTS_Pi
nch_lvt_mac_gate_tmp15 = nch_lvt_mac_gate_tmp14 NOT VTUL_NLLi
nch_lvt_mac_gate_tmp16 = nch_lvt_mac_gate_tmp15 NOT VTUL_PLLi
nch_lvt_mac_gate_tmp17 = nch_lvt_mac_gate_tmp16 NOT VTL_NLLi
nch_lvt_mac_gate_tmp18 = nch_lvt_mac_gate_tmp17 NOT VTL_PLLi
nch_lvt_mac_gate_tmp19 = nch_lvt_mac_gate_tmp18 AND NPi
nch_lvt_mac_gate_tmp20 = nch_lvt_mac_gate_tmp19 NOT PPi
nch_lvt_mac_gate_tmp21 = nch_lvt_mac_gate_tmp20 NOT PO_P81_WPO
nch_lvt_mac_gate_tmp22 = nch_lvt_mac_gate_tmp21 NOT VARi
nch_lvt_mac_gate_tmp23 = nch_lvt_mac_gate_tmp22 NOT IBJTDMY
nch_lvt_mac_gate_tmp24 = nch_lvt_mac_gate_tmp23 NOT DIODMYi
nch_lvt_mac_gate_tmp25 = nch_lvt_mac_gate_tmp24 NOT SR_ESD
nch_lvt_mac_gate_tmp26 = nch_lvt_mac_gate_tmp25 NOT HIA_DUMMY
nch_lvt_mac_gate = nch_lvt_mac_gate_tmp26 NOT SDI_2


//***** Define connectivity/via layer -- nch_ulvt_mac_gate ****

//* Define layer -- nch_ulvt_mac_gate
nch_ulvt_mac_gate_tmp01 = tngate3a NOT dnwdmy
nch_ulvt_mac_gate_tmp02 = nch_ulvt_mac_gate_tmp01 AND ODI
nch_ulvt_mac_gate_tmp03 = nch_ulvt_mac_gate_tmp02 NOT NW
nch_ulvt_mac_gate_tmp04 = nch_ulvt_mac_gate_tmp03 NOT NT_N
nch_ulvt_mac_gate_tmp05 = nch_ulvt_mac_gate_tmp04 NOT OD12
nch_ulvt_mac_gate_tmp06 = nch_ulvt_mac_gate_tmp05 AND POI
nch_ulvt_mac_gate_tmp07 = nch_ulvt_mac_gate_tmp06 NOT VTEL_Ni
nch_ulvt_mac_gate_tmp08 = nch_ulvt_mac_gate_tmp07 NOT VTEL_Pi
nch_ulvt_mac_gate_tmp09 = nch_ulvt_mac_gate_tmp08 AND VTUL_Ni
nch_ulvt_mac_gate_tmp10 = nch_ulvt_mac_gate_tmp09 NOT VTUL_Pi
nch_ulvt_mac_gate_tmp11 = nch_ulvt_mac_gate_tmp10 NOT VTL_Ni
nch_ulvt_mac_gate_tmp12 = nch_ulvt_mac_gate_tmp11 NOT VTL_Pi
nch_ulvt_mac_gate_tmp13 = nch_ulvt_mac_gate_tmp12 NOT VTS_Ni
nch_ulvt_mac_gate_tmp14 = nch_ulvt_mac_gate_tmp13 NOT VTS_Pi
nch_ulvt_mac_gate_tmp15 = nch_ulvt_mac_gate_tmp14 NOT VTUL_NLLi
nch_ulvt_mac_gate_tmp16 = nch_ulvt_mac_gate_tmp15 NOT VTUL_PLLi
nch_ulvt_mac_gate_tmp17 = nch_ulvt_mac_gate_tmp16 NOT VTL_NLLi
nch_ulvt_mac_gate_tmp18 = nch_ulvt_mac_gate_tmp17 NOT VTL_PLLi
nch_ulvt_mac_gate_tmp19 = nch_ulvt_mac_gate_tmp18 AND NPi
nch_ulvt_mac_gate_tmp20 = nch_ulvt_mac_gate_tmp19 NOT PPi
nch_ulvt_mac_gate_tmp21 = nch_ulvt_mac_gate_tmp20 NOT PO_P81_WPO
nch_ulvt_mac_gate_tmp22 = nch_ulvt_mac_gate_tmp21 NOT VARi
nch_ulvt_mac_gate_tmp23 = nch_ulvt_mac_gate_tmp22 NOT IBJTDMY
nch_ulvt_mac_gate_tmp24 = nch_ulvt_mac_gate_tmp23 NOT DIODMYi
nch_ulvt_mac_gate_tmp25 = nch_ulvt_mac_gate_tmp24 NOT SR_ESD
nch_ulvt_mac_gate_tmp26 = nch_ulvt_mac_gate_tmp25 NOT HIA_DUMMY
nch_ulvt_mac_gate = nch_ulvt_mac_gate_tmp26 NOT SDI_2


//***** Define connectivity/via layer -- nch_elvt_mac_gate ****

//* Define layer -- nch_elvt_mac_gate
nch_elvt_mac_gate_tmp01 = tngate3a NOT dnwdmy
nch_elvt_mac_gate_tmp02 = nch_elvt_mac_gate_tmp01 AND ODI
nch_elvt_mac_gate_tmp03 = nch_elvt_mac_gate_tmp02 NOT NW
nch_elvt_mac_gate_tmp04 = nch_elvt_mac_gate_tmp03 NOT NT_N
nch_elvt_mac_gate_tmp05 = nch_elvt_mac_gate_tmp04 NOT OD12
nch_elvt_mac_gate_tmp06 = nch_elvt_mac_gate_tmp05 AND POI
nch_elvt_mac_gate_tmp07 = nch_elvt_mac_gate_tmp06 AND VTEL_Ni
nch_elvt_mac_gate_tmp08 = nch_elvt_mac_gate_tmp07 NOT VTEL_Pi
nch_elvt_mac_gate_tmp09 = nch_elvt_mac_gate_tmp08 NOT VTUL_Ni
nch_elvt_mac_gate_tmp10 = nch_elvt_mac_gate_tmp09 NOT VTUL_Pi
nch_elvt_mac_gate_tmp11 = nch_elvt_mac_gate_tmp10 NOT VTL_Ni
nch_elvt_mac_gate_tmp12 = nch_elvt_mac_gate_tmp11 NOT VTL_Pi
nch_elvt_mac_gate_tmp13 = nch_elvt_mac_gate_tmp12 NOT VTS_Ni
nch_elvt_mac_gate_tmp14 = nch_elvt_mac_gate_tmp13 NOT VTS_Pi
nch_elvt_mac_gate_tmp15 = nch_elvt_mac_gate_tmp14 NOT VTUL_NLLi
nch_elvt_mac_gate_tmp16 = nch_elvt_mac_gate_tmp15 NOT VTUL_PLLi
nch_elvt_mac_gate_tmp17 = nch_elvt_mac_gate_tmp16 NOT VTL_NLLi
nch_elvt_mac_gate_tmp18 = nch_elvt_mac_gate_tmp17 NOT VTL_PLLi
nch_elvt_mac_gate_tmp19 = nch_elvt_mac_gate_tmp18 AND NPi
nch_elvt_mac_gate_tmp20 = nch_elvt_mac_gate_tmp19 NOT PPi
nch_elvt_mac_gate_tmp21 = nch_elvt_mac_gate_tmp20 NOT PO_P81_WPO
nch_elvt_mac_gate_tmp22 = nch_elvt_mac_gate_tmp21 NOT VARi
nch_elvt_mac_gate_tmp23 = nch_elvt_mac_gate_tmp22 NOT IBJTDMY
nch_elvt_mac_gate_tmp24 = nch_elvt_mac_gate_tmp23 NOT DIODMYi
nch_elvt_mac_gate_tmp25 = nch_elvt_mac_gate_tmp24 NOT SR_ESD
nch_elvt_mac_gate_tmp26 = nch_elvt_mac_gate_tmp25 NOT HIA_DUMMY
nch_elvt_mac_gate = nch_elvt_mac_gate_tmp26 NOT SDI_2


//***** Define connectivity/via layer -- nch_lvtll_mac_gate ****

//* Define layer -- nch_lvtll_mac_gate
nch_lvtll_mac_gate_tmp01 = tngate3a NOT dnwdmy
nch_lvtll_mac_gate_tmp02 = nch_lvtll_mac_gate_tmp01 AND ODI
nch_lvtll_mac_gate_tmp03 = nch_lvtll_mac_gate_tmp02 NOT NW
nch_lvtll_mac_gate_tmp04 = nch_lvtll_mac_gate_tmp03 NOT NT_N
nch_lvtll_mac_gate_tmp05 = nch_lvtll_mac_gate_tmp04 NOT OD12
nch_lvtll_mac_gate_tmp06 = nch_lvtll_mac_gate_tmp05 AND POI
nch_lvtll_mac_gate_tmp07 = nch_lvtll_mac_gate_tmp06 NOT VTEL_Ni
nch_lvtll_mac_gate_tmp08 = nch_lvtll_mac_gate_tmp07 NOT VTEL_Pi
nch_lvtll_mac_gate_tmp09 = nch_lvtll_mac_gate_tmp08 NOT VTUL_Ni
nch_lvtll_mac_gate_tmp10 = nch_lvtll_mac_gate_tmp09 NOT VTUL_Pi
nch_lvtll_mac_gate_tmp11 = nch_lvtll_mac_gate_tmp10 NOT VTL_Ni
nch_lvtll_mac_gate_tmp12 = nch_lvtll_mac_gate_tmp11 NOT VTL_Pi
nch_lvtll_mac_gate_tmp13 = nch_lvtll_mac_gate_tmp12 NOT VTS_Ni
nch_lvtll_mac_gate_tmp14 = nch_lvtll_mac_gate_tmp13 NOT VTS_Pi
nch_lvtll_mac_gate_tmp15 = nch_lvtll_mac_gate_tmp14 NOT VTUL_NLLi
nch_lvtll_mac_gate_tmp16 = nch_lvtll_mac_gate_tmp15 NOT VTUL_PLLi
nch_lvtll_mac_gate_tmp17 = nch_lvtll_mac_gate_tmp16 AND VTL_NLLi
nch_lvtll_mac_gate_tmp18 = nch_lvtll_mac_gate_tmp17 NOT VTL_PLLi
nch_lvtll_mac_gate_tmp19 = nch_lvtll_mac_gate_tmp18 AND NPi
nch_lvtll_mac_gate_tmp20 = nch_lvtll_mac_gate_tmp19 NOT PPi
nch_lvtll_mac_gate_tmp21 = nch_lvtll_mac_gate_tmp20 NOT PO_P81_WPO
nch_lvtll_mac_gate_tmp22 = nch_lvtll_mac_gate_tmp21 NOT VARi
nch_lvtll_mac_gate_tmp23 = nch_lvtll_mac_gate_tmp22 NOT IBJTDMY
nch_lvtll_mac_gate_tmp24 = nch_lvtll_mac_gate_tmp23 NOT DIODMYi
nch_lvtll_mac_gate_tmp25 = nch_lvtll_mac_gate_tmp24 NOT SR_ESD
nch_lvtll_mac_gate_tmp26 = nch_lvtll_mac_gate_tmp25 NOT HIA_DUMMY
nch_lvtll_mac_gate = nch_lvtll_mac_gate_tmp26 NOT SDI_2


//***** Define connectivity/via layer -- nch_ulvtll_mac_gate ****

//* Define layer -- nch_ulvtll_mac_gate
nch_ulvtll_mac_gate_tmp01 = tngate3a NOT dnwdmy
nch_ulvtll_mac_gate_tmp02 = nch_ulvtll_mac_gate_tmp01 AND ODI
nch_ulvtll_mac_gate_tmp03 = nch_ulvtll_mac_gate_tmp02 NOT NW
nch_ulvtll_mac_gate_tmp04 = nch_ulvtll_mac_gate_tmp03 NOT NT_N
nch_ulvtll_mac_gate_tmp05 = nch_ulvtll_mac_gate_tmp04 NOT OD12
nch_ulvtll_mac_gate_tmp06 = nch_ulvtll_mac_gate_tmp05 AND POI
nch_ulvtll_mac_gate_tmp07 = nch_ulvtll_mac_gate_tmp06 NOT VTEL_Ni
nch_ulvtll_mac_gate_tmp08 = nch_ulvtll_mac_gate_tmp07 NOT VTEL_Pi
nch_ulvtll_mac_gate_tmp09 = nch_ulvtll_mac_gate_tmp08 NOT VTUL_Ni
nch_ulvtll_mac_gate_tmp10 = nch_ulvtll_mac_gate_tmp09 NOT VTUL_Pi
nch_ulvtll_mac_gate_tmp11 = nch_ulvtll_mac_gate_tmp10 NOT VTL_Ni
nch_ulvtll_mac_gate_tmp12 = nch_ulvtll_mac_gate_tmp11 NOT VTL_Pi
nch_ulvtll_mac_gate_tmp13 = nch_ulvtll_mac_gate_tmp12 NOT VTS_Ni
nch_ulvtll_mac_gate_tmp14 = nch_ulvtll_mac_gate_tmp13 NOT VTS_Pi
nch_ulvtll_mac_gate_tmp15 = nch_ulvtll_mac_gate_tmp14 AND VTUL_NLLi
nch_ulvtll_mac_gate_tmp16 = nch_ulvtll_mac_gate_tmp15 NOT VTUL_PLLi
nch_ulvtll_mac_gate_tmp17 = nch_ulvtll_mac_gate_tmp16 NOT VTL_NLLi
nch_ulvtll_mac_gate_tmp18 = nch_ulvtll_mac_gate_tmp17 NOT VTL_PLLi
nch_ulvtll_mac_gate_tmp19 = nch_ulvtll_mac_gate_tmp18 AND NPi
nch_ulvtll_mac_gate_tmp20 = nch_ulvtll_mac_gate_tmp19 NOT PPi
nch_ulvtll_mac_gate_tmp21 = nch_ulvtll_mac_gate_tmp20 NOT PO_P81_WPO
nch_ulvtll_mac_gate_tmp22 = nch_ulvtll_mac_gate_tmp21 NOT VARi
nch_ulvtll_mac_gate_tmp23 = nch_ulvtll_mac_gate_tmp22 NOT IBJTDMY
nch_ulvtll_mac_gate_tmp24 = nch_ulvtll_mac_gate_tmp23 NOT DIODMYi
nch_ulvtll_mac_gate_tmp25 = nch_ulvtll_mac_gate_tmp24 NOT SR_ESD
nch_ulvtll_mac_gate_tmp26 = nch_ulvtll_mac_gate_tmp25 NOT HIA_DUMMY
nch_ulvtll_mac_gate = nch_ulvtll_mac_gate_tmp26 NOT SDI_2


//***** Define connectivity/via layer -- nch_12_mac_gate ****

//* Define layer -- nch_12_mac_gate
nch_12_mac_gate_tmp01 = tngate3a NOT dnwdmy
nch_12_mac_gate_tmp02 = nch_12_mac_gate_tmp01 AND ODI
nch_12_mac_gate_tmp03 = nch_12_mac_gate_tmp02 NOT NW
nch_12_mac_gate_tmp04 = nch_12_mac_gate_tmp03 NOT NT_N
nch_12_mac_gate_tmp05 = nch_12_mac_gate_tmp04 AND OD12
nch_12_mac_gate_tmp06 = nch_12_mac_gate_tmp05 AND POI
nch_12_mac_gate_tmp07 = nch_12_mac_gate_tmp06 NOT VTEL_Ni
nch_12_mac_gate_tmp08 = nch_12_mac_gate_tmp07 NOT VTEL_Pi
nch_12_mac_gate_tmp09 = nch_12_mac_gate_tmp08 NOT VTUL_Ni
nch_12_mac_gate_tmp10 = nch_12_mac_gate_tmp09 NOT VTUL_Pi
nch_12_mac_gate_tmp11 = nch_12_mac_gate_tmp10 NOT VTL_Ni
nch_12_mac_gate_tmp12 = nch_12_mac_gate_tmp11 NOT VTL_Pi
nch_12_mac_gate_tmp13 = nch_12_mac_gate_tmp12 NOT VTS_Ni
nch_12_mac_gate_tmp14 = nch_12_mac_gate_tmp13 NOT VTS_Pi
nch_12_mac_gate_tmp15 = nch_12_mac_gate_tmp14 NOT VTUL_NLLi
nch_12_mac_gate_tmp16 = nch_12_mac_gate_tmp15 NOT VTUL_PLLi
nch_12_mac_gate_tmp17 = nch_12_mac_gate_tmp16 NOT VTL_NLLi
nch_12_mac_gate_tmp18 = nch_12_mac_gate_tmp17 NOT VTL_PLLi
nch_12_mac_gate_tmp19 = nch_12_mac_gate_tmp18 AND NPi
nch_12_mac_gate_tmp20 = nch_12_mac_gate_tmp19 NOT PPi
nch_12_mac_gate_tmp21 = nch_12_mac_gate_tmp20 NOT PO_P81_WPO
nch_12_mac_gate_tmp22 = nch_12_mac_gate_tmp21 NOT VARi
nch_12_mac_gate_tmp23 = nch_12_mac_gate_tmp22 NOT IBJTDMY
nch_12_mac_gate_tmp24 = nch_12_mac_gate_tmp23 NOT DIODMYi
nch_12_mac_gate_tmp25 = nch_12_mac_gate_tmp24 NOT HIA_DUMMY
nch_12_mac_gate = nch_12_mac_gate_tmp25 NOT SDI_2


//***** Define connectivity/via layer -- nch_svt_mac_gate_dnw ****

//* Define layer -- nch_svt_mac_gate_dnw
nch_svt_mac_gate_dnw_tmp01 = tngate3a AND dnwdmy
nch_svt_mac_gate_dnw_tmp02 = nch_svt_mac_gate_dnw_tmp01 AND ODI
nch_svt_mac_gate_dnw_tmp03 = nch_svt_mac_gate_dnw_tmp02 NOT NW
nch_svt_mac_gate_dnw_tmp04 = nch_svt_mac_gate_dnw_tmp03 NOT NT_N
nch_svt_mac_gate_dnw_tmp05 = nch_svt_mac_gate_dnw_tmp04 NOT OD12
nch_svt_mac_gate_dnw_tmp06 = nch_svt_mac_gate_dnw_tmp05 AND POI
nch_svt_mac_gate_dnw_tmp07 = nch_svt_mac_gate_dnw_tmp06 NOT VTEL_Ni
nch_svt_mac_gate_dnw_tmp08 = nch_svt_mac_gate_dnw_tmp07 NOT VTEL_Pi
nch_svt_mac_gate_dnw_tmp09 = nch_svt_mac_gate_dnw_tmp08 NOT VTUL_Ni
nch_svt_mac_gate_dnw_tmp10 = nch_svt_mac_gate_dnw_tmp09 NOT VTUL_Pi
nch_svt_mac_gate_dnw_tmp11 = nch_svt_mac_gate_dnw_tmp10 NOT VTL_Ni
nch_svt_mac_gate_dnw_tmp12 = nch_svt_mac_gate_dnw_tmp11 NOT VTL_Pi
nch_svt_mac_gate_dnw_tmp13 = nch_svt_mac_gate_dnw_tmp12 AND VTS_Ni
nch_svt_mac_gate_dnw_tmp14 = nch_svt_mac_gate_dnw_tmp13 NOT VTS_Pi
nch_svt_mac_gate_dnw_tmp15 = nch_svt_mac_gate_dnw_tmp14 NOT VTUL_NLLi
nch_svt_mac_gate_dnw_tmp16 = nch_svt_mac_gate_dnw_tmp15 NOT VTUL_PLLi
nch_svt_mac_gate_dnw_tmp17 = nch_svt_mac_gate_dnw_tmp16 NOT VTL_NLLi
nch_svt_mac_gate_dnw_tmp18 = nch_svt_mac_gate_dnw_tmp17 NOT VTL_PLLi
nch_svt_mac_gate_dnw_tmp19 = nch_svt_mac_gate_dnw_tmp18 AND NPi
nch_svt_mac_gate_dnw_tmp20 = nch_svt_mac_gate_dnw_tmp19 NOT PPi
nch_svt_mac_gate_dnw_tmp21 = nch_svt_mac_gate_dnw_tmp20 NOT PO_P81_WPO
nch_svt_mac_gate_dnw_tmp22 = nch_svt_mac_gate_dnw_tmp21 NOT VARi
nch_svt_mac_gate_dnw_tmp23 = nch_svt_mac_gate_dnw_tmp22 NOT IBJTDMY
nch_svt_mac_gate_dnw_tmp24 = nch_svt_mac_gate_dnw_tmp23 NOT DIODMYi
nch_svt_mac_gate_dnw_tmp25 = nch_svt_mac_gate_dnw_tmp24 NOT SR_ESD
nch_svt_mac_gate_dnw_tmp26 = nch_svt_mac_gate_dnw_tmp25 NOT HIA_DUMMY
nch_svt_mac_gate_dnw = nch_svt_mac_gate_dnw_tmp26 NOT SDI_2


//***** Define connectivity/via layer -- nch_lvt_mac_gate_dnw ****

//* Define layer -- nch_lvt_mac_gate_dnw
nch_lvt_mac_gate_dnw_tmp01 = tngate3a AND dnwdmy
nch_lvt_mac_gate_dnw_tmp02 = nch_lvt_mac_gate_dnw_tmp01 AND ODI
nch_lvt_mac_gate_dnw_tmp03 = nch_lvt_mac_gate_dnw_tmp02 NOT NW
nch_lvt_mac_gate_dnw_tmp04 = nch_lvt_mac_gate_dnw_tmp03 NOT NT_N
nch_lvt_mac_gate_dnw_tmp05 = nch_lvt_mac_gate_dnw_tmp04 NOT OD12
nch_lvt_mac_gate_dnw_tmp06 = nch_lvt_mac_gate_dnw_tmp05 AND POI
nch_lvt_mac_gate_dnw_tmp07 = nch_lvt_mac_gate_dnw_tmp06 NOT VTEL_Ni
nch_lvt_mac_gate_dnw_tmp08 = nch_lvt_mac_gate_dnw_tmp07 NOT VTEL_Pi
nch_lvt_mac_gate_dnw_tmp09 = nch_lvt_mac_gate_dnw_tmp08 NOT VTUL_Ni
nch_lvt_mac_gate_dnw_tmp10 = nch_lvt_mac_gate_dnw_tmp09 NOT VTUL_Pi
nch_lvt_mac_gate_dnw_tmp11 = nch_lvt_mac_gate_dnw_tmp10 AND VTL_Ni
nch_lvt_mac_gate_dnw_tmp12 = nch_lvt_mac_gate_dnw_tmp11 NOT VTL_Pi
nch_lvt_mac_gate_dnw_tmp13 = nch_lvt_mac_gate_dnw_tmp12 NOT VTS_Ni
nch_lvt_mac_gate_dnw_tmp14 = nch_lvt_mac_gate_dnw_tmp13 NOT VTS_Pi
nch_lvt_mac_gate_dnw_tmp15 = nch_lvt_mac_gate_dnw_tmp14 NOT VTUL_NLLi
nch_lvt_mac_gate_dnw_tmp16 = nch_lvt_mac_gate_dnw_tmp15 NOT VTUL_PLLi
nch_lvt_mac_gate_dnw_tmp17 = nch_lvt_mac_gate_dnw_tmp16 NOT VTL_NLLi
nch_lvt_mac_gate_dnw_tmp18 = nch_lvt_mac_gate_dnw_tmp17 NOT VTL_PLLi
nch_lvt_mac_gate_dnw_tmp19 = nch_lvt_mac_gate_dnw_tmp18 AND NPi
nch_lvt_mac_gate_dnw_tmp20 = nch_lvt_mac_gate_dnw_tmp19 NOT PPi
nch_lvt_mac_gate_dnw_tmp21 = nch_lvt_mac_gate_dnw_tmp20 NOT PO_P81_WPO
nch_lvt_mac_gate_dnw_tmp22 = nch_lvt_mac_gate_dnw_tmp21 NOT VARi
nch_lvt_mac_gate_dnw_tmp23 = nch_lvt_mac_gate_dnw_tmp22 NOT IBJTDMY
nch_lvt_mac_gate_dnw_tmp24 = nch_lvt_mac_gate_dnw_tmp23 NOT DIODMYi
nch_lvt_mac_gate_dnw_tmp25 = nch_lvt_mac_gate_dnw_tmp24 NOT SR_ESD
nch_lvt_mac_gate_dnw_tmp26 = nch_lvt_mac_gate_dnw_tmp25 NOT HIA_DUMMY
nch_lvt_mac_gate_dnw = nch_lvt_mac_gate_dnw_tmp26 NOT SDI_2


//***** Define connectivity/via layer -- nch_ulvt_mac_gate_dnw ****

//* Define layer -- nch_ulvt_mac_gate_dnw
nch_ulvt_mac_gate_dnw_tmp01 = tngate3a AND dnwdmy
nch_ulvt_mac_gate_dnw_tmp02 = nch_ulvt_mac_gate_dnw_tmp01 AND ODI
nch_ulvt_mac_gate_dnw_tmp03 = nch_ulvt_mac_gate_dnw_tmp02 NOT NW
nch_ulvt_mac_gate_dnw_tmp04 = nch_ulvt_mac_gate_dnw_tmp03 NOT NT_N
nch_ulvt_mac_gate_dnw_tmp05 = nch_ulvt_mac_gate_dnw_tmp04 NOT OD12
nch_ulvt_mac_gate_dnw_tmp06 = nch_ulvt_mac_gate_dnw_tmp05 AND POI
nch_ulvt_mac_gate_dnw_tmp07 = nch_ulvt_mac_gate_dnw_tmp06 NOT VTEL_Ni
nch_ulvt_mac_gate_dnw_tmp08 = nch_ulvt_mac_gate_dnw_tmp07 NOT VTEL_Pi
nch_ulvt_mac_gate_dnw_tmp09 = nch_ulvt_mac_gate_dnw_tmp08 AND VTUL_Ni
nch_ulvt_mac_gate_dnw_tmp10 = nch_ulvt_mac_gate_dnw_tmp09 NOT VTUL_Pi
nch_ulvt_mac_gate_dnw_tmp11 = nch_ulvt_mac_gate_dnw_tmp10 NOT VTL_Ni
nch_ulvt_mac_gate_dnw_tmp12 = nch_ulvt_mac_gate_dnw_tmp11 NOT VTL_Pi
nch_ulvt_mac_gate_dnw_tmp13 = nch_ulvt_mac_gate_dnw_tmp12 NOT VTS_Ni
nch_ulvt_mac_gate_dnw_tmp14 = nch_ulvt_mac_gate_dnw_tmp13 NOT VTS_Pi
nch_ulvt_mac_gate_dnw_tmp15 = nch_ulvt_mac_gate_dnw_tmp14 NOT VTUL_NLLi
nch_ulvt_mac_gate_dnw_tmp16 = nch_ulvt_mac_gate_dnw_tmp15 NOT VTUL_PLLi
nch_ulvt_mac_gate_dnw_tmp17 = nch_ulvt_mac_gate_dnw_tmp16 NOT VTL_NLLi
nch_ulvt_mac_gate_dnw_tmp18 = nch_ulvt_mac_gate_dnw_tmp17 NOT VTL_PLLi
nch_ulvt_mac_gate_dnw_tmp19 = nch_ulvt_mac_gate_dnw_tmp18 AND NPi
nch_ulvt_mac_gate_dnw_tmp20 = nch_ulvt_mac_gate_dnw_tmp19 NOT PPi
nch_ulvt_mac_gate_dnw_tmp21 = nch_ulvt_mac_gate_dnw_tmp20 NOT PO_P81_WPO
nch_ulvt_mac_gate_dnw_tmp22 = nch_ulvt_mac_gate_dnw_tmp21 NOT VARi
nch_ulvt_mac_gate_dnw_tmp23 = nch_ulvt_mac_gate_dnw_tmp22 NOT IBJTDMY
nch_ulvt_mac_gate_dnw_tmp24 = nch_ulvt_mac_gate_dnw_tmp23 NOT DIODMYi
nch_ulvt_mac_gate_dnw_tmp25 = nch_ulvt_mac_gate_dnw_tmp24 NOT SR_ESD
nch_ulvt_mac_gate_dnw_tmp26 = nch_ulvt_mac_gate_dnw_tmp25 NOT HIA_DUMMY
nch_ulvt_mac_gate_dnw = nch_ulvt_mac_gate_dnw_tmp26 NOT SDI_2


//***** Define connectivity/via layer -- nch_elvt_mac_gate_dnw ****

//* Define layer -- nch_elvt_mac_gate_dnw
nch_elvt_mac_gate_dnw_tmp01 = tngate3a AND dnwdmy
nch_elvt_mac_gate_dnw_tmp02 = nch_elvt_mac_gate_dnw_tmp01 AND ODI
nch_elvt_mac_gate_dnw_tmp03 = nch_elvt_mac_gate_dnw_tmp02 NOT NW
nch_elvt_mac_gate_dnw_tmp04 = nch_elvt_mac_gate_dnw_tmp03 NOT NT_N
nch_elvt_mac_gate_dnw_tmp05 = nch_elvt_mac_gate_dnw_tmp04 NOT OD12
nch_elvt_mac_gate_dnw_tmp06 = nch_elvt_mac_gate_dnw_tmp05 AND POI
nch_elvt_mac_gate_dnw_tmp07 = nch_elvt_mac_gate_dnw_tmp06 AND VTEL_Ni
nch_elvt_mac_gate_dnw_tmp08 = nch_elvt_mac_gate_dnw_tmp07 NOT VTEL_Pi
nch_elvt_mac_gate_dnw_tmp09 = nch_elvt_mac_gate_dnw_tmp08 NOT VTUL_Ni
nch_elvt_mac_gate_dnw_tmp10 = nch_elvt_mac_gate_dnw_tmp09 NOT VTUL_Pi
nch_elvt_mac_gate_dnw_tmp11 = nch_elvt_mac_gate_dnw_tmp10 NOT VTL_Ni
nch_elvt_mac_gate_dnw_tmp12 = nch_elvt_mac_gate_dnw_tmp11 NOT VTL_Pi
nch_elvt_mac_gate_dnw_tmp13 = nch_elvt_mac_gate_dnw_tmp12 NOT VTS_Ni
nch_elvt_mac_gate_dnw_tmp14 = nch_elvt_mac_gate_dnw_tmp13 NOT VTS_Pi
nch_elvt_mac_gate_dnw_tmp15 = nch_elvt_mac_gate_dnw_tmp14 NOT VTUL_NLLi
nch_elvt_mac_gate_dnw_tmp16 = nch_elvt_mac_gate_dnw_tmp15 NOT VTUL_PLLi
nch_elvt_mac_gate_dnw_tmp17 = nch_elvt_mac_gate_dnw_tmp16 NOT VTL_NLLi
nch_elvt_mac_gate_dnw_tmp18 = nch_elvt_mac_gate_dnw_tmp17 NOT VTL_PLLi
nch_elvt_mac_gate_dnw_tmp19 = nch_elvt_mac_gate_dnw_tmp18 AND NPi
nch_elvt_mac_gate_dnw_tmp20 = nch_elvt_mac_gate_dnw_tmp19 NOT PPi
nch_elvt_mac_gate_dnw_tmp21 = nch_elvt_mac_gate_dnw_tmp20 NOT PO_P81_WPO
nch_elvt_mac_gate_dnw_tmp22 = nch_elvt_mac_gate_dnw_tmp21 NOT VARi
nch_elvt_mac_gate_dnw_tmp23 = nch_elvt_mac_gate_dnw_tmp22 NOT IBJTDMY
nch_elvt_mac_gate_dnw_tmp24 = nch_elvt_mac_gate_dnw_tmp23 NOT DIODMYi
nch_elvt_mac_gate_dnw_tmp25 = nch_elvt_mac_gate_dnw_tmp24 NOT SR_ESD
nch_elvt_mac_gate_dnw_tmp26 = nch_elvt_mac_gate_dnw_tmp25 NOT HIA_DUMMY
nch_elvt_mac_gate_dnw = nch_elvt_mac_gate_dnw_tmp26 NOT SDI_2


//***** Define connectivity/via layer -- nch_lvtll_mac_gate_dnw ****

//* Define layer -- nch_lvtll_mac_gate_dnw
nch_lvtll_mac_gate_dnw_tmp01 = tngate3a AND dnwdmy
nch_lvtll_mac_gate_dnw_tmp02 = nch_lvtll_mac_gate_dnw_tmp01 AND ODI
nch_lvtll_mac_gate_dnw_tmp03 = nch_lvtll_mac_gate_dnw_tmp02 NOT NW
nch_lvtll_mac_gate_dnw_tmp04 = nch_lvtll_mac_gate_dnw_tmp03 NOT NT_N
nch_lvtll_mac_gate_dnw_tmp05 = nch_lvtll_mac_gate_dnw_tmp04 NOT OD12
nch_lvtll_mac_gate_dnw_tmp06 = nch_lvtll_mac_gate_dnw_tmp05 AND POI
nch_lvtll_mac_gate_dnw_tmp07 = nch_lvtll_mac_gate_dnw_tmp06 NOT VTEL_Ni
nch_lvtll_mac_gate_dnw_tmp08 = nch_lvtll_mac_gate_dnw_tmp07 NOT VTEL_Pi
nch_lvtll_mac_gate_dnw_tmp09 = nch_lvtll_mac_gate_dnw_tmp08 NOT VTUL_Ni
nch_lvtll_mac_gate_dnw_tmp10 = nch_lvtll_mac_gate_dnw_tmp09 NOT VTUL_Pi
nch_lvtll_mac_gate_dnw_tmp11 = nch_lvtll_mac_gate_dnw_tmp10 NOT VTL_Ni
nch_lvtll_mac_gate_dnw_tmp12 = nch_lvtll_mac_gate_dnw_tmp11 NOT VTL_Pi
nch_lvtll_mac_gate_dnw_tmp13 = nch_lvtll_mac_gate_dnw_tmp12 NOT VTS_Ni
nch_lvtll_mac_gate_dnw_tmp14 = nch_lvtll_mac_gate_dnw_tmp13 NOT VTS_Pi
nch_lvtll_mac_gate_dnw_tmp15 = nch_lvtll_mac_gate_dnw_tmp14 NOT VTUL_NLLi
nch_lvtll_mac_gate_dnw_tmp16 = nch_lvtll_mac_gate_dnw_tmp15 NOT VTUL_PLLi
nch_lvtll_mac_gate_dnw_tmp17 = nch_lvtll_mac_gate_dnw_tmp16 AND VTL_NLLi
nch_lvtll_mac_gate_dnw_tmp18 = nch_lvtll_mac_gate_dnw_tmp17 NOT VTL_PLLi
nch_lvtll_mac_gate_dnw_tmp19 = nch_lvtll_mac_gate_dnw_tmp18 AND NPi
nch_lvtll_mac_gate_dnw_tmp20 = nch_lvtll_mac_gate_dnw_tmp19 NOT PPi
nch_lvtll_mac_gate_dnw_tmp21 = nch_lvtll_mac_gate_dnw_tmp20 NOT PO_P81_WPO
nch_lvtll_mac_gate_dnw_tmp22 = nch_lvtll_mac_gate_dnw_tmp21 NOT VARi
nch_lvtll_mac_gate_dnw_tmp23 = nch_lvtll_mac_gate_dnw_tmp22 NOT IBJTDMY
nch_lvtll_mac_gate_dnw_tmp24 = nch_lvtll_mac_gate_dnw_tmp23 NOT DIODMYi
nch_lvtll_mac_gate_dnw_tmp25 = nch_lvtll_mac_gate_dnw_tmp24 NOT SR_ESD
nch_lvtll_mac_gate_dnw_tmp26 = nch_lvtll_mac_gate_dnw_tmp25 NOT HIA_DUMMY
nch_lvtll_mac_gate_dnw = nch_lvtll_mac_gate_dnw_tmp26 NOT SDI_2


//***** Define connectivity/via layer -- nch_ulvtll_mac_gate_dnw ****

//* Define layer -- nch_ulvtll_mac_gate_dnw
nch_ulvtll_mac_gate_dnw_tmp01 = tngate3a AND dnwdmy
nch_ulvtll_mac_gate_dnw_tmp02 = nch_ulvtll_mac_gate_dnw_tmp01 AND ODI
nch_ulvtll_mac_gate_dnw_tmp03 = nch_ulvtll_mac_gate_dnw_tmp02 NOT NW
nch_ulvtll_mac_gate_dnw_tmp04 = nch_ulvtll_mac_gate_dnw_tmp03 NOT NT_N
nch_ulvtll_mac_gate_dnw_tmp05 = nch_ulvtll_mac_gate_dnw_tmp04 NOT OD12
nch_ulvtll_mac_gate_dnw_tmp06 = nch_ulvtll_mac_gate_dnw_tmp05 AND POI
nch_ulvtll_mac_gate_dnw_tmp07 = nch_ulvtll_mac_gate_dnw_tmp06 NOT VTEL_Ni
nch_ulvtll_mac_gate_dnw_tmp08 = nch_ulvtll_mac_gate_dnw_tmp07 NOT VTEL_Pi
nch_ulvtll_mac_gate_dnw_tmp09 = nch_ulvtll_mac_gate_dnw_tmp08 NOT VTUL_Ni
nch_ulvtll_mac_gate_dnw_tmp10 = nch_ulvtll_mac_gate_dnw_tmp09 NOT VTUL_Pi
nch_ulvtll_mac_gate_dnw_tmp11 = nch_ulvtll_mac_gate_dnw_tmp10 NOT VTL_Ni
nch_ulvtll_mac_gate_dnw_tmp12 = nch_ulvtll_mac_gate_dnw_tmp11 NOT VTL_Pi
nch_ulvtll_mac_gate_dnw_tmp13 = nch_ulvtll_mac_gate_dnw_tmp12 NOT VTS_Ni
nch_ulvtll_mac_gate_dnw_tmp14 = nch_ulvtll_mac_gate_dnw_tmp13 NOT VTS_Pi
nch_ulvtll_mac_gate_dnw_tmp15 = nch_ulvtll_mac_gate_dnw_tmp14 AND VTUL_NLLi
nch_ulvtll_mac_gate_dnw_tmp16 = nch_ulvtll_mac_gate_dnw_tmp15 NOT VTUL_PLLi
nch_ulvtll_mac_gate_dnw_tmp17 = nch_ulvtll_mac_gate_dnw_tmp16 NOT VTL_NLLi
nch_ulvtll_mac_gate_dnw_tmp18 = nch_ulvtll_mac_gate_dnw_tmp17 NOT VTL_PLLi
nch_ulvtll_mac_gate_dnw_tmp19 = nch_ulvtll_mac_gate_dnw_tmp18 AND NPi
nch_ulvtll_mac_gate_dnw_tmp20 = nch_ulvtll_mac_gate_dnw_tmp19 NOT PPi
nch_ulvtll_mac_gate_dnw_tmp21 = nch_ulvtll_mac_gate_dnw_tmp20 NOT PO_P81_WPO
nch_ulvtll_mac_gate_dnw_tmp22 = nch_ulvtll_mac_gate_dnw_tmp21 NOT VARi
nch_ulvtll_mac_gate_dnw_tmp23 = nch_ulvtll_mac_gate_dnw_tmp22 NOT IBJTDMY
nch_ulvtll_mac_gate_dnw_tmp24 = nch_ulvtll_mac_gate_dnw_tmp23 NOT DIODMYi
nch_ulvtll_mac_gate_dnw_tmp25 = nch_ulvtll_mac_gate_dnw_tmp24 NOT SR_ESD
nch_ulvtll_mac_gate_dnw_tmp26 = nch_ulvtll_mac_gate_dnw_tmp25 NOT HIA_DUMMY
nch_ulvtll_mac_gate_dnw = nch_ulvtll_mac_gate_dnw_tmp26 NOT SDI_2


//***** Define connectivity/via layer -- nch_12_mac_gate_dnw ****

//* Define layer -- nch_12_mac_gate_dnw
nch_12_mac_gate_dnw_tmp01 = tngate3a AND dnwdmy
nch_12_mac_gate_dnw_tmp02 = nch_12_mac_gate_dnw_tmp01 AND ODI
nch_12_mac_gate_dnw_tmp03 = nch_12_mac_gate_dnw_tmp02 NOT NW
nch_12_mac_gate_dnw_tmp04 = nch_12_mac_gate_dnw_tmp03 NOT NT_N
nch_12_mac_gate_dnw_tmp05 = nch_12_mac_gate_dnw_tmp04 AND OD12
nch_12_mac_gate_dnw_tmp06 = nch_12_mac_gate_dnw_tmp05 AND POI
nch_12_mac_gate_dnw_tmp07 = nch_12_mac_gate_dnw_tmp06 NOT VTEL_Ni
nch_12_mac_gate_dnw_tmp08 = nch_12_mac_gate_dnw_tmp07 NOT VTEL_Pi
nch_12_mac_gate_dnw_tmp09 = nch_12_mac_gate_dnw_tmp08 NOT VTUL_Ni
nch_12_mac_gate_dnw_tmp10 = nch_12_mac_gate_dnw_tmp09 NOT VTUL_Pi
nch_12_mac_gate_dnw_tmp11 = nch_12_mac_gate_dnw_tmp10 NOT VTL_Ni
nch_12_mac_gate_dnw_tmp12 = nch_12_mac_gate_dnw_tmp11 NOT VTL_Pi
nch_12_mac_gate_dnw_tmp13 = nch_12_mac_gate_dnw_tmp12 NOT VTS_Ni
nch_12_mac_gate_dnw_tmp14 = nch_12_mac_gate_dnw_tmp13 NOT VTS_Pi
nch_12_mac_gate_dnw_tmp15 = nch_12_mac_gate_dnw_tmp14 NOT VTUL_NLLi
nch_12_mac_gate_dnw_tmp16 = nch_12_mac_gate_dnw_tmp15 NOT VTUL_PLLi
nch_12_mac_gate_dnw_tmp17 = nch_12_mac_gate_dnw_tmp16 NOT VTL_NLLi
nch_12_mac_gate_dnw_tmp18 = nch_12_mac_gate_dnw_tmp17 NOT VTL_PLLi
nch_12_mac_gate_dnw_tmp19 = nch_12_mac_gate_dnw_tmp18 AND NPi
nch_12_mac_gate_dnw_tmp20 = nch_12_mac_gate_dnw_tmp19 NOT PPi
nch_12_mac_gate_dnw_tmp21 = nch_12_mac_gate_dnw_tmp20 NOT PO_P81_WPO
nch_12_mac_gate_dnw_tmp22 = nch_12_mac_gate_dnw_tmp21 NOT VARi
nch_12_mac_gate_dnw_tmp23 = nch_12_mac_gate_dnw_tmp22 NOT IBJTDMY
nch_12_mac_gate_dnw_tmp24 = nch_12_mac_gate_dnw_tmp23 NOT DIODMYi
nch_12_mac_gate_dnw_tmp25 = nch_12_mac_gate_dnw_tmp24 NOT HIA_DUMMY
nch_12_mac_gate_dnw = nch_12_mac_gate_dnw_tmp25 NOT SDI_2


//***** Define connectivity/via layer -- nch_eflvt_mac_gate_dnw ****

//* Define layer -- nch_eflvt_mac_gate_dnw
nch_eflvt_mac_gate_dnw_tmp01 = tngate3a AND dnwdmy
nch_eflvt_mac_gate_dnw_tmp02 = nch_eflvt_mac_gate_dnw_tmp01 AND ODI
nch_eflvt_mac_gate_dnw_tmp03 = nch_eflvt_mac_gate_dnw_tmp02 NOT NW
nch_eflvt_mac_gate_dnw_tmp04 = nch_eflvt_mac_gate_dnw_tmp03 NOT NT_N
nch_eflvt_mac_gate_dnw_tmp05 = nch_eflvt_mac_gate_dnw_tmp04 NOT OD12
nch_eflvt_mac_gate_dnw_tmp06 = nch_eflvt_mac_gate_dnw_tmp05 AND POI
nch_eflvt_mac_gate_dnw_tmp07 = nch_eflvt_mac_gate_dnw_tmp06 NOT VTEL_Ni
nch_eflvt_mac_gate_dnw_tmp08 = nch_eflvt_mac_gate_dnw_tmp07 NOT VTEL_Pi
nch_eflvt_mac_gate_dnw_tmp09 = nch_eflvt_mac_gate_dnw_tmp08 NOT VTUL_Ni
nch_eflvt_mac_gate_dnw_tmp10 = nch_eflvt_mac_gate_dnw_tmp09 NOT VTUL_Pi
nch_eflvt_mac_gate_dnw_tmp11 = nch_eflvt_mac_gate_dnw_tmp10 AND VTL_Ni
nch_eflvt_mac_gate_dnw_tmp12 = nch_eflvt_mac_gate_dnw_tmp11 NOT VTL_Pi
nch_eflvt_mac_gate_dnw_tmp13 = nch_eflvt_mac_gate_dnw_tmp12 NOT VTS_Ni
nch_eflvt_mac_gate_dnw_tmp14 = nch_eflvt_mac_gate_dnw_tmp13 NOT VTS_Pi
nch_eflvt_mac_gate_dnw_tmp15 = nch_eflvt_mac_gate_dnw_tmp14 NOT VTUL_NLLi
nch_eflvt_mac_gate_dnw_tmp16 = nch_eflvt_mac_gate_dnw_tmp15 NOT VTUL_PLLi
nch_eflvt_mac_gate_dnw_tmp17 = nch_eflvt_mac_gate_dnw_tmp16 NOT VTL_NLLi
nch_eflvt_mac_gate_dnw_tmp18 = nch_eflvt_mac_gate_dnw_tmp17 NOT VTL_PLLi
nch_eflvt_mac_gate_dnw_tmp19 = nch_eflvt_mac_gate_dnw_tmp18 AND NPi
nch_eflvt_mac_gate_dnw_tmp20 = nch_eflvt_mac_gate_dnw_tmp19 NOT PPi
nch_eflvt_mac_gate_dnw_tmp21 = nch_eflvt_mac_gate_dnw_tmp20 AND PO_P81_WPO
nch_eflvt_mac_gate_dnw_tmp22 = nch_eflvt_mac_gate_dnw_tmp21 AND METALFUSE
nch_eflvt_mac_gate_dnw_tmp23 = nch_eflvt_mac_gate_dnw_tmp22 NOT VARi
nch_eflvt_mac_gate_dnw_tmp24 = nch_eflvt_mac_gate_dnw_tmp23 NOT IBJTDMY
nch_eflvt_mac_gate_dnw_tmp25 = nch_eflvt_mac_gate_dnw_tmp24 NOT DIODMYi
nch_eflvt_mac_gate_dnw_tmp26 = nch_eflvt_mac_gate_dnw_tmp25 NOT SR_ESD
nch_eflvt_mac_gate_dnw_tmp27 = nch_eflvt_mac_gate_dnw_tmp26 NOT HIA_DUMMY
nch_eflvt_mac_gate_dnw = nch_eflvt_mac_gate_dnw_tmp27 NOT SDI_2


//***** Define connectivity/via layer -- nch_efsvt_mac_gate_dnw ****

//* Define layer -- nch_efsvt_mac_gate_dnw
nch_efsvt_mac_gate_dnw_tmp01 = tngate3a AND dnwdmy
nch_efsvt_mac_gate_dnw_tmp02 = nch_efsvt_mac_gate_dnw_tmp01 AND ODI
nch_efsvt_mac_gate_dnw_tmp03 = nch_efsvt_mac_gate_dnw_tmp02 NOT NW
nch_efsvt_mac_gate_dnw_tmp04 = nch_efsvt_mac_gate_dnw_tmp03 NOT NT_N
nch_efsvt_mac_gate_dnw_tmp05 = nch_efsvt_mac_gate_dnw_tmp04 NOT OD12
nch_efsvt_mac_gate_dnw_tmp06 = nch_efsvt_mac_gate_dnw_tmp05 AND POI
nch_efsvt_mac_gate_dnw_tmp07 = nch_efsvt_mac_gate_dnw_tmp06 NOT VTEL_Ni
nch_efsvt_mac_gate_dnw_tmp08 = nch_efsvt_mac_gate_dnw_tmp07 NOT VTEL_Pi
nch_efsvt_mac_gate_dnw_tmp09 = nch_efsvt_mac_gate_dnw_tmp08 NOT VTUL_Ni
nch_efsvt_mac_gate_dnw_tmp10 = nch_efsvt_mac_gate_dnw_tmp09 NOT VTUL_Pi
nch_efsvt_mac_gate_dnw_tmp11 = nch_efsvt_mac_gate_dnw_tmp10 NOT VTL_Ni
nch_efsvt_mac_gate_dnw_tmp12 = nch_efsvt_mac_gate_dnw_tmp11 NOT VTL_Pi
nch_efsvt_mac_gate_dnw_tmp13 = nch_efsvt_mac_gate_dnw_tmp12 AND VTS_Ni
nch_efsvt_mac_gate_dnw_tmp14 = nch_efsvt_mac_gate_dnw_tmp13 NOT VTS_Pi
nch_efsvt_mac_gate_dnw_tmp15 = nch_efsvt_mac_gate_dnw_tmp14 NOT VTUL_NLLi
nch_efsvt_mac_gate_dnw_tmp16 = nch_efsvt_mac_gate_dnw_tmp15 NOT VTUL_PLLi
nch_efsvt_mac_gate_dnw_tmp17 = nch_efsvt_mac_gate_dnw_tmp16 NOT VTL_NLLi
nch_efsvt_mac_gate_dnw_tmp18 = nch_efsvt_mac_gate_dnw_tmp17 NOT VTL_PLLi
nch_efsvt_mac_gate_dnw_tmp19 = nch_efsvt_mac_gate_dnw_tmp18 AND NPi
nch_efsvt_mac_gate_dnw_tmp20 = nch_efsvt_mac_gate_dnw_tmp19 NOT PPi
nch_efsvt_mac_gate_dnw_tmp21 = nch_efsvt_mac_gate_dnw_tmp20 AND PO_P81_WPO
nch_efsvt_mac_gate_dnw_tmp22 = nch_efsvt_mac_gate_dnw_tmp21 AND METALFUSE
nch_efsvt_mac_gate_dnw_tmp23 = nch_efsvt_mac_gate_dnw_tmp22 NOT VARi
nch_efsvt_mac_gate_dnw_tmp24 = nch_efsvt_mac_gate_dnw_tmp23 NOT IBJTDMY
nch_efsvt_mac_gate_dnw_tmp25 = nch_efsvt_mac_gate_dnw_tmp24 NOT DIODMYi
nch_efsvt_mac_gate_dnw_tmp26 = nch_efsvt_mac_gate_dnw_tmp25 NOT SR_ESD
nch_efsvt_mac_gate_dnw_tmp27 = nch_efsvt_mac_gate_dnw_tmp26 NOT HIA_DUMMY
nch_efsvt_mac_gate_dnw = nch_efsvt_mac_gate_dnw_tmp27 NOT SDI_2


//***** Define connectivity/via layer -- pch_svt_mac_gate ****
PO2 = POI OR SR_DPO 
TCDOVL = TCDDMY OR ICOVL 
PO3 = PO2 NOT TCDOVL  //  Under TCDDMY not support devices
CPO_SRM = CPO_SRMi AND SRM 
CPO1 = CPOi OR CPO_SRM 
CPO = CPO1 OR DCPO  //  poly cut layer
poly_cut = COPY CPO 
POx = PO3 NOT poly_cut  //  Real physical poly
PODE_GATE = PODE_GATEi AND POx 

//* Define layer -- pch_svt_mac_gate
pch_svt_mac_gate_tmp01 = tpgate2 AND ODI
pch_svt_mac_gate_tmp02 = pch_svt_mac_gate_tmp01 AND NW
pch_svt_mac_gate_tmp03 = pch_svt_mac_gate_tmp02 NOT NT_N
pch_svt_mac_gate_tmp04 = pch_svt_mac_gate_tmp03 NOT OD12
pch_svt_mac_gate_tmp05 = pch_svt_mac_gate_tmp04 AND POI
pch_svt_mac_gate_tmp06 = pch_svt_mac_gate_tmp05 NOT VTEL_Ni
pch_svt_mac_gate_tmp07 = pch_svt_mac_gate_tmp06 NOT VTEL_Pi
pch_svt_mac_gate_tmp08 = pch_svt_mac_gate_tmp07 NOT VTUL_Ni
pch_svt_mac_gate_tmp09 = pch_svt_mac_gate_tmp08 NOT VTUL_Pi
pch_svt_mac_gate_tmp10 = pch_svt_mac_gate_tmp09 NOT VTL_Ni
pch_svt_mac_gate_tmp11 = pch_svt_mac_gate_tmp10 NOT VTL_Pi
pch_svt_mac_gate_tmp12 = pch_svt_mac_gate_tmp11 NOT VTS_Ni
pch_svt_mac_gate_tmp13 = pch_svt_mac_gate_tmp12 AND VTS_Pi
pch_svt_mac_gate_tmp14 = pch_svt_mac_gate_tmp13 NOT VTUL_NLLi
pch_svt_mac_gate_tmp15 = pch_svt_mac_gate_tmp14 NOT VTUL_PLLi
pch_svt_mac_gate_tmp16 = pch_svt_mac_gate_tmp15 NOT VTL_NLLi
pch_svt_mac_gate_tmp17 = pch_svt_mac_gate_tmp16 NOT VTL_PLLi
pch_svt_mac_gate_tmp18 = pch_svt_mac_gate_tmp17 NOT NPi
pch_svt_mac_gate_tmp19 = pch_svt_mac_gate_tmp18 AND PPi
pch_svt_mac_gate_tmp20 = pch_svt_mac_gate_tmp19 NOT PO_P81_WPO
pch_svt_mac_gate_tmp21 = pch_svt_mac_gate_tmp20 NOT VARi
pch_svt_mac_gate_tmp22 = pch_svt_mac_gate_tmp21 NOT IBJTDMY
pch_svt_mac_gate_tmp23 = pch_svt_mac_gate_tmp22 NOT DIODMYi
pch_svt_mac_gate_tmp24 = pch_svt_mac_gate_tmp23 NOT SR_ESD
pch_svt_mac_gate_tmp25 = pch_svt_mac_gate_tmp24 NOT HIA_DUMMY
pch_svt_mac_gate = pch_svt_mac_gate_tmp25 NOT SDI_2


//***** Define connectivity/via layer -- nxwell ****
nxwell = COPY NW 

//***** Define connectivity/via layer -- pch_lvt_mac_gate ****

//* Define layer -- pch_lvt_mac_gate
pch_lvt_mac_gate_tmp01 = tpgate2 AND ODI
pch_lvt_mac_gate_tmp02 = pch_lvt_mac_gate_tmp01 AND NW
pch_lvt_mac_gate_tmp03 = pch_lvt_mac_gate_tmp02 NOT NT_N
pch_lvt_mac_gate_tmp04 = pch_lvt_mac_gate_tmp03 NOT OD12
pch_lvt_mac_gate_tmp05 = pch_lvt_mac_gate_tmp04 AND POI
pch_lvt_mac_gate_tmp06 = pch_lvt_mac_gate_tmp05 NOT VTEL_Ni
pch_lvt_mac_gate_tmp07 = pch_lvt_mac_gate_tmp06 NOT VTEL_Pi
pch_lvt_mac_gate_tmp08 = pch_lvt_mac_gate_tmp07 NOT VTUL_Ni
pch_lvt_mac_gate_tmp09 = pch_lvt_mac_gate_tmp08 NOT VTUL_Pi
pch_lvt_mac_gate_tmp10 = pch_lvt_mac_gate_tmp09 NOT VTL_Ni
pch_lvt_mac_gate_tmp11 = pch_lvt_mac_gate_tmp10 AND VTL_Pi
pch_lvt_mac_gate_tmp12 = pch_lvt_mac_gate_tmp11 NOT VTS_Ni
pch_lvt_mac_gate_tmp13 = pch_lvt_mac_gate_tmp12 NOT VTS_Pi
pch_lvt_mac_gate_tmp14 = pch_lvt_mac_gate_tmp13 NOT VTUL_NLLi
pch_lvt_mac_gate_tmp15 = pch_lvt_mac_gate_tmp14 NOT VTUL_PLLi
pch_lvt_mac_gate_tmp16 = pch_lvt_mac_gate_tmp15 NOT VTL_NLLi
pch_lvt_mac_gate_tmp17 = pch_lvt_mac_gate_tmp16 NOT VTL_PLLi
pch_lvt_mac_gate_tmp18 = pch_lvt_mac_gate_tmp17 NOT NPi
pch_lvt_mac_gate_tmp19 = pch_lvt_mac_gate_tmp18 AND PPi
pch_lvt_mac_gate_tmp20 = pch_lvt_mac_gate_tmp19 NOT PO_P81_WPO
pch_lvt_mac_gate_tmp21 = pch_lvt_mac_gate_tmp20 NOT VARi
pch_lvt_mac_gate_tmp22 = pch_lvt_mac_gate_tmp21 NOT IBJTDMY
pch_lvt_mac_gate_tmp23 = pch_lvt_mac_gate_tmp22 NOT DIODMYi
pch_lvt_mac_gate_tmp24 = pch_lvt_mac_gate_tmp23 NOT SR_ESD
pch_lvt_mac_gate_tmp25 = pch_lvt_mac_gate_tmp24 NOT HIA_DUMMY
pch_lvt_mac_gate = pch_lvt_mac_gate_tmp25 NOT SDI_2


//***** Define connectivity/via layer -- pch_ulvt_mac_gate ****

//* Define layer -- pch_ulvt_mac_gate
pch_ulvt_mac_gate_tmp01 = tpgate2 AND ODI
pch_ulvt_mac_gate_tmp02 = pch_ulvt_mac_gate_tmp01 AND NW
pch_ulvt_mac_gate_tmp03 = pch_ulvt_mac_gate_tmp02 NOT NT_N
pch_ulvt_mac_gate_tmp04 = pch_ulvt_mac_gate_tmp03 NOT OD12
pch_ulvt_mac_gate_tmp05 = pch_ulvt_mac_gate_tmp04 AND POI
pch_ulvt_mac_gate_tmp06 = pch_ulvt_mac_gate_tmp05 NOT VTEL_Ni
pch_ulvt_mac_gate_tmp07 = pch_ulvt_mac_gate_tmp06 NOT VTEL_Pi
pch_ulvt_mac_gate_tmp08 = pch_ulvt_mac_gate_tmp07 NOT VTUL_Ni
pch_ulvt_mac_gate_tmp09 = pch_ulvt_mac_gate_tmp08 AND VTUL_Pi
pch_ulvt_mac_gate_tmp10 = pch_ulvt_mac_gate_tmp09 NOT VTL_Ni
pch_ulvt_mac_gate_tmp11 = pch_ulvt_mac_gate_tmp10 NOT VTL_Pi
pch_ulvt_mac_gate_tmp12 = pch_ulvt_mac_gate_tmp11 NOT VTS_Ni
pch_ulvt_mac_gate_tmp13 = pch_ulvt_mac_gate_tmp12 NOT VTS_Pi
pch_ulvt_mac_gate_tmp14 = pch_ulvt_mac_gate_tmp13 NOT VTUL_NLLi
pch_ulvt_mac_gate_tmp15 = pch_ulvt_mac_gate_tmp14 NOT VTUL_PLLi
pch_ulvt_mac_gate_tmp16 = pch_ulvt_mac_gate_tmp15 NOT VTL_NLLi
pch_ulvt_mac_gate_tmp17 = pch_ulvt_mac_gate_tmp16 NOT VTL_PLLi
pch_ulvt_mac_gate_tmp18 = pch_ulvt_mac_gate_tmp17 NOT NPi
pch_ulvt_mac_gate_tmp19 = pch_ulvt_mac_gate_tmp18 AND PPi
pch_ulvt_mac_gate_tmp20 = pch_ulvt_mac_gate_tmp19 NOT PO_P81_WPO
pch_ulvt_mac_gate_tmp21 = pch_ulvt_mac_gate_tmp20 NOT VARi
pch_ulvt_mac_gate_tmp22 = pch_ulvt_mac_gate_tmp21 NOT IBJTDMY
pch_ulvt_mac_gate_tmp23 = pch_ulvt_mac_gate_tmp22 NOT DIODMYi
pch_ulvt_mac_gate_tmp24 = pch_ulvt_mac_gate_tmp23 NOT SR_ESD
pch_ulvt_mac_gate_tmp25 = pch_ulvt_mac_gate_tmp24 NOT HIA_DUMMY
pch_ulvt_mac_gate = pch_ulvt_mac_gate_tmp25 NOT SDI_2


//***** Define connectivity/via layer -- pch_elvt_mac_gate ****

//* Define layer -- pch_elvt_mac_gate
pch_elvt_mac_gate_tmp01 = tpgate2 AND ODI
pch_elvt_mac_gate_tmp02 = pch_elvt_mac_gate_tmp01 AND NW
pch_elvt_mac_gate_tmp03 = pch_elvt_mac_gate_tmp02 NOT NT_N
pch_elvt_mac_gate_tmp04 = pch_elvt_mac_gate_tmp03 NOT OD12
pch_elvt_mac_gate_tmp05 = pch_elvt_mac_gate_tmp04 AND POI
pch_elvt_mac_gate_tmp06 = pch_elvt_mac_gate_tmp05 NOT VTEL_Ni
pch_elvt_mac_gate_tmp07 = pch_elvt_mac_gate_tmp06 AND VTEL_Pi
pch_elvt_mac_gate_tmp08 = pch_elvt_mac_gate_tmp07 NOT VTUL_Ni
pch_elvt_mac_gate_tmp09 = pch_elvt_mac_gate_tmp08 NOT VTUL_Pi
pch_elvt_mac_gate_tmp10 = pch_elvt_mac_gate_tmp09 NOT VTL_Ni
pch_elvt_mac_gate_tmp11 = pch_elvt_mac_gate_tmp10 NOT VTL_Pi
pch_elvt_mac_gate_tmp12 = pch_elvt_mac_gate_tmp11 NOT VTS_Ni
pch_elvt_mac_gate_tmp13 = pch_elvt_mac_gate_tmp12 NOT VTS_Pi
pch_elvt_mac_gate_tmp14 = pch_elvt_mac_gate_tmp13 NOT VTUL_NLLi
pch_elvt_mac_gate_tmp15 = pch_elvt_mac_gate_tmp14 NOT VTUL_PLLi
pch_elvt_mac_gate_tmp16 = pch_elvt_mac_gate_tmp15 NOT VTL_NLLi
pch_elvt_mac_gate_tmp17 = pch_elvt_mac_gate_tmp16 NOT VTL_PLLi
pch_elvt_mac_gate_tmp18 = pch_elvt_mac_gate_tmp17 NOT NPi
pch_elvt_mac_gate_tmp19 = pch_elvt_mac_gate_tmp18 AND PPi
pch_elvt_mac_gate_tmp20 = pch_elvt_mac_gate_tmp19 NOT PO_P81_WPO
pch_elvt_mac_gate_tmp21 = pch_elvt_mac_gate_tmp20 NOT VARi
pch_elvt_mac_gate_tmp22 = pch_elvt_mac_gate_tmp21 NOT IBJTDMY
pch_elvt_mac_gate_tmp23 = pch_elvt_mac_gate_tmp22 NOT DIODMYi
pch_elvt_mac_gate_tmp24 = pch_elvt_mac_gate_tmp23 NOT SR_ESD
pch_elvt_mac_gate_tmp25 = pch_elvt_mac_gate_tmp24 NOT HIA_DUMMY
pch_elvt_mac_gate = pch_elvt_mac_gate_tmp25 NOT SDI_2


//***** Define connectivity/via layer -- pch_lvtll_mac_gate ****

//* Define layer -- pch_lvtll_mac_gate
pch_lvtll_mac_gate_tmp01 = tpgate2 AND ODI
pch_lvtll_mac_gate_tmp02 = pch_lvtll_mac_gate_tmp01 AND NW
pch_lvtll_mac_gate_tmp03 = pch_lvtll_mac_gate_tmp02 NOT NT_N
pch_lvtll_mac_gate_tmp04 = pch_lvtll_mac_gate_tmp03 NOT OD12
pch_lvtll_mac_gate_tmp05 = pch_lvtll_mac_gate_tmp04 AND POI
pch_lvtll_mac_gate_tmp06 = pch_lvtll_mac_gate_tmp05 NOT VTEL_Ni
pch_lvtll_mac_gate_tmp07 = pch_lvtll_mac_gate_tmp06 NOT VTEL_Pi
pch_lvtll_mac_gate_tmp08 = pch_lvtll_mac_gate_tmp07 NOT VTUL_Ni
pch_lvtll_mac_gate_tmp09 = pch_lvtll_mac_gate_tmp08 NOT VTUL_Pi
pch_lvtll_mac_gate_tmp10 = pch_lvtll_mac_gate_tmp09 NOT VTL_Ni
pch_lvtll_mac_gate_tmp11 = pch_lvtll_mac_gate_tmp10 NOT VTL_Pi
pch_lvtll_mac_gate_tmp12 = pch_lvtll_mac_gate_tmp11 NOT VTS_Ni
pch_lvtll_mac_gate_tmp13 = pch_lvtll_mac_gate_tmp12 NOT VTS_Pi
pch_lvtll_mac_gate_tmp14 = pch_lvtll_mac_gate_tmp13 NOT VTUL_NLLi
pch_lvtll_mac_gate_tmp15 = pch_lvtll_mac_gate_tmp14 NOT VTUL_PLLi
pch_lvtll_mac_gate_tmp16 = pch_lvtll_mac_gate_tmp15 NOT VTL_NLLi
pch_lvtll_mac_gate_tmp17 = pch_lvtll_mac_gate_tmp16 AND VTL_PLLi
pch_lvtll_mac_gate_tmp18 = pch_lvtll_mac_gate_tmp17 NOT NPi
pch_lvtll_mac_gate_tmp19 = pch_lvtll_mac_gate_tmp18 AND PPi
pch_lvtll_mac_gate_tmp20 = pch_lvtll_mac_gate_tmp19 NOT PO_P81_WPO
pch_lvtll_mac_gate_tmp21 = pch_lvtll_mac_gate_tmp20 NOT VARi
pch_lvtll_mac_gate_tmp22 = pch_lvtll_mac_gate_tmp21 NOT IBJTDMY
pch_lvtll_mac_gate_tmp23 = pch_lvtll_mac_gate_tmp22 NOT DIODMYi
pch_lvtll_mac_gate_tmp24 = pch_lvtll_mac_gate_tmp23 NOT SR_ESD
pch_lvtll_mac_gate_tmp25 = pch_lvtll_mac_gate_tmp24 NOT HIA_DUMMY
pch_lvtll_mac_gate = pch_lvtll_mac_gate_tmp25 NOT SDI_2


//***** Define connectivity/via layer -- pch_ulvtll_mac_gate ****

//* Define layer -- pch_ulvtll_mac_gate
pch_ulvtll_mac_gate_tmp01 = tpgate2 AND ODI
pch_ulvtll_mac_gate_tmp02 = pch_ulvtll_mac_gate_tmp01 AND NW
pch_ulvtll_mac_gate_tmp03 = pch_ulvtll_mac_gate_tmp02 NOT NT_N
pch_ulvtll_mac_gate_tmp04 = pch_ulvtll_mac_gate_tmp03 NOT OD12
pch_ulvtll_mac_gate_tmp05 = pch_ulvtll_mac_gate_tmp04 AND POI
pch_ulvtll_mac_gate_tmp06 = pch_ulvtll_mac_gate_tmp05 NOT VTEL_Ni
pch_ulvtll_mac_gate_tmp07 = pch_ulvtll_mac_gate_tmp06 NOT VTEL_Pi
pch_ulvtll_mac_gate_tmp08 = pch_ulvtll_mac_gate_tmp07 NOT VTUL_Ni
pch_ulvtll_mac_gate_tmp09 = pch_ulvtll_mac_gate_tmp08 NOT VTUL_Pi
pch_ulvtll_mac_gate_tmp10 = pch_ulvtll_mac_gate_tmp09 NOT VTL_Ni
pch_ulvtll_mac_gate_tmp11 = pch_ulvtll_mac_gate_tmp10 NOT VTL_Pi
pch_ulvtll_mac_gate_tmp12 = pch_ulvtll_mac_gate_tmp11 NOT VTS_Ni
pch_ulvtll_mac_gate_tmp13 = pch_ulvtll_mac_gate_tmp12 NOT VTS_Pi
pch_ulvtll_mac_gate_tmp14 = pch_ulvtll_mac_gate_tmp13 NOT VTUL_NLLi
pch_ulvtll_mac_gate_tmp15 = pch_ulvtll_mac_gate_tmp14 AND VTUL_PLLi
pch_ulvtll_mac_gate_tmp16 = pch_ulvtll_mac_gate_tmp15 NOT VTL_NLLi
pch_ulvtll_mac_gate_tmp17 = pch_ulvtll_mac_gate_tmp16 NOT VTL_PLLi
pch_ulvtll_mac_gate_tmp18 = pch_ulvtll_mac_gate_tmp17 NOT NPi
pch_ulvtll_mac_gate_tmp19 = pch_ulvtll_mac_gate_tmp18 AND PPi
pch_ulvtll_mac_gate_tmp20 = pch_ulvtll_mac_gate_tmp19 NOT PO_P81_WPO
pch_ulvtll_mac_gate_tmp21 = pch_ulvtll_mac_gate_tmp20 NOT VARi
pch_ulvtll_mac_gate_tmp22 = pch_ulvtll_mac_gate_tmp21 NOT IBJTDMY
pch_ulvtll_mac_gate_tmp23 = pch_ulvtll_mac_gate_tmp22 NOT DIODMYi
pch_ulvtll_mac_gate_tmp24 = pch_ulvtll_mac_gate_tmp23 NOT SR_ESD
pch_ulvtll_mac_gate_tmp25 = pch_ulvtll_mac_gate_tmp24 NOT HIA_DUMMY
pch_ulvtll_mac_gate = pch_ulvtll_mac_gate_tmp25 NOT SDI_2


//***** Define connectivity/via layer -- pch_12_mac_gate ****

//* Define layer -- pch_12_mac_gate
pch_12_mac_gate_tmp01 = tpgate2 AND ODI
pch_12_mac_gate_tmp02 = pch_12_mac_gate_tmp01 AND NW
pch_12_mac_gate_tmp03 = pch_12_mac_gate_tmp02 NOT NT_N
pch_12_mac_gate_tmp04 = pch_12_mac_gate_tmp03 AND OD12
pch_12_mac_gate_tmp05 = pch_12_mac_gate_tmp04 AND POI
pch_12_mac_gate_tmp06 = pch_12_mac_gate_tmp05 NOT VTEL_Ni
pch_12_mac_gate_tmp07 = pch_12_mac_gate_tmp06 NOT VTEL_Pi
pch_12_mac_gate_tmp08 = pch_12_mac_gate_tmp07 NOT VTUL_Ni
pch_12_mac_gate_tmp09 = pch_12_mac_gate_tmp08 NOT VTUL_Pi
pch_12_mac_gate_tmp10 = pch_12_mac_gate_tmp09 NOT VTL_Ni
pch_12_mac_gate_tmp11 = pch_12_mac_gate_tmp10 NOT VTL_Pi
pch_12_mac_gate_tmp12 = pch_12_mac_gate_tmp11 NOT VTS_Ni
pch_12_mac_gate_tmp13 = pch_12_mac_gate_tmp12 NOT VTS_Pi
pch_12_mac_gate_tmp14 = pch_12_mac_gate_tmp13 NOT VTUL_NLLi
pch_12_mac_gate_tmp15 = pch_12_mac_gate_tmp14 NOT VTUL_PLLi
pch_12_mac_gate_tmp16 = pch_12_mac_gate_tmp15 NOT VTL_NLLi
pch_12_mac_gate_tmp17 = pch_12_mac_gate_tmp16 NOT VTL_PLLi
pch_12_mac_gate_tmp18 = pch_12_mac_gate_tmp17 NOT NPi
pch_12_mac_gate_tmp19 = pch_12_mac_gate_tmp18 AND PPi
pch_12_mac_gate_tmp20 = pch_12_mac_gate_tmp19 NOT PO_P81_WPO
pch_12_mac_gate_tmp21 = pch_12_mac_gate_tmp20 NOT VARi
pch_12_mac_gate_tmp22 = pch_12_mac_gate_tmp21 NOT IBJTDMY
pch_12_mac_gate_tmp23 = pch_12_mac_gate_tmp22 NOT DIODMYi
pch_12_mac_gate_tmp24 = pch_12_mac_gate_tmp23 NOT SR_ESD
pch_12_mac_gate_tmp25 = pch_12_mac_gate_tmp24 NOT HIA_DUMMY
pch_12_mac_gate = pch_12_mac_gate_tmp25 NOT SDI_2


//***** Define connectivity/via layer -- nch_eflvt_mac_gate ****

//* Define layer -- nch_eflvt_mac_gate
nch_eflvt_mac_gate_tmp01 = tngate3a NOT dnwdmy
nch_eflvt_mac_gate_tmp02 = nch_eflvt_mac_gate_tmp01 AND ODI
nch_eflvt_mac_gate_tmp03 = nch_eflvt_mac_gate_tmp02 NOT NW
nch_eflvt_mac_gate_tmp04 = nch_eflvt_mac_gate_tmp03 NOT NT_N
nch_eflvt_mac_gate_tmp05 = nch_eflvt_mac_gate_tmp04 NOT OD12
nch_eflvt_mac_gate_tmp06 = nch_eflvt_mac_gate_tmp05 AND POI
nch_eflvt_mac_gate_tmp07 = nch_eflvt_mac_gate_tmp06 NOT VTEL_Ni
nch_eflvt_mac_gate_tmp08 = nch_eflvt_mac_gate_tmp07 NOT VTEL_Pi
nch_eflvt_mac_gate_tmp09 = nch_eflvt_mac_gate_tmp08 NOT VTUL_Ni
nch_eflvt_mac_gate_tmp10 = nch_eflvt_mac_gate_tmp09 NOT VTUL_Pi
nch_eflvt_mac_gate_tmp11 = nch_eflvt_mac_gate_tmp10 AND VTL_Ni
nch_eflvt_mac_gate_tmp12 = nch_eflvt_mac_gate_tmp11 NOT VTL_Pi
nch_eflvt_mac_gate_tmp13 = nch_eflvt_mac_gate_tmp12 NOT VTS_Ni
nch_eflvt_mac_gate_tmp14 = nch_eflvt_mac_gate_tmp13 NOT VTS_Pi
nch_eflvt_mac_gate_tmp15 = nch_eflvt_mac_gate_tmp14 NOT VTUL_NLLi
nch_eflvt_mac_gate_tmp16 = nch_eflvt_mac_gate_tmp15 NOT VTUL_PLLi
nch_eflvt_mac_gate_tmp17 = nch_eflvt_mac_gate_tmp16 NOT VTL_NLLi
nch_eflvt_mac_gate_tmp18 = nch_eflvt_mac_gate_tmp17 NOT VTL_PLLi
nch_eflvt_mac_gate_tmp19 = nch_eflvt_mac_gate_tmp18 AND NPi
nch_eflvt_mac_gate_tmp20 = nch_eflvt_mac_gate_tmp19 NOT PPi
nch_eflvt_mac_gate_tmp21 = nch_eflvt_mac_gate_tmp20 AND PO_P81_WPO
nch_eflvt_mac_gate_tmp22 = nch_eflvt_mac_gate_tmp21 AND METALFUSE
nch_eflvt_mac_gate_tmp23 = nch_eflvt_mac_gate_tmp22 NOT VARi
nch_eflvt_mac_gate_tmp24 = nch_eflvt_mac_gate_tmp23 NOT IBJTDMY
nch_eflvt_mac_gate_tmp25 = nch_eflvt_mac_gate_tmp24 NOT DIODMYi
nch_eflvt_mac_gate_tmp26 = nch_eflvt_mac_gate_tmp25 NOT SR_ESD
nch_eflvt_mac_gate_tmp27 = nch_eflvt_mac_gate_tmp26 NOT HIA_DUMMY
nch_eflvt_mac_gate = nch_eflvt_mac_gate_tmp27 NOT SDI_2


//***** Define connectivity/via layer -- pch_eflvt_mac_gate ****

//* Define layer -- pch_eflvt_mac_gate
pch_eflvt_mac_gate_tmp01 = tpgate2 AND ODI
pch_eflvt_mac_gate_tmp02 = pch_eflvt_mac_gate_tmp01 AND NW
pch_eflvt_mac_gate_tmp03 = pch_eflvt_mac_gate_tmp02 NOT NT_N
pch_eflvt_mac_gate_tmp04 = pch_eflvt_mac_gate_tmp03 NOT OD12
pch_eflvt_mac_gate_tmp05 = pch_eflvt_mac_gate_tmp04 AND POI
pch_eflvt_mac_gate_tmp06 = pch_eflvt_mac_gate_tmp05 NOT VTEL_Ni
pch_eflvt_mac_gate_tmp07 = pch_eflvt_mac_gate_tmp06 NOT VTEL_Pi
pch_eflvt_mac_gate_tmp08 = pch_eflvt_mac_gate_tmp07 NOT VTUL_Ni
pch_eflvt_mac_gate_tmp09 = pch_eflvt_mac_gate_tmp08 NOT VTUL_Pi
pch_eflvt_mac_gate_tmp10 = pch_eflvt_mac_gate_tmp09 NOT VTL_Ni
pch_eflvt_mac_gate_tmp11 = pch_eflvt_mac_gate_tmp10 AND VTL_Pi
pch_eflvt_mac_gate_tmp12 = pch_eflvt_mac_gate_tmp11 NOT VTS_Ni
pch_eflvt_mac_gate_tmp13 = pch_eflvt_mac_gate_tmp12 NOT VTS_Pi
pch_eflvt_mac_gate_tmp14 = pch_eflvt_mac_gate_tmp13 NOT VTUL_NLLi
pch_eflvt_mac_gate_tmp15 = pch_eflvt_mac_gate_tmp14 NOT VTUL_PLLi
pch_eflvt_mac_gate_tmp16 = pch_eflvt_mac_gate_tmp15 NOT VTL_NLLi
pch_eflvt_mac_gate_tmp17 = pch_eflvt_mac_gate_tmp16 NOT VTL_PLLi
pch_eflvt_mac_gate_tmp18 = pch_eflvt_mac_gate_tmp17 NOT NPi
pch_eflvt_mac_gate_tmp19 = pch_eflvt_mac_gate_tmp18 AND PPi
pch_eflvt_mac_gate_tmp20 = pch_eflvt_mac_gate_tmp19 AND PO_P81_WPO
pch_eflvt_mac_gate_tmp21 = pch_eflvt_mac_gate_tmp20 AND METALFUSE
pch_eflvt_mac_gate_tmp22 = pch_eflvt_mac_gate_tmp21 NOT VARi
pch_eflvt_mac_gate_tmp23 = pch_eflvt_mac_gate_tmp22 NOT IBJTDMY
pch_eflvt_mac_gate_tmp24 = pch_eflvt_mac_gate_tmp23 NOT DIODMYi
pch_eflvt_mac_gate_tmp25 = pch_eflvt_mac_gate_tmp24 NOT SR_ESD
pch_eflvt_mac_gate_tmp26 = pch_eflvt_mac_gate_tmp25 NOT HIA_DUMMY
pch_eflvt_mac_gate = pch_eflvt_mac_gate_tmp26 NOT SDI_2


//***** Define connectivity/via layer -- nch_efsvt_mac_gate ****

//* Define layer -- nch_efsvt_mac_gate
nch_efsvt_mac_gate_tmp01 = tngate3a NOT dnwdmy
nch_efsvt_mac_gate_tmp02 = nch_efsvt_mac_gate_tmp01 AND ODI
nch_efsvt_mac_gate_tmp03 = nch_efsvt_mac_gate_tmp02 NOT NW
nch_efsvt_mac_gate_tmp04 = nch_efsvt_mac_gate_tmp03 NOT NT_N
nch_efsvt_mac_gate_tmp05 = nch_efsvt_mac_gate_tmp04 NOT OD12
nch_efsvt_mac_gate_tmp06 = nch_efsvt_mac_gate_tmp05 AND POI
nch_efsvt_mac_gate_tmp07 = nch_efsvt_mac_gate_tmp06 NOT VTEL_Ni
nch_efsvt_mac_gate_tmp08 = nch_efsvt_mac_gate_tmp07 NOT VTEL_Pi
nch_efsvt_mac_gate_tmp09 = nch_efsvt_mac_gate_tmp08 NOT VTUL_Ni
nch_efsvt_mac_gate_tmp10 = nch_efsvt_mac_gate_tmp09 NOT VTUL_Pi
nch_efsvt_mac_gate_tmp11 = nch_efsvt_mac_gate_tmp10 NOT VTL_Ni
nch_efsvt_mac_gate_tmp12 = nch_efsvt_mac_gate_tmp11 NOT VTL_Pi
nch_efsvt_mac_gate_tmp13 = nch_efsvt_mac_gate_tmp12 AND VTS_Ni
nch_efsvt_mac_gate_tmp14 = nch_efsvt_mac_gate_tmp13 NOT VTS_Pi
nch_efsvt_mac_gate_tmp15 = nch_efsvt_mac_gate_tmp14 NOT VTUL_NLLi
nch_efsvt_mac_gate_tmp16 = nch_efsvt_mac_gate_tmp15 NOT VTUL_PLLi
nch_efsvt_mac_gate_tmp17 = nch_efsvt_mac_gate_tmp16 NOT VTL_NLLi
nch_efsvt_mac_gate_tmp18 = nch_efsvt_mac_gate_tmp17 NOT VTL_PLLi
nch_efsvt_mac_gate_tmp19 = nch_efsvt_mac_gate_tmp18 AND NPi
nch_efsvt_mac_gate_tmp20 = nch_efsvt_mac_gate_tmp19 NOT PPi
nch_efsvt_mac_gate_tmp21 = nch_efsvt_mac_gate_tmp20 AND PO_P81_WPO
nch_efsvt_mac_gate_tmp22 = nch_efsvt_mac_gate_tmp21 AND METALFUSE
nch_efsvt_mac_gate_tmp23 = nch_efsvt_mac_gate_tmp22 NOT VARi
nch_efsvt_mac_gate_tmp24 = nch_efsvt_mac_gate_tmp23 NOT IBJTDMY
nch_efsvt_mac_gate_tmp25 = nch_efsvt_mac_gate_tmp24 NOT DIODMYi
nch_efsvt_mac_gate_tmp26 = nch_efsvt_mac_gate_tmp25 NOT SR_ESD
nch_efsvt_mac_gate_tmp27 = nch_efsvt_mac_gate_tmp26 NOT HIA_DUMMY
nch_efsvt_mac_gate = nch_efsvt_mac_gate_tmp27 NOT SDI_2


//***** Define connectivity/via layer -- pch_efsvt_mac_gate ****

//* Define layer -- pch_efsvt_mac_gate
pch_efsvt_mac_gate_tmp01 = tpgate2 AND ODI
pch_efsvt_mac_gate_tmp02 = pch_efsvt_mac_gate_tmp01 AND NW
pch_efsvt_mac_gate_tmp03 = pch_efsvt_mac_gate_tmp02 NOT NT_N
pch_efsvt_mac_gate_tmp04 = pch_efsvt_mac_gate_tmp03 NOT OD12
pch_efsvt_mac_gate_tmp05 = pch_efsvt_mac_gate_tmp04 AND POI
pch_efsvt_mac_gate_tmp06 = pch_efsvt_mac_gate_tmp05 NOT VTEL_Ni
pch_efsvt_mac_gate_tmp07 = pch_efsvt_mac_gate_tmp06 NOT VTEL_Pi
pch_efsvt_mac_gate_tmp08 = pch_efsvt_mac_gate_tmp07 NOT VTUL_Ni
pch_efsvt_mac_gate_tmp09 = pch_efsvt_mac_gate_tmp08 NOT VTUL_Pi
pch_efsvt_mac_gate_tmp10 = pch_efsvt_mac_gate_tmp09 NOT VTL_Ni
pch_efsvt_mac_gate_tmp11 = pch_efsvt_mac_gate_tmp10 NOT VTL_Pi
pch_efsvt_mac_gate_tmp12 = pch_efsvt_mac_gate_tmp11 NOT VTS_Ni
pch_efsvt_mac_gate_tmp13 = pch_efsvt_mac_gate_tmp12 AND VTS_Pi
pch_efsvt_mac_gate_tmp14 = pch_efsvt_mac_gate_tmp13 NOT VTUL_NLLi
pch_efsvt_mac_gate_tmp15 = pch_efsvt_mac_gate_tmp14 NOT VTUL_PLLi
pch_efsvt_mac_gate_tmp16 = pch_efsvt_mac_gate_tmp15 NOT VTL_NLLi
pch_efsvt_mac_gate_tmp17 = pch_efsvt_mac_gate_tmp16 NOT VTL_PLLi
pch_efsvt_mac_gate_tmp18 = pch_efsvt_mac_gate_tmp17 NOT NPi
pch_efsvt_mac_gate_tmp19 = pch_efsvt_mac_gate_tmp18 AND PPi
pch_efsvt_mac_gate_tmp20 = pch_efsvt_mac_gate_tmp19 AND PO_P81_WPO
pch_efsvt_mac_gate_tmp21 = pch_efsvt_mac_gate_tmp20 AND METALFUSE
pch_efsvt_mac_gate_tmp22 = pch_efsvt_mac_gate_tmp21 NOT VARi
pch_efsvt_mac_gate_tmp23 = pch_efsvt_mac_gate_tmp22 NOT IBJTDMY
pch_efsvt_mac_gate_tmp24 = pch_efsvt_mac_gate_tmp23 NOT DIODMYi
pch_efsvt_mac_gate_tmp25 = pch_efsvt_mac_gate_tmp24 NOT SR_ESD
pch_efsvt_mac_gate_tmp26 = pch_efsvt_mac_gate_tmp25 NOT HIA_DUMMY
pch_efsvt_mac_gate = pch_efsvt_mac_gate_tmp26 NOT SDI_2


//* Define device -- nmos nchpg_hdsr_mac
shpmim2_reg1 = PMIM_2 NOT INTERACT PMIM_1 
shpmim2_reg2 = shpmim2_reg1 NOT INTERACT PMIM_2_1 
shpmim2_reg3 = shpmim2_reg2 INTERACT BPC_LVi 
shpmim2_reg4 = shpmim2_reg3 INTERACT BPC_LV_O 
shpmim2_reg5 = shpmim2_reg4 INTERACT BPC_GNDi 
shpmim2_reg6 = shpmim2_reg5 INTERACT BPC_GND_O 
shpmim2_reg7 = shpmim2_reg6 INTERACT MPC_LVi 
shpmim2_reg8 = shpmim2_reg7 INTERACT MPC_LV_O 
shpmim2_reg9 = shpmim2_reg8 INTERACT TPC_GNDi 
shpmim2_reg10 = shpmim2_reg9 INTERACT TPC_GND_O 
shpmim2_reg_5thv1 = shpmim2_reg10 INTERACT BPC_HV2i 
shpmim2_reg_5thv2 = shpmim2_reg_5thv1 NOT INTERACT BPC_HV1i 
shpmim2_reg_5thv = shpmim2_reg_5thv2 NOT INTERACT BPC_HV1_O 

//* Define layer -- ngate_pg_hdsr_mac
ngate_pg_hdsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_hdsr_mac_tmp02 = ngate_pg_hdsr_mac_tmp01 AND SRM
ngate_pg_hdsr_mac_tmp03 = ngate_pg_hdsr_mac_tmp02 NOT SRM6
ngate_pg_hdsr_mac_tmp04 = ngate_pg_hdsr_mac_tmp03 NOT SRM8
ngate_pg_hdsr_mac_tmp05 = ngate_pg_hdsr_mac_tmp04 NOT SRM9
ngate_pg_hdsr_mac_tmp06 = ngate_pg_hdsr_mac_tmp05 NOT SRM10
ngate_pg_hdsr_mac_tmp07 = ngate_pg_hdsr_mac_tmp06 AND SRM11
ngate_pg_hdsr_mac_tmp08 = ngate_pg_hdsr_mac_tmp07 NOT SRM12
ngate_pg_hdsr_mac_tmp09 = ngate_pg_hdsr_mac_tmp08 NOT SRM13
ngate_pg_hdsr_mac_tmp10 = ngate_pg_hdsr_mac_tmp09 NOT SRM14
ngate_pg_hdsr_mac_tmp11 = ngate_pg_hdsr_mac_tmp10 NOT SRM15
ngate_pg_hdsr_mac_tmp12 = ngate_pg_hdsr_mac_tmp11 NOT SRM16
ngate_pg_hdsr_mac_tmp13 = ngate_pg_hdsr_mac_tmp12 NOT SRM17
ngate_pg_hdsr_mac_tmp14 = ngate_pg_hdsr_mac_tmp13 NOT SRM18
ngate_pg_hdsr_mac_tmp15 = ngate_pg_hdsr_mac_tmp14 NOT SRM19
ngate_pg_hdsr_mac_tmp16 = ngate_pg_hdsr_mac_tmp15 NOT SRM20
ngate_pg_hdsr_mac_tmp17 = ngate_pg_hdsr_mac_tmp16 NOT SRM21
ngate_pg_hdsr_mac_tmp18 = ngate_pg_hdsr_mac_tmp17 AND SRAMDMY
ngate_pg_hdsr_mac_tmp19 = ngate_pg_hdsr_mac_tmp18 AND SRAMPG
ngate_pg_hdsr_mac = ngate_pg_hdsr_mac_tmp19 NOT SRAMRP


//* Define device -- nmos nchpd_hdsr_mac

//* Define layer -- ngate_pd_hdsr_mac
ngate_pd_hdsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_hdsr_mac_tmp02 = ngate_pd_hdsr_mac_tmp01 AND SRM
ngate_pd_hdsr_mac_tmp03 = ngate_pd_hdsr_mac_tmp02 NOT SRM6
ngate_pd_hdsr_mac_tmp04 = ngate_pd_hdsr_mac_tmp03 NOT SRM8
ngate_pd_hdsr_mac_tmp05 = ngate_pd_hdsr_mac_tmp04 NOT SRM9
ngate_pd_hdsr_mac_tmp06 = ngate_pd_hdsr_mac_tmp05 NOT SRM10
ngate_pd_hdsr_mac_tmp07 = ngate_pd_hdsr_mac_tmp06 AND SRM11
ngate_pd_hdsr_mac_tmp08 = ngate_pd_hdsr_mac_tmp07 NOT SRM12
ngate_pd_hdsr_mac_tmp09 = ngate_pd_hdsr_mac_tmp08 NOT SRM13
ngate_pd_hdsr_mac_tmp10 = ngate_pd_hdsr_mac_tmp09 NOT SRM14
ngate_pd_hdsr_mac_tmp11 = ngate_pd_hdsr_mac_tmp10 NOT SRM15
ngate_pd_hdsr_mac_tmp12 = ngate_pd_hdsr_mac_tmp11 NOT SRM16
ngate_pd_hdsr_mac_tmp13 = ngate_pd_hdsr_mac_tmp12 NOT SRM17
ngate_pd_hdsr_mac_tmp14 = ngate_pd_hdsr_mac_tmp13 NOT SRM18
ngate_pd_hdsr_mac_tmp15 = ngate_pd_hdsr_mac_tmp14 NOT SRM19
ngate_pd_hdsr_mac_tmp16 = ngate_pd_hdsr_mac_tmp15 NOT SRM20
ngate_pd_hdsr_mac_tmp17 = ngate_pd_hdsr_mac_tmp16 NOT SRM21
ngate_pd_hdsr_mac_tmp18 = ngate_pd_hdsr_mac_tmp17 AND SRAMDMY
ngate_pd_hdsr_mac_tmp19 = ngate_pd_hdsr_mac_tmp18 NOT SRAMPG
ngate_pd_hdsr_mac = ngate_pd_hdsr_mac_tmp19 NOT SRAMRP


//* Define device -- pmos pchpu_hdsr_mac

//* Define layer -- pgate_pu_hdsr_mac
pgate_pu_hdsr_mac_tmp01 = pgate_s_normal AND SRMDEVi
pgate_pu_hdsr_mac_tmp02 = pgate_pu_hdsr_mac_tmp01 AND SRM
pgate_pu_hdsr_mac_tmp03 = pgate_pu_hdsr_mac_tmp02 NOT SRM6
pgate_pu_hdsr_mac_tmp04 = pgate_pu_hdsr_mac_tmp03 NOT SRM8
pgate_pu_hdsr_mac_tmp05 = pgate_pu_hdsr_mac_tmp04 NOT SRM9
pgate_pu_hdsr_mac_tmp06 = pgate_pu_hdsr_mac_tmp05 NOT SRM10
pgate_pu_hdsr_mac_tmp07 = pgate_pu_hdsr_mac_tmp06 AND SRM11
pgate_pu_hdsr_mac_tmp08 = pgate_pu_hdsr_mac_tmp07 NOT SRM12
pgate_pu_hdsr_mac_tmp09 = pgate_pu_hdsr_mac_tmp08 NOT SRM13
pgate_pu_hdsr_mac_tmp10 = pgate_pu_hdsr_mac_tmp09 NOT SRM14
pgate_pu_hdsr_mac_tmp11 = pgate_pu_hdsr_mac_tmp10 NOT SRM15
pgate_pu_hdsr_mac_tmp12 = pgate_pu_hdsr_mac_tmp11 NOT SRM16
pgate_pu_hdsr_mac_tmp13 = pgate_pu_hdsr_mac_tmp12 NOT SRM17
pgate_pu_hdsr_mac_tmp14 = pgate_pu_hdsr_mac_tmp13 NOT SRM18
pgate_pu_hdsr_mac_tmp15 = pgate_pu_hdsr_mac_tmp14 NOT SRM19
pgate_pu_hdsr_mac_tmp16 = pgate_pu_hdsr_mac_tmp15 NOT SRM20
pgate_pu_hdsr_mac_tmp17 = pgate_pu_hdsr_mac_tmp16 NOT SRM21
pgate_pu_hdsr_mac_tmp18 = pgate_pu_hdsr_mac_tmp17 AND SRAMDMY
pgate_pu_hdsr_mac_tmp19 = pgate_pu_hdsr_mac_tmp18 NOT SRAMPG
pgate_pu_hdsr_mac = pgate_pu_hdsr_mac_tmp19 NOT SRAMRP


//* Define device -- nmos nchpg_hcsr_mac

//* Define layer -- ngate_pg_hcsr_mac
ngate_pg_hcsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_hcsr_mac_tmp02 = ngate_pg_hcsr_mac_tmp01 AND SRM
ngate_pg_hcsr_mac_tmp03 = ngate_pg_hcsr_mac_tmp02 NOT SRM6
ngate_pg_hcsr_mac_tmp04 = ngate_pg_hcsr_mac_tmp03 NOT SRM8
ngate_pg_hcsr_mac_tmp05 = ngate_pg_hcsr_mac_tmp04 NOT SRM9
ngate_pg_hcsr_mac_tmp06 = ngate_pg_hcsr_mac_tmp05 NOT SRM10
ngate_pg_hcsr_mac_tmp07 = ngate_pg_hcsr_mac_tmp06 NOT SRM11
ngate_pg_hcsr_mac_tmp08 = ngate_pg_hcsr_mac_tmp07 AND SRM12
ngate_pg_hcsr_mac_tmp09 = ngate_pg_hcsr_mac_tmp08 NOT SRM13
ngate_pg_hcsr_mac_tmp10 = ngate_pg_hcsr_mac_tmp09 NOT SRM14
ngate_pg_hcsr_mac_tmp11 = ngate_pg_hcsr_mac_tmp10 NOT SRM15
ngate_pg_hcsr_mac_tmp12 = ngate_pg_hcsr_mac_tmp11 NOT SRM16
ngate_pg_hcsr_mac_tmp13 = ngate_pg_hcsr_mac_tmp12 NOT SRM17
ngate_pg_hcsr_mac_tmp14 = ngate_pg_hcsr_mac_tmp13 NOT SRM18
ngate_pg_hcsr_mac_tmp15 = ngate_pg_hcsr_mac_tmp14 NOT SRM19
ngate_pg_hcsr_mac_tmp16 = ngate_pg_hcsr_mac_tmp15 NOT SRM20
ngate_pg_hcsr_mac_tmp17 = ngate_pg_hcsr_mac_tmp16 NOT SRM21
ngate_pg_hcsr_mac_tmp18 = ngate_pg_hcsr_mac_tmp17 AND SRAMDMY
ngate_pg_hcsr_mac_tmp19 = ngate_pg_hcsr_mac_tmp18 AND SRAMPG
ngate_pg_hcsr_mac = ngate_pg_hcsr_mac_tmp19 NOT SRAMRP


//* Define device -- nmos nchpd_hcsr_mac

//* Define layer -- ngate_pd_hcsr_mac
ngate_pd_hcsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_hcsr_mac_tmp02 = ngate_pd_hcsr_mac_tmp01 AND SRM
ngate_pd_hcsr_mac_tmp03 = ngate_pd_hcsr_mac_tmp02 NOT SRM6
ngate_pd_hcsr_mac_tmp04 = ngate_pd_hcsr_mac_tmp03 NOT SRM8
ngate_pd_hcsr_mac_tmp05 = ngate_pd_hcsr_mac_tmp04 NOT SRM9
ngate_pd_hcsr_mac_tmp06 = ngate_pd_hcsr_mac_tmp05 NOT SRM10
ngate_pd_hcsr_mac_tmp07 = ngate_pd_hcsr_mac_tmp06 NOT SRM11
ngate_pd_hcsr_mac_tmp08 = ngate_pd_hcsr_mac_tmp07 AND SRM12
ngate_pd_hcsr_mac_tmp09 = ngate_pd_hcsr_mac_tmp08 NOT SRM13
ngate_pd_hcsr_mac_tmp10 = ngate_pd_hcsr_mac_tmp09 NOT SRM14
ngate_pd_hcsr_mac_tmp11 = ngate_pd_hcsr_mac_tmp10 NOT SRM15
ngate_pd_hcsr_mac_tmp12 = ngate_pd_hcsr_mac_tmp11 NOT SRM16
ngate_pd_hcsr_mac_tmp13 = ngate_pd_hcsr_mac_tmp12 NOT SRM17
ngate_pd_hcsr_mac_tmp14 = ngate_pd_hcsr_mac_tmp13 NOT SRM18
ngate_pd_hcsr_mac_tmp15 = ngate_pd_hcsr_mac_tmp14 NOT SRM19
ngate_pd_hcsr_mac_tmp16 = ngate_pd_hcsr_mac_tmp15 NOT SRM20
ngate_pd_hcsr_mac_tmp17 = ngate_pd_hcsr_mac_tmp16 NOT SRM21
ngate_pd_hcsr_mac_tmp18 = ngate_pd_hcsr_mac_tmp17 AND SRAMDMY
ngate_pd_hcsr_mac_tmp19 = ngate_pd_hcsr_mac_tmp18 NOT SRAMPG
ngate_pd_hcsr_mac = ngate_pd_hcsr_mac_tmp19 NOT SRAMRP


//* Define device -- pmos pchpu_hcsr_mac

//* Define layer -- pgate_pu_hcsr_mac
pgate_pu_hcsr_mac_tmp01 = pgate_s_normal AND SRMDEVi
pgate_pu_hcsr_mac_tmp02 = pgate_pu_hcsr_mac_tmp01 AND SRM
pgate_pu_hcsr_mac_tmp03 = pgate_pu_hcsr_mac_tmp02 NOT SRM6
pgate_pu_hcsr_mac_tmp04 = pgate_pu_hcsr_mac_tmp03 NOT SRM8
pgate_pu_hcsr_mac_tmp05 = pgate_pu_hcsr_mac_tmp04 NOT SRM9
pgate_pu_hcsr_mac_tmp06 = pgate_pu_hcsr_mac_tmp05 NOT SRM10
pgate_pu_hcsr_mac_tmp07 = pgate_pu_hcsr_mac_tmp06 NOT SRM11
pgate_pu_hcsr_mac_tmp08 = pgate_pu_hcsr_mac_tmp07 AND SRM12
pgate_pu_hcsr_mac_tmp09 = pgate_pu_hcsr_mac_tmp08 NOT SRM13
pgate_pu_hcsr_mac_tmp10 = pgate_pu_hcsr_mac_tmp09 NOT SRM14
pgate_pu_hcsr_mac_tmp11 = pgate_pu_hcsr_mac_tmp10 NOT SRM15
pgate_pu_hcsr_mac_tmp12 = pgate_pu_hcsr_mac_tmp11 NOT SRM16
pgate_pu_hcsr_mac_tmp13 = pgate_pu_hcsr_mac_tmp12 NOT SRM17
pgate_pu_hcsr_mac_tmp14 = pgate_pu_hcsr_mac_tmp13 NOT SRM18
pgate_pu_hcsr_mac_tmp15 = pgate_pu_hcsr_mac_tmp14 NOT SRM19
pgate_pu_hcsr_mac_tmp16 = pgate_pu_hcsr_mac_tmp15 NOT SRM20
pgate_pu_hcsr_mac_tmp17 = pgate_pu_hcsr_mac_tmp16 NOT SRM21
pgate_pu_hcsr_mac_tmp18 = pgate_pu_hcsr_mac_tmp17 AND SRAMDMY
pgate_pu_hcsr_mac_tmp19 = pgate_pu_hcsr_mac_tmp18 NOT SRAMPG
pgate_pu_hcsr_mac = pgate_pu_hcsr_mac_tmp19 NOT SRAMRP


//* Define device -- nmos nchpg_hshcsr_mac

//* Define layer -- ngate_pg_hshcsr_mac
ngate_pg_hshcsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_hshcsr_mac_tmp02 = ngate_pg_hshcsr_mac_tmp01 AND SRM
ngate_pg_hshcsr_mac_tmp03 = ngate_pg_hshcsr_mac_tmp02 NOT SRM6
ngate_pg_hshcsr_mac_tmp04 = ngate_pg_hshcsr_mac_tmp03 NOT SRM8
ngate_pg_hshcsr_mac_tmp05 = ngate_pg_hshcsr_mac_tmp04 NOT SRM9
ngate_pg_hshcsr_mac_tmp06 = ngate_pg_hshcsr_mac_tmp05 NOT SRM10
ngate_pg_hshcsr_mac_tmp07 = ngate_pg_hshcsr_mac_tmp06 NOT SRM11
ngate_pg_hshcsr_mac_tmp08 = ngate_pg_hshcsr_mac_tmp07 AND SRM12
ngate_pg_hshcsr_mac_tmp09 = ngate_pg_hshcsr_mac_tmp08 NOT SRM13
ngate_pg_hshcsr_mac_tmp10 = ngate_pg_hshcsr_mac_tmp09 NOT SRM14
ngate_pg_hshcsr_mac_tmp11 = ngate_pg_hshcsr_mac_tmp10 NOT SRM15
ngate_pg_hshcsr_mac_tmp12 = ngate_pg_hshcsr_mac_tmp11 NOT SRM16
ngate_pg_hshcsr_mac_tmp13 = ngate_pg_hshcsr_mac_tmp12 NOT SRM17
ngate_pg_hshcsr_mac_tmp14 = ngate_pg_hshcsr_mac_tmp13 NOT SRM18
ngate_pg_hshcsr_mac_tmp15 = ngate_pg_hshcsr_mac_tmp14 NOT SRM19
ngate_pg_hshcsr_mac_tmp16 = ngate_pg_hshcsr_mac_tmp15 NOT SRM20
ngate_pg_hshcsr_mac_tmp17 = ngate_pg_hshcsr_mac_tmp16 AND SRM21
ngate_pg_hshcsr_mac_tmp18 = ngate_pg_hshcsr_mac_tmp17 AND SRAMDMY
ngate_pg_hshcsr_mac_tmp19 = ngate_pg_hshcsr_mac_tmp18 AND SRAMPG
ngate_pg_hshcsr_mac = ngate_pg_hshcsr_mac_tmp19 NOT SRAMRP


//* Define device -- nmos nchpd_hshcsr_mac

//* Define layer -- ngate_pd_hshcsr_mac
ngate_pd_hshcsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_hshcsr_mac_tmp02 = ngate_pd_hshcsr_mac_tmp01 AND SRM
ngate_pd_hshcsr_mac_tmp03 = ngate_pd_hshcsr_mac_tmp02 NOT SRM6
ngate_pd_hshcsr_mac_tmp04 = ngate_pd_hshcsr_mac_tmp03 NOT SRM8
ngate_pd_hshcsr_mac_tmp05 = ngate_pd_hshcsr_mac_tmp04 NOT SRM9
ngate_pd_hshcsr_mac_tmp06 = ngate_pd_hshcsr_mac_tmp05 NOT SRM10
ngate_pd_hshcsr_mac_tmp07 = ngate_pd_hshcsr_mac_tmp06 NOT SRM11
ngate_pd_hshcsr_mac_tmp08 = ngate_pd_hshcsr_mac_tmp07 AND SRM12
ngate_pd_hshcsr_mac_tmp09 = ngate_pd_hshcsr_mac_tmp08 NOT SRM13
ngate_pd_hshcsr_mac_tmp10 = ngate_pd_hshcsr_mac_tmp09 NOT SRM14
ngate_pd_hshcsr_mac_tmp11 = ngate_pd_hshcsr_mac_tmp10 NOT SRM15
ngate_pd_hshcsr_mac_tmp12 = ngate_pd_hshcsr_mac_tmp11 NOT SRM16
ngate_pd_hshcsr_mac_tmp13 = ngate_pd_hshcsr_mac_tmp12 NOT SRM17
ngate_pd_hshcsr_mac_tmp14 = ngate_pd_hshcsr_mac_tmp13 NOT SRM18
ngate_pd_hshcsr_mac_tmp15 = ngate_pd_hshcsr_mac_tmp14 NOT SRM19
ngate_pd_hshcsr_mac_tmp16 = ngate_pd_hshcsr_mac_tmp15 NOT SRM20
ngate_pd_hshcsr_mac_tmp17 = ngate_pd_hshcsr_mac_tmp16 AND SRM21
ngate_pd_hshcsr_mac_tmp18 = ngate_pd_hshcsr_mac_tmp17 AND SRAMDMY
ngate_pd_hshcsr_mac_tmp19 = ngate_pd_hshcsr_mac_tmp18 NOT SRAMPG
ngate_pd_hshcsr_mac = ngate_pd_hshcsr_mac_tmp19 NOT SRAMRP


//* Define device -- pmos pchpu_hshcsr_mac

//* Define layer -- pgate_pu_hshcsr_mac
pgate_pu_hshcsr_mac_tmp01 = pgate_s_normal AND SRMDEVi
pgate_pu_hshcsr_mac_tmp02 = pgate_pu_hshcsr_mac_tmp01 AND SRM
pgate_pu_hshcsr_mac_tmp03 = pgate_pu_hshcsr_mac_tmp02 NOT SRM6
pgate_pu_hshcsr_mac_tmp04 = pgate_pu_hshcsr_mac_tmp03 NOT SRM8
pgate_pu_hshcsr_mac_tmp05 = pgate_pu_hshcsr_mac_tmp04 NOT SRM9
pgate_pu_hshcsr_mac_tmp06 = pgate_pu_hshcsr_mac_tmp05 NOT SRM10
pgate_pu_hshcsr_mac_tmp07 = pgate_pu_hshcsr_mac_tmp06 NOT SRM11
pgate_pu_hshcsr_mac_tmp08 = pgate_pu_hshcsr_mac_tmp07 AND SRM12
pgate_pu_hshcsr_mac_tmp09 = pgate_pu_hshcsr_mac_tmp08 NOT SRM13
pgate_pu_hshcsr_mac_tmp10 = pgate_pu_hshcsr_mac_tmp09 NOT SRM14
pgate_pu_hshcsr_mac_tmp11 = pgate_pu_hshcsr_mac_tmp10 NOT SRM15
pgate_pu_hshcsr_mac_tmp12 = pgate_pu_hshcsr_mac_tmp11 NOT SRM16
pgate_pu_hshcsr_mac_tmp13 = pgate_pu_hshcsr_mac_tmp12 NOT SRM17
pgate_pu_hshcsr_mac_tmp14 = pgate_pu_hshcsr_mac_tmp13 NOT SRM18
pgate_pu_hshcsr_mac_tmp15 = pgate_pu_hshcsr_mac_tmp14 NOT SRM19
pgate_pu_hshcsr_mac_tmp16 = pgate_pu_hshcsr_mac_tmp15 NOT SRM20
pgate_pu_hshcsr_mac_tmp17 = pgate_pu_hshcsr_mac_tmp16 AND SRM21
pgate_pu_hshcsr_mac_tmp18 = pgate_pu_hshcsr_mac_tmp17 AND SRAMDMY
pgate_pu_hshcsr_mac_tmp19 = pgate_pu_hshcsr_mac_tmp18 NOT SRAMPG
pgate_pu_hshcsr_mac = pgate_pu_hshcsr_mac_tmp19 NOT SRAMRP


//* Define device -- nmos nchpg_8tsr_mac

//* Define layer -- ngate_pg_8tsr_mac
ngate_pg_8tsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_8tsr_mac_tmp02 = ngate_pg_8tsr_mac_tmp01 AND SRM
ngate_pg_8tsr_mac_tmp03 = ngate_pg_8tsr_mac_tmp02 NOT SRM6
ngate_pg_8tsr_mac_tmp04 = ngate_pg_8tsr_mac_tmp03 NOT SRM8
ngate_pg_8tsr_mac_tmp05 = ngate_pg_8tsr_mac_tmp04 NOT SRM9
ngate_pg_8tsr_mac_tmp06 = ngate_pg_8tsr_mac_tmp05 NOT SRM10
ngate_pg_8tsr_mac_tmp07 = ngate_pg_8tsr_mac_tmp06 NOT SRM11
ngate_pg_8tsr_mac_tmp08 = ngate_pg_8tsr_mac_tmp07 NOT SRM12
ngate_pg_8tsr_mac_tmp09 = ngate_pg_8tsr_mac_tmp08 NOT SRM13
ngate_pg_8tsr_mac_tmp10 = ngate_pg_8tsr_mac_tmp09 AND SRM14
ngate_pg_8tsr_mac_tmp11 = ngate_pg_8tsr_mac_tmp10 NOT SRM15
ngate_pg_8tsr_mac_tmp12 = ngate_pg_8tsr_mac_tmp11 NOT SRM16
ngate_pg_8tsr_mac_tmp13 = ngate_pg_8tsr_mac_tmp12 NOT SRM17
ngate_pg_8tsr_mac_tmp14 = ngate_pg_8tsr_mac_tmp13 NOT SRM18
ngate_pg_8tsr_mac_tmp15 = ngate_pg_8tsr_mac_tmp14 NOT SRM19
ngate_pg_8tsr_mac_tmp16 = ngate_pg_8tsr_mac_tmp15 NOT SRM20
ngate_pg_8tsr_mac_tmp17 = ngate_pg_8tsr_mac_tmp16 NOT SRM21
ngate_pg_8tsr_mac_tmp18 = ngate_pg_8tsr_mac_tmp17 AND SRAMDMY
ngate_pg_8tsr_mac_tmp19 = ngate_pg_8tsr_mac_tmp18 AND SRAMPG
ngate_pg_8tsr_mac = ngate_pg_8tsr_mac_tmp19 NOT SRAMRP


//* Define device -- nmos nchpd_8tsr_mac

//* Define layer -- ngate_pd_8tsr_mac
ngate_pd_8tsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_8tsr_mac_tmp02 = ngate_pd_8tsr_mac_tmp01 AND SRM
ngate_pd_8tsr_mac_tmp03 = ngate_pd_8tsr_mac_tmp02 NOT SRM6
ngate_pd_8tsr_mac_tmp04 = ngate_pd_8tsr_mac_tmp03 NOT SRM8
ngate_pd_8tsr_mac_tmp05 = ngate_pd_8tsr_mac_tmp04 NOT SRM9
ngate_pd_8tsr_mac_tmp06 = ngate_pd_8tsr_mac_tmp05 NOT SRM10
ngate_pd_8tsr_mac_tmp07 = ngate_pd_8tsr_mac_tmp06 NOT SRM11
ngate_pd_8tsr_mac_tmp08 = ngate_pd_8tsr_mac_tmp07 NOT SRM12
ngate_pd_8tsr_mac_tmp09 = ngate_pd_8tsr_mac_tmp08 NOT SRM13
ngate_pd_8tsr_mac_tmp10 = ngate_pd_8tsr_mac_tmp09 AND SRM14
ngate_pd_8tsr_mac_tmp11 = ngate_pd_8tsr_mac_tmp10 NOT SRM15
ngate_pd_8tsr_mac_tmp12 = ngate_pd_8tsr_mac_tmp11 NOT SRM16
ngate_pd_8tsr_mac_tmp13 = ngate_pd_8tsr_mac_tmp12 NOT SRM17
ngate_pd_8tsr_mac_tmp14 = ngate_pd_8tsr_mac_tmp13 NOT SRM18
ngate_pd_8tsr_mac_tmp15 = ngate_pd_8tsr_mac_tmp14 NOT SRM19
ngate_pd_8tsr_mac_tmp16 = ngate_pd_8tsr_mac_tmp15 NOT SRM20
ngate_pd_8tsr_mac_tmp17 = ngate_pd_8tsr_mac_tmp16 NOT SRM21
ngate_pd_8tsr_mac_tmp18 = ngate_pd_8tsr_mac_tmp17 AND SRAMDMY
ngate_pd_8tsr_mac_tmp19 = ngate_pd_8tsr_mac_tmp18 NOT SRAMPG
ngate_pd_8tsr_mac = ngate_pd_8tsr_mac_tmp19 NOT SRAMRP


//* Define device -- pmos pchpu_8tsr_mac

//* Define layer -- pgate_pu_8tsr_mac
pgate_pu_8tsr_mac_tmp01 = pgate_s_normal AND SRMDEVi
pgate_pu_8tsr_mac_tmp02 = pgate_pu_8tsr_mac_tmp01 AND SRM
pgate_pu_8tsr_mac_tmp03 = pgate_pu_8tsr_mac_tmp02 NOT SRM6
pgate_pu_8tsr_mac_tmp04 = pgate_pu_8tsr_mac_tmp03 NOT SRM8
pgate_pu_8tsr_mac_tmp05 = pgate_pu_8tsr_mac_tmp04 NOT SRM9
pgate_pu_8tsr_mac_tmp06 = pgate_pu_8tsr_mac_tmp05 NOT SRM10
pgate_pu_8tsr_mac_tmp07 = pgate_pu_8tsr_mac_tmp06 NOT SRM11
pgate_pu_8tsr_mac_tmp08 = pgate_pu_8tsr_mac_tmp07 NOT SRM12
pgate_pu_8tsr_mac_tmp09 = pgate_pu_8tsr_mac_tmp08 NOT SRM13
pgate_pu_8tsr_mac_tmp10 = pgate_pu_8tsr_mac_tmp09 AND SRM14
pgate_pu_8tsr_mac_tmp11 = pgate_pu_8tsr_mac_tmp10 NOT SRM15
pgate_pu_8tsr_mac_tmp12 = pgate_pu_8tsr_mac_tmp11 NOT SRM16
pgate_pu_8tsr_mac_tmp13 = pgate_pu_8tsr_mac_tmp12 NOT SRM17
pgate_pu_8tsr_mac_tmp14 = pgate_pu_8tsr_mac_tmp13 NOT SRM18
pgate_pu_8tsr_mac_tmp15 = pgate_pu_8tsr_mac_tmp14 NOT SRM19
pgate_pu_8tsr_mac_tmp16 = pgate_pu_8tsr_mac_tmp15 NOT SRM20
pgate_pu_8tsr_mac_tmp17 = pgate_pu_8tsr_mac_tmp16 NOT SRM21
pgate_pu_8tsr_mac_tmp18 = pgate_pu_8tsr_mac_tmp17 AND SRAMDMY
pgate_pu_8tsr_mac_tmp19 = pgate_pu_8tsr_mac_tmp18 NOT SRAMPG
pgate_pu_8tsr_mac = pgate_pu_8tsr_mac_tmp19 NOT SRAMRP


//* Define device -- nmos nchpg_8trpsr_mac

//* Define layer -- ngate_pg_8trpsr_mac
ngate_pg_8trpsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_8trpsr_mac_tmp02 = ngate_pg_8trpsr_mac_tmp01 AND SRM
ngate_pg_8trpsr_mac_tmp03 = ngate_pg_8trpsr_mac_tmp02 NOT SRM6
ngate_pg_8trpsr_mac_tmp04 = ngate_pg_8trpsr_mac_tmp03 NOT SRM8
ngate_pg_8trpsr_mac_tmp05 = ngate_pg_8trpsr_mac_tmp04 NOT SRM9
ngate_pg_8trpsr_mac_tmp06 = ngate_pg_8trpsr_mac_tmp05 NOT SRM10
ngate_pg_8trpsr_mac_tmp07 = ngate_pg_8trpsr_mac_tmp06 NOT SRM11
ngate_pg_8trpsr_mac_tmp08 = ngate_pg_8trpsr_mac_tmp07 NOT SRM12
ngate_pg_8trpsr_mac_tmp09 = ngate_pg_8trpsr_mac_tmp08 NOT SRM13
ngate_pg_8trpsr_mac_tmp10 = ngate_pg_8trpsr_mac_tmp09 AND SRM14
ngate_pg_8trpsr_mac_tmp11 = ngate_pg_8trpsr_mac_tmp10 NOT SRM15
ngate_pg_8trpsr_mac_tmp12 = ngate_pg_8trpsr_mac_tmp11 NOT SRM16
ngate_pg_8trpsr_mac_tmp13 = ngate_pg_8trpsr_mac_tmp12 NOT SRM17
ngate_pg_8trpsr_mac_tmp14 = ngate_pg_8trpsr_mac_tmp13 NOT SRM18
ngate_pg_8trpsr_mac_tmp15 = ngate_pg_8trpsr_mac_tmp14 NOT SRM19
ngate_pg_8trpsr_mac_tmp16 = ngate_pg_8trpsr_mac_tmp15 NOT SRM20
ngate_pg_8trpsr_mac_tmp17 = ngate_pg_8trpsr_mac_tmp16 NOT SRM21
ngate_pg_8trpsr_mac_tmp18 = ngate_pg_8trpsr_mac_tmp17 AND SRAMDMY
ngate_pg_8trpsr_mac_tmp19 = ngate_pg_8trpsr_mac_tmp18 AND SRAMPG
ngate_pg_8trpsr_mac = ngate_pg_8trpsr_mac_tmp19 AND SRAMRP


//* Define device -- nmos nchpd_8trpsr_mac

//* Define layer -- ngate_pd_8trpsr_mac
ngate_pd_8trpsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_8trpsr_mac_tmp02 = ngate_pd_8trpsr_mac_tmp01 AND SRM
ngate_pd_8trpsr_mac_tmp03 = ngate_pd_8trpsr_mac_tmp02 NOT SRM6
ngate_pd_8trpsr_mac_tmp04 = ngate_pd_8trpsr_mac_tmp03 NOT SRM8
ngate_pd_8trpsr_mac_tmp05 = ngate_pd_8trpsr_mac_tmp04 NOT SRM9
ngate_pd_8trpsr_mac_tmp06 = ngate_pd_8trpsr_mac_tmp05 NOT SRM10
ngate_pd_8trpsr_mac_tmp07 = ngate_pd_8trpsr_mac_tmp06 NOT SRM11
ngate_pd_8trpsr_mac_tmp08 = ngate_pd_8trpsr_mac_tmp07 NOT SRM12
ngate_pd_8trpsr_mac_tmp09 = ngate_pd_8trpsr_mac_tmp08 NOT SRM13
ngate_pd_8trpsr_mac_tmp10 = ngate_pd_8trpsr_mac_tmp09 AND SRM14
ngate_pd_8trpsr_mac_tmp11 = ngate_pd_8trpsr_mac_tmp10 NOT SRM15
ngate_pd_8trpsr_mac_tmp12 = ngate_pd_8trpsr_mac_tmp11 NOT SRM16
ngate_pd_8trpsr_mac_tmp13 = ngate_pd_8trpsr_mac_tmp12 NOT SRM17
ngate_pd_8trpsr_mac_tmp14 = ngate_pd_8trpsr_mac_tmp13 NOT SRM18
ngate_pd_8trpsr_mac_tmp15 = ngate_pd_8trpsr_mac_tmp14 NOT SRM19
ngate_pd_8trpsr_mac_tmp16 = ngate_pd_8trpsr_mac_tmp15 NOT SRM20
ngate_pd_8trpsr_mac_tmp17 = ngate_pd_8trpsr_mac_tmp16 NOT SRM21
ngate_pd_8trpsr_mac_tmp18 = ngate_pd_8trpsr_mac_tmp17 AND SRAMDMY
ngate_pd_8trpsr_mac_tmp19 = ngate_pd_8trpsr_mac_tmp18 NOT SRAMPG
ngate_pd_8trpsr_mac = ngate_pd_8trpsr_mac_tmp19 AND SRAMRP


//* Define device -- nmos nchpg_hc8tsr_mac

//* Define layer -- ngate_pg_hc8tsr_mac
ngate_pg_hc8tsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_hc8tsr_mac_tmp02 = ngate_pg_hc8tsr_mac_tmp01 AND SRM
ngate_pg_hc8tsr_mac_tmp03 = ngate_pg_hc8tsr_mac_tmp02 NOT SRM6
ngate_pg_hc8tsr_mac_tmp04 = ngate_pg_hc8tsr_mac_tmp03 NOT SRM8
ngate_pg_hc8tsr_mac_tmp05 = ngate_pg_hc8tsr_mac_tmp04 NOT SRM9
ngate_pg_hc8tsr_mac_tmp06 = ngate_pg_hc8tsr_mac_tmp05 NOT SRM10
ngate_pg_hc8tsr_mac_tmp07 = ngate_pg_hc8tsr_mac_tmp06 NOT SRM11
ngate_pg_hc8tsr_mac_tmp08 = ngate_pg_hc8tsr_mac_tmp07 NOT SRM12
ngate_pg_hc8tsr_mac_tmp09 = ngate_pg_hc8tsr_mac_tmp08 NOT SRM13
ngate_pg_hc8tsr_mac_tmp10 = ngate_pg_hc8tsr_mac_tmp09 NOT SRM14
ngate_pg_hc8tsr_mac_tmp11 = ngate_pg_hc8tsr_mac_tmp10 AND SRM15
ngate_pg_hc8tsr_mac_tmp12 = ngate_pg_hc8tsr_mac_tmp11 NOT SRM16
ngate_pg_hc8tsr_mac_tmp13 = ngate_pg_hc8tsr_mac_tmp12 NOT SRM17
ngate_pg_hc8tsr_mac_tmp14 = ngate_pg_hc8tsr_mac_tmp13 NOT SRM18
ngate_pg_hc8tsr_mac_tmp15 = ngate_pg_hc8tsr_mac_tmp14 NOT SRM19
ngate_pg_hc8tsr_mac_tmp16 = ngate_pg_hc8tsr_mac_tmp15 NOT SRM20
ngate_pg_hc8tsr_mac_tmp17 = ngate_pg_hc8tsr_mac_tmp16 NOT SRM21
ngate_pg_hc8tsr_mac_tmp18 = ngate_pg_hc8tsr_mac_tmp17 AND SRAMDMY
ngate_pg_hc8tsr_mac_tmp19 = ngate_pg_hc8tsr_mac_tmp18 AND SRAMPG
ngate_pg_hc8tsr_mac = ngate_pg_hc8tsr_mac_tmp19 NOT SRAMRP


//* Define device -- nmos nchpd_hc8tsr_mac

//* Define layer -- ngate_pd_hc8tsr_mac
ngate_pd_hc8tsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_hc8tsr_mac_tmp02 = ngate_pd_hc8tsr_mac_tmp01 AND SRM
ngate_pd_hc8tsr_mac_tmp03 = ngate_pd_hc8tsr_mac_tmp02 NOT SRM6
ngate_pd_hc8tsr_mac_tmp04 = ngate_pd_hc8tsr_mac_tmp03 NOT SRM8
ngate_pd_hc8tsr_mac_tmp05 = ngate_pd_hc8tsr_mac_tmp04 NOT SRM9
ngate_pd_hc8tsr_mac_tmp06 = ngate_pd_hc8tsr_mac_tmp05 NOT SRM10
ngate_pd_hc8tsr_mac_tmp07 = ngate_pd_hc8tsr_mac_tmp06 NOT SRM11
ngate_pd_hc8tsr_mac_tmp08 = ngate_pd_hc8tsr_mac_tmp07 NOT SRM12
ngate_pd_hc8tsr_mac_tmp09 = ngate_pd_hc8tsr_mac_tmp08 NOT SRM13
ngate_pd_hc8tsr_mac_tmp10 = ngate_pd_hc8tsr_mac_tmp09 NOT SRM14
ngate_pd_hc8tsr_mac_tmp11 = ngate_pd_hc8tsr_mac_tmp10 AND SRM15
ngate_pd_hc8tsr_mac_tmp12 = ngate_pd_hc8tsr_mac_tmp11 NOT SRM16
ngate_pd_hc8tsr_mac_tmp13 = ngate_pd_hc8tsr_mac_tmp12 NOT SRM17
ngate_pd_hc8tsr_mac_tmp14 = ngate_pd_hc8tsr_mac_tmp13 NOT SRM18
ngate_pd_hc8tsr_mac_tmp15 = ngate_pd_hc8tsr_mac_tmp14 NOT SRM19
ngate_pd_hc8tsr_mac_tmp16 = ngate_pd_hc8tsr_mac_tmp15 NOT SRM20
ngate_pd_hc8tsr_mac_tmp17 = ngate_pd_hc8tsr_mac_tmp16 NOT SRM21
ngate_pd_hc8tsr_mac_tmp18 = ngate_pd_hc8tsr_mac_tmp17 AND SRAMDMY
ngate_pd_hc8tsr_mac_tmp19 = ngate_pd_hc8tsr_mac_tmp18 NOT SRAMPG
ngate_pd_hc8tsr_mac = ngate_pd_hc8tsr_mac_tmp19 NOT SRAMRP


//* Define device -- pmos pchpu_hc8tsr_mac

//* Define layer -- pgate_pu_hc8tsr_mac
pgate_pu_hc8tsr_mac_tmp01 = pgate_s_normal AND SRMDEVi
pgate_pu_hc8tsr_mac_tmp02 = pgate_pu_hc8tsr_mac_tmp01 AND SRM
pgate_pu_hc8tsr_mac_tmp03 = pgate_pu_hc8tsr_mac_tmp02 NOT SRM6
pgate_pu_hc8tsr_mac_tmp04 = pgate_pu_hc8tsr_mac_tmp03 NOT SRM8
pgate_pu_hc8tsr_mac_tmp05 = pgate_pu_hc8tsr_mac_tmp04 NOT SRM9
pgate_pu_hc8tsr_mac_tmp06 = pgate_pu_hc8tsr_mac_tmp05 NOT SRM10
pgate_pu_hc8tsr_mac_tmp07 = pgate_pu_hc8tsr_mac_tmp06 NOT SRM11
pgate_pu_hc8tsr_mac_tmp08 = pgate_pu_hc8tsr_mac_tmp07 NOT SRM12
pgate_pu_hc8tsr_mac_tmp09 = pgate_pu_hc8tsr_mac_tmp08 NOT SRM13
pgate_pu_hc8tsr_mac_tmp10 = pgate_pu_hc8tsr_mac_tmp09 NOT SRM14
pgate_pu_hc8tsr_mac_tmp11 = pgate_pu_hc8tsr_mac_tmp10 AND SRM15
pgate_pu_hc8tsr_mac_tmp12 = pgate_pu_hc8tsr_mac_tmp11 NOT SRM16
pgate_pu_hc8tsr_mac_tmp13 = pgate_pu_hc8tsr_mac_tmp12 NOT SRM17
pgate_pu_hc8tsr_mac_tmp14 = pgate_pu_hc8tsr_mac_tmp13 NOT SRM18
pgate_pu_hc8tsr_mac_tmp15 = pgate_pu_hc8tsr_mac_tmp14 NOT SRM19
pgate_pu_hc8tsr_mac_tmp16 = pgate_pu_hc8tsr_mac_tmp15 NOT SRM20
pgate_pu_hc8tsr_mac_tmp17 = pgate_pu_hc8tsr_mac_tmp16 NOT SRM21
pgate_pu_hc8tsr_mac_tmp18 = pgate_pu_hc8tsr_mac_tmp17 AND SRAMDMY
pgate_pu_hc8tsr_mac_tmp19 = pgate_pu_hc8tsr_mac_tmp18 NOT SRAMPG
pgate_pu_hc8tsr_mac = pgate_pu_hc8tsr_mac_tmp19 NOT SRAMRP


//* Define device -- nmos nchpg_hc8trpsr_mac

//* Define layer -- ngate_pg_hc8trpsr_mac
ngate_pg_hc8trpsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_hc8trpsr_mac_tmp02 = ngate_pg_hc8trpsr_mac_tmp01 AND SRM
ngate_pg_hc8trpsr_mac_tmp03 = ngate_pg_hc8trpsr_mac_tmp02 NOT SRM6
ngate_pg_hc8trpsr_mac_tmp04 = ngate_pg_hc8trpsr_mac_tmp03 NOT SRM8
ngate_pg_hc8trpsr_mac_tmp05 = ngate_pg_hc8trpsr_mac_tmp04 NOT SRM9
ngate_pg_hc8trpsr_mac_tmp06 = ngate_pg_hc8trpsr_mac_tmp05 NOT SRM10
ngate_pg_hc8trpsr_mac_tmp07 = ngate_pg_hc8trpsr_mac_tmp06 NOT SRM11
ngate_pg_hc8trpsr_mac_tmp08 = ngate_pg_hc8trpsr_mac_tmp07 NOT SRM12
ngate_pg_hc8trpsr_mac_tmp09 = ngate_pg_hc8trpsr_mac_tmp08 NOT SRM13
ngate_pg_hc8trpsr_mac_tmp10 = ngate_pg_hc8trpsr_mac_tmp09 NOT SRM14
ngate_pg_hc8trpsr_mac_tmp11 = ngate_pg_hc8trpsr_mac_tmp10 AND SRM15
ngate_pg_hc8trpsr_mac_tmp12 = ngate_pg_hc8trpsr_mac_tmp11 NOT SRM16
ngate_pg_hc8trpsr_mac_tmp13 = ngate_pg_hc8trpsr_mac_tmp12 NOT SRM17
ngate_pg_hc8trpsr_mac_tmp14 = ngate_pg_hc8trpsr_mac_tmp13 NOT SRM18
ngate_pg_hc8trpsr_mac_tmp15 = ngate_pg_hc8trpsr_mac_tmp14 NOT SRM19
ngate_pg_hc8trpsr_mac_tmp16 = ngate_pg_hc8trpsr_mac_tmp15 NOT SRM20
ngate_pg_hc8trpsr_mac_tmp17 = ngate_pg_hc8trpsr_mac_tmp16 NOT SRM21
ngate_pg_hc8trpsr_mac_tmp18 = ngate_pg_hc8trpsr_mac_tmp17 AND SRAMDMY
ngate_pg_hc8trpsr_mac_tmp19 = ngate_pg_hc8trpsr_mac_tmp18 AND SRAMPG
ngate_pg_hc8trpsr_mac = ngate_pg_hc8trpsr_mac_tmp19 AND SRAMRP


//* Define device -- nmos nchpd_hc8trpsr_mac

//* Define layer -- ngate_pd_hc8trpsr_mac
ngate_pd_hc8trpsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_hc8trpsr_mac_tmp02 = ngate_pd_hc8trpsr_mac_tmp01 AND SRM
ngate_pd_hc8trpsr_mac_tmp03 = ngate_pd_hc8trpsr_mac_tmp02 NOT SRM6
ngate_pd_hc8trpsr_mac_tmp04 = ngate_pd_hc8trpsr_mac_tmp03 NOT SRM8
ngate_pd_hc8trpsr_mac_tmp05 = ngate_pd_hc8trpsr_mac_tmp04 NOT SRM9
ngate_pd_hc8trpsr_mac_tmp06 = ngate_pd_hc8trpsr_mac_tmp05 NOT SRM10
ngate_pd_hc8trpsr_mac_tmp07 = ngate_pd_hc8trpsr_mac_tmp06 NOT SRM11
ngate_pd_hc8trpsr_mac_tmp08 = ngate_pd_hc8trpsr_mac_tmp07 NOT SRM12
ngate_pd_hc8trpsr_mac_tmp09 = ngate_pd_hc8trpsr_mac_tmp08 NOT SRM13
ngate_pd_hc8trpsr_mac_tmp10 = ngate_pd_hc8trpsr_mac_tmp09 NOT SRM14
ngate_pd_hc8trpsr_mac_tmp11 = ngate_pd_hc8trpsr_mac_tmp10 AND SRM15
ngate_pd_hc8trpsr_mac_tmp12 = ngate_pd_hc8trpsr_mac_tmp11 NOT SRM16
ngate_pd_hc8trpsr_mac_tmp13 = ngate_pd_hc8trpsr_mac_tmp12 NOT SRM17
ngate_pd_hc8trpsr_mac_tmp14 = ngate_pd_hc8trpsr_mac_tmp13 NOT SRM18
ngate_pd_hc8trpsr_mac_tmp15 = ngate_pd_hc8trpsr_mac_tmp14 NOT SRM19
ngate_pd_hc8trpsr_mac_tmp16 = ngate_pd_hc8trpsr_mac_tmp15 NOT SRM20
ngate_pd_hc8trpsr_mac_tmp17 = ngate_pd_hc8trpsr_mac_tmp16 NOT SRM21
ngate_pd_hc8trpsr_mac_tmp18 = ngate_pd_hc8trpsr_mac_tmp17 AND SRAMDMY
ngate_pd_hc8trpsr_mac_tmp19 = ngate_pd_hc8trpsr_mac_tmp18 NOT SRAMPG
ngate_pd_hc8trpsr_mac = ngate_pd_hc8trpsr_mac_tmp19 AND SRAMRP


//* Define device -- nmos nchpg_ulvtll8tsr_mac

//* Define layer -- ngate_pg_ulvtll8tsr_mac
ngate_pg_ulvtll8tsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_ulvtll8tsr_mac_tmp02 = ngate_pg_ulvtll8tsr_mac_tmp01 AND SRM
ngate_pg_ulvtll8tsr_mac_tmp03 = ngate_pg_ulvtll8tsr_mac_tmp02 AND SRM6
ngate_pg_ulvtll8tsr_mac_tmp04 = ngate_pg_ulvtll8tsr_mac_tmp03 NOT SRM8
ngate_pg_ulvtll8tsr_mac_tmp05 = ngate_pg_ulvtll8tsr_mac_tmp04 NOT SRM9
ngate_pg_ulvtll8tsr_mac_tmp06 = ngate_pg_ulvtll8tsr_mac_tmp05 NOT SRM10
ngate_pg_ulvtll8tsr_mac_tmp07 = ngate_pg_ulvtll8tsr_mac_tmp06 NOT SRM11
ngate_pg_ulvtll8tsr_mac_tmp08 = ngate_pg_ulvtll8tsr_mac_tmp07 NOT SRM12
ngate_pg_ulvtll8tsr_mac_tmp09 = ngate_pg_ulvtll8tsr_mac_tmp08 NOT SRM13
ngate_pg_ulvtll8tsr_mac_tmp10 = ngate_pg_ulvtll8tsr_mac_tmp09 AND SRM14
ngate_pg_ulvtll8tsr_mac_tmp11 = ngate_pg_ulvtll8tsr_mac_tmp10 NOT SRM15
ngate_pg_ulvtll8tsr_mac_tmp12 = ngate_pg_ulvtll8tsr_mac_tmp11 NOT SRM16
ngate_pg_ulvtll8tsr_mac_tmp13 = ngate_pg_ulvtll8tsr_mac_tmp12 NOT SRM17
ngate_pg_ulvtll8tsr_mac_tmp14 = ngate_pg_ulvtll8tsr_mac_tmp13 NOT SRM18
ngate_pg_ulvtll8tsr_mac_tmp15 = ngate_pg_ulvtll8tsr_mac_tmp14 NOT SRM19
ngate_pg_ulvtll8tsr_mac_tmp16 = ngate_pg_ulvtll8tsr_mac_tmp15 NOT SRM20
ngate_pg_ulvtll8tsr_mac_tmp17 = ngate_pg_ulvtll8tsr_mac_tmp16 NOT SRM21
ngate_pg_ulvtll8tsr_mac_tmp18 = ngate_pg_ulvtll8tsr_mac_tmp17 AND SRAMDMY
ngate_pg_ulvtll8tsr_mac_tmp19 = ngate_pg_ulvtll8tsr_mac_tmp18 AND SRAMPG
ngate_pg_ulvtll8tsr_mac = ngate_pg_ulvtll8tsr_mac_tmp19 NOT SRAMRP


//* Define device -- nmos nchpd_ulvtll8tsr_mac

//* Define layer -- ngate_pd_ulvtll8tsr_mac
ngate_pd_ulvtll8tsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_ulvtll8tsr_mac_tmp02 = ngate_pd_ulvtll8tsr_mac_tmp01 AND SRM
ngate_pd_ulvtll8tsr_mac_tmp03 = ngate_pd_ulvtll8tsr_mac_tmp02 AND SRM6
ngate_pd_ulvtll8tsr_mac_tmp04 = ngate_pd_ulvtll8tsr_mac_tmp03 NOT SRM8
ngate_pd_ulvtll8tsr_mac_tmp05 = ngate_pd_ulvtll8tsr_mac_tmp04 NOT SRM9
ngate_pd_ulvtll8tsr_mac_tmp06 = ngate_pd_ulvtll8tsr_mac_tmp05 NOT SRM10
ngate_pd_ulvtll8tsr_mac_tmp07 = ngate_pd_ulvtll8tsr_mac_tmp06 NOT SRM11
ngate_pd_ulvtll8tsr_mac_tmp08 = ngate_pd_ulvtll8tsr_mac_tmp07 NOT SRM12
ngate_pd_ulvtll8tsr_mac_tmp09 = ngate_pd_ulvtll8tsr_mac_tmp08 NOT SRM13
ngate_pd_ulvtll8tsr_mac_tmp10 = ngate_pd_ulvtll8tsr_mac_tmp09 AND SRM14
ngate_pd_ulvtll8tsr_mac_tmp11 = ngate_pd_ulvtll8tsr_mac_tmp10 NOT SRM15
ngate_pd_ulvtll8tsr_mac_tmp12 = ngate_pd_ulvtll8tsr_mac_tmp11 NOT SRM16
ngate_pd_ulvtll8tsr_mac_tmp13 = ngate_pd_ulvtll8tsr_mac_tmp12 NOT SRM17
ngate_pd_ulvtll8tsr_mac_tmp14 = ngate_pd_ulvtll8tsr_mac_tmp13 NOT SRM18
ngate_pd_ulvtll8tsr_mac_tmp15 = ngate_pd_ulvtll8tsr_mac_tmp14 NOT SRM19
ngate_pd_ulvtll8tsr_mac_tmp16 = ngate_pd_ulvtll8tsr_mac_tmp15 NOT SRM20
ngate_pd_ulvtll8tsr_mac_tmp17 = ngate_pd_ulvtll8tsr_mac_tmp16 NOT SRM21
ngate_pd_ulvtll8tsr_mac_tmp18 = ngate_pd_ulvtll8tsr_mac_tmp17 AND SRAMDMY
ngate_pd_ulvtll8tsr_mac_tmp19 = ngate_pd_ulvtll8tsr_mac_tmp18 NOT SRAMPG
ngate_pd_ulvtll8tsr_mac = ngate_pd_ulvtll8tsr_mac_tmp19 NOT SRAMRP


//* Define device -- pmos pchpu_ulvtll8tsr_mac

//* Define layer -- pgate_pu_ulvtll8tsr_mac
pgate_pu_ulvtll8tsr_mac_tmp01 = pgate_s_normal AND SRMDEVi
pgate_pu_ulvtll8tsr_mac_tmp02 = pgate_pu_ulvtll8tsr_mac_tmp01 AND SRM
pgate_pu_ulvtll8tsr_mac_tmp03 = pgate_pu_ulvtll8tsr_mac_tmp02 AND SRM6
pgate_pu_ulvtll8tsr_mac_tmp04 = pgate_pu_ulvtll8tsr_mac_tmp03 NOT SRM8
pgate_pu_ulvtll8tsr_mac_tmp05 = pgate_pu_ulvtll8tsr_mac_tmp04 NOT SRM9
pgate_pu_ulvtll8tsr_mac_tmp06 = pgate_pu_ulvtll8tsr_mac_tmp05 NOT SRM10
pgate_pu_ulvtll8tsr_mac_tmp07 = pgate_pu_ulvtll8tsr_mac_tmp06 NOT SRM11
pgate_pu_ulvtll8tsr_mac_tmp08 = pgate_pu_ulvtll8tsr_mac_tmp07 NOT SRM12
pgate_pu_ulvtll8tsr_mac_tmp09 = pgate_pu_ulvtll8tsr_mac_tmp08 NOT SRM13
pgate_pu_ulvtll8tsr_mac_tmp10 = pgate_pu_ulvtll8tsr_mac_tmp09 AND SRM14
pgate_pu_ulvtll8tsr_mac_tmp11 = pgate_pu_ulvtll8tsr_mac_tmp10 NOT SRM15
pgate_pu_ulvtll8tsr_mac_tmp12 = pgate_pu_ulvtll8tsr_mac_tmp11 NOT SRM16
pgate_pu_ulvtll8tsr_mac_tmp13 = pgate_pu_ulvtll8tsr_mac_tmp12 NOT SRM17
pgate_pu_ulvtll8tsr_mac_tmp14 = pgate_pu_ulvtll8tsr_mac_tmp13 NOT SRM18
pgate_pu_ulvtll8tsr_mac_tmp15 = pgate_pu_ulvtll8tsr_mac_tmp14 NOT SRM19
pgate_pu_ulvtll8tsr_mac_tmp16 = pgate_pu_ulvtll8tsr_mac_tmp15 NOT SRM20
pgate_pu_ulvtll8tsr_mac_tmp17 = pgate_pu_ulvtll8tsr_mac_tmp16 NOT SRM21
pgate_pu_ulvtll8tsr_mac_tmp18 = pgate_pu_ulvtll8tsr_mac_tmp17 AND SRAMDMY
pgate_pu_ulvtll8tsr_mac_tmp19 = pgate_pu_ulvtll8tsr_mac_tmp18 NOT SRAMPG
pgate_pu_ulvtll8tsr_mac = pgate_pu_ulvtll8tsr_mac_tmp19 NOT SRAMRP


//* Define device -- nmos nchpg_ulvtll8trpsr_mac

//* Define layer -- ngate_pg_ulvtll8trpsr_mac
ngate_pg_ulvtll8trpsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_ulvtll8trpsr_mac_tmp02 = ngate_pg_ulvtll8trpsr_mac_tmp01 AND SRM
ngate_pg_ulvtll8trpsr_mac_tmp03 = ngate_pg_ulvtll8trpsr_mac_tmp02 AND SRM6
ngate_pg_ulvtll8trpsr_mac_tmp04 = ngate_pg_ulvtll8trpsr_mac_tmp03 NOT SRM8
ngate_pg_ulvtll8trpsr_mac_tmp05 = ngate_pg_ulvtll8trpsr_mac_tmp04 NOT SRM9
ngate_pg_ulvtll8trpsr_mac_tmp06 = ngate_pg_ulvtll8trpsr_mac_tmp05 NOT SRM10
ngate_pg_ulvtll8trpsr_mac_tmp07 = ngate_pg_ulvtll8trpsr_mac_tmp06 NOT SRM11
ngate_pg_ulvtll8trpsr_mac_tmp08 = ngate_pg_ulvtll8trpsr_mac_tmp07 NOT SRM12
ngate_pg_ulvtll8trpsr_mac_tmp09 = ngate_pg_ulvtll8trpsr_mac_tmp08 NOT SRM13
ngate_pg_ulvtll8trpsr_mac_tmp10 = ngate_pg_ulvtll8trpsr_mac_tmp09 AND SRM14
ngate_pg_ulvtll8trpsr_mac_tmp11 = ngate_pg_ulvtll8trpsr_mac_tmp10 NOT SRM15
ngate_pg_ulvtll8trpsr_mac_tmp12 = ngate_pg_ulvtll8trpsr_mac_tmp11 NOT SRM16
ngate_pg_ulvtll8trpsr_mac_tmp13 = ngate_pg_ulvtll8trpsr_mac_tmp12 NOT SRM17
ngate_pg_ulvtll8trpsr_mac_tmp14 = ngate_pg_ulvtll8trpsr_mac_tmp13 NOT SRM18
ngate_pg_ulvtll8trpsr_mac_tmp15 = ngate_pg_ulvtll8trpsr_mac_tmp14 NOT SRM19
ngate_pg_ulvtll8trpsr_mac_tmp16 = ngate_pg_ulvtll8trpsr_mac_tmp15 NOT SRM20
ngate_pg_ulvtll8trpsr_mac_tmp17 = ngate_pg_ulvtll8trpsr_mac_tmp16 NOT SRM21
ngate_pg_ulvtll8trpsr_mac_tmp18 = ngate_pg_ulvtll8trpsr_mac_tmp17 AND SRAMDMY
ngate_pg_ulvtll8trpsr_mac_tmp19 = ngate_pg_ulvtll8trpsr_mac_tmp18 AND SRAMPG
ngate_pg_ulvtll8trpsr_mac = ngate_pg_ulvtll8trpsr_mac_tmp19 AND SRAMRP


//* Define device -- nmos nchpd_ulvtll8trpsr_mac

//* Define layer -- ngate_pd_ulvtll8trpsr_mac
ngate_pd_ulvtll8trpsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_ulvtll8trpsr_mac_tmp02 = ngate_pd_ulvtll8trpsr_mac_tmp01 AND SRM
ngate_pd_ulvtll8trpsr_mac_tmp03 = ngate_pd_ulvtll8trpsr_mac_tmp02 AND SRM6
ngate_pd_ulvtll8trpsr_mac_tmp04 = ngate_pd_ulvtll8trpsr_mac_tmp03 NOT SRM8
ngate_pd_ulvtll8trpsr_mac_tmp05 = ngate_pd_ulvtll8trpsr_mac_tmp04 NOT SRM9
ngate_pd_ulvtll8trpsr_mac_tmp06 = ngate_pd_ulvtll8trpsr_mac_tmp05 NOT SRM10
ngate_pd_ulvtll8trpsr_mac_tmp07 = ngate_pd_ulvtll8trpsr_mac_tmp06 NOT SRM11
ngate_pd_ulvtll8trpsr_mac_tmp08 = ngate_pd_ulvtll8trpsr_mac_tmp07 NOT SRM12
ngate_pd_ulvtll8trpsr_mac_tmp09 = ngate_pd_ulvtll8trpsr_mac_tmp08 NOT SRM13
ngate_pd_ulvtll8trpsr_mac_tmp10 = ngate_pd_ulvtll8trpsr_mac_tmp09 AND SRM14
ngate_pd_ulvtll8trpsr_mac_tmp11 = ngate_pd_ulvtll8trpsr_mac_tmp10 NOT SRM15
ngate_pd_ulvtll8trpsr_mac_tmp12 = ngate_pd_ulvtll8trpsr_mac_tmp11 NOT SRM16
ngate_pd_ulvtll8trpsr_mac_tmp13 = ngate_pd_ulvtll8trpsr_mac_tmp12 NOT SRM17
ngate_pd_ulvtll8trpsr_mac_tmp14 = ngate_pd_ulvtll8trpsr_mac_tmp13 NOT SRM18
ngate_pd_ulvtll8trpsr_mac_tmp15 = ngate_pd_ulvtll8trpsr_mac_tmp14 NOT SRM19
ngate_pd_ulvtll8trpsr_mac_tmp16 = ngate_pd_ulvtll8trpsr_mac_tmp15 NOT SRM20
ngate_pd_ulvtll8trpsr_mac_tmp17 = ngate_pd_ulvtll8trpsr_mac_tmp16 NOT SRM21
ngate_pd_ulvtll8trpsr_mac_tmp18 = ngate_pd_ulvtll8trpsr_mac_tmp17 AND SRAMDMY
ngate_pd_ulvtll8trpsr_mac_tmp19 = ngate_pd_ulvtll8trpsr_mac_tmp18 NOT SRAMPG
ngate_pd_ulvtll8trpsr_mac = ngate_pd_ulvtll8trpsr_mac_tmp19 AND SRAMRP


//* Define device -- nmos nchpg_ulvtllhc8tsr_mac

//* Define layer -- ngate_pg_ulvtllhc8tsr_mac
ngate_pg_ulvtllhc8tsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_ulvtllhc8tsr_mac_tmp02 = ngate_pg_ulvtllhc8tsr_mac_tmp01 AND SRM
ngate_pg_ulvtllhc8tsr_mac_tmp03 = ngate_pg_ulvtllhc8tsr_mac_tmp02 AND SRM6
ngate_pg_ulvtllhc8tsr_mac_tmp04 = ngate_pg_ulvtllhc8tsr_mac_tmp03 NOT SRM8
ngate_pg_ulvtllhc8tsr_mac_tmp05 = ngate_pg_ulvtllhc8tsr_mac_tmp04 NOT SRM9
ngate_pg_ulvtllhc8tsr_mac_tmp06 = ngate_pg_ulvtllhc8tsr_mac_tmp05 NOT SRM10
ngate_pg_ulvtllhc8tsr_mac_tmp07 = ngate_pg_ulvtllhc8tsr_mac_tmp06 NOT SRM11
ngate_pg_ulvtllhc8tsr_mac_tmp08 = ngate_pg_ulvtllhc8tsr_mac_tmp07 NOT SRM12
ngate_pg_ulvtllhc8tsr_mac_tmp09 = ngate_pg_ulvtllhc8tsr_mac_tmp08 NOT SRM13
ngate_pg_ulvtllhc8tsr_mac_tmp10 = ngate_pg_ulvtllhc8tsr_mac_tmp09 NOT SRM14
ngate_pg_ulvtllhc8tsr_mac_tmp11 = ngate_pg_ulvtllhc8tsr_mac_tmp10 AND SRM15
ngate_pg_ulvtllhc8tsr_mac_tmp12 = ngate_pg_ulvtllhc8tsr_mac_tmp11 NOT SRM16
ngate_pg_ulvtllhc8tsr_mac_tmp13 = ngate_pg_ulvtllhc8tsr_mac_tmp12 NOT SRM17
ngate_pg_ulvtllhc8tsr_mac_tmp14 = ngate_pg_ulvtllhc8tsr_mac_tmp13 NOT SRM18
ngate_pg_ulvtllhc8tsr_mac_tmp15 = ngate_pg_ulvtllhc8tsr_mac_tmp14 NOT SRM19
ngate_pg_ulvtllhc8tsr_mac_tmp16 = ngate_pg_ulvtllhc8tsr_mac_tmp15 NOT SRM20
ngate_pg_ulvtllhc8tsr_mac_tmp17 = ngate_pg_ulvtllhc8tsr_mac_tmp16 NOT SRM21
ngate_pg_ulvtllhc8tsr_mac_tmp18 = ngate_pg_ulvtllhc8tsr_mac_tmp17 AND SRAMDMY
ngate_pg_ulvtllhc8tsr_mac_tmp19 = ngate_pg_ulvtllhc8tsr_mac_tmp18 AND SRAMPG
ngate_pg_ulvtllhc8tsr_mac = ngate_pg_ulvtllhc8tsr_mac_tmp19 NOT SRAMRP


//* Define device -- nmos nchpd_ulvtllhc8tsr_mac

//* Define layer -- ngate_pd_ulvtllhc8tsr_mac
ngate_pd_ulvtllhc8tsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_ulvtllhc8tsr_mac_tmp02 = ngate_pd_ulvtllhc8tsr_mac_tmp01 AND SRM
ngate_pd_ulvtllhc8tsr_mac_tmp03 = ngate_pd_ulvtllhc8tsr_mac_tmp02 AND SRM6
ngate_pd_ulvtllhc8tsr_mac_tmp04 = ngate_pd_ulvtllhc8tsr_mac_tmp03 NOT SRM8
ngate_pd_ulvtllhc8tsr_mac_tmp05 = ngate_pd_ulvtllhc8tsr_mac_tmp04 NOT SRM9
ngate_pd_ulvtllhc8tsr_mac_tmp06 = ngate_pd_ulvtllhc8tsr_mac_tmp05 NOT SRM10
ngate_pd_ulvtllhc8tsr_mac_tmp07 = ngate_pd_ulvtllhc8tsr_mac_tmp06 NOT SRM11
ngate_pd_ulvtllhc8tsr_mac_tmp08 = ngate_pd_ulvtllhc8tsr_mac_tmp07 NOT SRM12
ngate_pd_ulvtllhc8tsr_mac_tmp09 = ngate_pd_ulvtllhc8tsr_mac_tmp08 NOT SRM13
ngate_pd_ulvtllhc8tsr_mac_tmp10 = ngate_pd_ulvtllhc8tsr_mac_tmp09 NOT SRM14
ngate_pd_ulvtllhc8tsr_mac_tmp11 = ngate_pd_ulvtllhc8tsr_mac_tmp10 AND SRM15
ngate_pd_ulvtllhc8tsr_mac_tmp12 = ngate_pd_ulvtllhc8tsr_mac_tmp11 NOT SRM16
ngate_pd_ulvtllhc8tsr_mac_tmp13 = ngate_pd_ulvtllhc8tsr_mac_tmp12 NOT SRM17
ngate_pd_ulvtllhc8tsr_mac_tmp14 = ngate_pd_ulvtllhc8tsr_mac_tmp13 NOT SRM18
ngate_pd_ulvtllhc8tsr_mac_tmp15 = ngate_pd_ulvtllhc8tsr_mac_tmp14 NOT SRM19
ngate_pd_ulvtllhc8tsr_mac_tmp16 = ngate_pd_ulvtllhc8tsr_mac_tmp15 NOT SRM20
ngate_pd_ulvtllhc8tsr_mac_tmp17 = ngate_pd_ulvtllhc8tsr_mac_tmp16 NOT SRM21
ngate_pd_ulvtllhc8tsr_mac_tmp18 = ngate_pd_ulvtllhc8tsr_mac_tmp17 AND SRAMDMY
ngate_pd_ulvtllhc8tsr_mac_tmp19 = ngate_pd_ulvtllhc8tsr_mac_tmp18 NOT SRAMPG
ngate_pd_ulvtllhc8tsr_mac = ngate_pd_ulvtllhc8tsr_mac_tmp19 NOT SRAMRP


//* Define device -- pmos pchpu_ulvtllhc8tsr_mac

//* Define layer -- pgate_pu_ulvtllhc8tsr_mac
pgate_pu_ulvtllhc8tsr_mac_tmp01 = pgate_s_normal AND SRMDEVi
pgate_pu_ulvtllhc8tsr_mac_tmp02 = pgate_pu_ulvtllhc8tsr_mac_tmp01 AND SRM
pgate_pu_ulvtllhc8tsr_mac_tmp03 = pgate_pu_ulvtllhc8tsr_mac_tmp02 AND SRM6
pgate_pu_ulvtllhc8tsr_mac_tmp04 = pgate_pu_ulvtllhc8tsr_mac_tmp03 NOT SRM8
pgate_pu_ulvtllhc8tsr_mac_tmp05 = pgate_pu_ulvtllhc8tsr_mac_tmp04 NOT SRM9
pgate_pu_ulvtllhc8tsr_mac_tmp06 = pgate_pu_ulvtllhc8tsr_mac_tmp05 NOT SRM10
pgate_pu_ulvtllhc8tsr_mac_tmp07 = pgate_pu_ulvtllhc8tsr_mac_tmp06 NOT SRM11
pgate_pu_ulvtllhc8tsr_mac_tmp08 = pgate_pu_ulvtllhc8tsr_mac_tmp07 NOT SRM12
pgate_pu_ulvtllhc8tsr_mac_tmp09 = pgate_pu_ulvtllhc8tsr_mac_tmp08 NOT SRM13
pgate_pu_ulvtllhc8tsr_mac_tmp10 = pgate_pu_ulvtllhc8tsr_mac_tmp09 NOT SRM14
pgate_pu_ulvtllhc8tsr_mac_tmp11 = pgate_pu_ulvtllhc8tsr_mac_tmp10 AND SRM15
pgate_pu_ulvtllhc8tsr_mac_tmp12 = pgate_pu_ulvtllhc8tsr_mac_tmp11 NOT SRM16
pgate_pu_ulvtllhc8tsr_mac_tmp13 = pgate_pu_ulvtllhc8tsr_mac_tmp12 NOT SRM17
pgate_pu_ulvtllhc8tsr_mac_tmp14 = pgate_pu_ulvtllhc8tsr_mac_tmp13 NOT SRM18
pgate_pu_ulvtllhc8tsr_mac_tmp15 = pgate_pu_ulvtllhc8tsr_mac_tmp14 NOT SRM19
pgate_pu_ulvtllhc8tsr_mac_tmp16 = pgate_pu_ulvtllhc8tsr_mac_tmp15 NOT SRM20
pgate_pu_ulvtllhc8tsr_mac_tmp17 = pgate_pu_ulvtllhc8tsr_mac_tmp16 NOT SRM21
pgate_pu_ulvtllhc8tsr_mac_tmp18 = pgate_pu_ulvtllhc8tsr_mac_tmp17 AND SRAMDMY
pgate_pu_ulvtllhc8tsr_mac_tmp19 = pgate_pu_ulvtllhc8tsr_mac_tmp18 NOT SRAMPG
pgate_pu_ulvtllhc8tsr_mac = pgate_pu_ulvtllhc8tsr_mac_tmp19 NOT SRAMRP


//* Define device -- nmos nchpg_ulvtllhc8trpsr_mac

//* Define layer -- ngate_pg_ulvtllhc8trpsr_mac
ngate_pg_ulvtllhc8trpsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_ulvtllhc8trpsr_mac_tmp02 = ngate_pg_ulvtllhc8trpsr_mac_tmp01 AND SRM
ngate_pg_ulvtllhc8trpsr_mac_tmp03 = ngate_pg_ulvtllhc8trpsr_mac_tmp02 AND SRM6
ngate_pg_ulvtllhc8trpsr_mac_tmp04 = ngate_pg_ulvtllhc8trpsr_mac_tmp03 NOT SRM8
ngate_pg_ulvtllhc8trpsr_mac_tmp05 = ngate_pg_ulvtllhc8trpsr_mac_tmp04 NOT SRM9
ngate_pg_ulvtllhc8trpsr_mac_tmp06 = ngate_pg_ulvtllhc8trpsr_mac_tmp05 NOT SRM10
ngate_pg_ulvtllhc8trpsr_mac_tmp07 = ngate_pg_ulvtllhc8trpsr_mac_tmp06 NOT SRM11
ngate_pg_ulvtllhc8trpsr_mac_tmp08 = ngate_pg_ulvtllhc8trpsr_mac_tmp07 NOT SRM12
ngate_pg_ulvtllhc8trpsr_mac_tmp09 = ngate_pg_ulvtllhc8trpsr_mac_tmp08 NOT SRM13
ngate_pg_ulvtllhc8trpsr_mac_tmp10 = ngate_pg_ulvtllhc8trpsr_mac_tmp09 NOT SRM14
ngate_pg_ulvtllhc8trpsr_mac_tmp11 = ngate_pg_ulvtllhc8trpsr_mac_tmp10 AND SRM15
ngate_pg_ulvtllhc8trpsr_mac_tmp12 = ngate_pg_ulvtllhc8trpsr_mac_tmp11 NOT SRM16
ngate_pg_ulvtllhc8trpsr_mac_tmp13 = ngate_pg_ulvtllhc8trpsr_mac_tmp12 NOT SRM17
ngate_pg_ulvtllhc8trpsr_mac_tmp14 = ngate_pg_ulvtllhc8trpsr_mac_tmp13 NOT SRM18
ngate_pg_ulvtllhc8trpsr_mac_tmp15 = ngate_pg_ulvtllhc8trpsr_mac_tmp14 NOT SRM19
ngate_pg_ulvtllhc8trpsr_mac_tmp16 = ngate_pg_ulvtllhc8trpsr_mac_tmp15 NOT SRM20
ngate_pg_ulvtllhc8trpsr_mac_tmp17 = ngate_pg_ulvtllhc8trpsr_mac_tmp16 NOT SRM21
ngate_pg_ulvtllhc8trpsr_mac_tmp18 = ngate_pg_ulvtllhc8trpsr_mac_tmp17 AND SRAMDMY
ngate_pg_ulvtllhc8trpsr_mac_tmp19 = ngate_pg_ulvtllhc8trpsr_mac_tmp18 AND SRAMPG
ngate_pg_ulvtllhc8trpsr_mac = ngate_pg_ulvtllhc8trpsr_mac_tmp19 AND SRAMRP


//* Define device -- nmos nchpd_ulvtllhc8trpsr_mac

//* Define layer -- ngate_pd_ulvtllhc8trpsr_mac
ngate_pd_ulvtllhc8trpsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_ulvtllhc8trpsr_mac_tmp02 = ngate_pd_ulvtllhc8trpsr_mac_tmp01 AND SRM
ngate_pd_ulvtllhc8trpsr_mac_tmp03 = ngate_pd_ulvtllhc8trpsr_mac_tmp02 AND SRM6
ngate_pd_ulvtllhc8trpsr_mac_tmp04 = ngate_pd_ulvtllhc8trpsr_mac_tmp03 NOT SRM8
ngate_pd_ulvtllhc8trpsr_mac_tmp05 = ngate_pd_ulvtllhc8trpsr_mac_tmp04 NOT SRM9
ngate_pd_ulvtllhc8trpsr_mac_tmp06 = ngate_pd_ulvtllhc8trpsr_mac_tmp05 NOT SRM10
ngate_pd_ulvtllhc8trpsr_mac_tmp07 = ngate_pd_ulvtllhc8trpsr_mac_tmp06 NOT SRM11
ngate_pd_ulvtllhc8trpsr_mac_tmp08 = ngate_pd_ulvtllhc8trpsr_mac_tmp07 NOT SRM12
ngate_pd_ulvtllhc8trpsr_mac_tmp09 = ngate_pd_ulvtllhc8trpsr_mac_tmp08 NOT SRM13
ngate_pd_ulvtllhc8trpsr_mac_tmp10 = ngate_pd_ulvtllhc8trpsr_mac_tmp09 NOT SRM14
ngate_pd_ulvtllhc8trpsr_mac_tmp11 = ngate_pd_ulvtllhc8trpsr_mac_tmp10 AND SRM15
ngate_pd_ulvtllhc8trpsr_mac_tmp12 = ngate_pd_ulvtllhc8trpsr_mac_tmp11 NOT SRM16
ngate_pd_ulvtllhc8trpsr_mac_tmp13 = ngate_pd_ulvtllhc8trpsr_mac_tmp12 NOT SRM17
ngate_pd_ulvtllhc8trpsr_mac_tmp14 = ngate_pd_ulvtllhc8trpsr_mac_tmp13 NOT SRM18
ngate_pd_ulvtllhc8trpsr_mac_tmp15 = ngate_pd_ulvtllhc8trpsr_mac_tmp14 NOT SRM19
ngate_pd_ulvtllhc8trpsr_mac_tmp16 = ngate_pd_ulvtllhc8trpsr_mac_tmp15 NOT SRM20
ngate_pd_ulvtllhc8trpsr_mac_tmp17 = ngate_pd_ulvtllhc8trpsr_mac_tmp16 NOT SRM21
ngate_pd_ulvtllhc8trpsr_mac_tmp18 = ngate_pd_ulvtllhc8trpsr_mac_tmp17 AND SRAMDMY
ngate_pd_ulvtllhc8trpsr_mac_tmp19 = ngate_pd_ulvtllhc8trpsr_mac_tmp18 NOT SRAMPG
ngate_pd_ulvtllhc8trpsr_mac = ngate_pd_ulvtllhc8trpsr_mac_tmp19 AND SRAMRP


//* Define device -- nmos nchpg_10tsr_mac

//* Define layer -- ngate_pg_10tsr_mac
ngate_pg_10tsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_10tsr_mac_tmp02 = ngate_pg_10tsr_mac_tmp01 AND SRM
ngate_pg_10tsr_mac_tmp03 = ngate_pg_10tsr_mac_tmp02 NOT SRM6
ngate_pg_10tsr_mac_tmp04 = ngate_pg_10tsr_mac_tmp03 NOT SRM8
ngate_pg_10tsr_mac_tmp05 = ngate_pg_10tsr_mac_tmp04 NOT SRM9
ngate_pg_10tsr_mac_tmp06 = ngate_pg_10tsr_mac_tmp05 NOT SRM10
ngate_pg_10tsr_mac_tmp07 = ngate_pg_10tsr_mac_tmp06 NOT SRM11
ngate_pg_10tsr_mac_tmp08 = ngate_pg_10tsr_mac_tmp07 NOT SRM12
ngate_pg_10tsr_mac_tmp09 = ngate_pg_10tsr_mac_tmp08 AND SRM13
ngate_pg_10tsr_mac_tmp10 = ngate_pg_10tsr_mac_tmp09 NOT SRM14
ngate_pg_10tsr_mac_tmp11 = ngate_pg_10tsr_mac_tmp10 NOT SRM15
ngate_pg_10tsr_mac_tmp12 = ngate_pg_10tsr_mac_tmp11 NOT SRM16
ngate_pg_10tsr_mac_tmp13 = ngate_pg_10tsr_mac_tmp12 NOT SRM17
ngate_pg_10tsr_mac_tmp14 = ngate_pg_10tsr_mac_tmp13 NOT SRM18
ngate_pg_10tsr_mac_tmp15 = ngate_pg_10tsr_mac_tmp14 NOT SRM19
ngate_pg_10tsr_mac_tmp16 = ngate_pg_10tsr_mac_tmp15 NOT SRM20
ngate_pg_10tsr_mac_tmp17 = ngate_pg_10tsr_mac_tmp16 NOT SRM21
ngate_pg_10tsr_mac_tmp18 = ngate_pg_10tsr_mac_tmp17 AND SRAMDMY
ngate_pg_10tsr_mac_tmp19 = ngate_pg_10tsr_mac_tmp18 AND SRAMPG
ngate_pg_10tsr_mac = ngate_pg_10tsr_mac_tmp19 NOT SRAMRP


//* Define device -- nmos nchpd_10tsr_mac

//* Define layer -- ngate_pd_10tsr_mac
ngate_pd_10tsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_10tsr_mac_tmp02 = ngate_pd_10tsr_mac_tmp01 AND SRM
ngate_pd_10tsr_mac_tmp03 = ngate_pd_10tsr_mac_tmp02 NOT SRM6
ngate_pd_10tsr_mac_tmp04 = ngate_pd_10tsr_mac_tmp03 NOT SRM8
ngate_pd_10tsr_mac_tmp05 = ngate_pd_10tsr_mac_tmp04 NOT SRM9
ngate_pd_10tsr_mac_tmp06 = ngate_pd_10tsr_mac_tmp05 NOT SRM10
ngate_pd_10tsr_mac_tmp07 = ngate_pd_10tsr_mac_tmp06 NOT SRM11
ngate_pd_10tsr_mac_tmp08 = ngate_pd_10tsr_mac_tmp07 NOT SRM12
ngate_pd_10tsr_mac_tmp09 = ngate_pd_10tsr_mac_tmp08 AND SRM13
ngate_pd_10tsr_mac_tmp10 = ngate_pd_10tsr_mac_tmp09 NOT SRM14
ngate_pd_10tsr_mac_tmp11 = ngate_pd_10tsr_mac_tmp10 NOT SRM15
ngate_pd_10tsr_mac_tmp12 = ngate_pd_10tsr_mac_tmp11 NOT SRM16
ngate_pd_10tsr_mac_tmp13 = ngate_pd_10tsr_mac_tmp12 NOT SRM17
ngate_pd_10tsr_mac_tmp14 = ngate_pd_10tsr_mac_tmp13 NOT SRM18
ngate_pd_10tsr_mac_tmp15 = ngate_pd_10tsr_mac_tmp14 NOT SRM19
ngate_pd_10tsr_mac_tmp16 = ngate_pd_10tsr_mac_tmp15 NOT SRM20
ngate_pd_10tsr_mac_tmp17 = ngate_pd_10tsr_mac_tmp16 NOT SRM21
ngate_pd_10tsr_mac_tmp18 = ngate_pd_10tsr_mac_tmp17 AND SRAMDMY
ngate_pd_10tsr_mac_tmp19 = ngate_pd_10tsr_mac_tmp18 NOT SRAMPG
ngate_pd_10tsr_mac = ngate_pd_10tsr_mac_tmp19 NOT SRAMRP


//* Define device -- pmos pchpu_10tsr_mac

//* Define layer -- pgate_pu_10tsr_mac
pgate_pu_10tsr_mac_tmp01 = pgate_s_normal AND SRMDEVi
pgate_pu_10tsr_mac_tmp02 = pgate_pu_10tsr_mac_tmp01 AND SRM
pgate_pu_10tsr_mac_tmp03 = pgate_pu_10tsr_mac_tmp02 NOT SRM6
pgate_pu_10tsr_mac_tmp04 = pgate_pu_10tsr_mac_tmp03 NOT SRM8
pgate_pu_10tsr_mac_tmp05 = pgate_pu_10tsr_mac_tmp04 NOT SRM9
pgate_pu_10tsr_mac_tmp06 = pgate_pu_10tsr_mac_tmp05 NOT SRM10
pgate_pu_10tsr_mac_tmp07 = pgate_pu_10tsr_mac_tmp06 NOT SRM11
pgate_pu_10tsr_mac_tmp08 = pgate_pu_10tsr_mac_tmp07 NOT SRM12
pgate_pu_10tsr_mac_tmp09 = pgate_pu_10tsr_mac_tmp08 AND SRM13
pgate_pu_10tsr_mac_tmp10 = pgate_pu_10tsr_mac_tmp09 NOT SRM14
pgate_pu_10tsr_mac_tmp11 = pgate_pu_10tsr_mac_tmp10 NOT SRM15
pgate_pu_10tsr_mac_tmp12 = pgate_pu_10tsr_mac_tmp11 NOT SRM16
pgate_pu_10tsr_mac_tmp13 = pgate_pu_10tsr_mac_tmp12 NOT SRM17
pgate_pu_10tsr_mac_tmp14 = pgate_pu_10tsr_mac_tmp13 NOT SRM18
pgate_pu_10tsr_mac_tmp15 = pgate_pu_10tsr_mac_tmp14 NOT SRM19
pgate_pu_10tsr_mac_tmp16 = pgate_pu_10tsr_mac_tmp15 NOT SRM20
pgate_pu_10tsr_mac_tmp17 = pgate_pu_10tsr_mac_tmp16 NOT SRM21
pgate_pu_10tsr_mac_tmp18 = pgate_pu_10tsr_mac_tmp17 AND SRAMDMY
pgate_pu_10tsr_mac_tmp19 = pgate_pu_10tsr_mac_tmp18 NOT SRAMPG
pgate_pu_10tsr_mac = pgate_pu_10tsr_mac_tmp19 NOT SRAMRP


//* Define device -- nmos nchpg_10trpsr_mac

//* Define layer -- ngate_pg_10trpsr_mac
ngate_pg_10trpsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_10trpsr_mac_tmp02 = ngate_pg_10trpsr_mac_tmp01 AND SRM
ngate_pg_10trpsr_mac_tmp03 = ngate_pg_10trpsr_mac_tmp02 NOT SRM6
ngate_pg_10trpsr_mac_tmp04 = ngate_pg_10trpsr_mac_tmp03 NOT SRM8
ngate_pg_10trpsr_mac_tmp05 = ngate_pg_10trpsr_mac_tmp04 NOT SRM9
ngate_pg_10trpsr_mac_tmp06 = ngate_pg_10trpsr_mac_tmp05 NOT SRM10
ngate_pg_10trpsr_mac_tmp07 = ngate_pg_10trpsr_mac_tmp06 NOT SRM11
ngate_pg_10trpsr_mac_tmp08 = ngate_pg_10trpsr_mac_tmp07 NOT SRM12
ngate_pg_10trpsr_mac_tmp09 = ngate_pg_10trpsr_mac_tmp08 AND SRM13
ngate_pg_10trpsr_mac_tmp10 = ngate_pg_10trpsr_mac_tmp09 NOT SRM14
ngate_pg_10trpsr_mac_tmp11 = ngate_pg_10trpsr_mac_tmp10 NOT SRM15
ngate_pg_10trpsr_mac_tmp12 = ngate_pg_10trpsr_mac_tmp11 NOT SRM16
ngate_pg_10trpsr_mac_tmp13 = ngate_pg_10trpsr_mac_tmp12 NOT SRM17
ngate_pg_10trpsr_mac_tmp14 = ngate_pg_10trpsr_mac_tmp13 NOT SRM18
ngate_pg_10trpsr_mac_tmp15 = ngate_pg_10trpsr_mac_tmp14 NOT SRM19
ngate_pg_10trpsr_mac_tmp16 = ngate_pg_10trpsr_mac_tmp15 NOT SRM20
ngate_pg_10trpsr_mac_tmp17 = ngate_pg_10trpsr_mac_tmp16 NOT SRM21
ngate_pg_10trpsr_mac_tmp18 = ngate_pg_10trpsr_mac_tmp17 AND SRAMDMY
ngate_pg_10trpsr_mac_tmp19 = ngate_pg_10trpsr_mac_tmp18 AND SRAMPG
ngate_pg_10trpsr_mac = ngate_pg_10trpsr_mac_tmp19 AND SRAMRP


//* Define device -- nmos nchpd_10trpsr_mac

//* Define layer -- ngate_pd_10trpsr_mac
ngate_pd_10trpsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_10trpsr_mac_tmp02 = ngate_pd_10trpsr_mac_tmp01 AND SRM
ngate_pd_10trpsr_mac_tmp03 = ngate_pd_10trpsr_mac_tmp02 NOT SRM6
ngate_pd_10trpsr_mac_tmp04 = ngate_pd_10trpsr_mac_tmp03 NOT SRM8
ngate_pd_10trpsr_mac_tmp05 = ngate_pd_10trpsr_mac_tmp04 NOT SRM9
ngate_pd_10trpsr_mac_tmp06 = ngate_pd_10trpsr_mac_tmp05 NOT SRM10
ngate_pd_10trpsr_mac_tmp07 = ngate_pd_10trpsr_mac_tmp06 NOT SRM11
ngate_pd_10trpsr_mac_tmp08 = ngate_pd_10trpsr_mac_tmp07 NOT SRM12
ngate_pd_10trpsr_mac_tmp09 = ngate_pd_10trpsr_mac_tmp08 AND SRM13
ngate_pd_10trpsr_mac_tmp10 = ngate_pd_10trpsr_mac_tmp09 NOT SRM14
ngate_pd_10trpsr_mac_tmp11 = ngate_pd_10trpsr_mac_tmp10 NOT SRM15
ngate_pd_10trpsr_mac_tmp12 = ngate_pd_10trpsr_mac_tmp11 NOT SRM16
ngate_pd_10trpsr_mac_tmp13 = ngate_pd_10trpsr_mac_tmp12 NOT SRM17
ngate_pd_10trpsr_mac_tmp14 = ngate_pd_10trpsr_mac_tmp13 NOT SRM18
ngate_pd_10trpsr_mac_tmp15 = ngate_pd_10trpsr_mac_tmp14 NOT SRM19
ngate_pd_10trpsr_mac_tmp16 = ngate_pd_10trpsr_mac_tmp15 NOT SRM20
ngate_pd_10trpsr_mac_tmp17 = ngate_pd_10trpsr_mac_tmp16 NOT SRM21
ngate_pd_10trpsr_mac_tmp18 = ngate_pd_10trpsr_mac_tmp17 AND SRAMDMY
ngate_pd_10trpsr_mac_tmp19 = ngate_pd_10trpsr_mac_tmp18 NOT SRAMPG
ngate_pd_10trpsr_mac = ngate_pd_10trpsr_mac_tmp19 AND SRAMRP


//* Define device -- nmos nchpg_ulvtll10tsr_mac

//* Define layer -- ngate_pg_ulvtll10tsr_mac
ngate_pg_ulvtll10tsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_ulvtll10tsr_mac_tmp02 = ngate_pg_ulvtll10tsr_mac_tmp01 AND SRM
ngate_pg_ulvtll10tsr_mac_tmp03 = ngate_pg_ulvtll10tsr_mac_tmp02 AND SRM6
ngate_pg_ulvtll10tsr_mac_tmp04 = ngate_pg_ulvtll10tsr_mac_tmp03 NOT SRM8
ngate_pg_ulvtll10tsr_mac_tmp05 = ngate_pg_ulvtll10tsr_mac_tmp04 NOT SRM9
ngate_pg_ulvtll10tsr_mac_tmp06 = ngate_pg_ulvtll10tsr_mac_tmp05 NOT SRM10
ngate_pg_ulvtll10tsr_mac_tmp07 = ngate_pg_ulvtll10tsr_mac_tmp06 NOT SRM11
ngate_pg_ulvtll10tsr_mac_tmp08 = ngate_pg_ulvtll10tsr_mac_tmp07 NOT SRM12
ngate_pg_ulvtll10tsr_mac_tmp09 = ngate_pg_ulvtll10tsr_mac_tmp08 AND SRM13
ngate_pg_ulvtll10tsr_mac_tmp10 = ngate_pg_ulvtll10tsr_mac_tmp09 NOT SRM14
ngate_pg_ulvtll10tsr_mac_tmp11 = ngate_pg_ulvtll10tsr_mac_tmp10 NOT SRM15
ngate_pg_ulvtll10tsr_mac_tmp12 = ngate_pg_ulvtll10tsr_mac_tmp11 NOT SRM16
ngate_pg_ulvtll10tsr_mac_tmp13 = ngate_pg_ulvtll10tsr_mac_tmp12 NOT SRM17
ngate_pg_ulvtll10tsr_mac_tmp14 = ngate_pg_ulvtll10tsr_mac_tmp13 NOT SRM18
ngate_pg_ulvtll10tsr_mac_tmp15 = ngate_pg_ulvtll10tsr_mac_tmp14 NOT SRM19
ngate_pg_ulvtll10tsr_mac_tmp16 = ngate_pg_ulvtll10tsr_mac_tmp15 NOT SRM20
ngate_pg_ulvtll10tsr_mac_tmp17 = ngate_pg_ulvtll10tsr_mac_tmp16 NOT SRM21
ngate_pg_ulvtll10tsr_mac_tmp18 = ngate_pg_ulvtll10tsr_mac_tmp17 AND SRAMDMY
ngate_pg_ulvtll10tsr_mac_tmp19 = ngate_pg_ulvtll10tsr_mac_tmp18 AND SRAMPG
ngate_pg_ulvtll10tsr_mac = ngate_pg_ulvtll10tsr_mac_tmp19 NOT SRAMRP


//* Define device -- nmos nchpd_ulvtll10tsr_mac

//* Define layer -- ngate_pd_ulvtll10tsr_mac
ngate_pd_ulvtll10tsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_ulvtll10tsr_mac_tmp02 = ngate_pd_ulvtll10tsr_mac_tmp01 AND SRM
ngate_pd_ulvtll10tsr_mac_tmp03 = ngate_pd_ulvtll10tsr_mac_tmp02 AND SRM6
ngate_pd_ulvtll10tsr_mac_tmp04 = ngate_pd_ulvtll10tsr_mac_tmp03 NOT SRM8
ngate_pd_ulvtll10tsr_mac_tmp05 = ngate_pd_ulvtll10tsr_mac_tmp04 NOT SRM9
ngate_pd_ulvtll10tsr_mac_tmp06 = ngate_pd_ulvtll10tsr_mac_tmp05 NOT SRM10
ngate_pd_ulvtll10tsr_mac_tmp07 = ngate_pd_ulvtll10tsr_mac_tmp06 NOT SRM11
ngate_pd_ulvtll10tsr_mac_tmp08 = ngate_pd_ulvtll10tsr_mac_tmp07 NOT SRM12
ngate_pd_ulvtll10tsr_mac_tmp09 = ngate_pd_ulvtll10tsr_mac_tmp08 AND SRM13
ngate_pd_ulvtll10tsr_mac_tmp10 = ngate_pd_ulvtll10tsr_mac_tmp09 NOT SRM14
ngate_pd_ulvtll10tsr_mac_tmp11 = ngate_pd_ulvtll10tsr_mac_tmp10 NOT SRM15
ngate_pd_ulvtll10tsr_mac_tmp12 = ngate_pd_ulvtll10tsr_mac_tmp11 NOT SRM16
ngate_pd_ulvtll10tsr_mac_tmp13 = ngate_pd_ulvtll10tsr_mac_tmp12 NOT SRM17
ngate_pd_ulvtll10tsr_mac_tmp14 = ngate_pd_ulvtll10tsr_mac_tmp13 NOT SRM18
ngate_pd_ulvtll10tsr_mac_tmp15 = ngate_pd_ulvtll10tsr_mac_tmp14 NOT SRM19
ngate_pd_ulvtll10tsr_mac_tmp16 = ngate_pd_ulvtll10tsr_mac_tmp15 NOT SRM20
ngate_pd_ulvtll10tsr_mac_tmp17 = ngate_pd_ulvtll10tsr_mac_tmp16 NOT SRM21
ngate_pd_ulvtll10tsr_mac_tmp18 = ngate_pd_ulvtll10tsr_mac_tmp17 AND SRAMDMY
ngate_pd_ulvtll10tsr_mac_tmp19 = ngate_pd_ulvtll10tsr_mac_tmp18 NOT SRAMPG
ngate_pd_ulvtll10tsr_mac = ngate_pd_ulvtll10tsr_mac_tmp19 NOT SRAMRP


//* Define device -- pmos pchpu_ulvtll10tsr_mac

//* Define layer -- pgate_pu_ulvtll10tsr_mac
pgate_pu_ulvtll10tsr_mac_tmp01 = pgate_s_normal AND SRMDEVi
pgate_pu_ulvtll10tsr_mac_tmp02 = pgate_pu_ulvtll10tsr_mac_tmp01 AND SRM
pgate_pu_ulvtll10tsr_mac_tmp03 = pgate_pu_ulvtll10tsr_mac_tmp02 AND SRM6
pgate_pu_ulvtll10tsr_mac_tmp04 = pgate_pu_ulvtll10tsr_mac_tmp03 NOT SRM8
pgate_pu_ulvtll10tsr_mac_tmp05 = pgate_pu_ulvtll10tsr_mac_tmp04 NOT SRM9
pgate_pu_ulvtll10tsr_mac_tmp06 = pgate_pu_ulvtll10tsr_mac_tmp05 NOT SRM10
pgate_pu_ulvtll10tsr_mac_tmp07 = pgate_pu_ulvtll10tsr_mac_tmp06 NOT SRM11
pgate_pu_ulvtll10tsr_mac_tmp08 = pgate_pu_ulvtll10tsr_mac_tmp07 NOT SRM12
pgate_pu_ulvtll10tsr_mac_tmp09 = pgate_pu_ulvtll10tsr_mac_tmp08 AND SRM13
pgate_pu_ulvtll10tsr_mac_tmp10 = pgate_pu_ulvtll10tsr_mac_tmp09 NOT SRM14
pgate_pu_ulvtll10tsr_mac_tmp11 = pgate_pu_ulvtll10tsr_mac_tmp10 NOT SRM15
pgate_pu_ulvtll10tsr_mac_tmp12 = pgate_pu_ulvtll10tsr_mac_tmp11 NOT SRM16
pgate_pu_ulvtll10tsr_mac_tmp13 = pgate_pu_ulvtll10tsr_mac_tmp12 NOT SRM17
pgate_pu_ulvtll10tsr_mac_tmp14 = pgate_pu_ulvtll10tsr_mac_tmp13 NOT SRM18
pgate_pu_ulvtll10tsr_mac_tmp15 = pgate_pu_ulvtll10tsr_mac_tmp14 NOT SRM19
pgate_pu_ulvtll10tsr_mac_tmp16 = pgate_pu_ulvtll10tsr_mac_tmp15 NOT SRM20
pgate_pu_ulvtll10tsr_mac_tmp17 = pgate_pu_ulvtll10tsr_mac_tmp16 NOT SRM21
pgate_pu_ulvtll10tsr_mac_tmp18 = pgate_pu_ulvtll10tsr_mac_tmp17 AND SRAMDMY
pgate_pu_ulvtll10tsr_mac_tmp19 = pgate_pu_ulvtll10tsr_mac_tmp18 NOT SRAMPG
pgate_pu_ulvtll10tsr_mac = pgate_pu_ulvtll10tsr_mac_tmp19 NOT SRAMRP


//* Define device -- nmos nchpg_ulvtll10trpsr_mac

//* Define layer -- ngate_pg_ulvtll10trpsr_mac
ngate_pg_ulvtll10trpsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_ulvtll10trpsr_mac_tmp02 = ngate_pg_ulvtll10trpsr_mac_tmp01 AND SRM
ngate_pg_ulvtll10trpsr_mac_tmp03 = ngate_pg_ulvtll10trpsr_mac_tmp02 AND SRM6
ngate_pg_ulvtll10trpsr_mac_tmp04 = ngate_pg_ulvtll10trpsr_mac_tmp03 NOT SRM8
ngate_pg_ulvtll10trpsr_mac_tmp05 = ngate_pg_ulvtll10trpsr_mac_tmp04 NOT SRM9
ngate_pg_ulvtll10trpsr_mac_tmp06 = ngate_pg_ulvtll10trpsr_mac_tmp05 NOT SRM10
ngate_pg_ulvtll10trpsr_mac_tmp07 = ngate_pg_ulvtll10trpsr_mac_tmp06 NOT SRM11
ngate_pg_ulvtll10trpsr_mac_tmp08 = ngate_pg_ulvtll10trpsr_mac_tmp07 NOT SRM12
ngate_pg_ulvtll10trpsr_mac_tmp09 = ngate_pg_ulvtll10trpsr_mac_tmp08 AND SRM13
ngate_pg_ulvtll10trpsr_mac_tmp10 = ngate_pg_ulvtll10trpsr_mac_tmp09 NOT SRM14
ngate_pg_ulvtll10trpsr_mac_tmp11 = ngate_pg_ulvtll10trpsr_mac_tmp10 NOT SRM15
ngate_pg_ulvtll10trpsr_mac_tmp12 = ngate_pg_ulvtll10trpsr_mac_tmp11 NOT SRM16
ngate_pg_ulvtll10trpsr_mac_tmp13 = ngate_pg_ulvtll10trpsr_mac_tmp12 NOT SRM17
ngate_pg_ulvtll10trpsr_mac_tmp14 = ngate_pg_ulvtll10trpsr_mac_tmp13 NOT SRM18
ngate_pg_ulvtll10trpsr_mac_tmp15 = ngate_pg_ulvtll10trpsr_mac_tmp14 NOT SRM19
ngate_pg_ulvtll10trpsr_mac_tmp16 = ngate_pg_ulvtll10trpsr_mac_tmp15 NOT SRM20
ngate_pg_ulvtll10trpsr_mac_tmp17 = ngate_pg_ulvtll10trpsr_mac_tmp16 NOT SRM21
ngate_pg_ulvtll10trpsr_mac_tmp18 = ngate_pg_ulvtll10trpsr_mac_tmp17 AND SRAMDMY
ngate_pg_ulvtll10trpsr_mac_tmp19 = ngate_pg_ulvtll10trpsr_mac_tmp18 AND SRAMPG
ngate_pg_ulvtll10trpsr_mac = ngate_pg_ulvtll10trpsr_mac_tmp19 AND SRAMRP


//* Define device -- nmos nchpd_ulvtll10trpsr_mac

//* Define layer -- ngate_pd_ulvtll10trpsr_mac
ngate_pd_ulvtll10trpsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_ulvtll10trpsr_mac_tmp02 = ngate_pd_ulvtll10trpsr_mac_tmp01 AND SRM
ngate_pd_ulvtll10trpsr_mac_tmp03 = ngate_pd_ulvtll10trpsr_mac_tmp02 AND SRM6
ngate_pd_ulvtll10trpsr_mac_tmp04 = ngate_pd_ulvtll10trpsr_mac_tmp03 NOT SRM8
ngate_pd_ulvtll10trpsr_mac_tmp05 = ngate_pd_ulvtll10trpsr_mac_tmp04 NOT SRM9
ngate_pd_ulvtll10trpsr_mac_tmp06 = ngate_pd_ulvtll10trpsr_mac_tmp05 NOT SRM10
ngate_pd_ulvtll10trpsr_mac_tmp07 = ngate_pd_ulvtll10trpsr_mac_tmp06 NOT SRM11
ngate_pd_ulvtll10trpsr_mac_tmp08 = ngate_pd_ulvtll10trpsr_mac_tmp07 NOT SRM12
ngate_pd_ulvtll10trpsr_mac_tmp09 = ngate_pd_ulvtll10trpsr_mac_tmp08 AND SRM13
ngate_pd_ulvtll10trpsr_mac_tmp10 = ngate_pd_ulvtll10trpsr_mac_tmp09 NOT SRM14
ngate_pd_ulvtll10trpsr_mac_tmp11 = ngate_pd_ulvtll10trpsr_mac_tmp10 NOT SRM15
ngate_pd_ulvtll10trpsr_mac_tmp12 = ngate_pd_ulvtll10trpsr_mac_tmp11 NOT SRM16
ngate_pd_ulvtll10trpsr_mac_tmp13 = ngate_pd_ulvtll10trpsr_mac_tmp12 NOT SRM17
ngate_pd_ulvtll10trpsr_mac_tmp14 = ngate_pd_ulvtll10trpsr_mac_tmp13 NOT SRM18
ngate_pd_ulvtll10trpsr_mac_tmp15 = ngate_pd_ulvtll10trpsr_mac_tmp14 NOT SRM19
ngate_pd_ulvtll10trpsr_mac_tmp16 = ngate_pd_ulvtll10trpsr_mac_tmp15 NOT SRM20
ngate_pd_ulvtll10trpsr_mac_tmp17 = ngate_pd_ulvtll10trpsr_mac_tmp16 NOT SRM21
ngate_pd_ulvtll10trpsr_mac_tmp18 = ngate_pd_ulvtll10trpsr_mac_tmp17 AND SRAMDMY
ngate_pd_ulvtll10trpsr_mac_tmp19 = ngate_pd_ulvtll10trpsr_mac_tmp18 NOT SRAMPG
ngate_pd_ulvtll10trpsr_mac = ngate_pd_ulvtll10trpsr_mac_tmp19 AND SRAMRP


//* Define device -- nmos nchpg_dpsr_mac

//* Define layer -- ngate_pg_dpsr_mac
ngate_pg_dpsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pg_dpsr_mac_tmp02 = ngate_pg_dpsr_mac_tmp01 AND SRM
ngate_pg_dpsr_mac_tmp03 = ngate_pg_dpsr_mac_tmp02 NOT SRM6
ngate_pg_dpsr_mac_tmp04 = ngate_pg_dpsr_mac_tmp03 NOT SRM8
ngate_pg_dpsr_mac_tmp05 = ngate_pg_dpsr_mac_tmp04 NOT SRM9
ngate_pg_dpsr_mac_tmp06 = ngate_pg_dpsr_mac_tmp05 NOT SRM10
ngate_pg_dpsr_mac_tmp07 = ngate_pg_dpsr_mac_tmp06 NOT SRM11
ngate_pg_dpsr_mac_tmp08 = ngate_pg_dpsr_mac_tmp07 NOT SRM12
ngate_pg_dpsr_mac_tmp09 = ngate_pg_dpsr_mac_tmp08 NOT SRM13
ngate_pg_dpsr_mac_tmp10 = ngate_pg_dpsr_mac_tmp09 NOT SRM14
ngate_pg_dpsr_mac_tmp11 = ngate_pg_dpsr_mac_tmp10 NOT SRM15
ngate_pg_dpsr_mac_tmp12 = ngate_pg_dpsr_mac_tmp11 AND SRM16
ngate_pg_dpsr_mac_tmp13 = ngate_pg_dpsr_mac_tmp12 NOT SRM17
ngate_pg_dpsr_mac_tmp14 = ngate_pg_dpsr_mac_tmp13 NOT SRM18
ngate_pg_dpsr_mac_tmp15 = ngate_pg_dpsr_mac_tmp14 NOT SRM19
ngate_pg_dpsr_mac_tmp16 = ngate_pg_dpsr_mac_tmp15 NOT SRM20
ngate_pg_dpsr_mac_tmp17 = ngate_pg_dpsr_mac_tmp16 NOT SRM21
ngate_pg_dpsr_mac_tmp18 = ngate_pg_dpsr_mac_tmp17 AND SRAMDMY
ngate_pg_dpsr_mac_tmp19 = ngate_pg_dpsr_mac_tmp18 AND SRAMPG
ngate_pg_dpsr_mac = ngate_pg_dpsr_mac_tmp19 NOT SRAMRP


//* Define device -- nmos nchpd_dpsr_mac

//* Define layer -- ngate_pd_dpsr_mac
ngate_pd_dpsr_mac_tmp01 = ngate_s_normal AND SRMDEVi
ngate_pd_dpsr_mac_tmp02 = ngate_pd_dpsr_mac_tmp01 AND SRM
ngate_pd_dpsr_mac_tmp03 = ngate_pd_dpsr_mac_tmp02 NOT SRM6
ngate_pd_dpsr_mac_tmp04 = ngate_pd_dpsr_mac_tmp03 NOT SRM8
ngate_pd_dpsr_mac_tmp05 = ngate_pd_dpsr_mac_tmp04 NOT SRM9
ngate_pd_dpsr_mac_tmp06 = ngate_pd_dpsr_mac_tmp05 NOT SRM10
ngate_pd_dpsr_mac_tmp07 = ngate_pd_dpsr_mac_tmp06 NOT SRM11
ngate_pd_dpsr_mac_tmp08 = ngate_pd_dpsr_mac_tmp07 NOT SRM12
ngate_pd_dpsr_mac_tmp09 = ngate_pd_dpsr_mac_tmp08 NOT SRM13
ngate_pd_dpsr_mac_tmp10 = ngate_pd_dpsr_mac_tmp09 NOT SRM14
ngate_pd_dpsr_mac_tmp11 = ngate_pd_dpsr_mac_tmp10 NOT SRM15
ngate_pd_dpsr_mac_tmp12 = ngate_pd_dpsr_mac_tmp11 AND SRM16
ngate_pd_dpsr_mac_tmp13 = ngate_pd_dpsr_mac_tmp12 NOT SRM17
ngate_pd_dpsr_mac_tmp14 = ngate_pd_dpsr_mac_tmp13 NOT SRM18
ngate_pd_dpsr_mac_tmp15 = ngate_pd_dpsr_mac_tmp14 NOT SRM19
ngate_pd_dpsr_mac_tmp16 = ngate_pd_dpsr_mac_tmp15 NOT SRM20
ngate_pd_dpsr_mac_tmp17 = ngate_pd_dpsr_mac_tmp16 NOT SRM21
ngate_pd_dpsr_mac_tmp18 = ngate_pd_dpsr_mac_tmp17 AND SRAMDMY
ngate_pd_dpsr_mac_tmp19 = ngate_pd_dpsr_mac_tmp18 NOT SRAMPG
ngate_pd_dpsr_mac = ngate_pd_dpsr_mac_tmp19 NOT SRAMRP


//* Define device -- pmos pchpu_dpsr_mac

//* Define layer -- pgate_pu_dpsr_mac
pgate_pu_dpsr_mac_tmp01 = pgate_s_normal AND SRMDEVi
pgate_pu_dpsr_mac_tmp02 = pgate_pu_dpsr_mac_tmp01 AND SRM
pgate_pu_dpsr_mac_tmp03 = pgate_pu_dpsr_mac_tmp02 NOT SRM6
pgate_pu_dpsr_mac_tmp04 = pgate_pu_dpsr_mac_tmp03 NOT SRM8
pgate_pu_dpsr_mac_tmp05 = pgate_pu_dpsr_mac_tmp04 NOT SRM9
pgate_pu_dpsr_mac_tmp06 = pgate_pu_dpsr_mac_tmp05 NOT SRM10
pgate_pu_dpsr_mac_tmp07 = pgate_pu_dpsr_mac_tmp06 NOT SRM11
pgate_pu_dpsr_mac_tmp08 = pgate_pu_dpsr_mac_tmp07 NOT SRM12
pgate_pu_dpsr_mac_tmp09 = pgate_pu_dpsr_mac_tmp08 NOT SRM13
pgate_pu_dpsr_mac_tmp10 = pgate_pu_dpsr_mac_tmp09 NOT SRM14
pgate_pu_dpsr_mac_tmp11 = pgate_pu_dpsr_mac_tmp10 NOT SRM15
pgate_pu_dpsr_mac_tmp12 = pgate_pu_dpsr_mac_tmp11 AND SRM16
pgate_pu_dpsr_mac_tmp13 = pgate_pu_dpsr_mac_tmp12 NOT SRM17
pgate_pu_dpsr_mac_tmp14 = pgate_pu_dpsr_mac_tmp13 NOT SRM18
pgate_pu_dpsr_mac_tmp15 = pgate_pu_dpsr_mac_tmp14 NOT SRM19
pgate_pu_dpsr_mac_tmp16 = pgate_pu_dpsr_mac_tmp15 NOT SRM20
pgate_pu_dpsr_mac_tmp17 = pgate_pu_dpsr_mac_tmp16 NOT SRM21
pgate_pu_dpsr_mac_tmp18 = pgate_pu_dpsr_mac_tmp17 AND SRAMDMY
pgate_pu_dpsr_mac_tmp19 = pgate_pu_dpsr_mac_tmp18 NOT SRAMPG
pgate_pu_dpsr_mac = pgate_pu_dpsr_mac_tmp19 NOT SRAMRP


//***** Define connectivity/via layer -- nch_mpodesvt_mac_gate ****
CPODEa = CPODEi OR DCPODE 
CPODE = CPODEa AND POx 
poly_org = POx NOT CPODE 
realpo = poly_org NOT SR_DPO  //  poly for device formation
ODz = ODI OR SR_DOD 
SRMDEVa = SRMDEVi INTERACT OD_DA 
SRM_all = SRM OR SRAMDMY 
SRMDEV = SRMDEVa AND SRM_all 
ODy = ODz OR SRMDEV  //  SRMDEV could used to calculate length of bent sram
ODv = ODy NOT TCDOVL  //  Under TCDDMY not support devices
ODx = ODv NOT CPODE 
RODMY_srm = RODMY AND SRM_all 
RODMY_srm_eff1 = RODMY_srm AND ODx 
realpo_s = realpo AND SRM_all 
RODMY_srm_eff = RODMY_srm_eff1 AND realpo_s 
diffa2 = ODx NOT RODMY_srm_eff 
MDz = MDi OR DMD 
CMD_SRM = CO_SRAM AND SRM 
CMDa = CMDi OR CMD_SRM 
CMD = CMDa OR DCMD 
MDx1 = MDz NOT CMD 
DMDa = DMD AND MDx1 
DMDb = DMDa NOT ODx 
SR_DODa = SR_DOD AND ODx 
dc_np_1 = DC1 AND NPi 
dc_np_6 = DC_WINP NOT INTERACT PPi 
dc_np = dc_np_1 OR dc_np_6 
PP1 = PPi NOT dc_np 
dc_pp_1 = DC1 AND PPi 
dc_pp_6 = DC_WINP INTERACT PPi 
dc_pp1 = dc_pp_1 OR dc_pp_6 
dc_pp_other = COPY DC_WONP 
dc_pp = dc_pp1 OR dc_pp_other 
PP = PP1 OR dc_pp 
SR_DODb = SR_DODa AND PP 
SR_DODc = SR_DODb AND psub 
DMDc = DMDb INTERACT SR_DODc == 2
DMDd = DMDc INTERACT psubband 
DMD_psub2_cut = DMDd AND psubband 
MDx = MDx1 NOT DMD_psub2_cut 
diff1 = diffa2 INTERACT MDx 
diff_MD = diff1 OR MDx 
MD_valid2 = MDx INTERACT VDi 
MD_valid4 = MDx WITH TEXT "?" MD_text
MD_valid_all1 = MD_valid2 OR MD_valid4 
VD2 = COPY VD2i 
MD_valid5 = MDx INTERACT VD2 
MD_valid_all2 = MD_valid_all1 OR MD_valid5 
MP = MPi AND SRM 
MD_valid6 = MDx INTERACT MP 
MD_valid = MD_valid_all2 OR MD_valid6 
diff_valid = diff_MD INTERACT MD_valid 
diffa = diffa2 AND diff_valid 
diff = diffa INTERACT MDx 
dumpo1 = poly_org INSIDE diff 
dumpo2 = dumpo1 NOT INTERACT VGi 
gate1a = realpo NOT dumpo2 
mdiff1 = COPY diff 
diff_float = diffa2 NOT mdiff1 
valid_PO4 = POx INTERACT MP 
valid_PO2 = POx WITH TEXT "?" poly_text
valid_PO3 = POx INTERACT VGi 
valid_PO5 = valid_PO2 OR valid_PO3 
valid_PO = valid_PO4 OR valid_PO5 
mdiff2 = diff_float INTERACT valid_PO  //  OD float connect to valid poly
mdiff_all1 = mdiff1 OR mdiff2 
mdiff_all2 = diffa2 NOT mdiff_all1 
mdiff = diffa2 NOT mdiff_all2 
gate1 = gate1a AND mdiff 
gate_a = gate1 NOT SRM_all 
gate = gate_a NOT RFDMYi 
gatennw = gate NOT nxwell  //  gate not inside nwell ( nmos gate )
NP1 = NPi NOT dc_pp 
NP = NP1 OR dc_np 
tngate0 = gatennw AND NP 
mos_exclude_layer1 = VARi OR IBJTDMY 
mos_exclude_layer2 = mos_exclude_layer1 OR DIODMYi 
mos_exclude_layer = mos_exclude_layer2 OR HIA_DUMMY 
tngate1 = tngate0 NOT mos_exclude_layer 
OD = ODx NOT RODMY_srm 
Small_Poly3 = POx AND OD 
Small_Poly2 = Small_Poly3 AND PODE_GATE 
EXT_OD_CORN = EXT OD < MINGRID_RECT1 ABUT == 90 REGION INTERSECTING ONLY
Small_Poly = Small_Poly2 INTERACT EXT_OD_CORN 
Small_gate_edge1 = Small_Poly INSIDE EDGE OD 
PO = POx NOT SR_DPO  //  For device formation
Small_gate_edge = Small_gate_edge1 TOUCH EDGE PO
Pre_Small_gate1 = INT Small_gate_edge < L_SHAPE_OD_GATE_LEN OPPOSITE PARALLEL ONLY REGION
INT_OD_CORN = INT OD < MINGRID_RECT1 ABUT == 90 REGION INTERSECTING ONLY
Mpode_gate1 = Small_Poly2 NOT INTERACT INT_OD_CORN 
Mpode_gate = Mpode_gate1 NOT INTERACT EXT_OD_CORN 
Pre_Small_gate = Pre_Small_gate1 OR Mpode_gate 
PODE_4T = PODE_GATE AND Pre_Small_gate 
nch_mpode_gate1 = tngate1 AND PODE_4T 
nch_mpode_gate = nch_mpode_gate1 NOT OD12 
DC_WINP_all = DC_WINP OR DC1 
dc_all = DC_WONP OR DC_WINP_all 
DC_VTS_N_1 = dc_all INTERACT VTS_Ni 
DC_VTS_N_2 = DC_VTS_N_1 NOT INTERACT VTS_Pi 
DC_VTS_N_3 = DC_VTS_N_2 NOT INTERACT VTL_Ni 
DC_VTS_N_4 = DC_VTS_N_3 NOT INTERACT VTL_Pi 
DC_VTS_N_5 = DC_VTS_N_4 NOT INTERACT VTUL_Ni 
DC_VTS_N_6 = DC_VTS_N_5 NOT INTERACT VTUL_Pi 
DC_VTS_N_7 = DC_VTS_N_6 NOT INTERACT VTEL_Ni 
DC_VTS_N_8 = DC_VTS_N_7 NOT INTERACT VTEL_Pi 
DC_VTS_N_9 = DC_VTS_N_8 NOT INTERACT VTL_NLLi 
DC_VTS_N_10 = DC_VTS_N_9 NOT INTERACT VTL_PLLi 
DC_VTS_N_11 = DC_VTS_N_10 NOT INTERACT VTUL_NLLi 
DC_VTS_N_12 = DC_VTS_N_11 NOT INTERACT VTUL_PLLi 
VTS_N1 = VTS_Ni OR DC_VTS_N_12 
DC_nul_1 = dc_all NOT DC_VTS_N_12 
DC_VTS_P_1 = dc_all NOT INTERACT VTS_Ni 
DC_VTS_P_2 = DC_VTS_P_1 INTERACT VTS_Pi 
DC_VTS_P_3 = DC_VTS_P_2 NOT INTERACT VTL_Ni 
DC_VTS_P_4 = DC_VTS_P_3 NOT INTERACT VTL_Pi 
DC_VTS_P_5 = DC_VTS_P_4 NOT INTERACT VTUL_Ni 
DC_VTS_P_6 = DC_VTS_P_5 NOT INTERACT VTUL_Pi 
DC_VTS_P_7 = DC_VTS_P_6 NOT INTERACT VTEL_Ni 
DC_VTS_P_8 = DC_VTS_P_7 NOT INTERACT VTEL_Pi 
DC_VTS_P_9 = DC_VTS_P_8 NOT INTERACT VTL_NLLi 
DC_VTS_P_10 = DC_VTS_P_9 NOT INTERACT VTL_PLLi 
DC_VTS_P_11 = DC_VTS_P_10 NOT INTERACT VTUL_NLLi 
DC_VTS_P_12 = DC_VTS_P_11 NOT INTERACT VTUL_PLLi 
DC_nul_2 = DC_nul_1 NOT DC_VTS_P_12 
DC_VTL_N_1 = dc_all NOT INTERACT VTS_Ni 
DC_VTL_N_2 = DC_VTL_N_1 NOT INTERACT VTS_Pi 
DC_VTL_N_3 = DC_VTL_N_2 INTERACT VTL_Ni 
DC_VTL_N_4 = DC_VTL_N_3 NOT INTERACT VTL_Pi 
DC_VTL_N_5 = DC_VTL_N_4 NOT INTERACT VTUL_Ni 
DC_VTL_N_6 = DC_VTL_N_5 NOT INTERACT VTUL_Pi 
DC_VTL_N_7 = DC_VTL_N_6 NOT INTERACT VTEL_Ni 
DC_VTL_N_8 = DC_VTL_N_7 NOT INTERACT VTEL_Pi 
DC_VTL_N_9 = DC_VTL_N_8 NOT INTERACT VTL_NLLi 
DC_VTL_N_10 = DC_VTL_N_9 NOT INTERACT VTL_PLLi 
DC_VTL_N_11 = DC_VTL_N_10 NOT INTERACT VTUL_NLLi 
DC_VTL_N_12 = DC_VTL_N_11 NOT INTERACT VTUL_PLLi 
DC_nul_3 = DC_nul_2 NOT DC_VTL_N_12 
DC_VTL_P_1 = dc_all NOT INTERACT VTS_Ni 
DC_VTL_P_2 = DC_VTL_P_1 NOT INTERACT VTS_Pi 
DC_VTL_P_3 = DC_VTL_P_2 NOT INTERACT VTL_Ni 
DC_VTL_P_4 = DC_VTL_P_3 INTERACT VTL_Pi 
DC_VTL_P_5 = DC_VTL_P_4 NOT INTERACT VTUL_Ni 
DC_VTL_P_6 = DC_VTL_P_5 NOT INTERACT VTUL_Pi 
DC_VTL_P_7 = DC_VTL_P_6 NOT INTERACT VTEL_Ni 
DC_VTL_P_8 = DC_VTL_P_7 NOT INTERACT VTEL_Pi 
DC_VTL_P_9 = DC_VTL_P_8 NOT INTERACT VTL_NLLi 
DC_VTL_P_10 = DC_VTL_P_9 NOT INTERACT VTL_PLLi 
DC_VTL_P_11 = DC_VTL_P_10 NOT INTERACT VTUL_NLLi 
DC_VTL_P_12 = DC_VTL_P_11 NOT INTERACT VTUL_PLLi 
DC_nul_4 = DC_nul_3 NOT DC_VTL_P_12 
DC_VTUL_N_1 = dc_all NOT INTERACT VTS_Ni 
DC_VTUL_N_2 = DC_VTUL_N_1 NOT INTERACT VTS_Pi 
DC_VTUL_N_3 = DC_VTUL_N_2 NOT INTERACT VTL_Ni 
DC_VTUL_N_4 = DC_VTUL_N_3 NOT INTERACT VTL_Pi 
DC_VTUL_N_5 = DC_VTUL_N_4 INTERACT VTUL_Ni 
DC_VTUL_N_6 = DC_VTUL_N_5 NOT INTERACT VTUL_Pi 
DC_VTUL_N_7 = DC_VTUL_N_6 NOT INTERACT VTEL_Ni 
DC_VTUL_N_8 = DC_VTUL_N_7 NOT INTERACT VTEL_Pi 
DC_VTUL_N_9 = DC_VTUL_N_8 NOT INTERACT VTL_NLLi 
DC_VTUL_N_10 = DC_VTUL_N_9 NOT INTERACT VTL_PLLi 
DC_VTUL_N_11 = DC_VTUL_N_10 NOT INTERACT VTUL_NLLi 
DC_VTUL_N_12 = DC_VTUL_N_11 NOT INTERACT VTUL_PLLi 
DC_nul_5 = DC_nul_4 NOT DC_VTUL_N_12 
DC_VTUL_P_1 = dc_all NOT INTERACT VTS_Ni 
DC_VTUL_P_2 = DC_VTUL_P_1 NOT INTERACT VTS_Pi 
DC_VTUL_P_3 = DC_VTUL_P_2 NOT INTERACT VTL_Ni 
DC_VTUL_P_4 = DC_VTUL_P_3 NOT INTERACT VTL_Pi 
DC_VTUL_P_5 = DC_VTUL_P_4 NOT INTERACT VTUL_Ni 
DC_VTUL_P_6 = DC_VTUL_P_5 INTERACT VTUL_Pi 
DC_VTUL_P_7 = DC_VTUL_P_6 NOT INTERACT VTEL_Ni 
DC_VTUL_P_8 = DC_VTUL_P_7 NOT INTERACT VTEL_Pi 
DC_VTUL_P_9 = DC_VTUL_P_8 NOT INTERACT VTL_NLLi 
DC_VTUL_P_10 = DC_VTUL_P_9 NOT INTERACT VTL_PLLi 
DC_VTUL_P_11 = DC_VTUL_P_10 NOT INTERACT VTUL_NLLi 
DC_VTUL_P_12 = DC_VTUL_P_11 NOT INTERACT VTUL_PLLi 
DC_nul_6 = DC_nul_5 NOT DC_VTUL_P_12 
DC_VTEL_N_1 = dc_all NOT INTERACT VTS_Ni 
DC_VTEL_N_2 = DC_VTEL_N_1 NOT INTERACT VTS_Pi 
DC_VTEL_N_3 = DC_VTEL_N_2 NOT INTERACT VTL_Ni 
DC_VTEL_N_4 = DC_VTEL_N_3 NOT INTERACT VTL_Pi 
DC_VTEL_N_5 = DC_VTEL_N_4 NOT INTERACT VTUL_Ni 
DC_VTEL_N_6 = DC_VTEL_N_5 NOT INTERACT VTUL_Pi 
DC_VTEL_N_7 = DC_VTEL_N_6 INTERACT VTEL_Ni 
DC_VTEL_N_8 = DC_VTEL_N_7 NOT INTERACT VTEL_Pi 
DC_VTEL_N_9 = DC_VTEL_N_8 NOT INTERACT VTL_NLLi 
DC_VTEL_N_10 = DC_VTEL_N_9 NOT INTERACT VTL_PLLi 
DC_VTEL_N_11 = DC_VTEL_N_10 NOT INTERACT VTUL_NLLi 
DC_VTEL_N_12 = DC_VTEL_N_11 NOT INTERACT VTUL_PLLi 
DC_nul_7 = DC_nul_6 NOT DC_VTEL_N_12 
DC_VTEL_P_1 = dc_all NOT INTERACT VTS_Ni 
DC_VTEL_P_2 = DC_VTEL_P_1 NOT INTERACT VTS_Pi 
DC_VTEL_P_3 = DC_VTEL_P_2 NOT INTERACT VTL_Ni 
DC_VTEL_P_4 = DC_VTEL_P_3 NOT INTERACT VTL_Pi 
DC_VTEL_P_5 = DC_VTEL_P_4 NOT INTERACT VTUL_Ni 
DC_VTEL_P_6 = DC_VTEL_P_5 NOT INTERACT VTUL_Pi 
DC_VTEL_P_7 = DC_VTEL_P_6 NOT INTERACT VTEL_Ni 
DC_VTEL_P_8 = DC_VTEL_P_7 INTERACT VTEL_Pi 
DC_VTEL_P_9 = DC_VTEL_P_8 NOT INTERACT VTL_NLLi 
DC_VTEL_P_10 = DC_VTEL_P_9 NOT INTERACT VTL_PLLi 
DC_VTEL_P_11 = DC_VTEL_P_10 NOT INTERACT VTUL_NLLi 
DC_VTEL_P_12 = DC_VTEL_P_11 NOT INTERACT VTUL_PLLi 
DC_nul_8 = DC_nul_7 NOT DC_VTEL_P_12 
DC_VTL_NLL_1 = dc_all NOT INTERACT VTS_Ni 
DC_VTL_NLL_2 = DC_VTL_NLL_1 NOT INTERACT VTS_Pi 
DC_VTL_NLL_3 = DC_VTL_NLL_2 NOT INTERACT VTL_Ni 
DC_VTL_NLL_4 = DC_VTL_NLL_3 NOT INTERACT VTL_Pi 
DC_VTL_NLL_5 = DC_VTL_NLL_4 NOT INTERACT VTUL_Ni 
DC_VTL_NLL_6 = DC_VTL_NLL_5 NOT INTERACT VTUL_Pi 
DC_VTL_NLL_7 = DC_VTL_NLL_6 NOT INTERACT VTEL_Ni 
DC_VTL_NLL_8 = DC_VTL_NLL_7 NOT INTERACT VTEL_Pi 
DC_VTL_NLL_9 = DC_VTL_NLL_8 INTERACT VTL_NLLi 
DC_VTL_NLL_10 = DC_VTL_NLL_9 NOT INTERACT VTL_PLLi 
DC_VTL_NLL_11 = DC_VTL_NLL_10 NOT INTERACT VTUL_NLLi 
DC_VTL_NLL_12 = DC_VTL_NLL_11 NOT INTERACT VTUL_PLLi 
DC_nul_9 = DC_nul_8 NOT DC_VTL_NLL_12 
DC_VTL_PLL_1 = dc_all NOT INTERACT VTS_Ni 
DC_VTL_PLL_2 = DC_VTL_PLL_1 NOT INTERACT VTS_Pi 
DC_VTL_PLL_3 = DC_VTL_PLL_2 NOT INTERACT VTL_Ni 
DC_VTL_PLL_4 = DC_VTL_PLL_3 NOT INTERACT VTL_Pi 
DC_VTL_PLL_5 = DC_VTL_PLL_4 NOT INTERACT VTUL_Ni 
DC_VTL_PLL_6 = DC_VTL_PLL_5 NOT INTERACT VTUL_Pi 
DC_VTL_PLL_7 = DC_VTL_PLL_6 NOT INTERACT VTEL_Ni 
DC_VTL_PLL_8 = DC_VTL_PLL_7 NOT INTERACT VTEL_Pi 
DC_VTL_PLL_9 = DC_VTL_PLL_8 NOT INTERACT VTL_NLLi 
DC_VTL_PLL_10 = DC_VTL_PLL_9 INTERACT VTL_PLLi 
DC_VTL_PLL_11 = DC_VTL_PLL_10 NOT INTERACT VTUL_NLLi 
DC_VTL_PLL_12 = DC_VTL_PLL_11 NOT INTERACT VTUL_PLLi 
DC_nul_10 = DC_nul_9 NOT DC_VTL_PLL_12 
DC_VTUL_NLL_1 = dc_all NOT INTERACT VTS_Ni 
DC_VTUL_NLL_2 = DC_VTUL_NLL_1 NOT INTERACT VTS_Pi 
DC_VTUL_NLL_3 = DC_VTUL_NLL_2 NOT INTERACT VTL_Ni 
DC_VTUL_NLL_4 = DC_VTUL_NLL_3 NOT INTERACT VTL_Pi 
DC_VTUL_NLL_5 = DC_VTUL_NLL_4 NOT INTERACT VTUL_Ni 
DC_VTUL_NLL_6 = DC_VTUL_NLL_5 NOT INTERACT VTUL_Pi 
DC_VTUL_NLL_7 = DC_VTUL_NLL_6 NOT INTERACT VTEL_Ni 
DC_VTUL_NLL_8 = DC_VTUL_NLL_7 NOT INTERACT VTEL_Pi 
DC_VTUL_NLL_9 = DC_VTUL_NLL_8 NOT INTERACT VTL_NLLi 
DC_VTUL_NLL_10 = DC_VTUL_NLL_9 NOT INTERACT VTL_PLLi 
DC_VTUL_NLL_11 = DC_VTUL_NLL_10 INTERACT VTUL_NLLi 
DC_VTUL_NLL_12 = DC_VTUL_NLL_11 NOT INTERACT VTUL_PLLi 
DC_nul_11 = DC_nul_10 NOT DC_VTUL_NLL_12 
DC_VTUL_PLL_1 = dc_all NOT INTERACT VTS_Ni 
DC_VTUL_PLL_2 = DC_VTUL_PLL_1 NOT INTERACT VTS_Pi 
DC_VTUL_PLL_3 = DC_VTUL_PLL_2 NOT INTERACT VTL_Ni 
DC_VTUL_PLL_4 = DC_VTUL_PLL_3 NOT INTERACT VTL_Pi 
DC_VTUL_PLL_5 = DC_VTUL_PLL_4 NOT INTERACT VTUL_Ni 
DC_VTUL_PLL_6 = DC_VTUL_PLL_5 NOT INTERACT VTUL_Pi 
DC_VTUL_PLL_7 = DC_VTUL_PLL_6 NOT INTERACT VTEL_Ni 
DC_VTUL_PLL_8 = DC_VTUL_PLL_7 NOT INTERACT VTEL_Pi 
DC_VTUL_PLL_9 = DC_VTUL_PLL_8 NOT INTERACT VTL_NLLi 
DC_VTUL_PLL_10 = DC_VTUL_PLL_9 NOT INTERACT VTL_PLLi 
DC_VTUL_PLL_11 = DC_VTUL_PLL_10 NOT INTERACT VTUL_NLLi 
DC_VTUL_PLL_12 = DC_VTUL_PLL_11 INTERACT VTUL_PLLi 
DC_nul_12 = DC_nul_11 NOT DC_VTUL_PLL_12 
VTS_N = VTS_N1 NOT DC_nul_12 
nch_mpodesvt_mac_gate = nch_mpode_gate AND VTS_N 

//***** Define connectivity/via layer -- nch_mpodelvt_mac_gate ****
VTL_N1 = VTL_Ni OR DC_VTL_N_12 
VTL_N = VTL_N1 NOT DC_nul_12 
nch_mpodelvt_mac_gate = nch_mpode_gate AND VTL_N 

//***** Define connectivity/via layer -- nch_mpodeulvt_mac_gate ****
VTUL_N1 = VTUL_Ni OR DC_VTUL_N_12 
VTUL_N = VTUL_N1 OR DC_nul_12 
nch_mpodeulvt_mac_gate = nch_mpode_gate AND VTUL_N 

//***** Define connectivity/via layer -- nch_mpodeelvt_mac_gate ****
VTEL_N1 = VTEL_Ni OR DC_VTEL_N_12 
VTEL_N = VTEL_N1 NOT DC_nul_12 
nch_mpodeelvt_mac_gate = nch_mpode_gate AND VTEL_N 

//***** Define connectivity/via layer -- nch_mpodelvtll_mac_gate ****
VTL_NLL1 = VTL_NLLi OR DC_VTL_NLL_12 
VTL_NLL = VTL_NLL1 NOT DC_nul_12 
nch_mpodelvtll_mac_gate = nch_mpode_gate AND VTL_NLL 

//***** Define connectivity/via layer -- nch_mpodeulvtll_mac_gate ****
VTUL_NLL1 = VTUL_NLLi OR DC_VTUL_NLL_12 
VTUL_NLL = VTUL_NLL1 NOT DC_nul_12 
nch_mpodeulvtll_mac_gate = nch_mpode_gate AND VTUL_NLL 

//***** Define connectivity/via layer -- nch_mpode12_mac_gate ****
nch_mpode12_mac_gate1 = nch_mpode_gate1 AND OD12 
nch_mpode12_mac_gate = COPY nch_mpode12_mac_gate1 

//***** Define connectivity/via layer -- pch_mpodesvt_mac_gate ****
gatenw = gate AND nxwell  //  gate inside nwell ( pmos gate )
tpgate0 = gatenw AND PP 
tpgate1 = tpgate0 NOT mos_exclude_layer 
pch_mpode_gate1 = tpgate1 AND PODE_4T 
pch_mpode_gate = pch_mpode_gate1 NOT OD12 
VTS_P1 = VTS_Pi OR DC_VTS_P_12 
VTS_P = VTS_P1 NOT DC_nul_12 
pch_mpodesvt_mac_gate = pch_mpode_gate AND VTS_P 

//***** Define connectivity/via layer -- pch_mpodelvt_mac_gate ****
VTL_P1 = VTL_Pi OR DC_VTL_P_12 
VTL_P = VTL_P1 NOT DC_nul_12 
pch_mpodelvt_mac_gate = pch_mpode_gate AND VTL_P 

//***** Define connectivity/via layer -- pch_mpodeulvt_mac_gate ****
VTUL_P1 = VTUL_Pi OR DC_VTUL_P_12 
VTUL_P = VTUL_P1 NOT DC_nul_12 
pch_mpodeulvt_mac_gate = pch_mpode_gate AND VTUL_P 

//***** Define connectivity/via layer -- pch_mpodeelvt_mac_gate ****
VTEL_P1 = VTEL_Pi OR DC_VTEL_P_12 
VTEL_P = VTEL_P1 NOT DC_nul_12 
pch_mpodeelvt_mac_gate = pch_mpode_gate AND VTEL_P 

//***** Define connectivity/via layer -- pch_mpodelvtll_mac_gate ****
VTL_PLL1 = VTL_PLLi OR DC_VTL_PLL_12 
VTL_PLL = VTL_PLL1 NOT DC_nul_12 
pch_mpodelvtll_mac_gate = pch_mpode_gate AND VTL_PLL 

//***** Define connectivity/via layer -- pch_mpodeulvtll_mac_gate ****
VTUL_PLL1 = VTUL_PLLi OR DC_VTUL_PLL_12 
VTUL_PLL = VTUL_PLL1 NOT DC_nul_12 
pch_mpodeulvtll_mac_gate = pch_mpode_gate AND VTUL_PLL 

//***** Define connectivity/via layer -- pch_mpode12_mac_gate ****
pch_mpode12_mac_gate1 = pch_mpode_gate1 AND OD12 
pch_mpode12_mac_gate = COPY pch_mpode12_mac_gate1 

//* Define device -- xdev npode_svt_mac
nthin1 = mdiff AND NP 
nthin = nthin1 NOT SR_DPO 
diffb = diffa NOT diff 
ndiffb = diffb AND NP 
tndiff_ori1 = nthin OR ndiffb 
diffc = diffa2 NOT diffa 
ndiffrc = diffc AND NP 
tndiff_ori2 = tndiff_ori1 OR ndiffrc 
tndiff_ori = tndiff_ori2 NOT POx 
PODE_3T_1 = PODE_GATE NOT Pre_Small_gate 
PODE_3T = PODE_3T_1 AND OD 
npode_edge1 = PODE_3T TOUCH EDGE tndiff_ori
npode_edge2 = EXPAND EDGE npode_edge1 OUTSIDE BY 0.001
npode_edge3 = tndiff_ori NOT npode_edge2 
npode_edge = tndiff_ori NOT npode_edge3 
npode_gate = tngate1 AND PODE_3T 
npode_svt_mac_gate1 = npode_gate AND VTS_N 
npode_svt_mac_gate = npode_svt_mac_gate1 NOT PO_P81_WPO 
npode_svt_mac_gate_edge = npode_edge INTERACT npode_svt_mac_gate 

//* Define device -- xdev npode_lvt_mac
npode_lvt_mac_gate1 = npode_gate AND VTL_N 
npode_lvt_mac_gate = npode_lvt_mac_gate1 NOT PO_P81_WPO 
npode_lvt_mac_gate_edge = npode_edge INTERACT npode_lvt_mac_gate 

//* Define device -- xdev npode_ulvt_mac
npode_ulvt_mac_gate = npode_gate AND VTUL_N 
npode_ulvt_mac_gate_edge = npode_edge INTERACT npode_ulvt_mac_gate 

//* Define device -- xdev npode_elvt_mac
npode_elvt_mac_gate = npode_gate AND VTEL_N 
npode_elvt_mac_gate_edge = npode_edge INTERACT npode_elvt_mac_gate 

//* Define device -- xdev npode_lvtll_mac
npode_lvtll_mac_gate = npode_gate AND VTL_NLL 
npode_lvtll_mac_gate_edge = npode_edge INTERACT npode_lvtll_mac_gate 

//* Define device -- xdev npode_ulvtll_mac
npode_ulvtll_mac_gate = npode_gate AND VTUL_NLL 
npode_ulvtll_mac_gate_edge = npode_edge INTERACT npode_ulvtll_mac_gate 

//* Define device -- xdev npode_12_mac
npode_12_mac_gate1 = npode_gate AND OD12 
npode_12_mac_gate = COPY npode_12_mac_gate1 
npode_12_mac_gate_edge = npode_edge INTERACT npode_12_mac_gate 

//* Define device -- xdev ppode_svt_mac
pthin1 = mdiff AND PP 
pthin = pthin1 NOT SR_DPO 
pdiffb = diffb NOT ndiffb 
tpdiff_ori1 = pthin OR pdiffb 
pdiffrc = diffc NOT ndiffrc 
tpdiff_ori2 = tpdiff_ori1 OR pdiffrc 
tpdiff_ori = tpdiff_ori2 NOT POx 
ppode_edge1 = PODE_3T TOUCH EDGE tpdiff_ori
ppode_edge2 = EXPAND EDGE ppode_edge1 OUTSIDE BY 0.001
ppode_edge3 = tpdiff_ori NOT ppode_edge2 
ppode_edge = tpdiff_ori NOT ppode_edge3 
ppode_gate = tpgate1 AND PODE_3T 
ppode_svt_mac_gate1 = ppode_gate AND VTS_P 
ppode_svt_mac_gate = ppode_svt_mac_gate1 NOT PO_P81_WPO 
ppode_svt_mac_gate_edge = ppode_edge INTERACT ppode_svt_mac_gate 

//* Define device -- xdev ppode_lvt_mac
ppode_lvt_mac_gate1 = ppode_gate AND VTL_P 
ppode_lvt_mac_gate = ppode_lvt_mac_gate1 NOT PO_P81_WPO 
ppode_lvt_mac_gate_edge = ppode_edge INTERACT ppode_lvt_mac_gate 

//* Define device -- xdev ppode_ulvt_mac
ppode_ulvt_mac_gate = ppode_gate AND VTUL_P 
ppode_ulvt_mac_gate_edge = ppode_edge INTERACT ppode_ulvt_mac_gate 

//* Define device -- xdev ppode_elvt_mac
ppode_elvt_mac_gate = ppode_gate AND VTEL_P 
ppode_elvt_mac_gate_edge = ppode_edge INTERACT ppode_elvt_mac_gate 

//* Define device -- xdev ppode_lvtll_mac
ppode_lvtll_mac_gate = ppode_gate AND VTL_PLL 
ppode_lvtll_mac_gate_edge = ppode_edge INTERACT ppode_lvtll_mac_gate 

//* Define device -- xdev ppode_ulvtll_mac
ppode_ulvtll_mac_gate = ppode_gate AND VTUL_PLL 
ppode_ulvtll_mac_gate_edge = ppode_edge INTERACT ppode_ulvtll_mac_gate 

//* Define device -- xdev ppode_12_mac
ppode_12_mac_gate1 = ppode_gate AND OD12 
ppode_12_mac_gate = COPY ppode_12_mac_gate1 
ppode_12_mac_gate_edge = ppode_edge INTERACT ppode_12_mac_gate 

//* Define device -- xdev npode_eflvt_mac
npode_eflvt_mac_gate1 = npode_lvt_mac_gate1 AND PO_P81_WPO 
npode_eflvt_mac_gate = npode_eflvt_mac_gate1 AND METALFUSE 
npode_eflvt_mac_gate_edge = npode_edge INTERACT npode_eflvt_mac_gate 

//* Define device -- xdev ppode_eflvt_mac
ppode_eflvt_mac_gate1 = ppode_lvt_mac_gate1 AND PO_P81_WPO 
ppode_eflvt_mac_gate = ppode_eflvt_mac_gate1 AND METALFUSE 
ppode_eflvt_mac_gate_edge = ppode_edge INTERACT ppode_eflvt_mac_gate 

//* Define device -- xdev npode_efsvt_mac
npode_efsvt_mac_gate1 = npode_svt_mac_gate1 AND PO_P81_WPO 
npode_efsvt_mac_gate = npode_efsvt_mac_gate1 AND METALFUSE 
npode_efsvt_mac_gate_edge = npode_edge INTERACT npode_efsvt_mac_gate 

//* Define device -- xdev ppode_efsvt_mac
ppode_efsvt_mac_gate1 = ppode_svt_mac_gate1 AND PO_P81_WPO 
ppode_efsvt_mac_gate = ppode_efsvt_mac_gate1 AND METALFUSE 
ppode_efsvt_mac_gate_edge = ppode_edge INTERACT ppode_efsvt_mac_gate 

//* Define device -- diode nwdio

//* Define layer -- nwdio_r
nwdio_r_tmp01 = DIONW NOT DNW
nwdio_r_tmp02 = nwdio_r_tmp01 AND NW
nwdio_r_tmp03 = nwdio_r_tmp02 NOT NT_N
nwdio_r_tmp04 = nwdio_r_tmp03 NOT OD12
nwdio_r_tmp05 = nwdio_r_tmp04 NOT VTEL_Ni
nwdio_r_tmp06 = nwdio_r_tmp05 NOT VTEL_Pi
nwdio_r_tmp07 = nwdio_r_tmp06 NOT VTUL_Ni
nwdio_r_tmp08 = nwdio_r_tmp07 NOT VTUL_Pi
nwdio_r_tmp09 = nwdio_r_tmp08 NOT VTL_Ni
nwdio_r_tmp10 = nwdio_r_tmp09 NOT VTL_Pi
nwdio_r_tmp11 = nwdio_r_tmp10 NOT VTS_Ni
nwdio_r_tmp12 = nwdio_r_tmp11 NOT VTS_Pi
nwdio_r_tmp13 = nwdio_r_tmp12 NOT VTUL_NLLi
nwdio_r_tmp14 = nwdio_r_tmp13 NOT VTUL_PLLi
nwdio_r_tmp15 = nwdio_r_tmp14 NOT VTL_NLLi
nwdio_r_tmp16 = nwdio_r_tmp15 NOT VTL_PLLi
nwdio_r_tmp17 = nwdio_r_tmp16 NOT PPi
nwdio_r_tmp18 = nwdio_r_tmp17 NOT PO_P81_WPO
nwdio_r_tmp19 = nwdio_r_tmp18 NOT VARi
nwdio_r_tmp20 = nwdio_r_tmp19 NOT IBJTDMY
nwdio_r_tmp21 = nwdio_r_tmp20 AND DIODMYi
nwdio_r_tmp22 = nwdio_r_tmp21 NOT SR_ESD
nwdio_r_tmp23 = nwdio_r_tmp22 NOT SDI
nwdio_r_tmp24 = nwdio_r_tmp23 NOT HIA_DUMMY
nwdio_r = nwdio_r_tmp24 NOT SDI_2


//* Define device -- bjt pnp_i1_mac

//* Define layer -- cemit_io_reg
cemit_io_reg_tmp01 = emit_reg NOT DNW
cemit_io_reg_tmp02 = cemit_io_reg_tmp01 AND ODI
cemit_io_reg_tmp03 = cemit_io_reg_tmp02 AND NW
cemit_io_reg_tmp04 = cemit_io_reg_tmp03 NOT NT_N
cemit_io_reg_tmp05 = cemit_io_reg_tmp04 AND OD12
cemit_io_reg_tmp06 = cemit_io_reg_tmp05 NOT VTEL_Ni
cemit_io_reg_tmp07 = cemit_io_reg_tmp06 NOT VTEL_Pi
cemit_io_reg_tmp08 = cemit_io_reg_tmp07 NOT VTUL_Ni
cemit_io_reg_tmp09 = cemit_io_reg_tmp08 NOT VTUL_Pi
cemit_io_reg_tmp10 = cemit_io_reg_tmp09 NOT VTL_Ni
cemit_io_reg_tmp11 = cemit_io_reg_tmp10 NOT VTL_Pi
cemit_io_reg_tmp12 = cemit_io_reg_tmp11 NOT VTS_Ni
cemit_io_reg_tmp13 = cemit_io_reg_tmp12 NOT VTS_Pi
cemit_io_reg_tmp14 = cemit_io_reg_tmp13 NOT VTUL_NLLi
cemit_io_reg_tmp15 = cemit_io_reg_tmp14 NOT VTUL_PLLi
cemit_io_reg_tmp16 = cemit_io_reg_tmp15 NOT VTL_NLLi
cemit_io_reg_tmp17 = cemit_io_reg_tmp16 NOT VTL_PLLi
cemit_io_reg_tmp18 = cemit_io_reg_tmp17 NOT NPi
cemit_io_reg_tmp19 = cemit_io_reg_tmp18 AND PPi
cemit_io_reg_tmp20 = cemit_io_reg_tmp19 NOT PO_P81_WPO
cemit_io_reg_tmp21 = cemit_io_reg_tmp20 NOT VARi
cemit_io_reg_tmp22 = cemit_io_reg_tmp21 AND IBJTDMY
cemit_io_reg_tmp23 = cemit_io_reg_tmp22 NOT DIODMYi
cemit_io_reg_tmp24 = cemit_io_reg_tmp23 NOT SR_ESD
cemit_io_reg_tmp25 = cemit_io_reg_tmp24 NOT SDI
cemit_io_reg_tmp26 = cemit_io_reg_tmp25 NOT HIA_DUMMY
cemit_io_reg = cemit_io_reg_tmp26 NOT SDI_2

cemit_io_mac = BJTEDMY INTERACT cemit_io_reg 
cemit_io_i1_mac = AREA cemit_io_mac  > 1.41886  < 1.41888 

//***** Define connectivity/via layer -- coll1 ****
nbase1k = nxwell NOT INTERACT DNW 
BJTDMY1 = BJTDMYi OR IBJTDMY 
BJTDMY = BJTDMY1 NOT SR_DOD 
nbase1l = nbase1k AND BJTDMY 
nbase1 = nbase1k INTERACT nbase1l 
collsur = psub TOUCH nbase1 
coll1a = collsur OR nbase1  //  define both BJTs collector
npnrg = DNW AND BJTDMY  //  define NPN region
nndiff = tndiff_ori AND npnrg 
pbase1 = psub AND npnrg 
cpbase1 = COPY pbase1 
cnemit1 = nndiff AND cpbase1 
collsura = collsur TOUCH cnemit1 
coll1b = coll1a NOT collsura 
emit = BJTEDMY INTERACT mdiff 
emit_reg = emit INTERACT POI 
coll1 = coll1b NOT emit_reg  //   define pnp collector

//***** Define connectivity/via layer -- cnbase1 ****
cnbase1 = COPY nbase1  //  define PNP base terminal

//***** Define connectivity/via layer -- tpdiff_bjt ****
tpdiff_bjt = tpdiff_ori INTERACT BJTDMY 

//* Define device -- bjt pnp_i2_mac
cemit_io_i2_mac = AREA cemit_io_mac  > 4.21382  < 4.21384 

//* Define device -- bjt pnp_p1_mac

//* Define layer -- cemit_io_p_reg
cemit_io_p_reg_tmp01 = emit_p_reg AND DNW
cemit_io_p_reg_tmp02 = cemit_io_p_reg_tmp01 AND ODI
cemit_io_p_reg_tmp03 = cemit_io_p_reg_tmp02 NOT NT_N
cemit_io_p_reg_tmp04 = cemit_io_p_reg_tmp03 AND OD12
cemit_io_p_reg_tmp05 = cemit_io_p_reg_tmp04 NOT VTEL_Ni
cemit_io_p_reg_tmp06 = cemit_io_p_reg_tmp05 NOT VTEL_Pi
cemit_io_p_reg_tmp07 = cemit_io_p_reg_tmp06 NOT VTUL_Ni
cemit_io_p_reg_tmp08 = cemit_io_p_reg_tmp07 NOT VTUL_Pi
cemit_io_p_reg_tmp09 = cemit_io_p_reg_tmp08 NOT VTL_Ni
cemit_io_p_reg_tmp10 = cemit_io_p_reg_tmp09 NOT VTL_Pi
cemit_io_p_reg_tmp11 = cemit_io_p_reg_tmp10 NOT VTS_Ni
cemit_io_p_reg_tmp12 = cemit_io_p_reg_tmp11 NOT VTS_Pi
cemit_io_p_reg_tmp13 = cemit_io_p_reg_tmp12 NOT VTUL_NLLi
cemit_io_p_reg_tmp14 = cemit_io_p_reg_tmp13 NOT VTUL_PLLi
cemit_io_p_reg_tmp15 = cemit_io_p_reg_tmp14 NOT VTL_NLLi
cemit_io_p_reg_tmp16 = cemit_io_p_reg_tmp15 NOT VTL_PLLi
cemit_io_p_reg_tmp17 = cemit_io_p_reg_tmp16 NOT NPi
cemit_io_p_reg_tmp18 = cemit_io_p_reg_tmp17 AND PPi
cemit_io_p_reg_tmp19 = cemit_io_p_reg_tmp18 NOT PO_P81_WPO
cemit_io_p_reg_tmp20 = cemit_io_p_reg_tmp19 NOT VARi
cemit_io_p_reg_tmp21 = cemit_io_p_reg_tmp20 AND IBJTDMY
cemit_io_p_reg_tmp22 = cemit_io_p_reg_tmp21 NOT DIODMYi
cemit_io_p_reg_tmp23 = cemit_io_p_reg_tmp22 NOT SR_ESD
cemit_io_p_reg_tmp24 = cemit_io_p_reg_tmp23 NOT SDI
cemit_io_p_reg_tmp25 = cemit_io_p_reg_tmp24 NOT HIA_DUMMY
cemit_io_p_reg = cemit_io_p_reg_tmp25 NOT SDI_2

cemit_io_p_mac = BJTEDMY INTERACT cemit_io_p_reg 
cemit_io_p1_mac = AREA cemit_io_p_mac  > 2.74871  < 2.74873 

//***** Define connectivity/via layer -- psub_term ****
psub_term_d = DNW NOT INTERACT nxwell 
psub_term_a1 = nxwell INTERACT DNW 
psub_term_a = EXTENTS psub_term_a1
psub_term_b = psub_term_a INTERACT DNW 
psub_term_c = psub_term_b NOT psubband  //  For avoid special condition from PSUB2 usage
psub_term_e = SIZE psub_term_c BY 0.001 
psub_term = psub_term_d OR psub_term_e 

//* Define device -- xdev ndio_mac

//* Define layer -- ndio_r
ndio_r_tmp01 = dio0 AND ODI
ndio_r_tmp02 = ndio_r_tmp01 NOT NW
ndio_r_tmp03 = ndio_r_tmp02 NOT NT_N
ndio_r_tmp04 = ndio_r_tmp03 NOT OD12
ndio_r_tmp05 = ndio_r_tmp04 NOT VTEL_Ni
ndio_r_tmp06 = ndio_r_tmp05 NOT VTEL_Pi
ndio_r_tmp07 = ndio_r_tmp06 NOT VTUL_Ni
ndio_r_tmp08 = ndio_r_tmp07 NOT VTUL_Pi
ndio_r_tmp09 = ndio_r_tmp08 NOT VTL_Ni
ndio_r_tmp10 = ndio_r_tmp09 NOT VTL_Pi
ndio_r_tmp11 = ndio_r_tmp10 NOT VTS_Ni
ndio_r_tmp12 = ndio_r_tmp11 NOT VTS_Pi
ndio_r_tmp13 = ndio_r_tmp12 NOT VTUL_NLLi
ndio_r_tmp14 = ndio_r_tmp13 NOT VTUL_PLLi
ndio_r_tmp15 = ndio_r_tmp14 NOT VTL_NLLi
ndio_r_tmp16 = ndio_r_tmp15 NOT VTL_PLLi
ndio_r_tmp17 = ndio_r_tmp16 AND NPi
ndio_r_tmp18 = ndio_r_tmp17 NOT PPi
ndio_r_tmp19 = ndio_r_tmp18 NOT PO_P81_WPO
ndio_r_tmp20 = ndio_r_tmp19 NOT VARi
ndio_r_tmp21 = ndio_r_tmp20 NOT IBJTDMY
ndio_r_tmp22 = ndio_r_tmp21 AND DIODMY
ndio_r_tmp23 = ndio_r_tmp22 NOT SR_ESD
ndio_r_tmp24 = ndio_r_tmp23 NOT SDI
ndio_r_tmp25 = ndio_r_tmp24 NOT HIA_DUMMY
ndio_r = ndio_r_tmp25 NOT SDI_2


//***** Define connectivity/via layer -- tndiff_dio ****

//* Define layer -- ndio_12_r
ndio_12_r_tmp01 = dio0 AND ODI
ndio_12_r_tmp02 = ndio_12_r_tmp01 NOT NW
ndio_12_r_tmp03 = ndio_12_r_tmp02 NOT NT_N
ndio_12_r_tmp04 = ndio_12_r_tmp03 AND OD12
ndio_12_r_tmp05 = ndio_12_r_tmp04 NOT VTEL_Ni
ndio_12_r_tmp06 = ndio_12_r_tmp05 NOT VTEL_Pi
ndio_12_r_tmp07 = ndio_12_r_tmp06 NOT VTUL_Ni
ndio_12_r_tmp08 = ndio_12_r_tmp07 NOT VTUL_Pi
ndio_12_r_tmp09 = ndio_12_r_tmp08 NOT VTL_Ni
ndio_12_r_tmp10 = ndio_12_r_tmp09 NOT VTL_Pi
ndio_12_r_tmp11 = ndio_12_r_tmp10 NOT VTS_Ni
ndio_12_r_tmp12 = ndio_12_r_tmp11 NOT VTS_Pi
ndio_12_r_tmp13 = ndio_12_r_tmp12 NOT VTUL_NLLi
ndio_12_r_tmp14 = ndio_12_r_tmp13 NOT VTUL_PLLi
ndio_12_r_tmp15 = ndio_12_r_tmp14 NOT VTL_NLLi
ndio_12_r_tmp16 = ndio_12_r_tmp15 NOT VTL_PLLi
ndio_12_r_tmp17 = ndio_12_r_tmp16 AND NPi
ndio_12_r_tmp18 = ndio_12_r_tmp17 NOT PPi
ndio_12_r_tmp19 = ndio_12_r_tmp18 NOT PO_P81_WPO
ndio_12_r_tmp20 = ndio_12_r_tmp19 NOT VARi
ndio_12_r_tmp21 = ndio_12_r_tmp20 NOT IBJTDMY
ndio_12_r_tmp22 = ndio_12_r_tmp21 AND DIODMY
ndio_12_r_tmp23 = ndio_12_r_tmp22 NOT SR_ESD
ndio_12_r_tmp24 = ndio_12_r_tmp23 NOT SDI
ndio_12_r_tmp25 = ndio_12_r_tmp24 NOT HIA_DUMMY
ndio_12_r = ndio_12_r_tmp25 NOT SDI_2

all_ndio_rec1 = ndio_r OR ndio_12_r 

//* Define layer -- ndio_12_ntn_r
ndio_12_ntn_r_tmp01 = dio0 NOT DNW
ndio_12_ntn_r_tmp02 = ndio_12_ntn_r_tmp01 AND ODI
ndio_12_ntn_r_tmp03 = ndio_12_ntn_r_tmp02 NOT NW
ndio_12_ntn_r_tmp04 = ndio_12_ntn_r_tmp03 AND NT_N
ndio_12_ntn_r_tmp05 = ndio_12_ntn_r_tmp04 AND OD12
ndio_12_ntn_r_tmp06 = ndio_12_ntn_r_tmp05 NOT VTEL_Ni
ndio_12_ntn_r_tmp07 = ndio_12_ntn_r_tmp06 NOT VTEL_Pi
ndio_12_ntn_r_tmp08 = ndio_12_ntn_r_tmp07 NOT VTUL_Ni
ndio_12_ntn_r_tmp09 = ndio_12_ntn_r_tmp08 NOT VTUL_Pi
ndio_12_ntn_r_tmp10 = ndio_12_ntn_r_tmp09 NOT VTL_Ni
ndio_12_ntn_r_tmp11 = ndio_12_ntn_r_tmp10 NOT VTL_Pi
ndio_12_ntn_r_tmp12 = ndio_12_ntn_r_tmp11 NOT VTS_Ni
ndio_12_ntn_r_tmp13 = ndio_12_ntn_r_tmp12 NOT VTS_Pi
ndio_12_ntn_r_tmp14 = ndio_12_ntn_r_tmp13 NOT VTUL_NLLi
ndio_12_ntn_r_tmp15 = ndio_12_ntn_r_tmp14 NOT VTUL_PLLi
ndio_12_ntn_r_tmp16 = ndio_12_ntn_r_tmp15 NOT VTL_NLLi
ndio_12_ntn_r_tmp17 = ndio_12_ntn_r_tmp16 NOT VTL_PLLi
ndio_12_ntn_r_tmp18 = ndio_12_ntn_r_tmp17 AND NPi
ndio_12_ntn_r_tmp19 = ndio_12_ntn_r_tmp18 NOT PPi
ndio_12_ntn_r_tmp20 = ndio_12_ntn_r_tmp19 NOT PO_P81_WPO
ndio_12_ntn_r_tmp21 = ndio_12_ntn_r_tmp20 NOT VARi
ndio_12_ntn_r_tmp22 = ndio_12_ntn_r_tmp21 NOT IBJTDMY
ndio_12_ntn_r_tmp23 = ndio_12_ntn_r_tmp22 AND DIODMY
ndio_12_ntn_r_tmp24 = ndio_12_ntn_r_tmp23 NOT SR_ESD
ndio_12_ntn_r_tmp25 = ndio_12_ntn_r_tmp24 NOT SDI
ndio_12_ntn_r_tmp26 = ndio_12_ntn_r_tmp25 NOT HIA_DUMMY
ndio_12_ntn_r = ndio_12_ntn_r_tmp26 NOT SDI_2

all_ndio_rec2 = all_ndio_rec1 OR ndio_12_ntn_r 
hia12_ndio_r1 = HIA_DUMMY INTERACT POI 
hia_ndio0 = tndiff_ori INTERACT diff 
hia_ndio1 = hia_ndio0 INTERACT ODI 

//* Define layer -- hia12_ndio1
hia12_ndio1_tmp01 = OD12 NOT NW
hia12_ndio1_tmp02 = hia12_ndio1_tmp01 NOT NT_N
hia12_ndio1_tmp03 = hia12_ndio1_tmp02 NOT VTEL_Ni
hia12_ndio1_tmp04 = hia12_ndio1_tmp03 NOT VTEL_Pi
hia12_ndio1_tmp05 = hia12_ndio1_tmp04 NOT VTUL_Ni
hia12_ndio1_tmp06 = hia12_ndio1_tmp05 NOT VTUL_Pi
hia12_ndio1_tmp07 = hia12_ndio1_tmp06 NOT VTL_Ni
hia12_ndio1_tmp08 = hia12_ndio1_tmp07 NOT VTL_Pi
hia12_ndio1_tmp09 = hia12_ndio1_tmp08 NOT VTS_Ni
hia12_ndio1_tmp10 = hia12_ndio1_tmp09 NOT VTS_Pi
hia12_ndio1_tmp11 = hia12_ndio1_tmp10 NOT VTUL_NLLi
hia12_ndio1_tmp12 = hia12_ndio1_tmp11 NOT VTUL_PLLi
hia12_ndio1_tmp13 = hia12_ndio1_tmp12 NOT VTL_NLLi
hia12_ndio1_tmp14 = hia12_ndio1_tmp13 NOT VTL_PLLi
hia12_ndio1_tmp15 = hia12_ndio1_tmp14 NOT PO_P81_WPO
hia12_ndio1_tmp16 = hia12_ndio1_tmp15 NOT VARi
hia12_ndio1_tmp17 = hia12_ndio1_tmp16 NOT IBJTDMY
hia12_ndio1_tmp18 = hia12_ndio1_tmp17 AND DIODMY
hia12_ndio1_tmp19 = hia12_ndio1_tmp18 NOT SR_ESD
hia12_ndio1_tmp20 = hia12_ndio1_tmp19 NOT SDI
hia12_ndio1_tmp21 = hia12_ndio1_tmp20 AND HIA_DUMMY
hia12_ndio1 = hia12_ndio1_tmp21 NOT SDI_2

hia12_ndio = hia_ndio1 AND hia12_ndio1 
hia12_ndio_r = hia12_ndio_r1 INTERACT hia12_ndio  //   CORE N+/PW ESD DIODE
all_ndio_rec3 = all_ndio_rec2 OR hia12_ndio_r 

//* Define layer -- hia12_ndio_ntn1
hia12_ndio_ntn1_tmp01 = OD12 NOT DNW
hia12_ndio_ntn1_tmp02 = hia12_ndio_ntn1_tmp01 NOT NW
hia12_ndio_ntn1_tmp03 = hia12_ndio_ntn1_tmp02 AND NT_N
hia12_ndio_ntn1_tmp04 = hia12_ndio_ntn1_tmp03 NOT VTEL_Ni
hia12_ndio_ntn1_tmp05 = hia12_ndio_ntn1_tmp04 NOT VTEL_Pi
hia12_ndio_ntn1_tmp06 = hia12_ndio_ntn1_tmp05 NOT VTUL_Ni
hia12_ndio_ntn1_tmp07 = hia12_ndio_ntn1_tmp06 NOT VTUL_Pi
hia12_ndio_ntn1_tmp08 = hia12_ndio_ntn1_tmp07 NOT VTL_Ni
hia12_ndio_ntn1_tmp09 = hia12_ndio_ntn1_tmp08 NOT VTL_Pi
hia12_ndio_ntn1_tmp10 = hia12_ndio_ntn1_tmp09 NOT VTS_Ni
hia12_ndio_ntn1_tmp11 = hia12_ndio_ntn1_tmp10 NOT VTS_Pi
hia12_ndio_ntn1_tmp12 = hia12_ndio_ntn1_tmp11 NOT VTUL_NLLi
hia12_ndio_ntn1_tmp13 = hia12_ndio_ntn1_tmp12 NOT VTUL_PLLi
hia12_ndio_ntn1_tmp14 = hia12_ndio_ntn1_tmp13 NOT VTL_NLLi
hia12_ndio_ntn1_tmp15 = hia12_ndio_ntn1_tmp14 NOT VTL_PLLi
hia12_ndio_ntn1_tmp16 = hia12_ndio_ntn1_tmp15 NOT PO_P81_WPO
hia12_ndio_ntn1_tmp17 = hia12_ndio_ntn1_tmp16 NOT VARi
hia12_ndio_ntn1_tmp18 = hia12_ndio_ntn1_tmp17 NOT IBJTDMY
hia12_ndio_ntn1_tmp19 = hia12_ndio_ntn1_tmp18 AND DIODMY
hia12_ndio_ntn1_tmp20 = hia12_ndio_ntn1_tmp19 NOT SR_ESD
hia12_ndio_ntn1_tmp21 = hia12_ndio_ntn1_tmp20 NOT SDI
hia12_ndio_ntn1_tmp22 = hia12_ndio_ntn1_tmp21 AND HIA_DUMMY
hia12_ndio_ntn1 = hia12_ndio_ntn1_tmp22 NOT SDI_2

hia12_ndio_ntn = hia_ndio1 AND hia12_ndio_ntn1 
hia12_ndio_ntn_r = hia12_ndio_r1 INTERACT hia12_ndio_ntn  //   CORE N+/PW ESD DIODE
all_ndio_rec = all_ndio_rec3 OR hia12_ndio_ntn_r 

//* Define layer -- pdio_r
pdio_r_tmp01 = dio0 AND ODI
pdio_r_tmp02 = pdio_r_tmp01 AND NW
pdio_r_tmp03 = pdio_r_tmp02 NOT NT_N
pdio_r_tmp04 = pdio_r_tmp03 NOT OD12
pdio_r_tmp05 = pdio_r_tmp04 NOT VTEL_Ni
pdio_r_tmp06 = pdio_r_tmp05 NOT VTEL_Pi
pdio_r_tmp07 = pdio_r_tmp06 NOT VTUL_Ni
pdio_r_tmp08 = pdio_r_tmp07 NOT VTUL_Pi
pdio_r_tmp09 = pdio_r_tmp08 NOT VTL_Ni
pdio_r_tmp10 = pdio_r_tmp09 NOT VTL_Pi
pdio_r_tmp11 = pdio_r_tmp10 NOT VTS_Ni
pdio_r_tmp12 = pdio_r_tmp11 NOT VTS_Pi
pdio_r_tmp13 = pdio_r_tmp12 NOT VTUL_NLLi
pdio_r_tmp14 = pdio_r_tmp13 NOT VTUL_PLLi
pdio_r_tmp15 = pdio_r_tmp14 NOT VTL_NLLi
pdio_r_tmp16 = pdio_r_tmp15 NOT VTL_PLLi
pdio_r_tmp17 = pdio_r_tmp16 NOT NPi
pdio_r_tmp18 = pdio_r_tmp17 AND PPi
pdio_r_tmp19 = pdio_r_tmp18 NOT PO_P81_WPO
pdio_r_tmp20 = pdio_r_tmp19 NOT VARi
pdio_r_tmp21 = pdio_r_tmp20 NOT IBJTDMY
pdio_r_tmp22 = pdio_r_tmp21 AND DIODMY
pdio_r_tmp23 = pdio_r_tmp22 NOT SR_ESD
pdio_r_tmp24 = pdio_r_tmp23 NOT SDI
pdio_r_tmp25 = pdio_r_tmp24 NOT HIA_DUMMY
pdio_r = pdio_r_tmp25 NOT SDI_2


//* Define layer -- pdio_12_r
pdio_12_r_tmp01 = dio0 AND ODI
pdio_12_r_tmp02 = pdio_12_r_tmp01 AND NW
pdio_12_r_tmp03 = pdio_12_r_tmp02 NOT NT_N
pdio_12_r_tmp04 = pdio_12_r_tmp03 AND OD12
pdio_12_r_tmp05 = pdio_12_r_tmp04 NOT VTEL_Ni
pdio_12_r_tmp06 = pdio_12_r_tmp05 NOT VTEL_Pi
pdio_12_r_tmp07 = pdio_12_r_tmp06 NOT VTUL_Ni
pdio_12_r_tmp08 = pdio_12_r_tmp07 NOT VTUL_Pi
pdio_12_r_tmp09 = pdio_12_r_tmp08 NOT VTL_Ni
pdio_12_r_tmp10 = pdio_12_r_tmp09 NOT VTL_Pi
pdio_12_r_tmp11 = pdio_12_r_tmp10 NOT VTS_Ni
pdio_12_r_tmp12 = pdio_12_r_tmp11 NOT VTS_Pi
pdio_12_r_tmp13 = pdio_12_r_tmp12 NOT VTUL_NLLi
pdio_12_r_tmp14 = pdio_12_r_tmp13 NOT VTUL_PLLi
pdio_12_r_tmp15 = pdio_12_r_tmp14 NOT VTL_NLLi
pdio_12_r_tmp16 = pdio_12_r_tmp15 NOT VTL_PLLi
pdio_12_r_tmp17 = pdio_12_r_tmp16 NOT NPi
pdio_12_r_tmp18 = pdio_12_r_tmp17 AND PPi
pdio_12_r_tmp19 = pdio_12_r_tmp18 NOT PO_P81_WPO
pdio_12_r_tmp20 = pdio_12_r_tmp19 NOT VARi
pdio_12_r_tmp21 = pdio_12_r_tmp20 NOT IBJTDMY
pdio_12_r_tmp22 = pdio_12_r_tmp21 AND DIODMY
pdio_12_r_tmp23 = pdio_12_r_tmp22 NOT SR_ESD
pdio_12_r_tmp24 = pdio_12_r_tmp23 NOT SDI
pdio_12_r_tmp25 = pdio_12_r_tmp24 NOT HIA_DUMMY
pdio_12_r = pdio_12_r_tmp25 NOT SDI_2

all_pdio_rec1 = pdio_r OR pdio_12_r 
hia12_pdio_r1 = HIA_DUMMY INTERACT POI 
hia_pdio0 = tpdiff_ori INTERACT diff 
hia_pdio1 = hia_pdio0 INTERACT ODI 

//* Define layer -- hia12_pdio1
hia12_pdio1_tmp01 = OD12 AND NW
hia12_pdio1_tmp02 = hia12_pdio1_tmp01 NOT NT_N
hia12_pdio1_tmp03 = hia12_pdio1_tmp02 NOT VTEL_Ni
hia12_pdio1_tmp04 = hia12_pdio1_tmp03 NOT VTEL_Pi
hia12_pdio1_tmp05 = hia12_pdio1_tmp04 NOT VTUL_Ni
hia12_pdio1_tmp06 = hia12_pdio1_tmp05 NOT VTUL_Pi
hia12_pdio1_tmp07 = hia12_pdio1_tmp06 NOT VTL_Ni
hia12_pdio1_tmp08 = hia12_pdio1_tmp07 NOT VTL_Pi
hia12_pdio1_tmp09 = hia12_pdio1_tmp08 NOT VTS_Ni
hia12_pdio1_tmp10 = hia12_pdio1_tmp09 NOT VTS_Pi
hia12_pdio1_tmp11 = hia12_pdio1_tmp10 NOT VTUL_NLLi
hia12_pdio1_tmp12 = hia12_pdio1_tmp11 NOT VTUL_PLLi
hia12_pdio1_tmp13 = hia12_pdio1_tmp12 NOT VTL_NLLi
hia12_pdio1_tmp14 = hia12_pdio1_tmp13 NOT VTL_PLLi
hia12_pdio1_tmp15 = hia12_pdio1_tmp14 NOT PO_P81_WPO
hia12_pdio1_tmp16 = hia12_pdio1_tmp15 NOT VARi
hia12_pdio1_tmp17 = hia12_pdio1_tmp16 NOT IBJTDMY
hia12_pdio1_tmp18 = hia12_pdio1_tmp17 AND DIODMY
hia12_pdio1_tmp19 = hia12_pdio1_tmp18 NOT SR_ESD
hia12_pdio1_tmp20 = hia12_pdio1_tmp19 NOT SDI
hia12_pdio1_tmp21 = hia12_pdio1_tmp20 AND HIA_DUMMY
hia12_pdio1 = hia12_pdio1_tmp21 NOT SDI_2

hia12_pdio = hia_pdio1 AND hia12_pdio1 
hia12_pdio_r = hia12_pdio_r1 INTERACT hia12_pdio  //   CORE P+/NW ESD DIODE
all_pdio_rec = all_pdio_rec1 OR hia12_pdio_r 
all_diode_rec = all_ndio_rec OR all_pdio_rec 
tndiff_dio1 = tndiff_ori INTERACT all_diode_rec 
tndiff_dio = tndiff_dio1 AND diff 

//***** Define connectivity/via layer -- tpdiff_dio ****
tpdiff_dio1 = tpdiff_ori INTERACT all_diode_rec 
tpdiff_dio = tpdiff_dio1 AND diff 

//* Define device -- xdev ndio_hia12_ntn_mac
hia_dio_ngate = tngate0 AND HIA_DUMMY 

//* Define device -- xdev ndio_hia12_mac
mdiff_hdio = mdiff AND HIA_DUMMY 
ndiff_hdio = mdiff_hdio INTERACT hia12_ndio 

//* Define device -- xdev pdio_hia12_mac
hia_dio_pgate = tpgate0 AND HIA_DUMMY 
pdiff_hdio = mdiff_hdio INTERACT hia12_pdio 
ndiff_hdio_ntn = mdiff_hdio INTERACT hia12_ndio_ntn 

//* Define device -- xdev dnwpsub
dnwdio2_tmp01 = DNW NOT NT_N 
dnwdio2_tmp02 = dnwdio2_tmp01 NOT SR_ESD 
dnwdio2 = dnwdio2_tmp02 NOT SDI_2 
dnwdio_bjt1 = dnwdio2 AND IBJTDMY 
dnwdio_bjt = dnwdio2 INTERACT dnwdio_bjt1 
dnwdio3 = dnwdio2 NOT dnwdio_bjt 
dnwdio_rf_var1 = DNW AND RFDMYi 
dnwdio_rf_var = dnwdio_rf_var1 INTERACT VARi 
dnwdio = dnwdio3 NOT dnwdio_rf_var 

//* Define device -- xdev pwdnw
rwdio1 = DNW NOT nxwell 
rwdio2_tmp01 = rwdio1 NOT NT_N 
rwdio2_tmp02 = rwdio2_tmp01 NOT SR_ESD 
rwdio2 = rwdio2_tmp02 NOT SDI_2 
rwdio_bjt1 = rwdio2 AND IBJTDMY 
rwdio_bjt = rwdio2 INTERACT rwdio_bjt1 
rwdio3 = rwdio2 NOT rwdio_bjt 
rwdio_rf_var1 = rwdio2 AND RFDMYi 
rwdio_rf_var = rwdio_rf_var1 INTERACT VARi 
rwdio = rwdio3 NOT rwdio_rf_var 
rwdio_wo_nxwell = rwdio NOT INTERACT nxwell 
rwdio_wi_nxwell = rwdio INTERACT nxwell 

//* Define device -- xdev pnwdio
pnwdio1 = nxwell OUTSIDE nwdio_r 
pnwdio2a = pnwdio1 NOT DNW 
pnwdio2b = pnwdio2a NOT cnbase1 
pnwdio_rf_var1 = pnwdio2b AND RFDMYi 
pnwdio_rf_var = pnwdio_rf_var1 INTERACT VARi 
pnwdio2 = pnwdio2b NOT pnwdio_rf_var 
pnwdio_r_wo_dnw = pnwdio2 NOT INTERACT DNW 
pnwdio_r_wi_dnw = pnwdio2 INTERACT DNW 

//* Define device -- xdev rmsp
M0_Ai2 = M0_Ai NOT CM0A 
metal0_Aj = M0_Ai2 OR DUM0_Ai 
metal0_Ai = metal0_Aj NOT CM0A  //  M0A + DM0A - CM0A
M0_Bi2 = M0_Bi NOT CM0B 
metal0_Bj = M0_Bi2 OR DUM0_Bi 
metal0_Bi = metal0_Bj NOT CM0B  //  M0B + DM0B - CM0B
metal0i = metal0_Ai OR metal0_Bi 
mt0res1 = metal0i AND RMDMY0 
mt0res_body_via_up = mt0res1 AND VIA0i 
mt0res1a = mt0res1 NOT INTERACT mt0res_body_via_up 
mt0res_body_via_down1 = mt0res1 AND VDi 
mt0res1b = mt0res1a NOT INTERACT mt0res_body_via_down1 
mt0res_body_via_down2 = mt0res1 AND VGi 
mt0res1c = mt0res1b NOT INTERACT mt0res_body_via_down2 
mt0res_body_via_down3 = mt0res1 AND VD2i 
mt0res1d = mt0res1c NOT INTERACT mt0res_body_via_down3 
mt0res1e = COPY mt0res1d 
M0_ALL = M0_Ai2 OR M0_Bi2 
mt0res = mt0res1e INTERACT M0_ALL 
mt0res_a = mt0res1e INTERACT M0_Ai2 
mt0res_b = mt0res1e INTERACT M0_Bi2 

//***** Define connectivity/via layer -- M0_A ****
M0_AY = COPY metal0_Ai 
M0_A1 = M0_AY NOT mt0res 

//* Define layer -- m0efuse0
m0efuse0_tmp01 = MFUSE AND M0_Ai
m0efuse0_tmp02 = m0efuse0_tmp01 NOT M1_Ai
m0efuse0_tmp03 = m0efuse0_tmp02 NOT M2_Ai_X
m0efuse0 = m0efuse0_tmp03 NOT M4i_Xc

m0efuse1 = m0efuse0 AND M0_AY 
m0efuse1a = m0efuse1 NOT INTERACT RMDMY0 
m0efuse_body_via_up = m0efuse1 AND VIA0i 
m0efuse1b = m0efuse1a NOT INTERACT m0efuse_body_via_up 
m0efuse_body_via_down1 = m0efuse1 AND VDi 
m0efuse1c = m0efuse1b NOT INTERACT m0efuse_body_via_down1 
m0efuse_body_via_down2 = m0efuse1 AND VGi 
m0efuse1d = m0efuse1c NOT INTERACT m0efuse_body_via_down2 
m0efuse_body_via_down3 = m0efuse1 AND VD2i 
m0efuse = m0efuse1d NOT INTERACT m0efuse_body_via_down3 
M0_A = M0_A1 NOT m0efuse 

//***** Define connectivity/via layer -- M0_B ****
M0_BY = COPY metal0_Bi 
M0_B = M0_BY NOT mt0res 
M1_Ai2 = M1_Ai NOT CM1A 
metal1_Aj = M1_Ai2 OR DUM1_Ai 
metal1_Ai = metal1_Aj NOT CM1A 
M1_Bi2 = COPY M1_Bi 
metal1_Bj = M1_Bi2 OR DUM1_Bi 
metal1_Bi = COPY metal1_Bj 
metal1i = metal1_Ai OR metal1_Bi 
mt1res1 = metal1i AND RMDMY1 
mt1res_body_via_up = mt1res1 AND VIA1i 
mt1res1a = mt1res1 NOT INTERACT mt1res_body_via_up 
mt1res_body_via_down = mt1res1 AND VIA0i 
mt1res1b = mt1res1a NOT INTERACT mt1res_body_via_down 
mt1res1c = COPY mt1res1b  //  M1 net divider
M1_ALL = M1_Ai2 OR M1_Bi2 
mt1res = mt1res1c INTERACT M1_ALL 
mt1res_a = mt1res1c INTERACT M1_Ai2 
mt1res_b = mt1res1c INTERACT M1_Bi2 

//***** Define connectivity/via layer -- M1_A ****
M1_AY = COPY metal1_Ai 
M1_A1 = M1_AY NOT mt1res 

//* Define layer -- m1efuse0
m1efuse0_tmp01 = MFUSE NOT M0_Ai
m1efuse0_tmp02 = m1efuse0_tmp01 AND M1_Ai
m1efuse0_tmp03 = m1efuse0_tmp02 NOT M2_Ai_X
m1efuse0 = m1efuse0_tmp03 NOT M4i_Xc

m1efuse1 = m1efuse0 AND M1_AY 
m1efuse1a = m1efuse1 NOT INTERACT RMDMY1 
m1efuse_body_via_up = m1efuse1 AND VIA1i 
m1efuse1b = m1efuse1a NOT INTERACT m1efuse_body_via_up 
m1efuse_body_via_down = m1efuse1 AND VIA0i 
m1efuse = m1efuse1b NOT INTERACT m1efuse_body_via_down 
M1_A = M1_A1 NOT m1efuse  //  M1A interconnecte

//***** Define connectivity/via layer -- M1_B ****
M1_BY = COPY metal1_Bi 
M1_B = M1_BY NOT mt1res  //  M1B interconnect
M2_Ai = M2_Ai1 OR M2_Ai_X 
metal2_Ai = M2_Ai OR DUM2_Ai 
M2_Bi2 = COPY M2_Bi 
metal2_Bj = M2_Bi2 OR DUM2_Bi 
metal2_Bi = COPY metal2_Bj 
metal2i1 = metal2_Ai OR metal2_Bi 
metal2_noABi = M2i OR DUM2i 
metal2i = metal2i1 OR metal2_noABi 
mt2res1 = metal2i AND RMDMY2 
mt2res_body_via_up = mt2res1 AND VIA2i 
mt2res1a = mt2res1 NOT INTERACT mt2res_body_via_up 
mt2res_body_via_down = mt2res1 AND VIA1i 
mt2res1b = mt2res1a NOT INTERACT mt2res_body_via_down 
mt2res1c = COPY mt2res1b  //  M2 net divider
M2_ALL2 = M2_Ai OR M2_Bi 
M2_ALL = M2i OR M2_ALL2 
mt2res = mt2res1c INTERACT M2_ALL 
mt2res_a = mt2res1c INTERACT M2_Ai 
mt2res_b = mt2res1c INTERACT M2_Bi 
mt2res_noab = mt2res1c INTERACT M2i 
M2Y = COPY metal2_noABi 
M2_Y2 = M2Y NOT mt2res 
MOMDMY_ary_shield = MOMDMY_ARY OR MOMDMY_TSHD 
mom2_ary_term1 = M2_Y2 INTERACT MOMDMY_ary_shield 
metal3_Ai = M3_Ai OR DUM3_Ai 
metal3_Bi = M3_Bi OR DUM3_Bi 
metal3i1 = metal3_Ai OR metal3_Bi 
metal3_noABi = M3i OR DUM3i 
metal3i = metal3i1 OR metal3_noABi 
MOM_field3 = metal3i AND MOMDMY3 
MOMDMY_tbs_stop_acc2_tmp0 = MOMDMY2 NOT INTERACT MOM_field3 
mom2_ary_term = mom2_ary_term1 INTERACT MOMDMY_tbs_stop_acc2_tmp0 
mom2_ary_minus = mom2_ary_term AND MOMDMY_MINUS 
M2_1 = M2_Y2 NOT mom2_ary_minus 
mom2_ary_plus = mom2_ary_term AND MOMDMY_PLUS 
M2 = M2_1 NOT mom2_ary_plus 

//***** Define connectivity/via layer -- M2_A ****
M2_AY = COPY metal2_Ai 
M2_A1 = M2_AY NOT mt2res 

//* Define layer -- m2efuse0
m2efuse0_tmp01 = MFUSE NOT M0_Ai
m2efuse0_tmp02 = m2efuse0_tmp01 NOT M1_Ai
m2efuse0_tmp03 = m2efuse0_tmp02 AND M2_Ai_X
m2efuse0 = m2efuse0_tmp03 NOT M4i_Xc

m2efuse1 = m2efuse0 AND M2_AY 
m2efuse1a = m2efuse1 NOT INTERACT RMDMY2 
m2efuse_body_via_up = m2efuse1 AND VIA2i 
m2efuse1b = m2efuse1a NOT INTERACT m2efuse_body_via_up 
m2efuse_body_via_down = m2efuse1 AND VIA1i 
m2efuse = m2efuse1b NOT INTERACT m2efuse_body_via_down 
M2_AY2 = M2_A1 NOT m2efuse 
mom2_ary_terma1 = M2_AY2 INTERACT MOMDMY_ary_shield 
mom2_ary_terma = mom2_ary_terma1 INTERACT MOMDMY_tbs_stop_acc2_tmp0 
mom2_ary_plus_a = mom2_ary_terma AND MOMDMY_PLUS 
M2_A = M2_AY2 NOT mom2_ary_plus_a  //  M2A interconnect

//***** Define connectivity/via layer -- M2_B ****
M2_BY = COPY metal2_Bi 
M2_BY2 = M2_BY NOT mt2res 
mom2_ary_termb1 = M2_BY2 INTERACT MOMDMY_ary_shield 
mom2_ary_termb = mom2_ary_termb1 INTERACT MOMDMY_tbs_stop_acc2_tmp0 
mom2_ary_minus_b = mom2_ary_termb AND MOMDMY_MINUS 
M2_B = M2_BY2 NOT mom2_ary_minus_b  //  M2B interconnect
mt3res1 = metal3i AND RMDMY3 
mt3res_body_via_up = mt3res1 AND VIA3i 
mt3res1a = mt3res1 NOT INTERACT mt3res_body_via_up 
mt3res_body_via_down = mt3res1 AND VIA2i 
mt3res1b = mt3res1a NOT INTERACT mt3res_body_via_down  //  M3 net divider
M3_ALL2 = M3_Ai OR M3_Bi 
M3_ALL = M3_ALL2 OR M3i 
mt3res = mt3res1b INTERACT M3_ALL 
mt3res_a = mt3res1b INTERACT M3_Ai 
mt3res_b = mt3res1b INTERACT M3_Bi 
mt3res_noab = mt3res1b INTERACT M3i 

//***** Define connectivity/via layer -- M3 ****
M3Y = COPY metal3_noABi 
M3_Y2 = M3Y NOT mt3res 
mom3_ary_term1 = M3_Y2 INTERACT MOMDMY_ary_shield 
metal4_Ai = M4_Ai OR DUM4_Ai 
metal4_Bi = M4_Bi OR DUM4_Bi 
metal4i1 = metal4_Ai OR metal4_Bi 
M4i = M4i1 OR M4i_Xc 
metal4_noABi = M4i OR DUM4i 
metal4i = metal4i1 OR metal4_noABi 
MOM_field4 = metal4i AND MOMDMY4 
MOMDMY_tbs_stop_acc3_tmp0 = MOMDMY3 NOT INTERACT MOM_field4 
mom3_ary_term = mom3_ary_term1 INTERACT MOMDMY_tbs_stop_acc3_tmp0 
mom3_ary_plus = mom3_ary_term AND MOMDMY_PLUS 
M3_1 = M3_Y2 NOT mom3_ary_plus 
mom3_ary_minus = mom3_ary_term AND MOMDMY_MINUS 
M3 = M3_1 NOT mom3_ary_minus  //  M3 interconnect
M3_AY = COPY metal3_Ai 
M3_AY2 = M3_AY NOT mt3res 
mom3_ary_terma1 = M3_AY2 INTERACT MOMDMY_ary_shield 
mom3_ary_terma = mom3_ary_terma1 INTERACT MOMDMY_tbs_stop_acc3_tmp0 
mom3_ary_plus_a = mom3_ary_terma AND MOMDMY_PLUS 
M3_A = M3_AY2 NOT mom3_ary_plus_a  //  M3A interconnect
M3_BY = COPY metal3_Bi 
M3_BY2 = M3_BY NOT mt3res 
mom3_ary_termb1 = M3_BY2 INTERACT MOMDMY_ary_shield 
mom3_ary_termb = mom3_ary_termb1 INTERACT MOMDMY_tbs_stop_acc3_tmp0 
mom3_ary_minus_b = mom3_ary_termb AND MOMDMY_MINUS 
M3_B = M3_BY2 NOT mom3_ary_minus_b  //  M3B interconnect
mt4res1 = metal4i AND RMDMY4 
mt4res_body_via_up = mt4res1 AND VIA4i 
mt4res1a = mt4res1 NOT INTERACT mt4res_body_via_up 
mt4res_body_via_down = mt4res1 AND VIA3i 
mt4res1b = mt4res1a NOT INTERACT mt4res_body_via_down  //  M4 net divider
M4_ALL2 = M4_Ai OR M4_Bi 
M4_ALL = M4_ALL2 OR M4i 
mt4res = mt4res1b INTERACT M4_ALL 
mt4res_a = mt4res1b INTERACT M4_Ai 
mt4res_b = mt4res1b INTERACT M4_Bi 
mt4res_noab = mt4res1b INTERACT M4i 

//***** Define connectivity/via layer -- M4 ****
M4Y = COPY metal4_noABi 

//* Define layer -- m4efuse0
m4efuse0_tmp01 = MFUSE NOT M0_Ai
m4efuse0_tmp02 = m4efuse0_tmp01 NOT M1_Ai
m4efuse0_tmp03 = m4efuse0_tmp02 NOT M2_Ai_X
m4efuse0 = m4efuse0_tmp03 AND M4i_Xc

m4efuse1 = m4efuse0 AND M4Y 
m4efuse1a = m4efuse1 NOT INTERACT RMDMY4 
m4efuse_body_via_up = m4efuse1 AND VIA4i 
m4efuse1b = m4efuse1a NOT INTERACT m4efuse_body_via_up 
m4efuse_body_via_down = m4efuse1 AND VIA3i 
m4efuse = m4efuse1b NOT INTERACT m4efuse_body_via_down 
M4_Y1 = M4Y NOT m4efuse 
M4_Y2 = M4_Y1 NOT mt4res 
mom4_ary_term1 = M4_Y2 INTERACT MOMDMY_ary_shield 
metal5_Ai = M5_Ai OR DUM5_Ai 
metal5_Bi = M5_Bi OR DUM5_Bi 
metal5i1 = metal5_Ai OR metal5_Bi 
metal5_noABi = M5i OR DUM5i 
metal5i = metal5i1 OR metal5_noABi 
MOM_field5 = metal5i AND MOMDMY5 
MOMDMY_tbs_stop_acc4_tmp0 = MOMDMY4 NOT INTERACT MOM_field5 
mom4_ary_term = mom4_ary_term1 INTERACT MOMDMY_tbs_stop_acc4_tmp0 
mom4_ary_plus = mom4_ary_term AND MOMDMY_PLUS 
M4_1 = M4_Y2 NOT mom4_ary_plus  //  M4 interconnect
mom4_ary_minus = mom4_ary_term AND MOMDMY_MINUS 
M4 = M4_1 NOT mom4_ary_minus  //  M4 interconnect
M4_AY = COPY metal4_Ai 
M4_AY2 = M4_AY NOT mt4res 
mom4_ary_terma1 = M4_AY2 INTERACT MOMDMY_ary_shield 
mom4_ary_terma = mom4_ary_terma1 INTERACT MOMDMY_tbs_stop_acc4_tmp0 
mom4_ary_plus_a = mom4_ary_terma AND MOMDMY_PLUS 
M4_A = M4_AY2 NOT mom4_ary_plus_a  //  M4A interconnect
M4_BY = COPY metal4_Bi 
M4_BY2 = M4_BY NOT mt4res 
mom4_ary_termb1 = M4_BY2 INTERACT MOMDMY_ary_shield 
mom4_ary_termb = mom4_ary_termb1 INTERACT MOMDMY_tbs_stop_acc4_tmp0 
mom4_ary_minus_b = mom4_ary_termb AND MOMDMY_MINUS 
M4_B = M4_BY2 NOT mom4_ary_minus_b  //  M4B interconnect
mt5res1 = metal5i AND RMDMY5 
mt5res_body_via_up = mt5res1 AND VIA5i 
mt5res1a = mt5res1 NOT INTERACT mt5res_body_via_up 
mt5res_body_via_down = mt5res1 AND VIA4i 
mt5res1b = mt5res1a NOT INTERACT mt5res_body_via_down  //  M5 net divider
M5_ALL2 = M5_Ai OR M5_Bi 
M5_ALL = M5_ALL2 OR M5i 
mt5res = mt5res1b INTERACT M5_ALL 
mt5res_a = mt5res1b INTERACT M5_Ai 
mt5res_b = mt5res1b INTERACT M5_Bi 
mt5res_noab = mt5res1b INTERACT M5i 
M5Y = COPY metal5_noABi 
M5_Y2 = M5Y NOT mt5res 
mom5_ary_term1 = M5_Y2 INTERACT MOMDMY_ary_shield 
metal6_Ai = M6_Ai OR DUM6_Ai 
metal6_Bi = M6_Bi OR DUM6_Bi 
metal6i1 = metal6_Ai OR metal6_Bi 
metal6_noABi = M6i OR DUM6i 
metal6i = metal6i1 OR metal6_noABi 
MOM_field6 = metal6i AND MOMDMY6 
MOMDMY_tbs_stop_acc5_tmp0 = MOMDMY5 NOT INTERACT MOM_field6 
mom5_ary_term = mom5_ary_term1 INTERACT MOMDMY_tbs_stop_acc5_tmp0 
mom5_ary_plus = mom5_ary_term AND MOMDMY_PLUS 
M5_1 = M5_Y2 NOT mom5_ary_plus 
mom5_ary_minus = mom5_ary_term AND MOMDMY_MINUS 
M5 = M5_1 NOT mom5_ary_minus  //  M5 interconnect

//***** Define connectivity/via layer -- M5_A ****
M5_AY = COPY metal5_Ai 
M5_AY2 = M5_AY NOT mt5res 
mom5_ary_terma1 = M5_AY2 INTERACT MOMDMY_ary_shield 
mom5_ary_terma = mom5_ary_terma1 INTERACT MOMDMY_tbs_stop_acc5_tmp0 
mom5_ary_plus_a = mom5_ary_terma AND MOMDMY_PLUS 
M5_A = M5_AY2 NOT mom5_ary_plus_a  //  M5A interconnect

//***** Define connectivity/via layer -- M5_B ****
M5_BY = COPY metal5_Bi 
M5_BY2 = M5_BY NOT mt5res 
mom5_ary_termb1 = M5_BY2 INTERACT MOMDMY_ary_shield 
mom5_ary_termb = mom5_ary_termb1 INTERACT MOMDMY_tbs_stop_acc5_tmp0 
mom5_ary_minus_b = mom5_ary_termb AND MOMDMY_MINUS 
M5_B = M5_BY2 NOT mom5_ary_minus_b  //  M5B interconnect
mt6res1 = metal6i AND RMDMY6 
mt6res_body_via_up = mt6res1 AND VIA6i 
mt6res1a = mt6res1 NOT INTERACT mt6res_body_via_up 
mt6res_body_via_down = mt6res1 AND VIA5i 
mt6res1b = mt6res1a NOT INTERACT mt6res_body_via_down  //  M6 net divider
M6_ALL2 = M6_Ai OR M6_Bi 
M6_ALL = M6_ALL2 OR M6i 
mt6res = mt6res1b INTERACT M6_ALL 
mt6res_a = mt6res1b INTERACT M6_Ai 
mt6res_b = mt6res1b INTERACT M6_Bi 
mt6res_noab = mt6res1b INTERACT M6i 

//***** Define connectivity/via layer -- M6 ****
M6Y = COPY metal6_noABi 
M6_Y2 = M6Y NOT mt6res 
mom6_ary_term1 = M6_Y2 INTERACT MOMDMY_ary_shield 
metal7_Ai = M7_Ai OR DUM7_Ai 
metal7_Bi = M7_Bi OR DUM7_Bi 
metal7i1 = metal7_Ai OR metal7_Bi 
metal7_noABi = M7i OR DUM7i 
metal7i = metal7i1 OR metal7_noABi 
MOM_field7 = metal7i AND MOMDMY7 
MOMDMY_tbs_stop_acc6_tmp0 = MOMDMY6 NOT INTERACT MOM_field7 
mom6_ary_term = mom6_ary_term1 INTERACT MOMDMY_tbs_stop_acc6_tmp0 
mom6_ary_plus = mom6_ary_term AND MOMDMY_PLUS 
M6_1 = M6_Y2 NOT mom6_ary_plus 
mom6_ary_minus = mom6_ary_term AND MOMDMY_MINUS 
M6 = M6_1 NOT mom6_ary_minus  //  M6 interconnect
M6_AY = COPY metal6_Ai 
M6_AY2 = M6_AY NOT mt6res 
mom6_ary_terma1 = M6_AY2 INTERACT MOMDMY_ary_shield 
mom6_ary_terma = mom6_ary_terma1 INTERACT MOMDMY_tbs_stop_acc6_tmp0 
mom6_ary_plus_a = mom6_ary_terma AND MOMDMY_PLUS 
M6_A = M6_AY2 NOT mom6_ary_plus_a  //  M6A interconnect
M6_BY = COPY metal6_Bi 
M6_BY2 = M6_BY NOT mt6res 
mom6_ary_termb1 = M6_BY2 INTERACT MOMDMY_ary_shield 
mom6_ary_termb = mom6_ary_termb1 INTERACT MOMDMY_tbs_stop_acc6_tmp0 
mom6_ary_minus_b = mom6_ary_termb AND MOMDMY_MINUS 
M6_B = M6_BY2 NOT mom6_ary_minus_b  //  M6B interconnect
mt7res1 = metal7i AND RMDMY7 
mt7res_body_via_up = mt7res1 AND VIA7i 
mt7res1a = mt7res1 NOT INTERACT mt7res_body_via_up 
mt7res_body_via_down = mt7res1 AND VIA6i 
mt7res1b = mt7res1a NOT INTERACT mt7res_body_via_down  //  M7 net divider
M7_ALL2 = M7_Ai OR M7_Bi 
M7_ALL = M7_ALL2 OR M7i 
mt7res = mt7res1b INTERACT M7_ALL 
mt7res_a = mt7res1b INTERACT M7_Ai 
mt7res_b = mt7res1b INTERACT M7_Bi 
mt7res_noab = mt7res1b INTERACT M7i 

//***** Define connectivity/via layer -- M7 ****
M7Y = COPY metal7_noABi 
M7_Y2 = M7Y NOT mt7res 
mom7_ary_term1 = M7_Y2 INTERACT MOMDMY_ary_shield 
metal8_Ai = M8_Ai OR DUM8_Ai 
metal8_Bi = M8_Bi OR DUM8_Bi 
metal8i1 = metal8_Ai OR metal8_Bi 
metal8_noABi = M8i OR DUM8i 
metal8i = metal8i1 OR metal8_noABi 
MOM_field8 = metal8i AND MOMDMY8 
MOMDMY_tbs_stop_acc7_tmp0 = MOMDMY7 NOT INTERACT MOM_field8 
mom7_ary_term = mom7_ary_term1 INTERACT MOMDMY_tbs_stop_acc7_tmp0 
mom7_ary_plus = mom7_ary_term AND MOMDMY_PLUS 
M7_1 = M7_Y2 NOT mom7_ary_plus 
mom7_ary_minus = mom7_ary_term AND MOMDMY_MINUS 
M7 = M7_1 NOT mom7_ary_minus  //  M7 interconnect
M7_AY = COPY metal7_Ai 
M7_AY2 = M7_AY NOT mt7res 
mom7_ary_terma1 = M7_AY2 INTERACT MOMDMY_ary_shield 
mom7_ary_terma = mom7_ary_terma1 INTERACT MOMDMY_tbs_stop_acc7_tmp0 
mom7_ary_plus_a = mom7_ary_terma AND MOMDMY_PLUS 
M7_A = M7_AY2 NOT mom7_ary_plus_a  //  M7A interconnect
M7_BY = COPY metal7_Bi 
M7_BY2 = M7_BY NOT mt7res 
mom7_ary_termb1 = M7_BY2 INTERACT MOMDMY_ary_shield 
mom7_ary_termb = mom7_ary_termb1 INTERACT MOMDMY_tbs_stop_acc7_tmp0 
mom7_ary_minus_b = mom7_ary_termb AND MOMDMY_MINUS 
M7_B = M7_BY2 NOT mom7_ary_minus_b  //  M7B interconnect
mt8res1 = metal8i AND RMDMY8 
mt8res_body_via_up = mt8res1 AND VIA8i 
mt8res1a = mt8res1 NOT INTERACT mt8res_body_via_up 
mt8res_body_via_down = mt8res1 AND VIA7i 
mt8res1b = mt8res1a NOT INTERACT mt8res_body_via_down  //  M8 net divider
M8_ALL2 = M8_Ai OR M8_Bi 
M8_ALL = M8_ALL2 OR M8i 
mt8res = mt8res1b INTERACT M8_ALL 
mt8res_a = mt8res1b INTERACT M8_Ai 
mt8res_b = mt8res1b INTERACT M8_Bi 
mt8res_noab = mt8res1b INTERACT M8i 

//***** Define connectivity/via layer -- M8 ****
M8Y = COPY metal8_noABi 
M8_Y2 = M8Y NOT mt8res 
mom8_ary_term1 = M8_Y2 INTERACT MOMDMY_ary_shield 
metal9_Ai = M9_Ai OR DUM9_Ai 
metal9_Bi = M9_Bi OR DUM9_Bi 
metal9i1 = metal9_Ai OR metal9_Bi 
metal9_noABi = M9i OR DUM9i 
metal9i = metal9i1 OR metal9_noABi 
MOM_field9 = metal9i AND MOMDMY9 
MOMDMY_tbs_stop_acc8_tmp0 = MOMDMY8 NOT INTERACT MOM_field9 
mom8_ary_term = mom8_ary_term1 INTERACT MOMDMY_tbs_stop_acc8_tmp0 
mom8_ary_plus = mom8_ary_term AND MOMDMY_PLUS 
M8_1 = M8_Y2 NOT mom8_ary_plus 
mom8_ary_minus = mom8_ary_term AND MOMDMY_MINUS 
M8 = M8_1 NOT mom8_ary_minus  //  M8 interconnect
M8_AY = COPY metal8_Ai 
M8_AY2 = M8_AY NOT mt8res 
mom8_ary_terma1 = M8_AY2 INTERACT MOMDMY_ary_shield 
mom8_ary_terma = mom8_ary_terma1 INTERACT MOMDMY_tbs_stop_acc8_tmp0 
mom8_ary_plus_a = mom8_ary_terma AND MOMDMY_PLUS 
M8_A = M8_AY2 NOT mom8_ary_plus_a  //  M8A interconnect
M8_BY = COPY metal8_Bi 
M8_BY2 = M8_BY NOT mt8res 
mom8_ary_termb1 = M8_BY2 INTERACT MOMDMY_ary_shield 
mom8_ary_termb = mom8_ary_termb1 INTERACT MOMDMY_tbs_stop_acc8_tmp0 
mom8_ary_minus_b = mom8_ary_termb AND MOMDMY_MINUS 
M8_B = M8_BY2 NOT mom8_ary_minus_b  //  M8B interconnect
mt9res1 = metal9i AND RMDMY9 
mt9res_body_via_up = mt9res1 AND VIA9i 
mt9res1a = mt9res1 NOT INTERACT mt9res_body_via_up 
mt9res_body_via_down = mt9res1 AND VIA8i 
mt9res1b = mt9res1a NOT INTERACT mt9res_body_via_down  //  M9 net divider
M9_ALL2 = M9_Ai OR M9_Bi 
M9_ALL = M9_ALL2 OR M9i 
mt9res = mt9res1b INTERACT M9_ALL 
mt9res_a = mt9res1b INTERACT M9_Ai 
mt9res_b = mt9res1b INTERACT M9_Bi 
mt9res_noab = mt9res1b INTERACT M9i 

//***** Define connectivity/via layer -- M9 ****
M9Y = COPY metal9_noABi 
M9_Y2 = M9Y NOT mt9res 
mom9_ary_term1 = M9_Y2 INTERACT MOMDMY_ary_shield 
metal10_Ai = M10_Ai OR DUM10_Ai 
metal10_Bi = M10_Bi OR DUM10_Bi 
metal10i1 = metal10_Ai OR metal10_Bi 
metal10_noABi = M10i OR DUM10i 
metal10i = metal10i1 OR metal10_noABi 
MOM_field10 = metal10i AND MOMDMY10 
MOMDMY_tbs_stop_acc9_tmp0 = MOMDMY9 NOT INTERACT MOM_field10 
mom9_ary_term = mom9_ary_term1 INTERACT MOMDMY_tbs_stop_acc9_tmp0 
mom9_ary_plus = mom9_ary_term AND MOMDMY_PLUS 
M9_1 = M9_Y2 NOT mom9_ary_plus 
mom9_ary_minus = mom9_ary_term AND MOMDMY_MINUS 
M9 = M9_1 NOT mom9_ary_minus  //  M9 interconnect
M9_AY = COPY metal9_Ai 
M9_AY2 = M9_AY NOT mt9res 
mom9_ary_terma1 = M9_AY2 INTERACT MOMDMY_ary_shield 
mom9_ary_terma = mom9_ary_terma1 INTERACT MOMDMY_tbs_stop_acc9_tmp0 
mom9_ary_plus_a = mom9_ary_terma AND MOMDMY_PLUS 
M9_A = M9_AY2 NOT mom9_ary_plus_a  //  M9A interconnect
M9_BY = COPY metal9_Bi 
M9_BY2 = M9_BY NOT mt9res 
mom9_ary_termb1 = M9_BY2 INTERACT MOMDMY_ary_shield 
mom9_ary_termb = mom9_ary_termb1 INTERACT MOMDMY_tbs_stop_acc9_tmp0 
mom9_ary_minus_b = mom9_ary_termb AND MOMDMY_MINUS 
M9_B = M9_BY2 NOT mom9_ary_minus_b  //  M9B interconnect
mt10res1 = metal10i AND RMDMY10 
mt10res_body_via_up = mt10res1 AND VIA10i 
mt10res1a = mt10res1 NOT INTERACT mt10res_body_via_up 
mt10res_body_via_down = mt10res1 AND VIA9i 
mt10res1b = mt10res1a NOT INTERACT mt10res_body_via_down  //  M10 net divider
M10_ALL2 = M10_Ai OR M10_Bi 
M10_ALL = M10_ALL2 OR M10i 
mt10res = mt10res1b INTERACT M10_ALL 
mt10res_a = mt10res1b INTERACT M10_Ai 
mt10res_b = mt10res1b INTERACT M10_Bi 
mt10res_noab = mt10res1b INTERACT M10i 

//***** Define connectivity/via layer -- M10 ****
M10Y = COPY metal10_noABi 
M10_Y2 = M10Y NOT mt10res 
mom10_ary_term1 = M10_Y2 INTERACT MOMDMY_ary_shield 
metal11_Ai = M11_Ai OR DUM11_Ai 
metal11_Bi = M11_Bi OR DUM11_Bi 
metal11i1 = metal11_Ai OR metal11_Bi 
metal11_noABi = M11i OR DUM11i 
metal11i = metal11i1 OR metal11_noABi 
MOM_field11 = metal11i AND MOMDMY11 
MOMDMY_tbs_stop_acc10_tmp0 = MOMDMY10 NOT INTERACT MOM_field11 
mom10_ary_term = mom10_ary_term1 INTERACT MOMDMY_tbs_stop_acc10_tmp0 
mom10_ary_plus = mom10_ary_term AND MOMDMY_PLUS 
M10_1 = M10_Y2 NOT mom10_ary_plus 
mom10_ary_minus = mom10_ary_term AND MOMDMY_MINUS 
M10 = M10_1 NOT mom10_ary_minus  //  M10 interconnect
M10_AY = COPY metal10_Ai 
M10_AY2 = M10_AY NOT mt10res 
mom10_ary_terma1 = M10_AY2 INTERACT MOMDMY_ary_shield 
mom10_ary_terma = mom10_ary_terma1 INTERACT MOMDMY_tbs_stop_acc10_tmp0 
mom10_ary_plus_a = mom10_ary_terma AND MOMDMY_PLUS 
M10_A = M10_AY2 NOT mom10_ary_plus_a  //  M10A interconnect
M10_BY = COPY metal10_Bi 
M10_BY2 = M10_BY NOT mt10res 
mom10_ary_termb1 = M10_BY2 INTERACT MOMDMY_ary_shield 
mom10_ary_termb = mom10_ary_termb1 INTERACT MOMDMY_tbs_stop_acc10_tmp0 
mom10_ary_minus_b = mom10_ary_termb AND MOMDMY_MINUS 
M10_B = M10_BY2 NOT mom10_ary_minus_b  //  M10B interconnect
mt11res1 = metal11i AND RMDMY11 
mt11res_body_via_up = mt11res1 AND VIA11i 
mt11res1a = mt11res1 NOT INTERACT mt11res_body_via_up 
mt11res_body_via_down = mt11res1 AND VIA10i 
mt11res1b = mt11res1a NOT INTERACT mt11res_body_via_down  //  M11 net divider
M11_ALL2 = M11_Ai OR M11_Bi 
M11_ALL = M11_ALL2 OR M11i 
mt11res = mt11res1b INTERACT M11_ALL 
mt11res_a = mt11res1b INTERACT M11_Ai 
mt11res_b = mt11res1b INTERACT M11_Bi 
mt11res_noab = mt11res1b INTERACT M11i 

//***** Define connectivity/via layer -- M11 ****
M11Y = COPY metal11_noABi 
M11_Y2 = M11Y NOT mt11res 
mom11_ary_term1 = M11_Y2 INTERACT MOMDMY_ary_shield 
metal12_Ai = M12_Ai OR DUM12_Ai 
metal12_Bi = M12_Bi OR DUM12_Bi 
metal12i1 = metal12_Ai OR metal12_Bi 
metal12_noABi = M12i OR DUM12i 
metal12i = metal12i1 OR metal12_noABi 
MOM_field12 = metal12i AND MOMDMY12 
MOMDMY_tbs_stop_acc11_tmp0 = MOMDMY11 NOT INTERACT MOM_field12 
mom11_ary_term = mom11_ary_term1 INTERACT MOMDMY_tbs_stop_acc11_tmp0 
mom11_ary_plus = mom11_ary_term AND MOMDMY_PLUS 
M11_1 = M11_Y2 NOT mom11_ary_plus 
mom11_ary_minus = mom11_ary_term AND MOMDMY_MINUS 
M11 = M11_1 NOT mom11_ary_minus  //  M11 interconnect
M11_AY = COPY metal11_Ai 
M11_AY2 = M11_AY NOT mt11res 
mom11_ary_terma1 = M11_AY2 INTERACT MOMDMY_ary_shield 
mom11_ary_terma = mom11_ary_terma1 INTERACT MOMDMY_tbs_stop_acc11_tmp0 
mom11_ary_plus_a = mom11_ary_terma AND MOMDMY_PLUS 
M11_A = M11_AY2 NOT mom11_ary_plus_a  //  M11A interconnect
M11_BY = COPY metal11_Bi 
M11_BY2 = M11_BY NOT mt11res 
mom11_ary_termb1 = M11_BY2 INTERACT MOMDMY_ary_shield 
mom11_ary_termb = mom11_ary_termb1 INTERACT MOMDMY_tbs_stop_acc11_tmp0 
mom11_ary_minus_b = mom11_ary_termb AND MOMDMY_MINUS 
M11_B = M11_BY2 NOT mom11_ary_minus_b  //  M11B interconnect
mt12res1 = metal12i AND RMDMY12 
mt12res_body_via_up = mt12res1 AND VIA12i 
mt12res1a = mt12res1 NOT INTERACT mt12res_body_via_up 
mt12res_body_via_down = mt12res1 AND VIA11i 
mt12res1b = mt12res1a NOT INTERACT mt12res_body_via_down  //  M12 net divider
M12_ALL2 = M12_Ai OR M12_Bi 
M12_ALL = M12_ALL2 OR M12i 
mt12res = mt12res1b INTERACT M12_ALL 
mt12res_a = mt12res1b INTERACT M12_Ai 
mt12res_b = mt12res1b INTERACT M12_Bi 
mt12res_noab = mt12res1b INTERACT M12i 

//***** Define connectivity/via layer -- M12 ****
M12Y = COPY metal12_noABi 
M12_Y2 = M12Y NOT mt12res 
mom12_ary_term1 = M12_Y2 INTERACT MOMDMY_ary_shield 
metal13_Ai = M13_Ai OR DUM13_Ai 
metal13_Bi = M13_Bi OR DUM13_Bi 
metal13i1 = metal13_Ai OR metal13_Bi 
metal13_noABi = M13i OR DUM13i 
metal13i = metal13i1 OR metal13_noABi 
MOM_field13 = metal13i AND MOMDMY13 
MOMDMY_tbs_stop_acc12_tmp0 = MOMDMY12 NOT INTERACT MOM_field13 
mom12_ary_term = mom12_ary_term1 INTERACT MOMDMY_tbs_stop_acc12_tmp0 
mom12_ary_plus = mom12_ary_term AND MOMDMY_PLUS 
M12_1 = M12_Y2 NOT mom12_ary_plus 
mom12_ary_minus = mom12_ary_term AND MOMDMY_MINUS 
M12 = M12_1 NOT mom12_ary_minus  //  M12 interconnect
M12_AY = COPY metal12_Ai 
M12_AY2 = M12_AY NOT mt12res 
mom12_ary_terma1 = M12_AY2 INTERACT MOMDMY_ary_shield 
mom12_ary_terma = mom12_ary_terma1 INTERACT MOMDMY_tbs_stop_acc12_tmp0 
mom12_ary_plus_a = mom12_ary_terma AND MOMDMY_PLUS 
M12_A = M12_AY2 NOT mom12_ary_plus_a  //  M12A interconnect
M12_BY = COPY metal12_Bi 
M12_BY2 = M12_BY NOT mt12res 
mom12_ary_termb1 = M12_BY2 INTERACT MOMDMY_ary_shield 
mom12_ary_termb = mom12_ary_termb1 INTERACT MOMDMY_tbs_stop_acc12_tmp0 
mom12_ary_minus_b = mom12_ary_termb AND MOMDMY_MINUS 
M12_B = M12_BY2 NOT mom12_ary_minus_b  //  M12B interconnect
mt13res1 = metal13i AND RMDMY13 
mt13res_body_via_up = mt13res1 AND VIA13i 
mt13res1a = mt13res1 NOT INTERACT mt13res_body_via_up 
mt13res_body_via_down = mt13res1 AND VIA12i 
mt13res1b = mt13res1a NOT INTERACT mt13res_body_via_down  //  M13 net divider
M13_ALL2 = M13_Ai OR M13_Bi 
M13_ALL = M13_ALL2 OR M13i 
mt13res = mt13res1b INTERACT M13_ALL 
mt13res_a = mt13res1b INTERACT M13_Ai 
mt13res_b = mt13res1b INTERACT M13_Bi 
mt13res_noab = mt13res1b INTERACT M13i 

//***** Define connectivity/via layer -- M13 ****
M13Y = COPY metal13_noABi 
M13 = M13Y NOT mt13res  //  M13 interconnect
M13_AY = COPY metal13_Ai 
M13_A = M13_AY NOT mt13res  //  M13A interconnect
M13_BY = COPY metal13_Bi 
M13_B = M13_BY NOT mt13res  //  M13B interconnect
metal14_Ai = M14_Ai OR DUM14_Ai 
metal14_Bi = M14_Bi OR DUM14_Bi 
metal14i1 = metal14_Ai OR metal14_Bi 
metal14_noABi = M14i OR DUM14i 
metal14i = metal14i1 OR metal14_noABi 
mt14res1 = metal14i AND RMDMY14 
mt14res_body_via_up = mt14res1 AND VIA14i 
mt14res1a = mt14res1 NOT INTERACT mt14res_body_via_up 
mt14res_body_via_down = mt14res1 AND VIA13i 
mt14res1b = mt14res1a NOT INTERACT mt14res_body_via_down  //  M14 net divider
M14_ALL2 = M14_Ai OR M14_Bi 
M14_ALL = M14_ALL2 OR M14i 
mt14res = mt14res1b INTERACT M14_ALL 
mt14res_a = mt14res1b INTERACT M14_Ai 
mt14res_b = mt14res1b INTERACT M14_Bi 
mt14res_noab = mt14res1b INTERACT M14i 

//***** Define connectivity/via layer -- M14 ****
M14Y = COPY metal14_noABi 
M14 = M14Y NOT mt14res  //  M14 interconnect
M14_AY = COPY metal14_Ai 
M14_A = M14_AY NOT mt14res  //  M14A interconnect
M14_BY = COPY metal14_Bi 
M14_B = M14_BY NOT mt14res  //  M14B interconnect
metal15_Ai = M15_Ai OR DUM15_Ai 
metal15_Bi = M15_Bi OR DUM15_Bi 
metal15i1 = metal15_Ai OR metal15_Bi 
metal15_noABi = M15i OR DUM15i 
metal15i = metal15i1 OR metal15_noABi 
mt15res1 = metal15i AND RMDMY15 
mt15res_body_via_up = mt15res1 AND VIA15i 
mt15res1a = mt15res1 NOT INTERACT mt15res_body_via_up 
mt15res_body_via_down = mt15res1 AND VIA14i 
mt15res1b = mt15res1a NOT INTERACT mt15res_body_via_down  //  M15 net divider
M15_ALL2 = M15_Ai OR M15_Bi 
M15_ALL = M15_ALL2 OR M15i 
mt15res = mt15res1b INTERACT M15_ALL 
mt15res_a = mt15res1b INTERACT M15_Ai 
mt15res_b = mt15res1b INTERACT M15_Bi 
mt15res_noab = mt15res1b INTERACT M15i 

//***** Define connectivity/via layer -- M15 ****
M15Y = COPY metal15_noABi 
M15 = M15Y NOT mt15res  //  M15 interconnect
M15_AY = COPY metal15_Ai 
M15_A = M15_AY NOT mt15res  //  M15A interconnect
M15_BY = COPY metal15_Bi 
M15_B = M15_BY NOT mt15res  //  M15B interconnect
metal16_Ai = M16_Ai OR DUM16_Ai 
metal16_Bi = M16_Bi OR DUM16_Bi 
metal16i1 = metal16_Ai OR metal16_Bi 
metal16_noABi = M16i OR DUM16i 
metal16i = metal16i1 OR metal16_noABi 
mt16res1 = metal16i AND RMDMY16 
mt16res_body_via_up = mt16res1 AND VIA16i 
mt16res1a = mt16res1 NOT INTERACT mt16res_body_via_up 
mt16res_body_via_down = mt16res1 AND VIA15i 
mt16res1b = mt16res1a NOT INTERACT mt16res_body_via_down  //  M16 net divider
M16_ALL2 = M16_Ai OR M16_Bi 
M16_ALL = M16_ALL2 OR M16i 
mt16res = mt16res1b INTERACT M16_ALL 
mt16res_a = mt16res1b INTERACT M16_Ai 
mt16res_b = mt16res1b INTERACT M16_Bi 
mt16res_noab = mt16res1b INTERACT M16i 

//***** Define connectivity/via layer -- M16 ****
M16Y = COPY metal16_noABi 
M16 = M16Y NOT mt16res  //  M16 interconnect
M16_AY = COPY metal16_Ai 
M16_A = M16_AY NOT mt16res  //  M16A interconnect
M16_BY = COPY metal16_Bi 
M16_B = M16_BY NOT mt16res  //  M16B interconnect
metal17_Ai = M17_Ai OR DUM17_Ai 
metal17_Bi = M17_Bi OR DUM17_Bi 
metal17i1 = metal17_Ai OR metal17_Bi 
metal17_noABi = M17i OR DUM17i 
metal17i = metal17i1 OR metal17_noABi 
mt17res1 = metal17i AND RMDMY17 
mt17res_body_via_up = mt17res1 AND VIA17i 
mt17res1a = mt17res1 NOT INTERACT mt17res_body_via_up 
mt17res_body_via_down = mt17res1 AND VIA16i 
mt17res1b = mt17res1a NOT INTERACT mt17res_body_via_down  //  M17 net divider
M17_ALL2 = M17_Ai OR M17_Bi 
M17_ALL = M17_ALL2 OR M17i 
mt17res = mt17res1b INTERACT M17_ALL 
mt17res_a = mt17res1b INTERACT M17_Ai 
mt17res_b = mt17res1b INTERACT M17_Bi 
mt17res_noab = mt17res1b INTERACT M17i 

//***** Define connectivity/via layer -- M17 ****
M17Y = COPY metal17_noABi 
M17 = M17Y NOT mt17res  //  M17 interconnect
M17_AY = COPY metal17_Ai 
M17_A = M17_AY NOT mt17res  //  M17A interconnect
M17_BY = COPY metal17_Bi 
M17_B = M17_BY NOT mt17res  //  M17B interconnect
metal18_Ai = M18_Ai OR DUM18_Ai 
metal18_Bi = M18_Bi OR DUM18_Bi 
metal18i1 = metal18_Ai OR metal18_Bi 
metal18_noABi = M18i OR DUM18i 
metal18i = metal18i1 OR metal18_noABi 
mt18res1 = metal18i AND RMDMY18 
Cu_RV_all = Cu_RVi OR CB 
mt18res_body_via_up = mt18res1 AND Cu_RV_all 
mt18res1a = mt18res1 NOT INTERACT mt18res_body_via_up 
mt18res_body_via_down = mt18res1 AND VIA17i 
mt18res1b = mt18res1a NOT INTERACT mt18res_body_via_down  //  M18 net divider
M18_ALL2 = M18_Ai OR M18_Bi 
M18_ALL = M18_ALL2 OR M18i 
mt18res = mt18res1b INTERACT M18_ALL 
mt18res_a = mt18res1b INTERACT M18_Ai 
mt18res_b = mt18res1b INTERACT M18_Bi 
mt18res_noab = mt18res1b INTERACT M18i 

//***** Define connectivity/via layer -- M18 ****
M18Y = COPY metal18_noABi 
M18 = M18Y NOT mt18res  //  M18 interconnect
M18_AY = COPY metal18_Ai 
M18_A = M18_AY NOT mt18res  //  M18A interconnect
M18_BY = COPY metal18_Bi 
M18_B = M18_BY NOT mt18res  //  M18B interconnect
Cu_RDLY = Cu_RDLi OR DCu_RDL 
mtCuresa = Cu_RDLY AND RMDMYCu 
mtCuresb = Cu_RDLY NOT RMDMYCu 
mtCuresc = mtCuresa INTERACT mtCuresb == 2
mtCures_body_via_down = mtCuresa AND Cu_RV_all 
mtCures = mtCuresc NOT INTERACT mtCures_body_via_down  //  Cu net divider

//***** Define connectivity/via layer -- Cu_RDL ****
Cu_RDL = Cu_RDLY NOT mtCures  //  Cu interconnect

//* Define device -- xdev rhim

//* Define layer -- rhim_r3a
rhim_r3a_tmp01 = RH_TNi AND RHDMY_ALL
rhim_r3a = rhim_r3a_tmp01 AND RHDMY3i

rhim_r3_body_and_via_up = rhim_r3a AND VIA2i 
rhim_r3 = rhim_r3a NOT INTERACT rhim_r3_body_and_via_up 
RH_TN_all = RH_TNi OR SR_DTN 
RH_TN_3 = RH_TN_all NOT rhim_r3 

//* Define device -- xdev nmoscap
var_exclude_layer = PODE_GATE OR SR_DOD 

//* Define layer -- vargt
vargt_tmp01 = vargt2 AND ODI
vargt_tmp02 = vargt_tmp01 AND NW
vargt_tmp03 = vargt_tmp02 NOT NT_N
vargt_tmp04 = vargt_tmp03 NOT OD12
vargt_tmp05 = vargt_tmp04 AND POI
vargt_tmp06 = vargt_tmp05 NOT VTEL_Ni
vargt_tmp07 = vargt_tmp06 NOT VTEL_Pi
vargt_tmp08 = vargt_tmp07 NOT VTUL_Ni
vargt_tmp09 = vargt_tmp08 NOT VTUL_Pi
vargt_tmp10 = vargt_tmp09 NOT VTL_N
vargt_tmp11 = vargt_tmp10 NOT VTL_P
vargt_tmp12 = vargt_tmp11 NOT VTS_N
vargt_tmp13 = vargt_tmp12 NOT VTS_P
vargt_tmp14 = vargt_tmp13 NOT VTUL_NLLi
vargt_tmp15 = vargt_tmp14 NOT VTUL_PLLi
vargt_tmp16 = vargt_tmp15 NOT VTL_NLLi
vargt_tmp17 = vargt_tmp16 NOT VTL_PLLi
vargt_tmp18 = vargt_tmp17 AND NPi
vargt_tmp19 = vargt_tmp18 NOT PPi
vargt_tmp20 = vargt_tmp19 NOT PO_P81_WPO
vargt_tmp21 = vargt_tmp20 AND VAR
vargt_tmp22 = vargt_tmp21 NOT IBJTDMY
vargt_tmp23 = vargt_tmp22 NOT DIODMYi
vargt_tmp24 = vargt_tmp23 NOT SR_ESD
vargt_tmp25 = vargt_tmp24 NOT SDI
vargt_tmp26 = vargt_tmp25 NOT HIA_DUMMY
vargt = vargt_tmp26 NOT SDI_2


//***** Define connectivity/via layer -- n_fpoly_ulvt ****
sram_n = SRM_all AND NP 
sram_p = SRM_all AND PP 
sram_np = sram_n OR sram_p 
poly_out_srm = poly_org NOT sram_np 
VAR_and_NP_core_a = VARi AND NP 
VAR_and_NP_core = VAR_and_NP_core_a NOT OD12 
VTULN = VTUL_N OR VAR_and_NP_core 
npoly_ul = poly_out_srm AND VTULN 
npoly_co_ul = npoly_ul NOT PODE_3T 
n_fpoly_ulvt = npoly_co_ul NOT ODx 

//* Define device -- xdev nmoscap_12

//* Define layer -- vargt_12
vargt_12_tmp01 = vargt2 AND ODI
vargt_12_tmp02 = vargt_12_tmp01 AND NW
vargt_12_tmp03 = vargt_12_tmp02 NOT NT_N
vargt_12_tmp04 = vargt_12_tmp03 AND OD12
vargt_12_tmp05 = vargt_12_tmp04 AND POI
vargt_12_tmp06 = vargt_12_tmp05 NOT VTEL_Ni
vargt_12_tmp07 = vargt_12_tmp06 NOT VTEL_Pi
vargt_12_tmp08 = vargt_12_tmp07 NOT VTUL_Ni
vargt_12_tmp09 = vargt_12_tmp08 NOT VTUL_Pi
vargt_12_tmp10 = vargt_12_tmp09 NOT VTL_N
vargt_12_tmp11 = vargt_12_tmp10 NOT VTL_P
vargt_12_tmp12 = vargt_12_tmp11 NOT VTS_N
vargt_12_tmp13 = vargt_12_tmp12 NOT VTS_P
vargt_12_tmp14 = vargt_12_tmp13 NOT VTUL_NLLi
vargt_12_tmp15 = vargt_12_tmp14 NOT VTUL_PLLi
vargt_12_tmp16 = vargt_12_tmp15 NOT VTL_NLLi
vargt_12_tmp17 = vargt_12_tmp16 NOT VTL_PLLi
vargt_12_tmp18 = vargt_12_tmp17 AND NPi
vargt_12_tmp19 = vargt_12_tmp18 NOT PPi
vargt_12_tmp20 = vargt_12_tmp19 NOT PO_P81_WPO
vargt_12_tmp21 = vargt_12_tmp20 AND VAR
vargt_12_tmp22 = vargt_12_tmp21 NOT IBJTDMY
vargt_12_tmp23 = vargt_12_tmp22 NOT DIODMYi
vargt_12_tmp24 = vargt_12_tmp23 NOT SR_ESD
vargt_12_tmp25 = vargt_12_tmp24 NOT SDI
vargt_12_tmp26 = vargt_12_tmp25 NOT HIA_DUMMY
vargt_12 = vargt_12_tmp26 NOT SDI_2


//***** Define connectivity/via layer -- n_fpoly_io ****
poly_io1 = poly_out_srm AND OD12 
poly_io = COPY poly_io1 
npoly_ioa = poly_io AND NP 
npoly_io = npoly_ioa NOT PODE_3T 
n_fpoly_io = npoly_io NOT ODx 

//* Define device -- xdev moscap_rf
VAR = VARi NOT SR_DOD 
VAR_RF1 = VAR AND RFDMYi 
gate_rf = gate_a AND RFDMYi 
VAR_RF = VAR_RF1 INTERACT gate_rf 
var_nw_rf1a = VAR_RF AND nxwell 
diff_invalid = diffa2 NOT diffa 
var_nw_rf0a = diff_invalid AND VAR_RF 
var_nw_rf0b = SIZE var_nw_rf0a BY 0.005 
var_nw_rf0c = SIZE Small_Poly2 BY 0.005 
var_nw_rf0 = var_nw_rf0b OR var_nw_rf0c 
var_nw_rf1 = var_nw_rf1a NOT var_nw_rf0 
var_nw_rfa = var_nw_rf1 NOT OD12 
var_nw_rfb = var_nw_rfa INTERACT VTUL_P 
var_nw_rf = var_nw_rfb AND DNW  //  core RF nmoscap w/i DNW

//***** Define connectivity/via layer -- n_gpoly_ulvt ****
n_gpoly_ulvt_all = npoly_co_ul AND ODx 
n_gpoly_ulvt = n_gpoly_ulvt_all NOT all_mos_gates 

//* Define device -- xdev moscap_rf12_nw
vargt_rfa = gate_rf AND VAR_RF 
vargt_rf = vargt_rfa AND NP 

//* Define device -- xdev moscap_rf12
var_nw_rf12a = var_nw_rf1 AND OD12 
var_nw_rf12 = var_nw_rf12a AND DNW  //  1.2V RF nmoscap w/i DNW

//***** Define connectivity/via layer -- n_gpoly_io ****
n_gpoly_io_all = npoly_io AND ODx 
n_gpoly_io1 = n_gpoly_io_all NOT all_mos_gates 
DIODMY = DIODMYi NOT SR_DOD 
nocg_dmy_io = HIA_DUMMY OR DIODMY 
n_gpoly_io = n_gpoly_io1 NOT nocg_dmy_io 

//* Define device -- xdev moscap_rf_nw
var_nw_rf_nw = var_nw_rfb NOT DNW  //  core RF nmoscap w/o DNW
var_nw_rf12_nw = var_nw_rf12a NOT DNW  //  1.2V RF nmoscap w/o DNW

//* Define device -- xdev mimcap_sin_shd_3t
shdmim_reg1 = TPCDMY_Cu AND BPCi 
shdmim_reg2 = shdmim_reg1 NOT TPCDMY_AP 
shdmim_reg3 = shdmim_reg2 INTERACT MPCi 
shdmim_reg4 = shdmim_reg3 INTERACT TPCi 
shdmim_reg5 = shdmim_reg4 INTERACT BPC_O 
shdmim_reg6 = shdmim_reg5 INTERACT MPC_O 
shdmim_reg = shdmim_reg6 INTERACT TPC_O 
TPC_FINAL = TPCi NOT TPC_O 
MPC_FINAL = MPCi NOT MPC_O 
SHDMIM_TOP = TPC_FINAL AND MPC_FINAL 
BPC_FINAL = BPCi NOT BPC_O 
SHDMIM_BOT = MPC_FINAL AND BPC_FINAL 

//* Define device -- xdev mimcap_shp1_4tlv
shpmim1_reg1 = PMIM_1 NOT INTERACT PMIM_2 
shpmim1_reg2 = shpmim1_reg1 NOT INTERACT PMIM_2_1 
shpmim1_reg3 = shpmim1_reg2 INTERACT BPC_LVi 
shpmim1_reg4 = shpmim1_reg3 INTERACT BPC_LV_O 
shpmim1_reg5 = shpmim1_reg4 INTERACT BPC_GNDi 
shpmim1_reg6 = shpmim1_reg5 INTERACT BPC_GND_O 
shpmim1_reg7 = shpmim1_reg6 INTERACT MPC_LVi 
shpmim1_reg8 = shpmim1_reg7 INTERACT MPC_LV_O 
shpmim1_reg9 = shpmim1_reg8 INTERACT TPC_GNDi 
shpmim1_reg10 = shpmim1_reg9 INTERACT TPC_GND_O 
shpmim1_reg11 = shpmim1_reg10 NOT INTERACT BPC_HV1i 
shpmim1_reg12 = shpmim1_reg11 NOT INTERACT BPC_HV1_O 
shpmim1_reg13 = shpmim1_reg12 NOT INTERACT BPC_HV2i 
shpmim1_reg_4tlv = shpmim1_reg13 NOT INTERACT BPC_HV2_O 

//* Define device -- xdev mimcap_shp2_5thv
TPC_GND = TPC_GNDi NOT TPC_GND_O 
MPC_LV = MPC_LVi NOT MPC_LV_O 
SHPMIM_MT_LV = TPC_GND AND MPC_LV 
BPC_GND = BPC_GNDi NOT BPC_GND_O 
SHPMIM_MB_LV = MPC_LV AND BPC_GND 
BPC_LV = BPC_LVi NOT BPC_LV_O 
SHPMIM_BB_LV = BPC_GND AND BPC_LV 

//* Define device -- xdev mimcap_shp1_5thv
shpmim1_reg_5thv1 = shpmim1_reg10 INTERACT BPC_HV1i 
shpmim1_reg_5thv2 = shpmim1_reg_5thv1 NOT INTERACT BPC_HV2i 
shpmim1_reg_5thv = shpmim1_reg_5thv2 NOT INTERACT BPC_HV2_O 
BPC_HV1 = BPC_HV1i NOT BPC_HV1_O 
SHPMIM_MBB_HV1 = MPC_LV AND BPC_HV1 

//* Define device -- xdev mimcap_shp2_4thv
shpmim21_reg1 = PMIM_2_1 NOT INTERACT PMIM_1 
shpmim21_reg2 = shpmim21_reg1 NOT INTERACT PMIM_2 
shpmim21_reg3 = shpmim21_reg2 INTERACT BPC_GNDi 
shpmim21_reg4 = shpmim21_reg3 INTERACT BPC_GND_O 
shpmim21_reg5 = shpmim21_reg4 INTERACT MPC_LVi 
shpmim21_reg6 = shpmim21_reg5 INTERACT MPC_LV_O 
shpmim21_reg7 = shpmim21_reg6 INTERACT TPC_GNDi 
shpmim21_reg8 = shpmim21_reg7 INTERACT TPC_GND_O 
shpmim21_reg9 = shpmim21_reg8 INTERACT BPC_HV2i 
shpmim21_reg10 = shpmim21_reg9 INTERACT BPC_HV2_O 
shpmim21_reg11 = shpmim21_reg10 NOT INTERACT BPC_LVi 
shpmim21_reg12 = shpmim21_reg11 NOT INTERACT BPC_LV_O 
shpmim21_reg13 = shpmim21_reg12 NOT INTERACT BPC_HV1i 
shpmim21_reg_4thv = shpmim21_reg13 NOT INTERACT BPC_HV1_O 
BPC_HV2 = BPC_HV2i NOT BPC_HV2_O 
SHPMIM_BB_HV2 = BPC_GND AND BPC_HV2 

//* Define device -- xdev mimcap_shp2_4tlv
shpmim2_reg11 = shpmim2_reg10 NOT INTERACT BPC_HV1i 
shpmim2_reg12 = shpmim2_reg11 NOT INTERACT BPC_HV1_O 
shpmim2_reg13 = shpmim2_reg12 NOT INTERACT BPC_HV2i 
shpmim2_reg_4tlv = shpmim2_reg13 NOT INTERACT BPC_HV2_O 

//***** Define connectivity/via layer -- mom0m2_b ****
mom0m21_b = M0_B AND MOMDMY_MXP2 
mom0m2_b1 = mom0m21_b NOT MOMDMY_MXP12 
VIA0 = COPY VIA0i 
mom0m2_b = mom0m2_b1 INTERACT VIA0 

//***** Define connectivity/via layer -- mom2m2_a ****
mom2m21_a = M2_A AND MOMDMY_MXP2 
mom2m2_a1 = mom2m21_a NOT MOMDMY_MXP12 
RH_TN_3a = RH_TN_all INTERACT RHDMY3i 
VTIN_2 = VIA2i AND RH_TN_3a 
VIA2 = VIA2i NOT VTIN_2 
mom2m2_a = mom2m2_a1 INTERACT VIA2 

//***** Define connectivity/via layer -- mom10p2 ****
mom10p21 = M10 AND MOMDMY_MXP2 
mom10p2 = mom10p21 AND MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom5p2_a ****
mom5p21_a = M5_A AND MOMDMY_MXP2 
mom5p2_a1 = mom5p21_a AND MOMDMY_MXP12 
RH_TN_6a = RH_TN_all INTERACT RHDMY6i 
VTIN_5 = VIA5i AND RH_TN_6a 
VIA5 = VIA5i NOT VTIN_5 
mom5p2_a = mom5p2_a1 INTERACT VIA5 

//***** Define connectivity/via layer -- p_fpoly_svt ****
VTSP = COPY VTS_P 
ppoly_s = poly_out_srm AND VTSP 
ppoly_co_s = ppoly_s NOT PODE_3T 
p_fpoly_svt = ppoly_co_s NOT ODx 

//***** Define connectivity/via layer -- mom1m1_b ****
mom1m11_b = M1_B AND MOMDMY_MXP1 
mom1m1_b1 = mom1m11_b NOT MOMDMY_MXP12 
VIA1 = COPY VIA1i 
mom1m1_b = mom1m1_b1 INTERACT VIA1 

//* Define ERC or other layers
VD2_MD_TAP = VD2 AND MDx 

//* Define layer -- VD2_MD_TAP_FB8P45_o
VD2_MD_TAP_FB8P45_o_tmp01 = VD2_MD_TAP AND FB8
VD2_MD_TAP_FB8P45_o = VD2_MD_TAP_FB8P45_o_tmp01 NOT PO_P51

VD2_MD_TAP_FB18_1 = VD2_MD_TAP NOT INTERACT VD2_MD_TAP_FB8P45_o 

//* Define layer -- VD2_MD_TAP_FB6P45_o
VD2_MD_TAP_FB6P45_o_tmp01 = VD2_MD_TAP AND FB6
VD2_MD_TAP_FB6P45_o = VD2_MD_TAP_FB6P45_o_tmp01 NOT PO_P51

VD2_MD_TAP_FB18_2 = VD2_MD_TAP_FB18_1 NOT INTERACT VD2_MD_TAP_FB6P45_o 

//* Define layer -- VD2_MD_TAP_FB11_o
VD2_MD_TAP_FB11_o_tmp01 = VD2_MD_TAP AND FB11
VD2_MD_TAP_FB11_o = VD2_MD_TAP_FB11_o_tmp01 NOT PO_P51

VD2_MD_TAP_FB18_3 = VD2_MD_TAP_FB18_2 NOT INTERACT VD2_MD_TAP_FB11_o 

//* Define layer -- VD2_MD_TAP_FB16_o
VD2_MD_TAP_FB16_o_tmp01 = VD2_MD_TAP AND FB16
VD2_MD_TAP_FB16_o = VD2_MD_TAP_FB16_o_tmp01 NOT PO_P51

VD2_MD_TAP_FB18_4 = VD2_MD_TAP_FB18_3 NOT INTERACT VD2_MD_TAP_FB16_o 

//* Define layer -- VD2_MD_TAP_FB18_o
VD2_MD_TAP_FB18_o_tmp01 = VD2_MD_TAP AND FB18
VD2_MD_TAP_FB18_o = VD2_MD_TAP_FB18_o_tmp01 NOT PO_P51

VD2_MD_TAP_FB18 = VD2_MD_TAP_FB18_4 INTERACT VD2_MD_TAP_FB18_o 

//***** Define connectivity/via layer -- p_fpoly_elvt ****
VTELP = COPY VTEL_P 
ppoly_el = poly_out_srm AND VTELP 
ppoly_co_el = ppoly_el NOT PODE_3T 
p_fpoly_elvt = ppoly_co_el NOT ODx 

//***** Define connectivity/via layer -- RV_TPC_RDL ****
RV_TPC_RDL1 = Cu_RVi AND Cu_RDL 
TPC_GND_all = TPC_GND OR TPC_GND_DMY 
RV_TPC_RDL_shp = RV_TPC_RDL1 AND TPC_GND_all 
RV_TPC_RDL_shd = RV_TPC_RDL1 AND TPC_FINAL 
RV_TPC_RDL = RV_TPC_RDL_shp OR RV_TPC_RDL_shd 
MD_ODa = MDx AND ODx  //  MD on active
M0_OD = COPY MD_ODa 
DIODMYi_core = DIODMYi NOT OD12 
DIODMYi_pcore = DIODMYi_core AND PP 
VTLP = VTL_P OR DIODMYi_pcore 
ppoly_l = poly_out_srm AND VTLP 
ppoly_co_l = ppoly_l NOT PODE_3T 
p_gpoly_lvt_all = ppoly_co_l AND ODx 
p_gpoly_lvt1 = p_gpoly_lvt_all NOT all_mos_gates 
nocg_dmy = COPY DIODMY 
p_gpoly_nocg_lvt = p_gpoly_lvt1 AND nocg_dmy 

//* Define layer -- mkr_cfi_pcore_others
mkr_cfi_pcore_others_tmp01 = core_pgpoly_region NOT FB8
mkr_cfi_pcore_others_tmp02 = mkr_cfi_pcore_others_tmp01 NOT FB9
mkr_cfi_pcore_others = mkr_cfi_pcore_others_tmp02 NOT PO_P51


//***** Define connectivity/via layer -- VIA14 ****
RH_TN_15a = RH_TN_all INTERACT RHDMY15i 
VTIN_14 = VIA14i AND RH_TN_15a 
VIA14 = VIA14i NOT VTIN_14 

//***** Define connectivity/via layer -- mom5m2_b ****
mom5m21_b = M5_B AND MOMDMY_MXP2 
mom5m2_b1 = mom5m21_b NOT MOMDMY_MXP12 
mom5m2_b = mom5m2_b1 INTERACT VIA5 

//***** Define connectivity/via layer -- mom6minus ****
mom6minus = M6 AND MOMDMY_MINUS 
odtap = MD_ODa AND ODx 
p_odtap1 = odtap AND tpdiff_ori 
p_odtap2 = p_odtap1 NOT SRM_all 
p_odtap = p_odtap2 NOT tpdiff_bjt 
p_odtap_ext_all1 = SIZE p_odtap BY 0.01 
p_odtap_ext_all = p_odtap_ext_all1 AND MDx 

//* Define layer -- p_odtap_fb9b_ext_o
p_odtap_fb9b_ext_o_tmp01 = p_odtap_ext_all AND FB9
p_odtap_fb9b_ext_o = p_odtap_fb9b_ext_o_tmp01 AND FB_B

p_odtap_fb8c_cpp45_ext_1 = p_odtap_ext_all NOT INTERACT p_odtap_fb9b_ext_o 

//* Define layer -- p_odtap_fb8b_cpp45_ext_o
p_odtap_fb8b_cpp45_ext_o_tmp01 = p_odtap_ext_all AND FB8
p_odtap_fb8b_cpp45_ext_o_tmp02 = p_odtap_fb8b_cpp45_ext_o_tmp01 AND FB_B
p_odtap_fb8b_cpp45_ext_o = p_odtap_fb8b_cpp45_ext_o_tmp02 NOT PO_P51

p_odtap_fb8c_cpp45_ext_2 = p_odtap_fb8c_cpp45_ext_1 NOT INTERACT p_odtap_fb8b_cpp45_ext_o 

//* Define layer -- p_odtap_fb8c_cpp45_ext_o
p_odtap_fb8c_cpp45_ext_o_tmp01 = p_odtap_ext_all AND FB8
p_odtap_fb8c_cpp45_ext_o_tmp02 = p_odtap_fb8c_cpp45_ext_o_tmp01 AND FB_C
p_odtap_fb8c_cpp45_ext_o = p_odtap_fb8c_cpp45_ext_o_tmp02 NOT PO_P51

p_odtap_fb8c_cpp45_ext = p_odtap_fb8c_cpp45_ext_2 INTERACT p_odtap_fb8c_cpp45_ext_o 

//***** Define connectivity/via layer -- mom8p2 ****
mom8p21 = M8 AND MOMDMY_MXP2 
mom8p2 = mom8p21 AND MOMDMY_MXP12 
VD = COPY VDi 

//* Define layer -- VD_SRM_o
VD_SRM_o = VD AND SRM

VD_SRM = VD INTERACT VD_SRM_o 
n_odtap1 = odtap NOT tpdiff_ori 
n_odtap2 = n_odtap1 NOT SRM_all 
tndiff_bjt = tndiff_ori INTERACT BJTDMY 
n_odtap = n_odtap2 NOT tndiff_bjt 
n_odtap_ext_all1 = SIZE n_odtap BY 0.01 
n_odtap_ext_all = n_odtap_ext_all1 AND MDx 

//* Define layer -- n_odtap_fb9b_ext_o
n_odtap_fb9b_ext_o_tmp01 = n_odtap_ext_all AND FB9
n_odtap_fb9b_ext_o = n_odtap_fb9b_ext_o_tmp01 AND FB_B

n_odtap_fb8c_cpp45_ext_1 = n_odtap_ext_all NOT INTERACT n_odtap_fb9b_ext_o 

//* Define layer -- n_odtap_fb8b_cpp45_ext_o
n_odtap_fb8b_cpp45_ext_o_tmp01 = n_odtap_ext_all AND FB8
n_odtap_fb8b_cpp45_ext_o_tmp02 = n_odtap_fb8b_cpp45_ext_o_tmp01 AND FB_B
n_odtap_fb8b_cpp45_ext_o = n_odtap_fb8b_cpp45_ext_o_tmp02 NOT PO_P51

n_odtap_fb8c_cpp45_ext_2 = n_odtap_fb8c_cpp45_ext_1 NOT INTERACT n_odtap_fb8b_cpp45_ext_o 

//* Define layer -- n_odtap_fb8c_cpp45_ext_o
n_odtap_fb8c_cpp45_ext_o_tmp01 = n_odtap_ext_all AND FB8
n_odtap_fb8c_cpp45_ext_o_tmp02 = n_odtap_fb8c_cpp45_ext_o_tmp01 AND FB_C
n_odtap_fb8c_cpp45_ext_o = n_odtap_fb8c_cpp45_ext_o_tmp02 NOT PO_P51

n_odtap_fb8c_cpp45_ext = n_odtap_fb8c_cpp45_ext_2 INTERACT n_odtap_fb8c_cpp45_ext_o 
n_cpode = CPODE AND NP 

//***** Define connectivity/via layer -- VIA7 ****
RH_TN_8a = RH_TN_all INTERACT RHDMY8i 
VTIN_7 = VIA7i AND RH_TN_8a 
VIA7 = VIA7i NOT VTIN_7 

//***** Define connectivity/via layer -- MD_STI ****
MD_STIa = MDx NOT MD_ODa 
MD_STIb = COPY MD_STIa 
MD_STI = MD_STIb NOT SRM_all 
emit_p_reg = emit_reg INTERACT NW 
n_odtap_fb8b_cpp45_ext_1 = n_odtap_ext_all NOT INTERACT n_odtap_fb9b_ext_o 
n_odtap_fb8b_cpp45_ext = n_odtap_fb8b_cpp45_ext_1 INTERACT n_odtap_fb8b_cpp45_ext_o 

//***** Define connectivity/via layer -- mom3p1 ****
mom3p11 = M3 AND MOMDMY_MXP1 
mom3p1 = mom3p11 AND MOMDMY_MXP12 

//* Define layer -- M0_A_SRM01
M0_A_SRM01_tmp01 = SRM AND SRM11
M0_A_SRM01 = M0_A_SRM01_tmp01 AND M0_A


//***** Define connectivity/via layer -- mom12minus ****
mom12minus = M12 AND MOMDMY_MINUS 

//***** Define connectivity/via layer -- mom1p2_a ****
mom1p21_a = M1_A AND MOMDMY_MXP2 
mom1p2_a1 = mom1p21_a AND MOMDMY_MXP12 
mom1p2_a = mom1p2_a1 INTERACT VIA1 

//***** Define connectivity/via layer -- mom1m1_a ****
mom1m11_a = M1_A AND MOMDMY_MXP1 
mom1m1_a1 = mom1m11_a NOT MOMDMY_MXP12 
mom1m1_a = mom1m1_a1 INTERACT VIA1 

//***** Define connectivity/via layer -- BPC_LV_1 ****
shp1 = shpmim1_reg_4tlv OR shpmim1_reg_5thv 
BPC_LV_1_a = BPC_LV INTERACT shp1 
BPC_LV_1_b = BPC_LV NOT INTERACT shp1 
BPC_LV_1 = BPC_LV_1_a OR BPC_LV_1_b 

//***** Define connectivity/via layer -- n_gpoly_nocg_lvt ****
DIODMYi_ncore = DIODMYi_core AND NP 
VTLN = VTL_N OR DIODMYi_ncore 
npoly_l = poly_out_srm AND VTLN 
npoly_co_l = npoly_l NOT PODE_3T 
n_gpoly_lvt_all = npoly_co_l AND ODx 
n_gpoly_lvt1 = n_gpoly_lvt_all NOT all_mos_gates 
n_gpoly_nocg_lvt = n_gpoly_lvt1 AND nocg_dmy 

//***** Define connectivity/via layer -- n_fpoly_srm ****
npoly_co_srm = poly_org AND sram_n 
n_fpoly_srm = npoly_co_srm NOT ODx 

//***** Define connectivity/via layer -- p_gpoly_srm ****
ppoly_co_srm = poly_org AND sram_p 
p_gpoly_srm_all = ppoly_co_srm AND ODx 
p_gpoly_srm = p_gpoly_srm_all NOT all_mos_gates 

//***** Define connectivity/via layer -- mom7minus ****
mom7minus = M7 AND MOMDMY_MINUS 

//***** Define connectivity/via layer -- mom8m1 ****
mom8p11 = M8 AND MOMDMY_MXP1 
mom8p1 = mom8p11 AND MOMDMY_MXP12 
mom8m1 = mom8p11 NOT INTERACT mom8p1 

//***** Define connectivity/via layer -- MD_OD_N ****
MD_OD_P1 = MD_ODa AND tpdiff_ori 
MD_OD_N1 = MD_ODa NOT MD_OD_P1 
MD_OD_N = MD_OD_N1 NOT SRM_all 

//***** Define connectivity/via layer -- BPC_GND_DMY_1 ****
BPC_GND_DMY_1_a = BPC_GND_DMY INTERACT shp1 
BPC_GND_DMY_1_b = BPC_GND_DMY NOT INTERACT shp1 
BPC_GND_DMY_1 = BPC_GND_DMY_1_a OR BPC_GND_DMY_1_b 
p_odtap_fb8b_cpp45_ext_1 = p_odtap_ext_all NOT INTERACT p_odtap_fb9b_ext_o 
p_odtap_fb8b_cpp45_ext = p_odtap_fb8b_cpp45_ext_1 INTERACT p_odtap_fb8b_cpp45_ext_o 

//***** Define connectivity/via layer -- mom5m1_b ****
mom5m11_b = M5_B AND MOMDMY_MXP1 
mom5m1_b1 = mom5m11_b NOT MOMDMY_MXP12 
mom5m1_b = mom5m1_b1 INTERACT VIA5 

//***** Define connectivity/via layer -- TPC_GND_1 ****
TPC_GND_1_a = TPC_GND INTERACT shp1 
TPC_GND_1_b = TPC_GND NOT INTERACT shp1 
TPC_GND_1 = TPC_GND_1_a OR TPC_GND_1_b 

//***** Define connectivity/via layer -- mom9p2 ****
mom9p21 = M9 AND MOMDMY_MXP2 
mom9p2 = mom9p21 AND MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom0p2_a ****
mom0p21_a = M0_A AND MOMDMY_MXP2 
mom0p2_a1 = mom0p21_a AND MOMDMY_MXP12 
mom0p2_a = mom0p2_a1 INTERACT VIA0 
OD_ose_y = COPY ODv 

//***** Define connectivity/via layer -- p_fpoly_srm ****
p_fpoly_srm = ppoly_co_srm NOT ODx 
POz = COPY PO3 
VD2_MD_TAP_FB11_1 = VD2_MD_TAP NOT INTERACT VD2_MD_TAP_FB8P45_o 
VD2_MD_TAP_FB11_2 = VD2_MD_TAP_FB11_1 NOT INTERACT VD2_MD_TAP_FB6P45_o 
VD2_MD_TAP_FB11 = VD2_MD_TAP_FB11_2 INTERACT VD2_MD_TAP_FB11_o 

//***** Define connectivity/via layer -- p_gpoly_io ****
ppoly_ioa = poly_io AND PP 
ppoly_io = ppoly_ioa NOT PODE_3T 
p_gpoly_io_all = ppoly_io AND ODx 
p_gpoly_io1 = p_gpoly_io_all NOT all_mos_gates 
p_gpoly_io = p_gpoly_io1 NOT nocg_dmy_io 

//***** Define connectivity/via layer -- mom0m2_a ****
mom0m21_a = M0_A AND MOMDMY_MXP2 
mom0m2_a1 = mom0m21_a NOT MOMDMY_MXP12 
mom0m2_a = mom0m2_a1 INTERACT VIA0 

//***** Define connectivity/via layer -- mom5plus_a ****
mom5plus_a = M5_A AND MOMDMY_PLUS 
ALL_OD = ODI OR SR_DOD 

//***** Define connectivity/via layer -- VIA8 ****
RH_TN_9a = RH_TN_all INTERACT RHDMY9i 
VTIN_8 = VIA8i AND RH_TN_9a 
VIA8 = VIA8i NOT VTIN_8 
p_odtap_cpp51_ext_1 = p_odtap_ext_all NOT INTERACT p_odtap_fb9b_ext_o 
p_odtap_cpp51_ext_2 = p_odtap_cpp51_ext_1 NOT INTERACT p_odtap_fb8b_cpp45_ext_o 
p_odtap_cpp51_ext_3 = p_odtap_cpp51_ext_2 NOT INTERACT p_odtap_fb8c_cpp45_ext_o 

//* Define layer -- p_odtap_fb6b_cpp45_ext_o
p_odtap_fb6b_cpp45_ext_o_tmp01 = p_odtap_ext_all AND FB6
p_odtap_fb6b_cpp45_ext_o_tmp02 = p_odtap_fb6b_cpp45_ext_o_tmp01 AND FB_B
p_odtap_fb6b_cpp45_ext_o = p_odtap_fb6b_cpp45_ext_o_tmp02 NOT PO_P51

p_odtap_cpp51_ext_4 = p_odtap_cpp51_ext_3 NOT INTERACT p_odtap_fb6b_cpp45_ext_o 

//* Define layer -- p_odtap_cpp51_ext_o
p_odtap_cpp51_ext_o = p_odtap_ext_all AND PO_P51

p_odtap_cpp51_ext = p_odtap_cpp51_ext_4 INTERACT p_odtap_cpp51_ext_o 

//***** Define connectivity/via layer -- mom5p2_b ****
mom5p21_b = M5_B AND MOMDMY_MXP2 
mom5p2_b1 = mom5p21_b AND MOMDMY_MXP12 
mom5p2_b = mom5p2_b1 INTERACT VIA5 

//***** Define connectivity/via layer -- mom10plus ****
mom10plus = M10 AND MOMDMY_PLUS 
unrecognized_bjt_1 = cemit_io_i1_mac OR cemit_io_i2_mac 
unrecognized_bjt_2 = unrecognized_bjt_1 OR cemit_io_p1_mac 
unrecognized_bjt_3 = BJTDMY1 INTERACT unrecognized_bjt_2 
unrecognized_bjt = BJTDMY1 NOT unrecognized_bjt_3 

//***** Define connectivity/via layer -- VIA13 ****
RH_TN_14a = RH_TN_all INTERACT RHDMY14i 
VTIN_13 = VIA13i AND RH_TN_14a 
VIA13 = VIA13i NOT VTIN_13 

//***** Define connectivity/via layer -- p_fpoly_ulvt ****
VTSN = COPY VTS_N 
npoly_s = poly_out_srm AND VTSN 
poly_set1 = npoly_ioa OR npoly_s 
poly_set2 = poly_set1 OR npoly_l 
poly_set3 = poly_set2 OR npoly_ul 
VTELN = COPY VTEL_N 
npoly_el = poly_out_srm AND VTELN 
poly_set4 = poly_set3 OR npoly_el 
VTLNLL = COPY VTL_NLL 
npoly_lll = poly_out_srm AND VTLNLL 
poly_set5 = poly_set4 OR npoly_lll 
VTULNLL = COPY VTUL_NLL 
npoly_ulll = poly_out_srm AND VTULNLL 
poly_set6 = poly_set5 OR npoly_ulll 
poly_set7 = poly_set6 OR ppoly_ioa 
poly_set8 = poly_set7 OR ppoly_s 
poly_set9 = poly_set8 OR ppoly_l 
poly_set10 = poly_set9 OR ppoly_el 
VTLPLL = COPY VTL_PLL 
ppoly_lll = poly_out_srm AND VTLPLL 
poly_set11 = poly_set10 OR ppoly_lll 
VTULPLL = COPY VTUL_PLL 
ppoly_ulll = poly_out_srm AND VTULPLL 
poly_set12 = poly_set11 OR ppoly_ulll 
poly_set13 = poly_set12 OR npoly_co_srm 
poly_set = poly_set13 OR ppoly_co_srm 
ppoly_ul = poly_org NOT poly_set 
ppoly_co_ul = ppoly_ul NOT PODE_3T 
p_fpoly_ulvt = ppoly_co_ul NOT ODx 

//***** Define connectivity/via layer -- mom9p1 ****
mom9p11 = M9 AND MOMDMY_MXP1 
mom9p1 = mom9p11 AND MOMDMY_MXP12 
tpdiff_ori_real = tpdiff_ori AND ODI 
DIONW1 = DIODMYi OUTSIDE tpdiff_ori_real 
DIONW2 = DIONW1 INTERACT PO 
DIONW3 = DIONW2 INTERACT ODI 
DIONW = DIONW3 INTERACT NPi 

//***** Define connectivity/via layer -- BPC_GND_DMY_2 ****
shp2_1 = shpmim2_reg_4tlv OR shpmim2_reg_5thv 
shp2 = shp2_1 OR shpmim21_reg_4thv 
BPC_GND_DMY_2_a = BPC_GND_DMY INTERACT shp2 
BPC_GND_DMY_2_b = BPC_GND_DMY NOT INTERACT shp2 
BPC_GND_DMY_2 = BPC_GND_DMY_2_a OR BPC_GND_DMY_2_b 
n_odtap_cpp51_ext_1 = n_odtap_ext_all NOT INTERACT n_odtap_fb9b_ext_o 
n_odtap_cpp51_ext_2 = n_odtap_cpp51_ext_1 NOT INTERACT n_odtap_fb8b_cpp45_ext_o 
n_odtap_cpp51_ext_3 = n_odtap_cpp51_ext_2 NOT INTERACT n_odtap_fb8c_cpp45_ext_o 

//* Define layer -- n_odtap_fb6b_cpp45_ext_o
n_odtap_fb6b_cpp45_ext_o_tmp01 = n_odtap_ext_all AND FB6
n_odtap_fb6b_cpp45_ext_o_tmp02 = n_odtap_fb6b_cpp45_ext_o_tmp01 AND FB_B
n_odtap_fb6b_cpp45_ext_o = n_odtap_fb6b_cpp45_ext_o_tmp02 NOT PO_P51

n_odtap_cpp51_ext_4 = n_odtap_cpp51_ext_3 NOT INTERACT n_odtap_fb6b_cpp45_ext_o 

//* Define layer -- n_odtap_cpp51_ext_o
n_odtap_cpp51_ext_o = n_odtap_ext_all AND PO_P51

n_odtap_cpp51_ext = n_odtap_cpp51_ext_4 INTERACT n_odtap_cpp51_ext_o 

//***** Define connectivity/via layer -- mom4plus ****
mom4plus = M4 AND MOMDMY_PLUS 
p_cpode = CPODE NOT n_cpode 

//***** Define connectivity/via layer -- n_odtap_bjt ****
n_odtap_bjt = n_odtap2 AND tndiff_bjt 
rhim_all1 = RHDMY0i OR RHDMY1i 
rhim_all2 = rhim_all1 OR RHDMY2i 
rhim_all3 = rhim_all2 OR RHDMY3i 
rhim_all4 = rhim_all3 OR RHDMY4i 
rhim_all5 = rhim_all4 OR RHDMY5i 
rhim_all6 = rhim_all5 OR RHDMY6i 
rhim_all7 = rhim_all6 OR RHDMY7i 
rhim_all8 = rhim_all7 OR RHDMY8i 
rhim_all9 = rhim_all8 OR RHDMY9i 
rhim_all10 = rhim_all9 OR RHDMY10i 
rhim_all11 = rhim_all10 OR RHDMY11i 
rhim_all12 = rhim_all11 OR RHDMY12i 
rhim_all13 = rhim_all12 OR RHDMY13i 
rhim_all14 = rhim_all13 OR RHDMY14i 
rhim_all15 = rhim_all14 OR RHDMY15i 
rhim_all16 = rhim_all15 OR RHDMY16i 
rhim_all17 = rhim_all16 OR RHDMY17i 
rhim_all18 = rhim_all17 OR RHDMY18i 
rhim_all = COPY rhim_all18 

//***** Define connectivity/via layer -- mom7p1 ****
mom7p11 = M7 AND MOMDMY_MXP1 
mom7p1 = mom7p11 AND MOMDMY_MXP12 

//***** Define connectivity/via layer -- p_gpoly_lvtll ****
ppoly_co_lll = ppoly_lll NOT PODE_3T 
p_gpoly_lvtll_all = ppoly_co_lll AND ODx 
p_gpoly_lvtll = p_gpoly_lvtll_all NOT all_mos_gates 

//* Define layer -- M0_A_SRM02_1
M0_A_SRM02_1_tmp01 = SRM AND SRM12
M0_A_SRM02_1 = M0_A_SRM02_1_tmp01 AND M0_A


//* Define layer -- M0_A_SRM02_2
M0_A_SRM02_2_tmp01 = SRM AND SRM14
M0_A_SRM02_2 = M0_A_SRM02_2_tmp01 AND M0_A

M0_A_SRM02a = M0_A_SRM02_1 OR M0_A_SRM02_2 

//* Define layer -- M0_A_SRM02_3
M0_A_SRM02_3_tmp01 = SRM AND SRM15
M0_A_SRM02_3 = M0_A_SRM02_3_tmp01 AND M0_A

M0_A_SRM02 = M0_A_SRM02a OR M0_A_SRM02_3 

//***** Define connectivity/via layer -- n_fpoly_ulvtll ****
npoly_co_ulll = npoly_ulll NOT PODE_3T 
n_fpoly_ulvtll = npoly_co_ulll NOT ODx 

//***** Define connectivity/via layer -- mom6m1 ****
mom6p11 = M6 AND MOMDMY_MXP1 
mom6p1 = mom6p11 AND MOMDMY_MXP12 
mom6m1 = mom6p11 NOT INTERACT mom6p1 

//***** Define connectivity/via layer -- mom14p1 ****
mom14p11 = M14 AND MOMDMY_MXP1 
mom14p1 = mom14p11 AND MOMDMY_MXP12 

//* Define layer -- mkr_cfi_p_srm_sp_1
mkr_cfi_p_srm_sp_1_tmp01 = sram_pgpoly_region AND SRM11
mkr_cfi_p_srm_sp_1_tmp02 = mkr_cfi_p_srm_sp_1_tmp01 NOT SRM12
mkr_cfi_p_srm_sp_1_tmp03 = mkr_cfi_p_srm_sp_1_tmp02 NOT SRM14
mkr_cfi_p_srm_sp_1_tmp04 = mkr_cfi_p_srm_sp_1_tmp03 NOT SRM15
mkr_cfi_p_srm_sp_1_tmp05 = mkr_cfi_p_srm_sp_1_tmp04 NOT SRM13
mkr_cfi_p_srm_sp_1_tmp06 = mkr_cfi_p_srm_sp_1_tmp05 NOT SRM16
mkr_cfi_p_srm_sp_1 = mkr_cfi_p_srm_sp_1_tmp06 NOT SRM17


//* Define layer -- mkr_cfi_p_srm_sp_2
mkr_cfi_p_srm_sp_2_tmp01 = sram_pgpoly_region NOT SRM11
mkr_cfi_p_srm_sp_2_tmp02 = mkr_cfi_p_srm_sp_2_tmp01 AND SRM12
mkr_cfi_p_srm_sp_2_tmp03 = mkr_cfi_p_srm_sp_2_tmp02 NOT SRM14
mkr_cfi_p_srm_sp_2_tmp04 = mkr_cfi_p_srm_sp_2_tmp03 NOT SRM15
mkr_cfi_p_srm_sp_2_tmp05 = mkr_cfi_p_srm_sp_2_tmp04 NOT SRM13
mkr_cfi_p_srm_sp_2_tmp06 = mkr_cfi_p_srm_sp_2_tmp05 NOT SRM16
mkr_cfi_p_srm_sp_2 = mkr_cfi_p_srm_sp_2_tmp06 NOT SRM17

mkr_cfi_p_srm_sp = mkr_cfi_p_srm_sp_1 OR mkr_cfi_p_srm_sp_2 
n_odtap_ext_1 = n_odtap_ext_all NOT INTERACT n_odtap_fb9b_ext_o 
n_odtap_ext_2 = n_odtap_ext_1 NOT INTERACT n_odtap_fb8b_cpp45_ext_o 
n_odtap_ext_3 = n_odtap_ext_2 NOT INTERACT n_odtap_fb8c_cpp45_ext_o 
n_odtap_ext_4 = n_odtap_ext_3 NOT INTERACT n_odtap_fb6b_cpp45_ext_o 
n_odtap_ext = n_odtap_ext_4 NOT INTERACT n_odtap_cpp51_ext_o 
n_gpoly_srm_all = npoly_co_srm AND ODx 
n_gpoly_srm = n_gpoly_srm_all NOT all_mos_gates 

//* Define layer -- mkr_cfi_n_srm_sp_1
mkr_cfi_n_srm_sp_1_tmp01 = sram_ngpoly_region AND SRM11
mkr_cfi_n_srm_sp_1_tmp02 = mkr_cfi_n_srm_sp_1_tmp01 NOT SRM12
mkr_cfi_n_srm_sp_1_tmp03 = mkr_cfi_n_srm_sp_1_tmp02 NOT SRM14
mkr_cfi_n_srm_sp_1_tmp04 = mkr_cfi_n_srm_sp_1_tmp03 NOT SRM15
mkr_cfi_n_srm_sp_1_tmp05 = mkr_cfi_n_srm_sp_1_tmp04 NOT SRM13
mkr_cfi_n_srm_sp_1_tmp06 = mkr_cfi_n_srm_sp_1_tmp05 NOT SRM16
mkr_cfi_n_srm_sp_1 = mkr_cfi_n_srm_sp_1_tmp06 NOT SRM17


//* Define layer -- mkr_cfi_n_srm_sp_2
mkr_cfi_n_srm_sp_2_tmp01 = sram_ngpoly_region NOT SRM11
mkr_cfi_n_srm_sp_2_tmp02 = mkr_cfi_n_srm_sp_2_tmp01 AND SRM12
mkr_cfi_n_srm_sp_2_tmp03 = mkr_cfi_n_srm_sp_2_tmp02 NOT SRM14
mkr_cfi_n_srm_sp_2_tmp04 = mkr_cfi_n_srm_sp_2_tmp03 NOT SRM15
mkr_cfi_n_srm_sp_2_tmp05 = mkr_cfi_n_srm_sp_2_tmp04 NOT SRM13
mkr_cfi_n_srm_sp_2_tmp06 = mkr_cfi_n_srm_sp_2_tmp05 NOT SRM16
mkr_cfi_n_srm_sp_2 = mkr_cfi_n_srm_sp_2_tmp06 NOT SRM17

mkr_cfi_n_srm_sp = mkr_cfi_n_srm_sp_1 OR mkr_cfi_n_srm_sp_2 

//***** Define connectivity/via layer -- mom5m1_a ****
mom5m11_a = M5_A AND MOMDMY_MXP1 
mom5m1_a1 = mom5m11_a NOT MOMDMY_MXP12 
mom5m1_a = mom5m1_a1 INTERACT VIA5 

//***** Define connectivity/via layer -- mom8minus ****
mom8minus = M8 AND MOMDMY_MINUS 

//***** Define connectivity/via layer -- BPC_LV_2 ****
BPC_LV_2_a = BPC_LV INTERACT shp2 
BPC_LV_2_b = BPC_LV NOT INTERACT shp2 
BPC_LV_2 = BPC_LV_2_a OR BPC_LV_2_b 

//***** Define connectivity/via layer -- mom2m1_b ****
mom2m11_b = M2_B AND MOMDMY_MXP1 
mom2m1_b1 = mom2m11_b NOT MOMDMY_MXP12 
mom2m1_b = mom2m1_b1 INTERACT VIA2 

//* Define layer -- M0_B_SRM01
M0_B_SRM01_tmp01 = SRM AND SRM11
M0_B_SRM01 = M0_B_SRM01_tmp01 AND M0_B


//* Define layer -- M3_SRM02_1
M3_SRM02_1_tmp01 = SRM AND SRM12
M3_SRM02_1 = M3_SRM02_1_tmp01 AND M3


//* Define layer -- M3_SRM02_2
M3_SRM02_2_tmp01 = SRM AND SRM14
M3_SRM02_2 = M3_SRM02_2_tmp01 AND M3

M3_SRM02a = M3_SRM02_1 OR M3_SRM02_2 

//* Define layer -- M3_SRM02_3
M3_SRM02_3_tmp01 = SRM AND SRM15
M3_SRM02_3 = M3_SRM02_3_tmp01 AND M3

M3_SRM02b = M3_SRM02a OR M3_SRM02_3 

//* Define layer -- M3_SRM02_4
M3_SRM02_4_tmp01 = SRM AND SRM16
M3_SRM02_4 = M3_SRM02_4_tmp01 AND M3

M3_SRM02c = M3_SRM02b OR M3_SRM02_4 

//* Define layer -- M3_SRM02_5
M3_SRM02_5_tmp01 = SRM AND SRM17
M3_SRM02_5 = M3_SRM02_5_tmp01 AND M3

M3_SRM02d = M3_SRM02c OR M3_SRM02_5 

//* Define layer -- M3_SRM02_6
M3_SRM02_6_tmp01 = SRM AND SRM13
M3_SRM02_6 = M3_SRM02_6_tmp01 AND M3

M3_SRM02 = M3_SRM02d OR M3_SRM02_6 

//***** Define connectivity/via layer -- mom12p2 ****
mom12p21 = M12 AND MOMDMY_MXP2 
mom12p2 = mom12p21 AND MOMDMY_MXP12 
sram_pgpoly_region_1 = pgate_pu_hdsr_mac OR pgate_pu_hcsr_mac 
sram_pgpoly_region_2 = sram_pgpoly_region_1 OR pgate_pu_hshcsr_mac 
sram_pgpoly_region_3 = sram_pgpoly_region_2 OR pgate_pu_8tsr_mac 
sram_pgpoly_region_4 = sram_pgpoly_region_3 OR pgate_pu_hc8tsr_mac 
sram_pgpoly_region_5 = sram_pgpoly_region_4 OR pgate_pu_10tsr_mac 
sram_pgpoly_region_6 = sram_pgpoly_region_5 OR pgate_pu_ulvtll10tsr_mac 
sram_pgpoly_region_7 = sram_pgpoly_region_6 OR pgate_pu_ulvtll8tsr_mac 
sram_pgpoly_region_8 = sram_pgpoly_region_7 OR pgate_pu_ulvtllhc8tsr_mac 
sram_pgpoly_region_9 = sram_pgpoly_region_8 OR pgate_pu_dpsr_mac 
sram_pgpoly_region = sram_pgpoly_region_9 OR p_gpoly_srm 

//***** Define connectivity/via layer -- mom2minus_b ****
mom2minus_b = M2_B AND MOMDMY_MINUS 
p_odtap_fb9b_ext = p_odtap_ext_all INTERACT p_odtap_fb9b_ext_o 

//***** Define connectivity/via layer -- p_pode_ulvtll ****
ppode_co_ulll = ppoly_ulll AND PODE_3T 
p_pode_ulvtll = ppode_co_ulll NOT all_mos_gates 

//***** Define connectivity/via layer -- VTIN_6 ****
RH_TN_7a = RH_TN_all INTERACT RHDMY7i 
VTIN_6 = VIA6i AND RH_TN_7a 

//* Define layer -- mkr_cfi_ncore_p51
mkr_cfi_ncore_p51 = core_ngpoly_region AND PO_P51


//***** Define connectivity/via layer -- mom0minus_b ****
mom0minus_b = M0_B AND MOMDMY_MINUS 

//***** Define connectivity/via layer -- TPC_GND_2 ****
TPC_GND_2_a = TPC_GND INTERACT shp2 
TPC_GND_2_b = TPC_GND NOT INTERACT shp2 
TPC_GND_2 = TPC_GND_2_a OR TPC_GND_2_b 

//***** Define connectivity/via layer -- mom9plus ****
mom9plus = M9 AND MOMDMY_PLUS 

//***** Define connectivity/via layer -- mom8m2 ****
mom8m2 = mom8p21 NOT INTERACT mom8p2 

//***** Define connectivity/via layer -- VIA16 ****
RH_TN_17a = RH_TN_all INTERACT RHDMY17i 
VTIN_16 = VIA16i AND RH_TN_17a 
VIA16 = VIA16i NOT VTIN_16 

//***** Define connectivity/via layer -- RV_MTOP_TPC ****
RV_MTOP_TPC1 = Cu_RVi AND TPC_GND_all 
RV_MTOP_TPC2 = RV_MTOP_TPC1 AND M18 
BPC_GND_all = BPC_GND OR BPC_GND_DMY 
RV_MTOP_TPC = RV_MTOP_TPC2 NOT BPC_GND_all 

//***** Define connectivity/via layer -- mom13plus ****
mom13plus = M13 AND MOMDMY_PLUS 

//***** Define connectivity/via layer -- mom12m1 ****
mom12p11 = M12 AND MOMDMY_MXP1 
mom12p1 = mom12p11 AND MOMDMY_MXP12 
mom12m1 = mom12p11 NOT INTERACT mom12p1 

//* Define layer -- M1_B_SRM03_1
M1_B_SRM03_1_tmp01 = SRM AND SRM16
M1_B_SRM03_1 = M1_B_SRM03_1_tmp01 AND M1_B


//* Define layer -- M1_B_SRM03_2
M1_B_SRM03_2_tmp01 = SRM AND SRM17
M1_B_SRM03_2 = M1_B_SRM03_2_tmp01 AND M1_B

M1_B_SRM03a = M1_B_SRM03_1 OR M1_B_SRM03_2 

//* Define layer -- M1_B_SRM03_3
M1_B_SRM03_3_tmp01 = SRM AND SRM13
M1_B_SRM03_3 = M1_B_SRM03_3_tmp01 AND M1_B

M1_B_SRM03 = M1_B_SRM03a OR M1_B_SRM03_3 

//***** Define connectivity/via layer -- MD_OD_N_SRM ****
MD_OD_N_SRM = MD_OD_N1 AND SRM_all 

//***** Define connectivity/via layer -- RV_BPC_TPC ****
RV_BPC_TPC1 = Cu_RVi AND TPC_GND_all 
RV_BPC_TPC_shp = RV_BPC_TPC1 AND BPC_GND_all 
RV_BPC_TPC1_shd = Cu_RVi AND TPC_FINAL 
RV_BPC_TPC_shd = RV_BPC_TPC1_shd AND BPC_FINAL 
RV_BPC_TPC = RV_BPC_TPC_shp OR RV_BPC_TPC_shd 

//* Define layer -- mkr_cfi_n_srm_mp_1
mkr_cfi_n_srm_mp_1_tmp01 = sram_ngpoly_region NOT SRM11
mkr_cfi_n_srm_mp_1_tmp02 = mkr_cfi_n_srm_mp_1_tmp01 NOT SRM12
mkr_cfi_n_srm_mp_1_tmp03 = mkr_cfi_n_srm_mp_1_tmp02 AND SRM14
mkr_cfi_n_srm_mp_1_tmp04 = mkr_cfi_n_srm_mp_1_tmp03 NOT SRM15
mkr_cfi_n_srm_mp_1_tmp05 = mkr_cfi_n_srm_mp_1_tmp04 NOT SRM13
mkr_cfi_n_srm_mp_1_tmp06 = mkr_cfi_n_srm_mp_1_tmp05 NOT SRM16
mkr_cfi_n_srm_mp_1 = mkr_cfi_n_srm_mp_1_tmp06 NOT SRM17


//* Define layer -- mkr_cfi_n_srm_mp_2
mkr_cfi_n_srm_mp_2_tmp01 = sram_ngpoly_region NOT SRM11
mkr_cfi_n_srm_mp_2_tmp02 = mkr_cfi_n_srm_mp_2_tmp01 NOT SRM12
mkr_cfi_n_srm_mp_2_tmp03 = mkr_cfi_n_srm_mp_2_tmp02 NOT SRM14
mkr_cfi_n_srm_mp_2_tmp04 = mkr_cfi_n_srm_mp_2_tmp03 AND SRM15
mkr_cfi_n_srm_mp_2_tmp05 = mkr_cfi_n_srm_mp_2_tmp04 NOT SRM13
mkr_cfi_n_srm_mp_2_tmp06 = mkr_cfi_n_srm_mp_2_tmp05 NOT SRM16
mkr_cfi_n_srm_mp_2 = mkr_cfi_n_srm_mp_2_tmp06 NOT SRM17

mkr_cfi_n_srm_mpa = mkr_cfi_n_srm_mp_1 OR mkr_cfi_n_srm_mp_2 

//* Define layer -- mkr_cfi_n_srm_mp_3
mkr_cfi_n_srm_mp_3_tmp01 = sram_ngpoly_region NOT SRM11
mkr_cfi_n_srm_mp_3_tmp02 = mkr_cfi_n_srm_mp_3_tmp01 NOT SRM12
mkr_cfi_n_srm_mp_3_tmp03 = mkr_cfi_n_srm_mp_3_tmp02 NOT SRM14
mkr_cfi_n_srm_mp_3_tmp04 = mkr_cfi_n_srm_mp_3_tmp03 NOT SRM15
mkr_cfi_n_srm_mp_3_tmp05 = mkr_cfi_n_srm_mp_3_tmp04 AND SRM13
mkr_cfi_n_srm_mp_3_tmp06 = mkr_cfi_n_srm_mp_3_tmp05 NOT SRM16
mkr_cfi_n_srm_mp_3 = mkr_cfi_n_srm_mp_3_tmp06 NOT SRM17

mkr_cfi_n_srm_mpb = mkr_cfi_n_srm_mpa OR mkr_cfi_n_srm_mp_3 

//* Define layer -- mkr_cfi_n_srm_mp_4
mkr_cfi_n_srm_mp_4_tmp01 = sram_ngpoly_region NOT SRM11
mkr_cfi_n_srm_mp_4_tmp02 = mkr_cfi_n_srm_mp_4_tmp01 NOT SRM12
mkr_cfi_n_srm_mp_4_tmp03 = mkr_cfi_n_srm_mp_4_tmp02 NOT SRM14
mkr_cfi_n_srm_mp_4_tmp04 = mkr_cfi_n_srm_mp_4_tmp03 NOT SRM15
mkr_cfi_n_srm_mp_4_tmp05 = mkr_cfi_n_srm_mp_4_tmp04 NOT SRM13
mkr_cfi_n_srm_mp_4_tmp06 = mkr_cfi_n_srm_mp_4_tmp05 AND SRM16
mkr_cfi_n_srm_mp_4 = mkr_cfi_n_srm_mp_4_tmp06 NOT SRM17

mkr_cfi_n_srm_mpc = mkr_cfi_n_srm_mpb OR mkr_cfi_n_srm_mp_4 

//* Define layer -- mkr_cfi_n_srm_mp_5
mkr_cfi_n_srm_mp_5_tmp01 = sram_ngpoly_region NOT SRM11
mkr_cfi_n_srm_mp_5_tmp02 = mkr_cfi_n_srm_mp_5_tmp01 NOT SRM12
mkr_cfi_n_srm_mp_5_tmp03 = mkr_cfi_n_srm_mp_5_tmp02 NOT SRM14
mkr_cfi_n_srm_mp_5_tmp04 = mkr_cfi_n_srm_mp_5_tmp03 NOT SRM15
mkr_cfi_n_srm_mp_5_tmp05 = mkr_cfi_n_srm_mp_5_tmp04 NOT SRM13
mkr_cfi_n_srm_mp_5_tmp06 = mkr_cfi_n_srm_mp_5_tmp05 NOT SRM16
mkr_cfi_n_srm_mp_5 = mkr_cfi_n_srm_mp_5_tmp06 AND SRM17

mkr_cfi_n_srm_mp = mkr_cfi_n_srm_mpc OR mkr_cfi_n_srm_mp_5 

//***** Define connectivity/via layer -- mom2p1_a ****
mom2p11_a = M2_A AND MOMDMY_MXP1 
mom2p1_a1 = mom2p11_a AND MOMDMY_MXP12 
mom2p1_a = mom2p1_a1 INTERACT VIA2 

//***** Define connectivity/via layer -- RV_MPC_RDL ****
RV_MPC_RDL1 = Cu_RVi AND Cu_RDL 
MPC_LV_all = MPC_LV OR MPC_LV_DMY 
RV_MPC_RDL_shp = RV_MPC_RDL1 AND MPC_LV_all 
RV_MPC_RDL_shd = RV_MPC_RDL1 AND MPC_FINAL 
RV_MPC_RDL = RV_MPC_RDL_shp OR RV_MPC_RDL_shd 

//***** Define connectivity/via layer -- RV_MTOP_MPC ****
RV_MTOP_MPC1 = Cu_RVi AND MPC_LV_all 
RV_MTOP_MPC2 = RV_MTOP_MPC1 AND M18 
BPC_LVHV_a = BPC_LV OR BPC_HV1 
BPC_LVHV = BPC_LVHV_a OR BPC_HV2 
BPC_LVHV_all = BPC_LVHV OR BPC_LVHV_DMY 
RV_MTOP_MPC_shp = RV_MTOP_MPC2 NOT BPC_LVHV_all 
RV_MTOP_MPC1_shd = Cu_RVi AND MPC_FINAL 
RV_MTOP_MPC_shd = RV_MTOP_MPC1_shd AND M18 
RV_MTOP_MPC = RV_MTOP_MPC_shp OR RV_MTOP_MPC_shd 

//***** Define connectivity/via layer -- mom7m2 ****
mom7p21 = M7 AND MOMDMY_MXP2 
mom7p2 = mom7p21 AND MOMDMY_MXP12 
mom7m2 = mom7p21 NOT INTERACT mom7p2 
ponw_s = realpo_s AND nxwell 
pponw_s = ponw_s AND PP  //  SRAM PMOS
pgate_s_normal1 = pponw_s AND SRMDEV 
pgate_s_normal3 = pgate_s_normal1 INTERACT gate1 
pgate_s_normal = pgate_s_normal3 NOT RODMY_srm 

//***** Define connectivity/via layer -- psub_term_plug ****
psub_term_plug1 = psub_term NOT psub_term_b 
psub_term_plug = psub_term_plug1 AND psub  //  Ring plug for psub_term

//***** Define connectivity/via layer -- mom7m1 ****
mom7m1 = mom7p11 NOT INTERACT mom7p1 

//***** Define connectivity/via layer -- mom1m2_a ****
mom1m21_a = M1_A AND MOMDMY_MXP2 
mom1m2_a1 = mom1m21_a NOT MOMDMY_MXP12 
mom1m2_a = mom1m2_a1 INTERACT VIA1 

//***** Define connectivity/via layer -- mom11plus ****
mom11plus = M11 AND MOMDMY_PLUS 
OD2 = COPY OD12 
core_nmos_gates = tngate1 NOT OD2 

//* Define layer -- M0_B_SRM02_1
M0_B_SRM02_1_tmp01 = SRM AND SRM12
M0_B_SRM02_1 = M0_B_SRM02_1_tmp01 AND M0_B


//* Define layer -- M0_B_SRM02_2
M0_B_SRM02_2_tmp01 = SRM AND SRM14
M0_B_SRM02_2 = M0_B_SRM02_2_tmp01 AND M0_B

M0_B_SRM02a = M0_B_SRM02_1 OR M0_B_SRM02_2 

//* Define layer -- M0_B_SRM02_3
M0_B_SRM02_3_tmp01 = SRM AND SRM15
M0_B_SRM02_3 = M0_B_SRM02_3_tmp01 AND M0_B

M0_B_SRM02 = M0_B_SRM02a OR M0_B_SRM02_3 

//***** Define connectivity/via layer -- p_gpoly_nocg_io ****
p_gpoly_nocg_io = p_gpoly_io1 AND nocg_dmy_io 

//***** Define connectivity/via layer -- n_psub ****
n_psub = BULK NOT psubband 

//***** Define connectivity/via layer -- p_odtap_srm ****
p_odtap_srm = p_odtap1 AND SRM_all 

//***** Define connectivity/via layer -- p_gpoly_ulvtll ****
ppoly_co_ulll = ppoly_ulll NOT PODE_3T 
p_gpoly_ulvtll_all = ppoly_co_ulll AND ODx 
p_gpoly_ulvtll = p_gpoly_ulvtll_all NOT all_mos_gates 

//***** Define connectivity/via layer -- p_fpoly_lvt ****
p_fpoly_lvt = ppoly_co_l NOT ODx 

//***** Define connectivity/via layer -- RV_MTOP_BPC_BOT ****
RV_MTOP_BPC_BOT1 = Cu_RVi AND BPC_LVHV_all 
RV_MTOP_BPC_BOT = RV_MTOP_BPC_BOT1 AND M18 
n_gpoly_ulvtll_all = npoly_co_ulll AND ODx 
n_gpoly_ulvtll = n_gpoly_ulvtll_all NOT all_mos_gates 
npoly_co_lll = npoly_lll NOT PODE_3T 
n_gpoly_lvtll_all = npoly_co_lll AND ODx 
n_gpoly_lvtll = n_gpoly_lvtll_all NOT all_mos_gates 
npoly_co_el = npoly_el NOT PODE_3T 
n_gpoly_elvt_all = npoly_co_el AND ODx 
n_gpoly_elvt = n_gpoly_elvt_all NOT all_mos_gates 
n_gpoly_lvt = n_gpoly_lvt1 NOT nocg_dmy 
npoly_co_s = npoly_s NOT PODE_3T 
n_gpoly_svt_all = npoly_co_s AND ODx 
n_gpoly_svt = n_gpoly_svt_all NOT all_mos_gates 
core_n_gpoly1 = COPY n_gpoly_svt 
core_n_gpoly2 = n_gpoly_lvt OR core_n_gpoly1 
core_n_gpoly3 = n_gpoly_ulvt OR core_n_gpoly2 
core_n_gpoly4 = n_gpoly_elvt OR core_n_gpoly3 
core_n_gpoly5 = n_gpoly_lvtll OR core_n_gpoly4 
core_n_gpoly6 = n_gpoly_ulvtll OR core_n_gpoly5 
core_efmos_mac_gate_dnw = nch_eflvt_mac_gate_dnw OR nch_efsvt_mac_gate_dnw 
core_nefmos_gate = nch_eflvt_mac_gate OR nch_efsvt_mac_gate 
core_nmos_gate1 = COPY nch_svt_mac_gate 
core_nmos_gate2 = nch_lvt_mac_gate OR core_nmos_gate1 
core_nmos_gate3 = nch_ulvt_mac_gate OR core_nmos_gate2 
core_nmos_gate4 = nch_elvt_mac_gate OR core_nmos_gate3 
core_nmos_gate5 = nch_lvtll_mac_gate OR core_nmos_gate4 
core_nmos_gate6 = nch_ulvtll_mac_gate OR core_nmos_gate5 
core_nmos_gate7 = core_nefmos_gate OR core_nmos_gate6 
core_nmos_gate8 = core_efmos_mac_gate_dnw OR core_nmos_gate7 
core_ngpoly_region1 = core_n_gpoly6 OR core_nmos_gate8 
core_nmpode_gate1 = COPY nch_mpodesvt_mac_gate 
core_nmpode_gate2 = nch_mpodelvt_mac_gate OR core_nmpode_gate1 
core_nmpode_gate3 = nch_mpodeulvt_mac_gate OR core_nmpode_gate2 
core_nmpode_gate4 = nch_mpodeelvt_mac_gate OR core_nmpode_gate3 
core_nmpode_gate5 = nch_mpodelvtll_mac_gate OR core_nmpode_gate4 
core_nmpode_gate6 = nch_mpodeulvtll_mac_gate OR core_nmpode_gate5 
core_ngpoly_region2 = core_ngpoly_region1 OR core_nmpode_gate6 
core_n_efpode_gate = npode_eflvt_mac_gate OR npode_efsvt_mac_gate 
core_n_pode_gate1 = COPY npode_svt_mac_gate 
core_n_pode_gate2 = npode_lvt_mac_gate OR core_n_pode_gate1 
core_n_pode_gate3 = npode_ulvt_mac_gate OR core_n_pode_gate2 
core_n_pode_gate4 = npode_elvt_mac_gate OR core_n_pode_gate3 
core_n_pode_gate5 = npode_lvtll_mac_gate OR core_n_pode_gate4 
core_n_pode_gate6 = npode_ulvtll_mac_gate OR core_n_pode_gate5 
core_n_pode_gate7 = core_n_efpode_gate OR core_n_pode_gate6 
core_ngpoly_region3 = core_ngpoly_region2 OR core_n_pode_gate7 
npode_co_ulll = npoly_ulll AND PODE_3T 
n_pode_ulvtll = npode_co_ulll NOT all_mos_gates 
npode_co_lll = npoly_lll AND PODE_3T 
n_pode_lvtll = npode_co_lll NOT all_mos_gates 
npode_co_el = npoly_el AND PODE_3T 
n_pode_elvt = npode_co_el NOT all_mos_gates 
npode_co_ul = npoly_ul AND PODE_3T 
n_pode_ulvt = npode_co_ul NOT all_mos_gates 
npode_co_l = npoly_l AND PODE_3T 
n_pode_lvt = npode_co_l NOT all_mos_gates 
npode_co_s = npoly_s AND PODE_3T 
n_pode_svt = npode_co_s NOT all_mos_gates 
core_n_pode1 = COPY n_pode_svt 
core_n_pode2 = n_pode_lvt OR core_n_pode1 
core_n_pode3 = n_pode_ulvt OR core_n_pode2 
core_n_pode4 = n_pode_elvt OR core_n_pode3 
core_n_pode5 = n_pode_lvtll OR core_n_pode4 
core_n_pode6 = n_pode_ulvtll OR core_n_pode5 
core_ngpoly_region4 = core_ngpoly_region3 OR core_n_pode6 
core_ngpoly_region5 = core_ngpoly_region4 OR vargt 
core_ngpoly_region6 = COPY core_ngpoly_region5 
core_ngpoly_region7 = core_ngpoly_region6 OR n_gpoly_nocg_lvt 
core_nmos_dnw_gate1 = COPY nch_svt_mac_gate_dnw 
core_nmos_dnw_gate2 = nch_lvt_mac_gate_dnw OR core_nmos_dnw_gate1 
core_nmos_dnw_gate3 = nch_ulvt_mac_gate_dnw OR core_nmos_dnw_gate2 
core_nmos_dnw_gate4 = nch_elvt_mac_gate_dnw OR core_nmos_dnw_gate3 
core_nmos_dnw_gate5 = nch_lvtll_mac_gate_dnw OR core_nmos_dnw_gate4 
core_nmos_dnw_gate6 = nch_ulvtll_mac_gate_dnw OR core_nmos_dnw_gate5 
core_ngpoly_region = core_ngpoly_region7 OR core_nmos_dnw_gate6 
p_odtap_fb6b_cpp45_ext_1 = p_odtap_ext_all NOT INTERACT p_odtap_fb9b_ext_o 
p_odtap_fb6b_cpp45_ext_2 = p_odtap_fb6b_cpp45_ext_1 NOT INTERACT p_odtap_fb8b_cpp45_ext_o 
p_odtap_fb6b_cpp45_ext_3 = p_odtap_fb6b_cpp45_ext_2 NOT INTERACT p_odtap_fb8c_cpp45_ext_o 
p_odtap_fb6b_cpp45_ext = p_odtap_fb6b_cpp45_ext_3 INTERACT p_odtap_fb6b_cpp45_ext_o 
rhim_body1 = RH_TNi AND RHDMY_ALL 
rhim_body = rhim_body1 AND rhim_all 
rhim_and_hi_em = rhim_body AND RH_TNE 
rhim_aux = DFM PROPERTY rhim_body rhim_and_hi_em OVERLAP ABUT ALSO MULTI
[hi_em = 1*count(rhim_and_hi_em)]
diff_to_fin1 = diffa2 NOT SRM_all 
diff_to_fin2 = SR_DOD AND SRM_all 
diff_to_fin3 = diff_to_fin2 NOT RODMY_srm 
diff_to_fin4 = diff_to_fin1 OR diff_to_fin3 
diff_to_fin = diff_to_fin4 NOT FB2 
findiff = diff_to_fin INTERACT POx 
fingate_l = diff_to_fin INSIDE EDGE POx 
fin_E0a1 = fingate_l TOUCH EDGE EXT_OD_CORN
fin_E0a2 = fin_E0a1 TOUCH EDGE INT_OD_CORN
fin_E0a3 = fingate_l NOT TOUCH EDGE fin_E0a2
fin_E0a = findiff TOUCH EDGE fin_E0a3
fin_A0 = EXPAND EDGE fin_E0a INSIDE BY FIN_WIDTH
fin_E0_ori = fin_A0 INSIDE EDGE findiff 
fin_B1_ori = EXPAND EDGE fin_E0_ori OUTSIDE BY FIN_SPACE
fin_E0_ex1 = LENGTH fin_E0_ori == FIN_WIDTH
fin_B1_ex1 = EXPAND EDGE fin_E0_ex1 OUTSIDE BY FIN_SPACE
fin_B1a = fin_B1_ori NOT fin_B1_ex1 
fin_E0_ex2 = LENGTH fin_E0_ori == FIN_SPACE
fin_B1_ex2 = EXPAND EDGE fin_E0_ex2 OUTSIDE BY FIN_SPACE
fin_B1 = fin_B1a NOT fin_B1_ex2 
fin_lay1o = findiff NOT fin_B1 
fin_E0 = fin_B1 INSIDE EDGE findiff 
fin_A1 = EXPAND EDGE fin_E0 INSIDE BY FIN_PITCH
diffin0 = diff_to_fin NOT fin_A0 
fin_E1_ori = fin_A1 INSIDE EDGE diffin0 
fin_B2_ori = EXPAND EDGE fin_E1_ori OUTSIDE BY FIN_SPACE
fin_E1_ex1 = LENGTH fin_E1_ori == FIN_WIDTH
fin_B2_ex1 = EXPAND EDGE fin_E1_ex1 OUTSIDE BY FIN_SPACE
fin_B2a = fin_B2_ori NOT fin_B2_ex1 
fin_E1_ex2 = LENGTH fin_E1_ori == FIN_PITCH
fin_B2_ex2 = EXPAND EDGE fin_E1_ex2 OUTSIDE BY FIN_SPACE
fin_B2 = fin_B2a NOT fin_B2_ex2 
fin_lay2o = fin_lay1o NOT fin_B2 
fin_E1 = fin_B2 INSIDE EDGE diffin0 
fin_A2 = EXPAND EDGE fin_E1 INSIDE BY FIN_PITCH
diffin1 = diffin0 NOT fin_A1 
fin_E2_ori = fin_A2 INSIDE EDGE diffin1 
fin_B3_ori = EXPAND EDGE fin_E2_ori OUTSIDE BY FIN_SPACE
fin_E2_ex1 = LENGTH fin_E2_ori == FIN_WIDTH
fin_B3_ex1 = EXPAND EDGE fin_E2_ex1 OUTSIDE BY FIN_SPACE
fin_B3a = fin_B3_ori NOT fin_B3_ex1 
fin_E2_ex2 = LENGTH fin_E2_ori == FIN_PITCH
fin_B3_ex2 = EXPAND EDGE fin_E2_ex2 OUTSIDE BY FIN_SPACE
fin_B3 = fin_B3a NOT fin_B3_ex2 
fin_lay3o = fin_lay2o NOT fin_B3 
fin_E2 = fin_B3 INSIDE EDGE diffin1 
fin_A3 = EXPAND EDGE fin_E2 INSIDE BY FIN_PITCH
diffin2 = diffin1 NOT fin_A2 
fin_E3_ori = fin_A3 INSIDE EDGE diffin2 
fin_B4_ori = EXPAND EDGE fin_E3_ori OUTSIDE BY FIN_SPACE
fin_E3_ex1 = LENGTH fin_E3_ori == FIN_WIDTH
fin_B4_ex1 = EXPAND EDGE fin_E3_ex1 OUTSIDE BY FIN_SPACE
fin_B4a = fin_B4_ori NOT fin_B4_ex1 
fin_E3_ex2 = LENGTH fin_E3_ori == FIN_PITCH
fin_B4_ex2 = EXPAND EDGE fin_E3_ex2 OUTSIDE BY FIN_SPACE
fin_B4 = fin_B4a NOT fin_B4_ex2 
fin_lay4o = fin_lay3o NOT fin_B4 
fin_E3 = fin_B4 INSIDE EDGE diffin2 
fin_A4 = EXPAND EDGE fin_E3 INSIDE BY FIN_PITCH
diffin3 = diffin2 NOT fin_A3 
fin_E4_ori = fin_A4 INSIDE EDGE diffin3 
fin_B5_ori = EXPAND EDGE fin_E4_ori OUTSIDE BY FIN_SPACE
fin_E4_ex1 = LENGTH fin_E4_ori == FIN_WIDTH
fin_B5_ex1 = EXPAND EDGE fin_E4_ex1 OUTSIDE BY FIN_SPACE
fin_B5a = fin_B5_ori NOT fin_B5_ex1 
fin_E4_ex2 = LENGTH fin_E4_ori == FIN_PITCH
fin_B5_ex2 = EXPAND EDGE fin_E4_ex2 OUTSIDE BY FIN_SPACE
fin_B5 = fin_B5a NOT fin_B5_ex2 
fin_lay5o = fin_lay4o NOT fin_B5 
fin_E4 = fin_B5 INSIDE EDGE diffin3 
fin_A5 = EXPAND EDGE fin_E4 INSIDE BY FIN_PITCH
diffin4 = diffin3 NOT fin_A4 
fin_E5_ori = fin_A5 INSIDE EDGE diffin4 
fin_B6_ori = EXPAND EDGE fin_E5_ori OUTSIDE BY FIN_SPACE
fin_E5_ex1 = LENGTH fin_E5_ori == FIN_WIDTH
fin_B6_ex1 = EXPAND EDGE fin_E5_ex1 OUTSIDE BY FIN_SPACE
fin_B6a = fin_B6_ori NOT fin_B6_ex1 
fin_E5_ex2 = LENGTH fin_E5_ori == FIN_PITCH
fin_B6_ex2 = EXPAND EDGE fin_E5_ex2 OUTSIDE BY FIN_SPACE
fin_B6 = fin_B6a NOT fin_B6_ex2 
fin_lay6o = fin_lay5o NOT fin_B6 
fin_E5 = fin_B6 INSIDE EDGE diffin4 
fin_A6 = EXPAND EDGE fin_E5 INSIDE BY FIN_PITCH
diffin5 = diffin4 NOT fin_A5 
fin_E6_ori = fin_A6 INSIDE EDGE diffin5 
fin_B7_ori = EXPAND EDGE fin_E6_ori OUTSIDE BY FIN_SPACE
fin_E6_ex1 = LENGTH fin_E6_ori == FIN_WIDTH
fin_B7_ex1 = EXPAND EDGE fin_E6_ex1 OUTSIDE BY FIN_SPACE
fin_B7a = fin_B7_ori NOT fin_B7_ex1 
fin_E6_ex2 = LENGTH fin_E6_ori == FIN_PITCH
fin_B7_ex2 = EXPAND EDGE fin_E6_ex2 OUTSIDE BY FIN_SPACE
fin_B7 = fin_B7a NOT fin_B7_ex2 
fin_lay7o = fin_lay6o NOT fin_B7 
fin_E6 = fin_B7 INSIDE EDGE diffin5 
fin_A7 = EXPAND EDGE fin_E6 INSIDE BY FIN_PITCH
diffin6 = diffin5 NOT fin_A6 
fin_E7_ori = fin_A7 INSIDE EDGE diffin6 
fin_B8_ori = EXPAND EDGE fin_E7_ori OUTSIDE BY FIN_SPACE
fin_E7_ex1 = LENGTH fin_E7_ori == FIN_WIDTH
fin_B8_ex1 = EXPAND EDGE fin_E7_ex1 OUTSIDE BY FIN_SPACE
fin_B8a = fin_B8_ori NOT fin_B8_ex1 
fin_E7_ex2 = LENGTH fin_E7_ori == FIN_PITCH
fin_B8_ex2 = EXPAND EDGE fin_E7_ex2 OUTSIDE BY FIN_SPACE
fin_B8 = fin_B8a NOT fin_B8_ex2 
fin_lay8o = fin_lay7o NOT fin_B8 
fin_E7 = fin_B8 INSIDE EDGE diffin6 
fin_A8 = EXPAND EDGE fin_E7 INSIDE BY FIN_PITCH
diffin7 = diffin6 NOT fin_A7 
fin_E8_ori = fin_A8 INSIDE EDGE diffin7 
fin_B9_ori = EXPAND EDGE fin_E8_ori OUTSIDE BY FIN_SPACE
fin_E8_ex1 = LENGTH fin_E8_ori == FIN_WIDTH
fin_B9_ex1 = EXPAND EDGE fin_E8_ex1 OUTSIDE BY FIN_SPACE
fin_B9a = fin_B9_ori NOT fin_B9_ex1 
fin_E8_ex2 = LENGTH fin_E8_ori == FIN_PITCH
fin_B9_ex2 = EXPAND EDGE fin_E8_ex2 OUTSIDE BY FIN_SPACE
fin_B9 = fin_B9a NOT fin_B9_ex2 
fin_lay9o = fin_lay8o NOT fin_B9 
fin_E8 = fin_B9 INSIDE EDGE diffin7 
fin_A9 = EXPAND EDGE fin_E8 INSIDE BY FIN_PITCH
diffin8 = diffin7 NOT fin_A8 
fin_E9_ori = fin_A9 INSIDE EDGE diffin8 
fin_B10_ori = EXPAND EDGE fin_E9_ori OUTSIDE BY FIN_SPACE
fin_E9_ex1 = LENGTH fin_E9_ori == FIN_WIDTH
fin_B10_ex1 = EXPAND EDGE fin_E9_ex1 OUTSIDE BY FIN_SPACE
fin_B10a = fin_B10_ori NOT fin_B10_ex1 
fin_E9_ex2 = LENGTH fin_E9_ori == FIN_PITCH
fin_B10_ex2 = EXPAND EDGE fin_E9_ex2 OUTSIDE BY FIN_SPACE
fin_B10 = fin_B10a NOT fin_B10_ex2 
fin_lay10o = fin_lay9o NOT fin_B10 
fin_E9 = fin_B10 INSIDE EDGE diffin8 
fin_A10 = EXPAND EDGE fin_E9 INSIDE BY FIN_PITCH
diffin9 = diffin8 NOT fin_A9 
fin_E10_ori = fin_A10 INSIDE EDGE diffin9 
fin_B11_ori = EXPAND EDGE fin_E10_ori OUTSIDE BY FIN_SPACE
fin_E10_ex1 = LENGTH fin_E10_ori == FIN_WIDTH
fin_B11_ex1 = EXPAND EDGE fin_E10_ex1 OUTSIDE BY FIN_SPACE
fin_B11a = fin_B11_ori NOT fin_B11_ex1 
fin_E10_ex2 = LENGTH fin_E10_ori == FIN_PITCH
fin_B11_ex2 = EXPAND EDGE fin_E10_ex2 OUTSIDE BY FIN_SPACE
fin_B11 = fin_B11a NOT fin_B11_ex2 
fin_lay11o = fin_lay10o NOT fin_B11 
fin_E10 = fin_B11 INSIDE EDGE diffin9 
fin_A11 = EXPAND EDGE fin_E10 INSIDE BY FIN_PITCH
diffin10 = diffin9 NOT fin_A10 
fin_E11_ori = fin_A11 INSIDE EDGE diffin10 
fin_B12_ori = EXPAND EDGE fin_E11_ori OUTSIDE BY FIN_SPACE
fin_E11_ex1 = LENGTH fin_E11_ori == FIN_WIDTH
fin_B12_ex1 = EXPAND EDGE fin_E11_ex1 OUTSIDE BY FIN_SPACE
fin_B12a = fin_B12_ori NOT fin_B12_ex1 
fin_E11_ex2 = LENGTH fin_E11_ori == FIN_PITCH
fin_B12_ex2 = EXPAND EDGE fin_E11_ex2 OUTSIDE BY FIN_SPACE
fin_B12 = fin_B12a NOT fin_B12_ex2 
fin_lay12o = fin_lay11o NOT fin_B12 
fin_E11 = fin_B12 INSIDE EDGE diffin10 
fin_A12 = EXPAND EDGE fin_E11 INSIDE BY FIN_PITCH
diffin11 = diffin10 NOT fin_A11 
fin_E12_ori = fin_A12 INSIDE EDGE diffin11 
fin_B13_ori = EXPAND EDGE fin_E12_ori OUTSIDE BY FIN_SPACE
fin_E12_ex1 = LENGTH fin_E12_ori == FIN_WIDTH
fin_B13_ex1 = EXPAND EDGE fin_E12_ex1 OUTSIDE BY FIN_SPACE
fin_B13a = fin_B13_ori NOT fin_B13_ex1 
fin_E12_ex2 = LENGTH fin_E12_ori == FIN_PITCH
fin_B13_ex2 = EXPAND EDGE fin_E12_ex2 OUTSIDE BY FIN_SPACE
fin_B13 = fin_B13a NOT fin_B13_ex2 
fin_lay13o = fin_lay12o NOT fin_B13 
fin_E12 = fin_B13 INSIDE EDGE diffin11 
fin_A13 = EXPAND EDGE fin_E12 INSIDE BY FIN_PITCH
diffin12 = diffin11 NOT fin_A12 
fin_E13_ori = fin_A13 INSIDE EDGE diffin12 
fin_B14_ori = EXPAND EDGE fin_E13_ori OUTSIDE BY FIN_SPACE
fin_E13_ex1 = LENGTH fin_E13_ori == FIN_WIDTH
fin_B14_ex1 = EXPAND EDGE fin_E13_ex1 OUTSIDE BY FIN_SPACE
fin_B14a = fin_B14_ori NOT fin_B14_ex1 
fin_E13_ex2 = LENGTH fin_E13_ori == FIN_PITCH
fin_B14_ex2 = EXPAND EDGE fin_E13_ex2 OUTSIDE BY FIN_SPACE
fin_B14 = fin_B14a NOT fin_B14_ex2 
fin_lay14o = fin_lay13o NOT fin_B14 
fin_E13 = fin_B14 INSIDE EDGE diffin12 
fin_A14 = EXPAND EDGE fin_E13 INSIDE BY FIN_PITCH
diffin13 = diffin12 NOT fin_A13 
fin_E14_ori = fin_A14 INSIDE EDGE diffin13 
fin_B15_ori = EXPAND EDGE fin_E14_ori OUTSIDE BY FIN_SPACE
fin_E14_ex1 = LENGTH fin_E14_ori == FIN_WIDTH
fin_B15_ex1 = EXPAND EDGE fin_E14_ex1 OUTSIDE BY FIN_SPACE
fin_B15a = fin_B15_ori NOT fin_B15_ex1 
fin_E14_ex2 = LENGTH fin_E14_ori == FIN_PITCH
fin_B15_ex2 = EXPAND EDGE fin_E14_ex2 OUTSIDE BY FIN_SPACE
fin_B15 = fin_B15a NOT fin_B15_ex2 
fin_lay15o = fin_lay14o NOT fin_B15 
fin_E14 = fin_B15 INSIDE EDGE diffin13 
fin_A15 = EXPAND EDGE fin_E14 INSIDE BY FIN_PITCH
diffin14 = diffin13 NOT fin_A14 
fin_E15_ori = fin_A15 INSIDE EDGE diffin14 
fin_B16_ori = EXPAND EDGE fin_E15_ori OUTSIDE BY FIN_SPACE
fin_E15_ex1 = LENGTH fin_E15_ori == FIN_WIDTH
fin_B16_ex1 = EXPAND EDGE fin_E15_ex1 OUTSIDE BY FIN_SPACE
fin_B16a = fin_B16_ori NOT fin_B16_ex1 
fin_E15_ex2 = LENGTH fin_E15_ori == FIN_PITCH
fin_B16_ex2 = EXPAND EDGE fin_E15_ex2 OUTSIDE BY FIN_SPACE
fin_B16 = fin_B16a NOT fin_B16_ex2 
fin_lay16o = fin_lay15o NOT fin_B16 
fin_E15 = fin_B16 INSIDE EDGE diffin14 
fin_A16 = EXPAND EDGE fin_E15 INSIDE BY FIN_PITCH
diffin15 = diffin14 NOT fin_A15 
fin_E16_ori = fin_A16 INSIDE EDGE diffin15 
fin_B17_ori = EXPAND EDGE fin_E16_ori OUTSIDE BY FIN_SPACE
fin_E16_ex1 = LENGTH fin_E16_ori == FIN_WIDTH
fin_B17_ex1 = EXPAND EDGE fin_E16_ex1 OUTSIDE BY FIN_SPACE
fin_B17a = fin_B17_ori NOT fin_B17_ex1 
fin_E16_ex2 = LENGTH fin_E16_ori == FIN_PITCH
fin_B17_ex2 = EXPAND EDGE fin_E16_ex2 OUTSIDE BY FIN_SPACE
fin_B17 = fin_B17a NOT fin_B17_ex2 
fin_lay17o = fin_lay16o NOT fin_B17 
fin_E16 = fin_B17 INSIDE EDGE diffin15 
fin_A17 = EXPAND EDGE fin_E16 INSIDE BY FIN_PITCH
diffin16 = diffin15 NOT fin_A16 
fin_E17_ori = fin_A17 INSIDE EDGE diffin16 
fin_B18_ori = EXPAND EDGE fin_E17_ori OUTSIDE BY FIN_SPACE
fin_E17_ex1 = LENGTH fin_E17_ori == FIN_WIDTH
fin_B18_ex1 = EXPAND EDGE fin_E17_ex1 OUTSIDE BY FIN_SPACE
fin_B18a = fin_B18_ori NOT fin_B18_ex1 
fin_E17_ex2 = LENGTH fin_E17_ori == FIN_PITCH
fin_B18_ex2 = EXPAND EDGE fin_E17_ex2 OUTSIDE BY FIN_SPACE
fin_B18 = fin_B18a NOT fin_B18_ex2 
fin_lay18o = fin_lay17o NOT fin_B18 
fin_E17 = fin_B18 INSIDE EDGE diffin16 
fin_A18 = EXPAND EDGE fin_E17 INSIDE BY FIN_PITCH
diffin17 = diffin16 NOT fin_A17 
fin_E18_ori = fin_A18 INSIDE EDGE diffin17 
fin_B19_ori = EXPAND EDGE fin_E18_ori OUTSIDE BY FIN_SPACE
fin_E18_ex1 = LENGTH fin_E18_ori == FIN_WIDTH
fin_B19_ex1 = EXPAND EDGE fin_E18_ex1 OUTSIDE BY FIN_SPACE
fin_B19a = fin_B19_ori NOT fin_B19_ex1 
fin_E18_ex2 = LENGTH fin_E18_ori == FIN_PITCH
fin_B19_ex2 = EXPAND EDGE fin_E18_ex2 OUTSIDE BY FIN_SPACE
fin_B19 = fin_B19a NOT fin_B19_ex2 
fin_lay19o = fin_lay18o NOT fin_B19 
fin_E18 = fin_B19 INSIDE EDGE diffin17 
fin_A19 = EXPAND EDGE fin_E18 INSIDE BY FIN_PITCH
diffin18 = diffin17 NOT fin_A18 
fin_E19_ori = fin_A19 INSIDE EDGE diffin18 
fin_B20_ori = EXPAND EDGE fin_E19_ori OUTSIDE BY FIN_SPACE
fin_E19_ex1 = LENGTH fin_E19_ori == FIN_WIDTH
fin_B20_ex1 = EXPAND EDGE fin_E19_ex1 OUTSIDE BY FIN_SPACE
fin_B20a = fin_B20_ori NOT fin_B20_ex1 
fin_E19_ex2 = LENGTH fin_E19_ori == FIN_PITCH
fin_B20_ex2 = EXPAND EDGE fin_E19_ex2 OUTSIDE BY FIN_SPACE
fin_B20 = fin_B20a NOT fin_B20_ex2 
fin_lay20o = fin_lay19o NOT fin_B20 
fin_E19 = fin_B20 INSIDE EDGE diffin18 
fin_A20 = EXPAND EDGE fin_E19 INSIDE BY FIN_PITCH
diffin19 = diffin18 NOT fin_A19 
fin_E20_ori = fin_A20 INSIDE EDGE diffin19 
fin_B21_ori = EXPAND EDGE fin_E20_ori OUTSIDE BY FIN_SPACE
fin_E20_ex1 = LENGTH fin_E20_ori == FIN_WIDTH
fin_B21_ex1 = EXPAND EDGE fin_E20_ex1 OUTSIDE BY FIN_SPACE
fin_B21a = fin_B21_ori NOT fin_B21_ex1 
fin_E20_ex2 = LENGTH fin_E20_ori == FIN_PITCH
fin_B21_ex2 = EXPAND EDGE fin_E20_ex2 OUTSIDE BY FIN_SPACE
fin_B21 = fin_B21a NOT fin_B21_ex2 
fin_lay21o = fin_lay20o NOT fin_B21 
fin_E20 = fin_B21 INSIDE EDGE diffin19 
fin_A21 = EXPAND EDGE fin_E20 INSIDE BY FIN_PITCH
diffin20 = diffin19 NOT fin_A20 
fin_E21_ori = fin_A21 INSIDE EDGE diffin20 
fin_B22_ori = EXPAND EDGE fin_E21_ori OUTSIDE BY FIN_SPACE
fin_E21_ex1 = LENGTH fin_E21_ori == FIN_WIDTH
fin_B22_ex1 = EXPAND EDGE fin_E21_ex1 OUTSIDE BY FIN_SPACE
fin_B22a = fin_B22_ori NOT fin_B22_ex1 
fin_E21_ex2 = LENGTH fin_E21_ori == FIN_PITCH
fin_B22_ex2 = EXPAND EDGE fin_E21_ex2 OUTSIDE BY FIN_SPACE
fin_B22 = fin_B22a NOT fin_B22_ex2 
fin_lay22o = fin_lay21o NOT fin_B22 
fin_E21 = fin_B22 INSIDE EDGE diffin20 
fin_A22 = EXPAND EDGE fin_E21 INSIDE BY FIN_PITCH
diffin21 = diffin20 NOT fin_A21 
fin_E22_ori = fin_A22 INSIDE EDGE diffin21 
fin_B23_ori = EXPAND EDGE fin_E22_ori OUTSIDE BY FIN_SPACE
fin_E22_ex1 = LENGTH fin_E22_ori == FIN_WIDTH
fin_B23_ex1 = EXPAND EDGE fin_E22_ex1 OUTSIDE BY FIN_SPACE
fin_B23a = fin_B23_ori NOT fin_B23_ex1 
fin_E22_ex2 = LENGTH fin_E22_ori == FIN_PITCH
fin_B23_ex2 = EXPAND EDGE fin_E22_ex2 OUTSIDE BY FIN_SPACE
fin_B23 = fin_B23a NOT fin_B23_ex2 
fin_lay23o = fin_lay22o NOT fin_B23 
fin_E22 = fin_B23 INSIDE EDGE diffin21 
fin_A23 = EXPAND EDGE fin_E22 INSIDE BY FIN_PITCH
diffin22 = diffin21 NOT fin_A22 
fin_E23_ori = fin_A23 INSIDE EDGE diffin22 
fin_B24_ori = EXPAND EDGE fin_E23_ori OUTSIDE BY FIN_SPACE
fin_E23_ex1 = LENGTH fin_E23_ori == FIN_WIDTH
fin_B24_ex1 = EXPAND EDGE fin_E23_ex1 OUTSIDE BY FIN_SPACE
fin_B24a = fin_B24_ori NOT fin_B24_ex1 
fin_E23_ex2 = LENGTH fin_E23_ori == FIN_PITCH
fin_B24_ex2 = EXPAND EDGE fin_E23_ex2 OUTSIDE BY FIN_SPACE
fin_B24 = fin_B24a NOT fin_B24_ex2 
fin_lay24o = fin_lay23o NOT fin_B24 
fin_E23 = fin_B24 INSIDE EDGE diffin22 
fin_A24 = EXPAND EDGE fin_E23 INSIDE BY FIN_PITCH
diffin23 = diffin22 NOT fin_A23 
fin_E24_ori = fin_A24 INSIDE EDGE diffin23 
fin_B25_ori = EXPAND EDGE fin_E24_ori OUTSIDE BY FIN_SPACE
fin_E24_ex1 = LENGTH fin_E24_ori == FIN_WIDTH
fin_B25_ex1 = EXPAND EDGE fin_E24_ex1 OUTSIDE BY FIN_SPACE
fin_B25a = fin_B25_ori NOT fin_B25_ex1 
fin_E24_ex2 = LENGTH fin_E24_ori == FIN_PITCH
fin_B25_ex2 = EXPAND EDGE fin_E24_ex2 OUTSIDE BY FIN_SPACE
fin_B25 = fin_B25a NOT fin_B25_ex2 
fin_lay25o = fin_lay24o NOT fin_B25 
fin_E24 = fin_B25 INSIDE EDGE diffin23 
fin_A25 = EXPAND EDGE fin_E24 INSIDE BY FIN_PITCH
diffin24 = diffin23 NOT fin_A24 
fin_E25_ori = fin_A25 INSIDE EDGE diffin24 
fin_B26_ori = EXPAND EDGE fin_E25_ori OUTSIDE BY FIN_SPACE
fin_E25_ex1 = LENGTH fin_E25_ori == FIN_WIDTH
fin_B26_ex1 = EXPAND EDGE fin_E25_ex1 OUTSIDE BY FIN_SPACE
fin_B26a = fin_B26_ori NOT fin_B26_ex1 
fin_E25_ex2 = LENGTH fin_E25_ori == FIN_PITCH
fin_B26_ex2 = EXPAND EDGE fin_E25_ex2 OUTSIDE BY FIN_SPACE
fin_B26 = fin_B26a NOT fin_B26_ex2 
fin_lay26o = fin_lay25o NOT fin_B26 
fin_E25 = fin_B26 INSIDE EDGE diffin24 
fin_A26 = EXPAND EDGE fin_E25 INSIDE BY FIN_PITCH
diffin25 = diffin24 NOT fin_A25 
fin_E26_ori = fin_A26 INSIDE EDGE diffin25 
fin_B27_ori = EXPAND EDGE fin_E26_ori OUTSIDE BY FIN_SPACE
fin_E26_ex1 = LENGTH fin_E26_ori == FIN_WIDTH
fin_B27_ex1 = EXPAND EDGE fin_E26_ex1 OUTSIDE BY FIN_SPACE
fin_B27a = fin_B27_ori NOT fin_B27_ex1 
fin_E26_ex2 = LENGTH fin_E26_ori == FIN_PITCH
fin_B27_ex2 = EXPAND EDGE fin_E26_ex2 OUTSIDE BY FIN_SPACE
fin_B27 = fin_B27a NOT fin_B27_ex2 
fin_lay27o = fin_lay26o NOT fin_B27 
fin_E26 = fin_B27 INSIDE EDGE diffin25 
fin_A27 = EXPAND EDGE fin_E26 INSIDE BY FIN_PITCH
diffin26 = diffin25 NOT fin_A26 
fin_E27_ori = fin_A27 INSIDE EDGE diffin26 
fin_B28_ori = EXPAND EDGE fin_E27_ori OUTSIDE BY FIN_SPACE
fin_E27_ex1 = LENGTH fin_E27_ori == FIN_WIDTH
fin_B28_ex1 = EXPAND EDGE fin_E27_ex1 OUTSIDE BY FIN_SPACE
fin_B28a = fin_B28_ori NOT fin_B28_ex1 
fin_E27_ex2 = LENGTH fin_E27_ori == FIN_PITCH
fin_B28_ex2 = EXPAND EDGE fin_E27_ex2 OUTSIDE BY FIN_SPACE
fin_B28 = fin_B28a NOT fin_B28_ex2 
fin_lay28o = fin_lay27o NOT fin_B28 
fin_E27 = fin_B28 INSIDE EDGE diffin26 
fin_A28 = EXPAND EDGE fin_E27 INSIDE BY FIN_PITCH
diffin27 = diffin26 NOT fin_A27 
fin_E28_ori = fin_A28 INSIDE EDGE diffin27 
fin_B29_ori = EXPAND EDGE fin_E28_ori OUTSIDE BY FIN_SPACE
fin_E28_ex1 = LENGTH fin_E28_ori == FIN_WIDTH
fin_B29_ex1 = EXPAND EDGE fin_E28_ex1 OUTSIDE BY FIN_SPACE
fin_B29a = fin_B29_ori NOT fin_B29_ex1 
fin_E28_ex2 = LENGTH fin_E28_ori == FIN_PITCH
fin_B29_ex2 = EXPAND EDGE fin_E28_ex2 OUTSIDE BY FIN_SPACE
fin_B29 = fin_B29a NOT fin_B29_ex2 
fin_lay29o = fin_lay28o NOT fin_B29 
fin_E28 = fin_B29 INSIDE EDGE diffin27 
fin_A29 = EXPAND EDGE fin_E28 INSIDE BY FIN_PITCH
diffin28 = diffin27 NOT fin_A28 
fin_E29_ori = fin_A29 INSIDE EDGE diffin28 
fin_B30_ori = EXPAND EDGE fin_E29_ori OUTSIDE BY FIN_SPACE
fin_E29_ex1 = LENGTH fin_E29_ori == FIN_WIDTH
fin_B30_ex1 = EXPAND EDGE fin_E29_ex1 OUTSIDE BY FIN_SPACE
fin_B30a = fin_B30_ori NOT fin_B30_ex1 
fin_E29_ex2 = LENGTH fin_E29_ori == FIN_PITCH
fin_B30_ex2 = EXPAND EDGE fin_E29_ex2 OUTSIDE BY FIN_SPACE
fin_B30 = fin_B30a NOT fin_B30_ex2 
fin_lay30o = fin_lay29o NOT fin_B30 
fin_E29 = fin_B30 INSIDE EDGE diffin28 
fin_A30 = EXPAND EDGE fin_E29 INSIDE BY FIN_PITCH
diffin29 = diffin28 NOT fin_A29 
fin_E30_ori = fin_A30 INSIDE EDGE diffin29 
fin_B31_ori = EXPAND EDGE fin_E30_ori OUTSIDE BY FIN_SPACE
fin_E30_ex1 = LENGTH fin_E30_ori == FIN_WIDTH
fin_B31_ex1 = EXPAND EDGE fin_E30_ex1 OUTSIDE BY FIN_SPACE
fin_B31a = fin_B31_ori NOT fin_B31_ex1 
fin_E30_ex2 = LENGTH fin_E30_ori == FIN_PITCH
fin_B31_ex2 = EXPAND EDGE fin_E30_ex2 OUTSIDE BY FIN_SPACE
fin_B31 = fin_B31a NOT fin_B31_ex2 
fin_lay31o = fin_lay30o NOT fin_B31 
fin_E30 = fin_B31 INSIDE EDGE diffin29 
fin_A31 = EXPAND EDGE fin_E30 INSIDE BY FIN_PITCH
diffin30 = diffin29 NOT fin_A30 
fin_E31_ori = fin_A31 INSIDE EDGE diffin30 
fin_B32_ori = EXPAND EDGE fin_E31_ori OUTSIDE BY FIN_SPACE
fin_E31_ex1 = LENGTH fin_E31_ori == FIN_WIDTH
fin_B32_ex1 = EXPAND EDGE fin_E31_ex1 OUTSIDE BY FIN_SPACE
fin_B32a = fin_B32_ori NOT fin_B32_ex1 
fin_E31_ex2 = LENGTH fin_E31_ori == FIN_PITCH
fin_B32_ex2 = EXPAND EDGE fin_E31_ex2 OUTSIDE BY FIN_SPACE
fin_B32 = fin_B32a NOT fin_B32_ex2 
fin_lay32o = fin_lay31o NOT fin_B32 
fin_E31 = fin_B32 INSIDE EDGE diffin30 
fin_A32 = EXPAND EDGE fin_E31 INSIDE BY FIN_PITCH
diffin31 = diffin30 NOT fin_A31 
fin_E32_ori = fin_A32 INSIDE EDGE diffin31 
fin_B33_ori = EXPAND EDGE fin_E32_ori OUTSIDE BY FIN_SPACE
fin_E32_ex1 = LENGTH fin_E32_ori == FIN_WIDTH
fin_B33_ex1 = EXPAND EDGE fin_E32_ex1 OUTSIDE BY FIN_SPACE
fin_B33a = fin_B33_ori NOT fin_B33_ex1 
fin_E32_ex2 = LENGTH fin_E32_ori == FIN_PITCH
fin_B33_ex2 = EXPAND EDGE fin_E32_ex2 OUTSIDE BY FIN_SPACE
fin_B33 = fin_B33a NOT fin_B33_ex2 
fin_lay33o = fin_lay32o NOT fin_B33 
fin_E32 = fin_B33 INSIDE EDGE diffin31 
fin_A33 = EXPAND EDGE fin_E32 INSIDE BY FIN_PITCH
diffin32 = diffin31 NOT fin_A32 
fin_E33_ori = fin_A33 INSIDE EDGE diffin32 
fin_B34_ori = EXPAND EDGE fin_E33_ori OUTSIDE BY FIN_SPACE
fin_E33_ex1 = LENGTH fin_E33_ori == FIN_WIDTH
fin_B34_ex1 = EXPAND EDGE fin_E33_ex1 OUTSIDE BY FIN_SPACE
fin_B34a = fin_B34_ori NOT fin_B34_ex1 
fin_E33_ex2 = LENGTH fin_E33_ori == FIN_PITCH
fin_B34_ex2 = EXPAND EDGE fin_E33_ex2 OUTSIDE BY FIN_SPACE
fin_B34 = fin_B34a NOT fin_B34_ex2 
fin_lay34o = fin_lay33o NOT fin_B34 
fin_E33 = fin_B34 INSIDE EDGE diffin32 
fin_A34 = EXPAND EDGE fin_E33 INSIDE BY FIN_PITCH
diffin33 = diffin32 NOT fin_A33 
fin_E34_ori = fin_A34 INSIDE EDGE diffin33 
fin_B35_ori = EXPAND EDGE fin_E34_ori OUTSIDE BY FIN_SPACE
fin_E34_ex1 = LENGTH fin_E34_ori == FIN_WIDTH
fin_B35_ex1 = EXPAND EDGE fin_E34_ex1 OUTSIDE BY FIN_SPACE
fin_B35a = fin_B35_ori NOT fin_B35_ex1 
fin_E34_ex2 = LENGTH fin_E34_ori == FIN_PITCH
fin_B35_ex2 = EXPAND EDGE fin_E34_ex2 OUTSIDE BY FIN_SPACE
fin_B35 = fin_B35a NOT fin_B35_ex2 
fin_lay35o = fin_lay34o NOT fin_B35 
fin_E34 = fin_B35 INSIDE EDGE diffin33 
fin_A35 = EXPAND EDGE fin_E34 INSIDE BY FIN_PITCH
diffin34 = diffin33 NOT fin_A34 
fin_E35_ori = fin_A35 INSIDE EDGE diffin34 
fin_B36_ori = EXPAND EDGE fin_E35_ori OUTSIDE BY FIN_SPACE
fin_E35_ex1 = LENGTH fin_E35_ori == FIN_WIDTH
fin_B36_ex1 = EXPAND EDGE fin_E35_ex1 OUTSIDE BY FIN_SPACE
fin_B36a = fin_B36_ori NOT fin_B36_ex1 
fin_E35_ex2 = LENGTH fin_E35_ori == FIN_PITCH
fin_B36_ex2 = EXPAND EDGE fin_E35_ex2 OUTSIDE BY FIN_SPACE
fin_B36 = fin_B36a NOT fin_B36_ex2 
fin_lay36o = fin_lay35o NOT fin_B36 
fin_E35 = fin_B36 INSIDE EDGE diffin34 
fin_A36 = EXPAND EDGE fin_E35 INSIDE BY FIN_PITCH
diffin35 = diffin34 NOT fin_A35 
fin_E36_ori = fin_A36 INSIDE EDGE diffin35 
fin_B37_ori = EXPAND EDGE fin_E36_ori OUTSIDE BY FIN_SPACE
fin_E36_ex1 = LENGTH fin_E36_ori == FIN_WIDTH
fin_B37_ex1 = EXPAND EDGE fin_E36_ex1 OUTSIDE BY FIN_SPACE
fin_B37a = fin_B37_ori NOT fin_B37_ex1 
fin_E36_ex2 = LENGTH fin_E36_ori == FIN_PITCH
fin_B37_ex2 = EXPAND EDGE fin_E36_ex2 OUTSIDE BY FIN_SPACE
fin_B37 = fin_B37a NOT fin_B37_ex2 
fin_lay37o = fin_lay36o NOT fin_B37 
fin_E36 = fin_B37 INSIDE EDGE diffin35 
fin_A37 = EXPAND EDGE fin_E36 INSIDE BY FIN_PITCH
diffin36 = diffin35 NOT fin_A36 
fin_E37_ori = fin_A37 INSIDE EDGE diffin36 
fin_B38_ori = EXPAND EDGE fin_E37_ori OUTSIDE BY FIN_SPACE
fin_E37_ex1 = LENGTH fin_E37_ori == FIN_WIDTH
fin_B38_ex1 = EXPAND EDGE fin_E37_ex1 OUTSIDE BY FIN_SPACE
fin_B38a = fin_B38_ori NOT fin_B38_ex1 
fin_E37_ex2 = LENGTH fin_E37_ori == FIN_PITCH
fin_B38_ex2 = EXPAND EDGE fin_E37_ex2 OUTSIDE BY FIN_SPACE
fin_B38 = fin_B38a NOT fin_B38_ex2 
fin_lay38o = fin_lay37o NOT fin_B38 
fin_E37 = fin_B38 INSIDE EDGE diffin36 
fin_A38 = EXPAND EDGE fin_E37 INSIDE BY FIN_PITCH
diffin37 = diffin36 NOT fin_A37 
fin_E38_ori = fin_A38 INSIDE EDGE diffin37 
fin_B39_ori = EXPAND EDGE fin_E38_ori OUTSIDE BY FIN_SPACE
fin_E38_ex1 = LENGTH fin_E38_ori == FIN_WIDTH
fin_B39_ex1 = EXPAND EDGE fin_E38_ex1 OUTSIDE BY FIN_SPACE
fin_B39a = fin_B39_ori NOT fin_B39_ex1 
fin_E38_ex2 = LENGTH fin_E38_ori == FIN_PITCH
fin_B39_ex2 = EXPAND EDGE fin_E38_ex2 OUTSIDE BY FIN_SPACE
fin_B39 = fin_B39a NOT fin_B39_ex2 
fin_lay39o = fin_lay38o NOT fin_B39 
fin_E38 = fin_B39 INSIDE EDGE diffin37 
fin_A39 = EXPAND EDGE fin_E38 INSIDE BY FIN_PITCH
diffin38 = diffin37 NOT fin_A38 
fin_E39_ori = fin_A39 INSIDE EDGE diffin38 
fin_B40_ori = EXPAND EDGE fin_E39_ori OUTSIDE BY FIN_SPACE
fin_E39_ex1 = LENGTH fin_E39_ori == FIN_WIDTH
fin_B40_ex1 = EXPAND EDGE fin_E39_ex1 OUTSIDE BY FIN_SPACE
fin_B40a = fin_B40_ori NOT fin_B40_ex1 
fin_E39_ex2 = LENGTH fin_E39_ori == FIN_PITCH
fin_B40_ex2 = EXPAND EDGE fin_E39_ex2 OUTSIDE BY FIN_SPACE
fin_B40 = fin_B40a NOT fin_B40_ex2 
fin_lay40o = fin_lay39o NOT fin_B40 
fin_E39 = fin_B40 INSIDE EDGE diffin38 
fin_A40 = EXPAND EDGE fin_E39 INSIDE BY FIN_PITCH
diffin39 = diffin38 NOT fin_A39 
fin_E40_ori = fin_A40 INSIDE EDGE diffin39 
fin_B41_ori = EXPAND EDGE fin_E40_ori OUTSIDE BY FIN_SPACE
fin_E40_ex1 = LENGTH fin_E40_ori == FIN_WIDTH
fin_B41_ex1 = EXPAND EDGE fin_E40_ex1 OUTSIDE BY FIN_SPACE
fin_B41a = fin_B41_ori NOT fin_B41_ex1 
fin_E40_ex2 = LENGTH fin_E40_ori == FIN_PITCH
fin_B41_ex2 = EXPAND EDGE fin_E40_ex2 OUTSIDE BY FIN_SPACE
fin_B41 = fin_B41a NOT fin_B41_ex2 
fin_lay41o = fin_lay40o NOT fin_B41 
fin_E40 = fin_B41 INSIDE EDGE diffin39 
fin_A41 = EXPAND EDGE fin_E40 INSIDE BY FIN_PITCH
diffin40 = diffin39 NOT fin_A40 
fin_E41_ori = fin_A41 INSIDE EDGE diffin40 
fin_B42_ori = EXPAND EDGE fin_E41_ori OUTSIDE BY FIN_SPACE
fin_E41_ex1 = LENGTH fin_E41_ori == FIN_WIDTH
fin_B42_ex1 = EXPAND EDGE fin_E41_ex1 OUTSIDE BY FIN_SPACE
fin_B42a = fin_B42_ori NOT fin_B42_ex1 
fin_E41_ex2 = LENGTH fin_E41_ori == FIN_PITCH
fin_B42_ex2 = EXPAND EDGE fin_E41_ex2 OUTSIDE BY FIN_SPACE
fin_B42 = fin_B42a NOT fin_B42_ex2 
fin_lay42o = fin_lay41o NOT fin_B42 
fin_E41 = fin_B42 INSIDE EDGE diffin40 
fin_A42 = EXPAND EDGE fin_E41 INSIDE BY FIN_PITCH
diffin41 = diffin40 NOT fin_A41 
fin_E42_ori = fin_A42 INSIDE EDGE diffin41 
fin_B43_ori = EXPAND EDGE fin_E42_ori OUTSIDE BY FIN_SPACE
fin_E42_ex1 = LENGTH fin_E42_ori == FIN_WIDTH
fin_B43_ex1 = EXPAND EDGE fin_E42_ex1 OUTSIDE BY FIN_SPACE
fin_B43a = fin_B43_ori NOT fin_B43_ex1 
fin_E42_ex2 = LENGTH fin_E42_ori == FIN_PITCH
fin_B43_ex2 = EXPAND EDGE fin_E42_ex2 OUTSIDE BY FIN_SPACE
fin_B43 = fin_B43a NOT fin_B43_ex2 
fin_lay43o = fin_lay42o NOT fin_B43 
fin_E42 = fin_B43 INSIDE EDGE diffin41 
fin_A43 = EXPAND EDGE fin_E42 INSIDE BY FIN_PITCH
diffin42 = diffin41 NOT fin_A42 
fin_E43_ori = fin_A43 INSIDE EDGE diffin42 
fin_B44_ori = EXPAND EDGE fin_E43_ori OUTSIDE BY FIN_SPACE
fin_E43_ex1 = LENGTH fin_E43_ori == FIN_WIDTH
fin_B44_ex1 = EXPAND EDGE fin_E43_ex1 OUTSIDE BY FIN_SPACE
fin_B44a = fin_B44_ori NOT fin_B44_ex1 
fin_E43_ex2 = LENGTH fin_E43_ori == FIN_PITCH
fin_B44_ex2 = EXPAND EDGE fin_E43_ex2 OUTSIDE BY FIN_SPACE
fin_B44 = fin_B44a NOT fin_B44_ex2 
fin_lay44o = fin_lay43o NOT fin_B44 
fin_E43 = fin_B44 INSIDE EDGE diffin42 
fin_A44 = EXPAND EDGE fin_E43 INSIDE BY FIN_PITCH
diffin43 = diffin42 NOT fin_A43 
fin_E44_ori = fin_A44 INSIDE EDGE diffin43 
fin_B45_ori = EXPAND EDGE fin_E44_ori OUTSIDE BY FIN_SPACE
fin_E44_ex1 = LENGTH fin_E44_ori == FIN_WIDTH
fin_B45_ex1 = EXPAND EDGE fin_E44_ex1 OUTSIDE BY FIN_SPACE
fin_B45a = fin_B45_ori NOT fin_B45_ex1 
fin_E44_ex2 = LENGTH fin_E44_ori == FIN_PITCH
fin_B45_ex2 = EXPAND EDGE fin_E44_ex2 OUTSIDE BY FIN_SPACE
fin_B45 = fin_B45a NOT fin_B45_ex2 
fin_lay45o = fin_lay44o NOT fin_B45 
fin_E44 = fin_B45 INSIDE EDGE diffin43 
fin_A45 = EXPAND EDGE fin_E44 INSIDE BY FIN_PITCH
diffin44 = diffin43 NOT fin_A44 
fin_E45_ori = fin_A45 INSIDE EDGE diffin44 
fin_B46_ori = EXPAND EDGE fin_E45_ori OUTSIDE BY FIN_SPACE
fin_E45_ex1 = LENGTH fin_E45_ori == FIN_WIDTH
fin_B46_ex1 = EXPAND EDGE fin_E45_ex1 OUTSIDE BY FIN_SPACE
fin_B46a = fin_B46_ori NOT fin_B46_ex1 
fin_E45_ex2 = LENGTH fin_E45_ori == FIN_PITCH
fin_B46_ex2 = EXPAND EDGE fin_E45_ex2 OUTSIDE BY FIN_SPACE
fin_B46 = fin_B46a NOT fin_B46_ex2 
fin_lay46o = fin_lay45o NOT fin_B46 
fin_E45 = fin_B46 INSIDE EDGE diffin44 
fin_A46 = EXPAND EDGE fin_E45 INSIDE BY FIN_PITCH
diffin45 = diffin44 NOT fin_A45 
fin_E46_ori = fin_A46 INSIDE EDGE diffin45 
fin_B47_ori = EXPAND EDGE fin_E46_ori OUTSIDE BY FIN_SPACE
fin_E46_ex1 = LENGTH fin_E46_ori == FIN_WIDTH
fin_B47_ex1 = EXPAND EDGE fin_E46_ex1 OUTSIDE BY FIN_SPACE
fin_B47a = fin_B47_ori NOT fin_B47_ex1 
fin_E46_ex2 = LENGTH fin_E46_ori == FIN_PITCH
fin_B47_ex2 = EXPAND EDGE fin_E46_ex2 OUTSIDE BY FIN_SPACE
fin_B47 = fin_B47a NOT fin_B47_ex2 
fin_lay47o = fin_lay46o NOT fin_B47 
fin_E46 = fin_B47 INSIDE EDGE diffin45 
fin_A47 = EXPAND EDGE fin_E46 INSIDE BY FIN_PITCH
diffin46 = diffin45 NOT fin_A46 
fin_E47_ori = fin_A47 INSIDE EDGE diffin46 
fin_B48_ori = EXPAND EDGE fin_E47_ori OUTSIDE BY FIN_SPACE
fin_E47_ex1 = LENGTH fin_E47_ori == FIN_WIDTH
fin_B48_ex1 = EXPAND EDGE fin_E47_ex1 OUTSIDE BY FIN_SPACE
fin_B48a = fin_B48_ori NOT fin_B48_ex1 
fin_E47_ex2 = LENGTH fin_E47_ori == FIN_PITCH
fin_B48_ex2 = EXPAND EDGE fin_E47_ex2 OUTSIDE BY FIN_SPACE
fin_B48 = fin_B48a NOT fin_B48_ex2 
fin_lay48o = fin_lay47o NOT fin_B48 
fin_E47 = fin_B48 INSIDE EDGE diffin46 
fin_A48 = EXPAND EDGE fin_E47 INSIDE BY FIN_PITCH
diffin47 = diffin46 NOT fin_A47 
fin_E48_ori = fin_A48 INSIDE EDGE diffin47 
fin_B49_ori = EXPAND EDGE fin_E48_ori OUTSIDE BY FIN_SPACE
fin_E48_ex1 = LENGTH fin_E48_ori == FIN_WIDTH
fin_B49_ex1 = EXPAND EDGE fin_E48_ex1 OUTSIDE BY FIN_SPACE
fin_B49a = fin_B49_ori NOT fin_B49_ex1 
fin_E48_ex2 = LENGTH fin_E48_ori == FIN_PITCH
fin_B49_ex2 = EXPAND EDGE fin_E48_ex2 OUTSIDE BY FIN_SPACE
fin_B49 = fin_B49a NOT fin_B49_ex2 
fin_lay49o = fin_lay48o NOT fin_B49 
fin_E48 = fin_B49 INSIDE EDGE diffin47 
fin_A49 = EXPAND EDGE fin_E48 INSIDE BY FIN_PITCH
diffin48 = diffin47 NOT fin_A48 
fin_E49_ori = fin_A49 INSIDE EDGE diffin48 
fin_B50_ori = EXPAND EDGE fin_E49_ori OUTSIDE BY FIN_SPACE
fin_E49_ex1 = LENGTH fin_E49_ori == FIN_WIDTH
fin_B50_ex1 = EXPAND EDGE fin_E49_ex1 OUTSIDE BY FIN_SPACE
fin_B50a = fin_B50_ori NOT fin_B50_ex1 
fin_E49_ex2 = LENGTH fin_E49_ori == FIN_PITCH
fin_B50_ex2 = EXPAND EDGE fin_E49_ex2 OUTSIDE BY FIN_SPACE
fin_B50 = fin_B50a NOT fin_B50_ex2 
fin_lay50o = fin_lay49o NOT fin_B50 
fin_E49 = fin_B50 INSIDE EDGE diffin48 
fin_A50 = EXPAND EDGE fin_E49 INSIDE BY FIN_PITCH
diffin49 = diffin48 NOT fin_A49 
fin_E50_ori = fin_A50 INSIDE EDGE diffin49 
fin_B51_ori = EXPAND EDGE fin_E50_ori OUTSIDE BY FIN_SPACE
fin_E50_ex1 = LENGTH fin_E50_ori == FIN_WIDTH
fin_B51_ex1 = EXPAND EDGE fin_E50_ex1 OUTSIDE BY FIN_SPACE
fin_B51a = fin_B51_ori NOT fin_B51_ex1 
fin_E50_ex2 = LENGTH fin_E50_ori == FIN_PITCH
fin_B51_ex2 = EXPAND EDGE fin_E50_ex2 OUTSIDE BY FIN_SPACE
fin_B51 = fin_B51a NOT fin_B51_ex2 
fin_lay51o = fin_lay50o NOT fin_B51 
fin_E50 = fin_B51 INSIDE EDGE diffin49 
fin_A51 = EXPAND EDGE fin_E50 INSIDE BY FIN_PITCH
diffin50 = diffin49 NOT fin_A50 
fin_E51_ori = fin_A51 INSIDE EDGE diffin50 
fin_B52_ori = EXPAND EDGE fin_E51_ori OUTSIDE BY FIN_SPACE
fin_E51_ex1 = LENGTH fin_E51_ori == FIN_WIDTH
fin_B52_ex1 = EXPAND EDGE fin_E51_ex1 OUTSIDE BY FIN_SPACE
fin_B52a = fin_B52_ori NOT fin_B52_ex1 
fin_E51_ex2 = LENGTH fin_E51_ori == FIN_PITCH
fin_B52_ex2 = EXPAND EDGE fin_E51_ex2 OUTSIDE BY FIN_SPACE
fin_B52 = fin_B52a NOT fin_B52_ex2 
fin_lay52o = fin_lay51o NOT fin_B52 
fin_E51 = fin_B52 INSIDE EDGE diffin50 
fin_A52 = EXPAND EDGE fin_E51 INSIDE BY FIN_PITCH
diffin51 = diffin50 NOT fin_A51 
fin_E52_ori = fin_A52 INSIDE EDGE diffin51 
fin_B53_ori = EXPAND EDGE fin_E52_ori OUTSIDE BY FIN_SPACE
fin_E52_ex1 = LENGTH fin_E52_ori == FIN_WIDTH
fin_B53_ex1 = EXPAND EDGE fin_E52_ex1 OUTSIDE BY FIN_SPACE
fin_B53a = fin_B53_ori NOT fin_B53_ex1 
fin_E52_ex2 = LENGTH fin_E52_ori == FIN_PITCH
fin_B53_ex2 = EXPAND EDGE fin_E52_ex2 OUTSIDE BY FIN_SPACE
fin_B53 = fin_B53a NOT fin_B53_ex2 
fin_lay53o = fin_lay52o NOT fin_B53 
fin_E52 = fin_B53 INSIDE EDGE diffin51 
fin_A53 = EXPAND EDGE fin_E52 INSIDE BY FIN_PITCH
diffin52 = diffin51 NOT fin_A52 
fin_E53_ori = fin_A53 INSIDE EDGE diffin52 
fin_B54_ori = EXPAND EDGE fin_E53_ori OUTSIDE BY FIN_SPACE
fin_E53_ex1 = LENGTH fin_E53_ori == FIN_WIDTH
fin_B54_ex1 = EXPAND EDGE fin_E53_ex1 OUTSIDE BY FIN_SPACE
fin_B54a = fin_B54_ori NOT fin_B54_ex1 
fin_E53_ex2 = LENGTH fin_E53_ori == FIN_PITCH
fin_B54_ex2 = EXPAND EDGE fin_E53_ex2 OUTSIDE BY FIN_SPACE
fin_B54 = fin_B54a NOT fin_B54_ex2 
fin_lay54o = fin_lay53o NOT fin_B54 
sram_fin = ODI AND SRM 
fin_lay1 = fin_lay54o OR sram_fin 
diff_to_fin_io = diff_to_fin4 AND FB2 
findiff_io = diff_to_fin_io INTERACT POx 
fingate_l_io = diff_to_fin_io INSIDE EDGE POx 
fin_E0a1_io = fingate_l_io TOUCH EDGE EXT_OD_CORN
fin_E0a2_io = fin_E0a1_io TOUCH EDGE INT_OD_CORN
fin_E0a3_io = fingate_l_io NOT TOUCH EDGE fin_E0a2_io
fin_E0a_io = findiff_io TOUCH EDGE fin_E0a3_io
fin_A0_io = EXPAND EDGE fin_E0a_io INSIDE BY FIN_WIDTH_IO
fin_E0_ori_io = fin_A0_io INSIDE EDGE findiff_io 
fin_B1_ori_io = EXPAND EDGE fin_E0_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E0_ex1_io = LENGTH fin_E0_ori_io == FIN_WIDTH_IO
fin_B1_ex1_io = EXPAND EDGE fin_E0_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B1a_io = fin_B1_ori_io NOT fin_B1_ex1_io 
fin_E0_ex2_io = LENGTH fin_E0_ori_io == FIN_SPACE_IO
fin_B1_ex2_io = EXPAND EDGE fin_E0_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B1_io = fin_B1a_io NOT fin_B1_ex2_io 
fin_lay1o_io = findiff_io NOT fin_B1_io 
fin_E0_io = fin_B1_io INSIDE EDGE findiff_io 
fin_A1_io = EXPAND EDGE fin_E0_io INSIDE BY FIN_PITCH_IO
diffin0_io = diff_to_fin_io NOT fin_A0_io 
fin_E1_ori_io = fin_A1_io INSIDE EDGE diffin0_io 
fin_B2_ori_io = EXPAND EDGE fin_E1_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E1_ex1_io = LENGTH fin_E1_ori_io == FIN_WIDTH_IO
fin_B2_ex1_io = EXPAND EDGE fin_E1_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B2a_io = fin_B2_ori_io NOT fin_B2_ex1_io 
fin_E1_ex2_io = LENGTH fin_E1_ori_io == FIN_PITCH_IO
fin_B2_ex2_io = EXPAND EDGE fin_E1_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B2_io = fin_B2a_io NOT fin_B2_ex2_io 
fin_lay2o_io = fin_lay1o_io NOT fin_B2_io 
fin_E1_io = fin_B2_io INSIDE EDGE diffin0_io 
fin_A2_io = EXPAND EDGE fin_E1_io INSIDE BY FIN_PITCH_IO
diffin1_io = diffin0_io NOT fin_A1_io 
fin_E2_ori_io = fin_A2_io INSIDE EDGE diffin1_io 
fin_B3_ori_io = EXPAND EDGE fin_E2_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E2_ex1_io = LENGTH fin_E2_ori_io == FIN_WIDTH_IO
fin_B3_ex1_io = EXPAND EDGE fin_E2_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B3a_io = fin_B3_ori_io NOT fin_B3_ex1_io 
fin_E2_ex2_io = LENGTH fin_E2_ori_io == FIN_PITCH_IO
fin_B3_ex2_io = EXPAND EDGE fin_E2_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B3_io = fin_B3a_io NOT fin_B3_ex2_io 
fin_lay3o_io = fin_lay2o_io NOT fin_B3_io 
fin_E2_io = fin_B3_io INSIDE EDGE diffin1_io 
fin_A3_io = EXPAND EDGE fin_E2_io INSIDE BY FIN_PITCH_IO
diffin2_io = diffin1_io NOT fin_A2_io 
fin_E3_ori_io = fin_A3_io INSIDE EDGE diffin2_io 
fin_B4_ori_io = EXPAND EDGE fin_E3_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E3_ex1_io = LENGTH fin_E3_ori_io == FIN_WIDTH_IO
fin_B4_ex1_io = EXPAND EDGE fin_E3_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B4a_io = fin_B4_ori_io NOT fin_B4_ex1_io 
fin_E3_ex2_io = LENGTH fin_E3_ori_io == FIN_PITCH_IO
fin_B4_ex2_io = EXPAND EDGE fin_E3_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B4_io = fin_B4a_io NOT fin_B4_ex2_io 
fin_lay4o_io = fin_lay3o_io NOT fin_B4_io 
fin_E3_io = fin_B4_io INSIDE EDGE diffin2_io 
fin_A4_io = EXPAND EDGE fin_E3_io INSIDE BY FIN_PITCH_IO
diffin3_io = diffin2_io NOT fin_A3_io 
fin_E4_ori_io = fin_A4_io INSIDE EDGE diffin3_io 
fin_B5_ori_io = EXPAND EDGE fin_E4_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E4_ex1_io = LENGTH fin_E4_ori_io == FIN_WIDTH_IO
fin_B5_ex1_io = EXPAND EDGE fin_E4_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B5a_io = fin_B5_ori_io NOT fin_B5_ex1_io 
fin_E4_ex2_io = LENGTH fin_E4_ori_io == FIN_PITCH_IO
fin_B5_ex2_io = EXPAND EDGE fin_E4_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B5_io = fin_B5a_io NOT fin_B5_ex2_io 
fin_lay5o_io = fin_lay4o_io NOT fin_B5_io 
fin_E4_io = fin_B5_io INSIDE EDGE diffin3_io 
fin_A5_io = EXPAND EDGE fin_E4_io INSIDE BY FIN_PITCH_IO
diffin4_io = diffin3_io NOT fin_A4_io 
fin_E5_ori_io = fin_A5_io INSIDE EDGE diffin4_io 
fin_B6_ori_io = EXPAND EDGE fin_E5_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E5_ex1_io = LENGTH fin_E5_ori_io == FIN_WIDTH_IO
fin_B6_ex1_io = EXPAND EDGE fin_E5_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B6a_io = fin_B6_ori_io NOT fin_B6_ex1_io 
fin_E5_ex2_io = LENGTH fin_E5_ori_io == FIN_PITCH_IO
fin_B6_ex2_io = EXPAND EDGE fin_E5_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B6_io = fin_B6a_io NOT fin_B6_ex2_io 
fin_lay6o_io = fin_lay5o_io NOT fin_B6_io 
fin_E5_io = fin_B6_io INSIDE EDGE diffin4_io 
fin_A6_io = EXPAND EDGE fin_E5_io INSIDE BY FIN_PITCH_IO
diffin5_io = diffin4_io NOT fin_A5_io 
fin_E6_ori_io = fin_A6_io INSIDE EDGE diffin5_io 
fin_B7_ori_io = EXPAND EDGE fin_E6_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E6_ex1_io = LENGTH fin_E6_ori_io == FIN_WIDTH_IO
fin_B7_ex1_io = EXPAND EDGE fin_E6_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B7a_io = fin_B7_ori_io NOT fin_B7_ex1_io 
fin_E6_ex2_io = LENGTH fin_E6_ori_io == FIN_PITCH_IO
fin_B7_ex2_io = EXPAND EDGE fin_E6_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B7_io = fin_B7a_io NOT fin_B7_ex2_io 
fin_lay7o_io = fin_lay6o_io NOT fin_B7_io 
fin_E6_io = fin_B7_io INSIDE EDGE diffin5_io 
fin_A7_io = EXPAND EDGE fin_E6_io INSIDE BY FIN_PITCH_IO
diffin6_io = diffin5_io NOT fin_A6_io 
fin_E7_ori_io = fin_A7_io INSIDE EDGE diffin6_io 
fin_B8_ori_io = EXPAND EDGE fin_E7_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E7_ex1_io = LENGTH fin_E7_ori_io == FIN_WIDTH_IO
fin_B8_ex1_io = EXPAND EDGE fin_E7_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B8a_io = fin_B8_ori_io NOT fin_B8_ex1_io 
fin_E7_ex2_io = LENGTH fin_E7_ori_io == FIN_PITCH_IO
fin_B8_ex2_io = EXPAND EDGE fin_E7_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B8_io = fin_B8a_io NOT fin_B8_ex2_io 
fin_lay8o_io = fin_lay7o_io NOT fin_B8_io 
fin_E7_io = fin_B8_io INSIDE EDGE diffin6_io 
fin_A8_io = EXPAND EDGE fin_E7_io INSIDE BY FIN_PITCH_IO
diffin7_io = diffin6_io NOT fin_A7_io 
fin_E8_ori_io = fin_A8_io INSIDE EDGE diffin7_io 
fin_B9_ori_io = EXPAND EDGE fin_E8_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E8_ex1_io = LENGTH fin_E8_ori_io == FIN_WIDTH_IO
fin_B9_ex1_io = EXPAND EDGE fin_E8_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B9a_io = fin_B9_ori_io NOT fin_B9_ex1_io 
fin_E8_ex2_io = LENGTH fin_E8_ori_io == FIN_PITCH_IO
fin_B9_ex2_io = EXPAND EDGE fin_E8_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B9_io = fin_B9a_io NOT fin_B9_ex2_io 
fin_lay9o_io = fin_lay8o_io NOT fin_B9_io 
fin_E8_io = fin_B9_io INSIDE EDGE diffin7_io 
fin_A9_io = EXPAND EDGE fin_E8_io INSIDE BY FIN_PITCH_IO
diffin8_io = diffin7_io NOT fin_A8_io 
fin_E9_ori_io = fin_A9_io INSIDE EDGE diffin8_io 
fin_B10_ori_io = EXPAND EDGE fin_E9_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E9_ex1_io = LENGTH fin_E9_ori_io == FIN_WIDTH_IO
fin_B10_ex1_io = EXPAND EDGE fin_E9_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B10a_io = fin_B10_ori_io NOT fin_B10_ex1_io 
fin_E9_ex2_io = LENGTH fin_E9_ori_io == FIN_PITCH_IO
fin_B10_ex2_io = EXPAND EDGE fin_E9_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B10_io = fin_B10a_io NOT fin_B10_ex2_io 
fin_lay10o_io = fin_lay9o_io NOT fin_B10_io 
fin_E9_io = fin_B10_io INSIDE EDGE diffin8_io 
fin_A10_io = EXPAND EDGE fin_E9_io INSIDE BY FIN_PITCH_IO
diffin9_io = diffin8_io NOT fin_A9_io 
fin_E10_ori_io = fin_A10_io INSIDE EDGE diffin9_io 
fin_B11_ori_io = EXPAND EDGE fin_E10_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E10_ex1_io = LENGTH fin_E10_ori_io == FIN_WIDTH_IO
fin_B11_ex1_io = EXPAND EDGE fin_E10_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B11a_io = fin_B11_ori_io NOT fin_B11_ex1_io 
fin_E10_ex2_io = LENGTH fin_E10_ori_io == FIN_PITCH_IO
fin_B11_ex2_io = EXPAND EDGE fin_E10_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B11_io = fin_B11a_io NOT fin_B11_ex2_io 
fin_lay11o_io = fin_lay10o_io NOT fin_B11_io 
fin_E10_io = fin_B11_io INSIDE EDGE diffin9_io 
fin_A11_io = EXPAND EDGE fin_E10_io INSIDE BY FIN_PITCH_IO
diffin10_io = diffin9_io NOT fin_A10_io 
fin_E11_ori_io = fin_A11_io INSIDE EDGE diffin10_io 
fin_B12_ori_io = EXPAND EDGE fin_E11_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E11_ex1_io = LENGTH fin_E11_ori_io == FIN_WIDTH_IO
fin_B12_ex1_io = EXPAND EDGE fin_E11_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B12a_io = fin_B12_ori_io NOT fin_B12_ex1_io 
fin_E11_ex2_io = LENGTH fin_E11_ori_io == FIN_PITCH_IO
fin_B12_ex2_io = EXPAND EDGE fin_E11_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B12_io = fin_B12a_io NOT fin_B12_ex2_io 
fin_lay12o_io = fin_lay11o_io NOT fin_B12_io 
fin_E11_io = fin_B12_io INSIDE EDGE diffin10_io 
fin_A12_io = EXPAND EDGE fin_E11_io INSIDE BY FIN_PITCH_IO
diffin11_io = diffin10_io NOT fin_A11_io 
fin_E12_ori_io = fin_A12_io INSIDE EDGE diffin11_io 
fin_B13_ori_io = EXPAND EDGE fin_E12_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E12_ex1_io = LENGTH fin_E12_ori_io == FIN_WIDTH_IO
fin_B13_ex1_io = EXPAND EDGE fin_E12_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B13a_io = fin_B13_ori_io NOT fin_B13_ex1_io 
fin_E12_ex2_io = LENGTH fin_E12_ori_io == FIN_PITCH_IO
fin_B13_ex2_io = EXPAND EDGE fin_E12_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B13_io = fin_B13a_io NOT fin_B13_ex2_io 
fin_lay13o_io = fin_lay12o_io NOT fin_B13_io 
fin_E12_io = fin_B13_io INSIDE EDGE diffin11_io 
fin_A13_io = EXPAND EDGE fin_E12_io INSIDE BY FIN_PITCH_IO
diffin12_io = diffin11_io NOT fin_A12_io 
fin_E13_ori_io = fin_A13_io INSIDE EDGE diffin12_io 
fin_B14_ori_io = EXPAND EDGE fin_E13_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E13_ex1_io = LENGTH fin_E13_ori_io == FIN_WIDTH_IO
fin_B14_ex1_io = EXPAND EDGE fin_E13_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B14a_io = fin_B14_ori_io NOT fin_B14_ex1_io 
fin_E13_ex2_io = LENGTH fin_E13_ori_io == FIN_PITCH_IO
fin_B14_ex2_io = EXPAND EDGE fin_E13_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B14_io = fin_B14a_io NOT fin_B14_ex2_io 
fin_lay14o_io = fin_lay13o_io NOT fin_B14_io 
fin_E13_io = fin_B14_io INSIDE EDGE diffin12_io 
fin_A14_io = EXPAND EDGE fin_E13_io INSIDE BY FIN_PITCH_IO
diffin13_io = diffin12_io NOT fin_A13_io 
fin_E14_ori_io = fin_A14_io INSIDE EDGE diffin13_io 
fin_B15_ori_io = EXPAND EDGE fin_E14_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E14_ex1_io = LENGTH fin_E14_ori_io == FIN_WIDTH_IO
fin_B15_ex1_io = EXPAND EDGE fin_E14_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B15a_io = fin_B15_ori_io NOT fin_B15_ex1_io 
fin_E14_ex2_io = LENGTH fin_E14_ori_io == FIN_PITCH_IO
fin_B15_ex2_io = EXPAND EDGE fin_E14_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B15_io = fin_B15a_io NOT fin_B15_ex2_io 
fin_lay15o_io = fin_lay14o_io NOT fin_B15_io 
fin_E14_io = fin_B15_io INSIDE EDGE diffin13_io 
fin_A15_io = EXPAND EDGE fin_E14_io INSIDE BY FIN_PITCH_IO
diffin14_io = diffin13_io NOT fin_A14_io 
fin_E15_ori_io = fin_A15_io INSIDE EDGE diffin14_io 
fin_B16_ori_io = EXPAND EDGE fin_E15_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E15_ex1_io = LENGTH fin_E15_ori_io == FIN_WIDTH_IO
fin_B16_ex1_io = EXPAND EDGE fin_E15_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B16a_io = fin_B16_ori_io NOT fin_B16_ex1_io 
fin_E15_ex2_io = LENGTH fin_E15_ori_io == FIN_PITCH_IO
fin_B16_ex2_io = EXPAND EDGE fin_E15_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B16_io = fin_B16a_io NOT fin_B16_ex2_io 
fin_lay16o_io = fin_lay15o_io NOT fin_B16_io 
fin_E15_io = fin_B16_io INSIDE EDGE diffin14_io 
fin_A16_io = EXPAND EDGE fin_E15_io INSIDE BY FIN_PITCH_IO
diffin15_io = diffin14_io NOT fin_A15_io 
fin_E16_ori_io = fin_A16_io INSIDE EDGE diffin15_io 
fin_B17_ori_io = EXPAND EDGE fin_E16_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E16_ex1_io = LENGTH fin_E16_ori_io == FIN_WIDTH_IO
fin_B17_ex1_io = EXPAND EDGE fin_E16_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B17a_io = fin_B17_ori_io NOT fin_B17_ex1_io 
fin_E16_ex2_io = LENGTH fin_E16_ori_io == FIN_PITCH_IO
fin_B17_ex2_io = EXPAND EDGE fin_E16_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B17_io = fin_B17a_io NOT fin_B17_ex2_io 
fin_lay17o_io = fin_lay16o_io NOT fin_B17_io 
fin_E16_io = fin_B17_io INSIDE EDGE diffin15_io 
fin_A17_io = EXPAND EDGE fin_E16_io INSIDE BY FIN_PITCH_IO
diffin16_io = diffin15_io NOT fin_A16_io 
fin_E17_ori_io = fin_A17_io INSIDE EDGE diffin16_io 
fin_B18_ori_io = EXPAND EDGE fin_E17_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E17_ex1_io = LENGTH fin_E17_ori_io == FIN_WIDTH_IO
fin_B18_ex1_io = EXPAND EDGE fin_E17_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B18a_io = fin_B18_ori_io NOT fin_B18_ex1_io 
fin_E17_ex2_io = LENGTH fin_E17_ori_io == FIN_PITCH_IO
fin_B18_ex2_io = EXPAND EDGE fin_E17_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B18_io = fin_B18a_io NOT fin_B18_ex2_io 
fin_lay18o_io = fin_lay17o_io NOT fin_B18_io 
fin_E17_io = fin_B18_io INSIDE EDGE diffin16_io 
fin_A18_io = EXPAND EDGE fin_E17_io INSIDE BY FIN_PITCH_IO
diffin17_io = diffin16_io NOT fin_A17_io 
fin_E18_ori_io = fin_A18_io INSIDE EDGE diffin17_io 
fin_B19_ori_io = EXPAND EDGE fin_E18_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E18_ex1_io = LENGTH fin_E18_ori_io == FIN_WIDTH_IO
fin_B19_ex1_io = EXPAND EDGE fin_E18_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B19a_io = fin_B19_ori_io NOT fin_B19_ex1_io 
fin_E18_ex2_io = LENGTH fin_E18_ori_io == FIN_PITCH_IO
fin_B19_ex2_io = EXPAND EDGE fin_E18_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B19_io = fin_B19a_io NOT fin_B19_ex2_io 
fin_lay19o_io = fin_lay18o_io NOT fin_B19_io 
fin_E18_io = fin_B19_io INSIDE EDGE diffin17_io 
fin_A19_io = EXPAND EDGE fin_E18_io INSIDE BY FIN_PITCH_IO
diffin18_io = diffin17_io NOT fin_A18_io 
fin_E19_ori_io = fin_A19_io INSIDE EDGE diffin18_io 
fin_B20_ori_io = EXPAND EDGE fin_E19_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E19_ex1_io = LENGTH fin_E19_ori_io == FIN_WIDTH_IO
fin_B20_ex1_io = EXPAND EDGE fin_E19_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B20a_io = fin_B20_ori_io NOT fin_B20_ex1_io 
fin_E19_ex2_io = LENGTH fin_E19_ori_io == FIN_PITCH_IO
fin_B20_ex2_io = EXPAND EDGE fin_E19_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B20_io = fin_B20a_io NOT fin_B20_ex2_io 
fin_lay20o_io = fin_lay19o_io NOT fin_B20_io 
fin_E19_io = fin_B20_io INSIDE EDGE diffin18_io 
fin_A20_io = EXPAND EDGE fin_E19_io INSIDE BY FIN_PITCH_IO
diffin19_io = diffin18_io NOT fin_A19_io 
fin_E20_ori_io = fin_A20_io INSIDE EDGE diffin19_io 
fin_B21_ori_io = EXPAND EDGE fin_E20_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E20_ex1_io = LENGTH fin_E20_ori_io == FIN_WIDTH_IO
fin_B21_ex1_io = EXPAND EDGE fin_E20_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B21a_io = fin_B21_ori_io NOT fin_B21_ex1_io 
fin_E20_ex2_io = LENGTH fin_E20_ori_io == FIN_PITCH_IO
fin_B21_ex2_io = EXPAND EDGE fin_E20_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B21_io = fin_B21a_io NOT fin_B21_ex2_io 
fin_lay21o_io = fin_lay20o_io NOT fin_B21_io 
fin_E20_io = fin_B21_io INSIDE EDGE diffin19_io 
fin_A21_io = EXPAND EDGE fin_E20_io INSIDE BY FIN_PITCH_IO
diffin20_io = diffin19_io NOT fin_A20_io 
fin_E21_ori_io = fin_A21_io INSIDE EDGE diffin20_io 
fin_B22_ori_io = EXPAND EDGE fin_E21_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E21_ex1_io = LENGTH fin_E21_ori_io == FIN_WIDTH_IO
fin_B22_ex1_io = EXPAND EDGE fin_E21_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B22a_io = fin_B22_ori_io NOT fin_B22_ex1_io 
fin_E21_ex2_io = LENGTH fin_E21_ori_io == FIN_PITCH_IO
fin_B22_ex2_io = EXPAND EDGE fin_E21_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B22_io = fin_B22a_io NOT fin_B22_ex2_io 
fin_lay22o_io = fin_lay21o_io NOT fin_B22_io 
fin_E21_io = fin_B22_io INSIDE EDGE diffin20_io 
fin_A22_io = EXPAND EDGE fin_E21_io INSIDE BY FIN_PITCH_IO
diffin21_io = diffin20_io NOT fin_A21_io 
fin_E22_ori_io = fin_A22_io INSIDE EDGE diffin21_io 
fin_B23_ori_io = EXPAND EDGE fin_E22_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E22_ex1_io = LENGTH fin_E22_ori_io == FIN_WIDTH_IO
fin_B23_ex1_io = EXPAND EDGE fin_E22_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B23a_io = fin_B23_ori_io NOT fin_B23_ex1_io 
fin_E22_ex2_io = LENGTH fin_E22_ori_io == FIN_PITCH_IO
fin_B23_ex2_io = EXPAND EDGE fin_E22_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B23_io = fin_B23a_io NOT fin_B23_ex2_io 
fin_lay23o_io = fin_lay22o_io NOT fin_B23_io 
fin_E22_io = fin_B23_io INSIDE EDGE diffin21_io 
fin_A23_io = EXPAND EDGE fin_E22_io INSIDE BY FIN_PITCH_IO
diffin22_io = diffin21_io NOT fin_A22_io 
fin_E23_ori_io = fin_A23_io INSIDE EDGE diffin22_io 
fin_B24_ori_io = EXPAND EDGE fin_E23_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E23_ex1_io = LENGTH fin_E23_ori_io == FIN_WIDTH_IO
fin_B24_ex1_io = EXPAND EDGE fin_E23_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B24a_io = fin_B24_ori_io NOT fin_B24_ex1_io 
fin_E23_ex2_io = LENGTH fin_E23_ori_io == FIN_PITCH_IO
fin_B24_ex2_io = EXPAND EDGE fin_E23_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B24_io = fin_B24a_io NOT fin_B24_ex2_io 
fin_lay24o_io = fin_lay23o_io NOT fin_B24_io 
fin_E23_io = fin_B24_io INSIDE EDGE diffin22_io 
fin_A24_io = EXPAND EDGE fin_E23_io INSIDE BY FIN_PITCH_IO
diffin23_io = diffin22_io NOT fin_A23_io 
fin_E24_ori_io = fin_A24_io INSIDE EDGE diffin23_io 
fin_B25_ori_io = EXPAND EDGE fin_E24_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E24_ex1_io = LENGTH fin_E24_ori_io == FIN_WIDTH_IO
fin_B25_ex1_io = EXPAND EDGE fin_E24_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B25a_io = fin_B25_ori_io NOT fin_B25_ex1_io 
fin_E24_ex2_io = LENGTH fin_E24_ori_io == FIN_PITCH_IO
fin_B25_ex2_io = EXPAND EDGE fin_E24_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B25_io = fin_B25a_io NOT fin_B25_ex2_io 
fin_lay25o_io = fin_lay24o_io NOT fin_B25_io 
fin_E24_io = fin_B25_io INSIDE EDGE diffin23_io 
fin_A25_io = EXPAND EDGE fin_E24_io INSIDE BY FIN_PITCH_IO
diffin24_io = diffin23_io NOT fin_A24_io 
fin_E25_ori_io = fin_A25_io INSIDE EDGE diffin24_io 
fin_B26_ori_io = EXPAND EDGE fin_E25_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E25_ex1_io = LENGTH fin_E25_ori_io == FIN_WIDTH_IO
fin_B26_ex1_io = EXPAND EDGE fin_E25_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B26a_io = fin_B26_ori_io NOT fin_B26_ex1_io 
fin_E25_ex2_io = LENGTH fin_E25_ori_io == FIN_PITCH_IO
fin_B26_ex2_io = EXPAND EDGE fin_E25_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B26_io = fin_B26a_io NOT fin_B26_ex2_io 
fin_lay26o_io = fin_lay25o_io NOT fin_B26_io 
fin_E25_io = fin_B26_io INSIDE EDGE diffin24_io 
fin_A26_io = EXPAND EDGE fin_E25_io INSIDE BY FIN_PITCH_IO
diffin25_io = diffin24_io NOT fin_A25_io 
fin_E26_ori_io = fin_A26_io INSIDE EDGE diffin25_io 
fin_B27_ori_io = EXPAND EDGE fin_E26_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E26_ex1_io = LENGTH fin_E26_ori_io == FIN_WIDTH_IO
fin_B27_ex1_io = EXPAND EDGE fin_E26_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B27a_io = fin_B27_ori_io NOT fin_B27_ex1_io 
fin_E26_ex2_io = LENGTH fin_E26_ori_io == FIN_PITCH_IO
fin_B27_ex2_io = EXPAND EDGE fin_E26_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B27_io = fin_B27a_io NOT fin_B27_ex2_io 
fin_lay27o_io = fin_lay26o_io NOT fin_B27_io 
fin_E26_io = fin_B27_io INSIDE EDGE diffin25_io 
fin_A27_io = EXPAND EDGE fin_E26_io INSIDE BY FIN_PITCH_IO
diffin26_io = diffin25_io NOT fin_A26_io 
fin_E27_ori_io = fin_A27_io INSIDE EDGE diffin26_io 
fin_B28_ori_io = EXPAND EDGE fin_E27_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E27_ex1_io = LENGTH fin_E27_ori_io == FIN_WIDTH_IO
fin_B28_ex1_io = EXPAND EDGE fin_E27_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B28a_io = fin_B28_ori_io NOT fin_B28_ex1_io 
fin_E27_ex2_io = LENGTH fin_E27_ori_io == FIN_PITCH_IO
fin_B28_ex2_io = EXPAND EDGE fin_E27_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B28_io = fin_B28a_io NOT fin_B28_ex2_io 
fin_lay28o_io = fin_lay27o_io NOT fin_B28_io 
fin_E27_io = fin_B28_io INSIDE EDGE diffin26_io 
fin_A28_io = EXPAND EDGE fin_E27_io INSIDE BY FIN_PITCH_IO
diffin27_io = diffin26_io NOT fin_A27_io 
fin_E28_ori_io = fin_A28_io INSIDE EDGE diffin27_io 
fin_B29_ori_io = EXPAND EDGE fin_E28_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E28_ex1_io = LENGTH fin_E28_ori_io == FIN_WIDTH_IO
fin_B29_ex1_io = EXPAND EDGE fin_E28_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B29a_io = fin_B29_ori_io NOT fin_B29_ex1_io 
fin_E28_ex2_io = LENGTH fin_E28_ori_io == FIN_PITCH_IO
fin_B29_ex2_io = EXPAND EDGE fin_E28_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B29_io = fin_B29a_io NOT fin_B29_ex2_io 
fin_lay29o_io = fin_lay28o_io NOT fin_B29_io 
fin_E28_io = fin_B29_io INSIDE EDGE diffin27_io 
fin_A29_io = EXPAND EDGE fin_E28_io INSIDE BY FIN_PITCH_IO
diffin28_io = diffin27_io NOT fin_A28_io 
fin_E29_ori_io = fin_A29_io INSIDE EDGE diffin28_io 
fin_B30_ori_io = EXPAND EDGE fin_E29_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E29_ex1_io = LENGTH fin_E29_ori_io == FIN_WIDTH_IO
fin_B30_ex1_io = EXPAND EDGE fin_E29_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B30a_io = fin_B30_ori_io NOT fin_B30_ex1_io 
fin_E29_ex2_io = LENGTH fin_E29_ori_io == FIN_PITCH_IO
fin_B30_ex2_io = EXPAND EDGE fin_E29_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B30_io = fin_B30a_io NOT fin_B30_ex2_io 
fin_lay30o_io = fin_lay29o_io NOT fin_B30_io 
fin_E29_io = fin_B30_io INSIDE EDGE diffin28_io 
fin_A30_io = EXPAND EDGE fin_E29_io INSIDE BY FIN_PITCH_IO
diffin29_io = diffin28_io NOT fin_A29_io 
fin_E30_ori_io = fin_A30_io INSIDE EDGE diffin29_io 
fin_B31_ori_io = EXPAND EDGE fin_E30_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E30_ex1_io = LENGTH fin_E30_ori_io == FIN_WIDTH_IO
fin_B31_ex1_io = EXPAND EDGE fin_E30_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B31a_io = fin_B31_ori_io NOT fin_B31_ex1_io 
fin_E30_ex2_io = LENGTH fin_E30_ori_io == FIN_PITCH_IO
fin_B31_ex2_io = EXPAND EDGE fin_E30_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B31_io = fin_B31a_io NOT fin_B31_ex2_io 
fin_lay31o_io = fin_lay30o_io NOT fin_B31_io 
fin_E30_io = fin_B31_io INSIDE EDGE diffin29_io 
fin_A31_io = EXPAND EDGE fin_E30_io INSIDE BY FIN_PITCH_IO
diffin30_io = diffin29_io NOT fin_A30_io 
fin_E31_ori_io = fin_A31_io INSIDE EDGE diffin30_io 
fin_B32_ori_io = EXPAND EDGE fin_E31_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E31_ex1_io = LENGTH fin_E31_ori_io == FIN_WIDTH_IO
fin_B32_ex1_io = EXPAND EDGE fin_E31_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B32a_io = fin_B32_ori_io NOT fin_B32_ex1_io 
fin_E31_ex2_io = LENGTH fin_E31_ori_io == FIN_PITCH_IO
fin_B32_ex2_io = EXPAND EDGE fin_E31_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B32_io = fin_B32a_io NOT fin_B32_ex2_io 
fin_lay32o_io = fin_lay31o_io NOT fin_B32_io 
fin_E31_io = fin_B32_io INSIDE EDGE diffin30_io 
fin_A32_io = EXPAND EDGE fin_E31_io INSIDE BY FIN_PITCH_IO
diffin31_io = diffin30_io NOT fin_A31_io 
fin_E32_ori_io = fin_A32_io INSIDE EDGE diffin31_io 
fin_B33_ori_io = EXPAND EDGE fin_E32_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E32_ex1_io = LENGTH fin_E32_ori_io == FIN_WIDTH_IO
fin_B33_ex1_io = EXPAND EDGE fin_E32_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B33a_io = fin_B33_ori_io NOT fin_B33_ex1_io 
fin_E32_ex2_io = LENGTH fin_E32_ori_io == FIN_PITCH_IO
fin_B33_ex2_io = EXPAND EDGE fin_E32_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B33_io = fin_B33a_io NOT fin_B33_ex2_io 
fin_lay33o_io = fin_lay32o_io NOT fin_B33_io 
fin_E32_io = fin_B33_io INSIDE EDGE diffin31_io 
fin_A33_io = EXPAND EDGE fin_E32_io INSIDE BY FIN_PITCH_IO
diffin32_io = diffin31_io NOT fin_A32_io 
fin_E33_ori_io = fin_A33_io INSIDE EDGE diffin32_io 
fin_B34_ori_io = EXPAND EDGE fin_E33_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E33_ex1_io = LENGTH fin_E33_ori_io == FIN_WIDTH_IO
fin_B34_ex1_io = EXPAND EDGE fin_E33_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B34a_io = fin_B34_ori_io NOT fin_B34_ex1_io 
fin_E33_ex2_io = LENGTH fin_E33_ori_io == FIN_PITCH_IO
fin_B34_ex2_io = EXPAND EDGE fin_E33_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B34_io = fin_B34a_io NOT fin_B34_ex2_io 
fin_lay34o_io = fin_lay33o_io NOT fin_B34_io 
fin_E33_io = fin_B34_io INSIDE EDGE diffin32_io 
fin_A34_io = EXPAND EDGE fin_E33_io INSIDE BY FIN_PITCH_IO
diffin33_io = diffin32_io NOT fin_A33_io 
fin_E34_ori_io = fin_A34_io INSIDE EDGE diffin33_io 
fin_B35_ori_io = EXPAND EDGE fin_E34_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E34_ex1_io = LENGTH fin_E34_ori_io == FIN_WIDTH_IO
fin_B35_ex1_io = EXPAND EDGE fin_E34_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B35a_io = fin_B35_ori_io NOT fin_B35_ex1_io 
fin_E34_ex2_io = LENGTH fin_E34_ori_io == FIN_PITCH_IO
fin_B35_ex2_io = EXPAND EDGE fin_E34_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B35_io = fin_B35a_io NOT fin_B35_ex2_io 
fin_lay35o_io = fin_lay34o_io NOT fin_B35_io 
fin_E34_io = fin_B35_io INSIDE EDGE diffin33_io 
fin_A35_io = EXPAND EDGE fin_E34_io INSIDE BY FIN_PITCH_IO
diffin34_io = diffin33_io NOT fin_A34_io 
fin_E35_ori_io = fin_A35_io INSIDE EDGE diffin34_io 
fin_B36_ori_io = EXPAND EDGE fin_E35_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E35_ex1_io = LENGTH fin_E35_ori_io == FIN_WIDTH_IO
fin_B36_ex1_io = EXPAND EDGE fin_E35_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B36a_io = fin_B36_ori_io NOT fin_B36_ex1_io 
fin_E35_ex2_io = LENGTH fin_E35_ori_io == FIN_PITCH_IO
fin_B36_ex2_io = EXPAND EDGE fin_E35_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B36_io = fin_B36a_io NOT fin_B36_ex2_io 
fin_lay36o_io = fin_lay35o_io NOT fin_B36_io 
fin_E35_io = fin_B36_io INSIDE EDGE diffin34_io 
fin_A36_io = EXPAND EDGE fin_E35_io INSIDE BY FIN_PITCH_IO
diffin35_io = diffin34_io NOT fin_A35_io 
fin_E36_ori_io = fin_A36_io INSIDE EDGE diffin35_io 
fin_B37_ori_io = EXPAND EDGE fin_E36_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E36_ex1_io = LENGTH fin_E36_ori_io == FIN_WIDTH_IO
fin_B37_ex1_io = EXPAND EDGE fin_E36_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B37a_io = fin_B37_ori_io NOT fin_B37_ex1_io 
fin_E36_ex2_io = LENGTH fin_E36_ori_io == FIN_PITCH_IO
fin_B37_ex2_io = EXPAND EDGE fin_E36_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B37_io = fin_B37a_io NOT fin_B37_ex2_io 
fin_lay37o_io = fin_lay36o_io NOT fin_B37_io 
fin_E36_io = fin_B37_io INSIDE EDGE diffin35_io 
fin_A37_io = EXPAND EDGE fin_E36_io INSIDE BY FIN_PITCH_IO
diffin36_io = diffin35_io NOT fin_A36_io 
fin_E37_ori_io = fin_A37_io INSIDE EDGE diffin36_io 
fin_B38_ori_io = EXPAND EDGE fin_E37_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E37_ex1_io = LENGTH fin_E37_ori_io == FIN_WIDTH_IO
fin_B38_ex1_io = EXPAND EDGE fin_E37_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B38a_io = fin_B38_ori_io NOT fin_B38_ex1_io 
fin_E37_ex2_io = LENGTH fin_E37_ori_io == FIN_PITCH_IO
fin_B38_ex2_io = EXPAND EDGE fin_E37_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B38_io = fin_B38a_io NOT fin_B38_ex2_io 
fin_lay38o_io = fin_lay37o_io NOT fin_B38_io 
fin_E37_io = fin_B38_io INSIDE EDGE diffin36_io 
fin_A38_io = EXPAND EDGE fin_E37_io INSIDE BY FIN_PITCH_IO
diffin37_io = diffin36_io NOT fin_A37_io 
fin_E38_ori_io = fin_A38_io INSIDE EDGE diffin37_io 
fin_B39_ori_io = EXPAND EDGE fin_E38_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E38_ex1_io = LENGTH fin_E38_ori_io == FIN_WIDTH_IO
fin_B39_ex1_io = EXPAND EDGE fin_E38_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B39a_io = fin_B39_ori_io NOT fin_B39_ex1_io 
fin_E38_ex2_io = LENGTH fin_E38_ori_io == FIN_PITCH_IO
fin_B39_ex2_io = EXPAND EDGE fin_E38_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B39_io = fin_B39a_io NOT fin_B39_ex2_io 
fin_lay39o_io = fin_lay38o_io NOT fin_B39_io 
fin_E38_io = fin_B39_io INSIDE EDGE diffin37_io 
fin_A39_io = EXPAND EDGE fin_E38_io INSIDE BY FIN_PITCH_IO
diffin38_io = diffin37_io NOT fin_A38_io 
fin_E39_ori_io = fin_A39_io INSIDE EDGE diffin38_io 
fin_B40_ori_io = EXPAND EDGE fin_E39_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E39_ex1_io = LENGTH fin_E39_ori_io == FIN_WIDTH_IO
fin_B40_ex1_io = EXPAND EDGE fin_E39_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B40a_io = fin_B40_ori_io NOT fin_B40_ex1_io 
fin_E39_ex2_io = LENGTH fin_E39_ori_io == FIN_PITCH_IO
fin_B40_ex2_io = EXPAND EDGE fin_E39_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B40_io = fin_B40a_io NOT fin_B40_ex2_io 
fin_lay40o_io = fin_lay39o_io NOT fin_B40_io 
fin_E39_io = fin_B40_io INSIDE EDGE diffin38_io 
fin_A40_io = EXPAND EDGE fin_E39_io INSIDE BY FIN_PITCH_IO
diffin39_io = diffin38_io NOT fin_A39_io 
fin_E40_ori_io = fin_A40_io INSIDE EDGE diffin39_io 
fin_B41_ori_io = EXPAND EDGE fin_E40_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E40_ex1_io = LENGTH fin_E40_ori_io == FIN_WIDTH_IO
fin_B41_ex1_io = EXPAND EDGE fin_E40_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B41a_io = fin_B41_ori_io NOT fin_B41_ex1_io 
fin_E40_ex2_io = LENGTH fin_E40_ori_io == FIN_PITCH_IO
fin_B41_ex2_io = EXPAND EDGE fin_E40_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B41_io = fin_B41a_io NOT fin_B41_ex2_io 
fin_lay41o_io = fin_lay40o_io NOT fin_B41_io 
fin_E40_io = fin_B41_io INSIDE EDGE diffin39_io 
fin_A41_io = EXPAND EDGE fin_E40_io INSIDE BY FIN_PITCH_IO
diffin40_io = diffin39_io NOT fin_A40_io 
fin_E41_ori_io = fin_A41_io INSIDE EDGE diffin40_io 
fin_B42_ori_io = EXPAND EDGE fin_E41_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E41_ex1_io = LENGTH fin_E41_ori_io == FIN_WIDTH_IO
fin_B42_ex1_io = EXPAND EDGE fin_E41_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B42a_io = fin_B42_ori_io NOT fin_B42_ex1_io 
fin_E41_ex2_io = LENGTH fin_E41_ori_io == FIN_PITCH_IO
fin_B42_ex2_io = EXPAND EDGE fin_E41_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B42_io = fin_B42a_io NOT fin_B42_ex2_io 
fin_lay42o_io = fin_lay41o_io NOT fin_B42_io 
fin_E41_io = fin_B42_io INSIDE EDGE diffin40_io 
fin_A42_io = EXPAND EDGE fin_E41_io INSIDE BY FIN_PITCH_IO
diffin41_io = diffin40_io NOT fin_A41_io 
fin_E42_ori_io = fin_A42_io INSIDE EDGE diffin41_io 
fin_B43_ori_io = EXPAND EDGE fin_E42_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E42_ex1_io = LENGTH fin_E42_ori_io == FIN_WIDTH_IO
fin_B43_ex1_io = EXPAND EDGE fin_E42_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B43a_io = fin_B43_ori_io NOT fin_B43_ex1_io 
fin_E42_ex2_io = LENGTH fin_E42_ori_io == FIN_PITCH_IO
fin_B43_ex2_io = EXPAND EDGE fin_E42_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B43_io = fin_B43a_io NOT fin_B43_ex2_io 
fin_lay43o_io = fin_lay42o_io NOT fin_B43_io 
fin_E42_io = fin_B43_io INSIDE EDGE diffin41_io 
fin_A43_io = EXPAND EDGE fin_E42_io INSIDE BY FIN_PITCH_IO
diffin42_io = diffin41_io NOT fin_A42_io 
fin_E43_ori_io = fin_A43_io INSIDE EDGE diffin42_io 
fin_B44_ori_io = EXPAND EDGE fin_E43_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E43_ex1_io = LENGTH fin_E43_ori_io == FIN_WIDTH_IO
fin_B44_ex1_io = EXPAND EDGE fin_E43_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B44a_io = fin_B44_ori_io NOT fin_B44_ex1_io 
fin_E43_ex2_io = LENGTH fin_E43_ori_io == FIN_PITCH_IO
fin_B44_ex2_io = EXPAND EDGE fin_E43_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B44_io = fin_B44a_io NOT fin_B44_ex2_io 
fin_lay44o_io = fin_lay43o_io NOT fin_B44_io 
fin_E43_io = fin_B44_io INSIDE EDGE diffin42_io 
fin_A44_io = EXPAND EDGE fin_E43_io INSIDE BY FIN_PITCH_IO
diffin43_io = diffin42_io NOT fin_A43_io 
fin_E44_ori_io = fin_A44_io INSIDE EDGE diffin43_io 
fin_B45_ori_io = EXPAND EDGE fin_E44_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E44_ex1_io = LENGTH fin_E44_ori_io == FIN_WIDTH_IO
fin_B45_ex1_io = EXPAND EDGE fin_E44_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B45a_io = fin_B45_ori_io NOT fin_B45_ex1_io 
fin_E44_ex2_io = LENGTH fin_E44_ori_io == FIN_PITCH_IO
fin_B45_ex2_io = EXPAND EDGE fin_E44_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B45_io = fin_B45a_io NOT fin_B45_ex2_io 
fin_lay45o_io = fin_lay44o_io NOT fin_B45_io 
fin_E44_io = fin_B45_io INSIDE EDGE diffin43_io 
fin_A45_io = EXPAND EDGE fin_E44_io INSIDE BY FIN_PITCH_IO
diffin44_io = diffin43_io NOT fin_A44_io 
fin_E45_ori_io = fin_A45_io INSIDE EDGE diffin44_io 
fin_B46_ori_io = EXPAND EDGE fin_E45_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E45_ex1_io = LENGTH fin_E45_ori_io == FIN_WIDTH_IO
fin_B46_ex1_io = EXPAND EDGE fin_E45_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B46a_io = fin_B46_ori_io NOT fin_B46_ex1_io 
fin_E45_ex2_io = LENGTH fin_E45_ori_io == FIN_PITCH_IO
fin_B46_ex2_io = EXPAND EDGE fin_E45_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B46_io = fin_B46a_io NOT fin_B46_ex2_io 
fin_lay46o_io = fin_lay45o_io NOT fin_B46_io 
fin_E45_io = fin_B46_io INSIDE EDGE diffin44_io 
fin_A46_io = EXPAND EDGE fin_E45_io INSIDE BY FIN_PITCH_IO
diffin45_io = diffin44_io NOT fin_A45_io 
fin_E46_ori_io = fin_A46_io INSIDE EDGE diffin45_io 
fin_B47_ori_io = EXPAND EDGE fin_E46_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E46_ex1_io = LENGTH fin_E46_ori_io == FIN_WIDTH_IO
fin_B47_ex1_io = EXPAND EDGE fin_E46_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B47a_io = fin_B47_ori_io NOT fin_B47_ex1_io 
fin_E46_ex2_io = LENGTH fin_E46_ori_io == FIN_PITCH_IO
fin_B47_ex2_io = EXPAND EDGE fin_E46_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B47_io = fin_B47a_io NOT fin_B47_ex2_io 
fin_lay47o_io = fin_lay46o_io NOT fin_B47_io 
fin_E46_io = fin_B47_io INSIDE EDGE diffin45_io 
fin_A47_io = EXPAND EDGE fin_E46_io INSIDE BY FIN_PITCH_IO
diffin46_io = diffin45_io NOT fin_A46_io 
fin_E47_ori_io = fin_A47_io INSIDE EDGE diffin46_io 
fin_B48_ori_io = EXPAND EDGE fin_E47_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E47_ex1_io = LENGTH fin_E47_ori_io == FIN_WIDTH_IO
fin_B48_ex1_io = EXPAND EDGE fin_E47_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B48a_io = fin_B48_ori_io NOT fin_B48_ex1_io 
fin_E47_ex2_io = LENGTH fin_E47_ori_io == FIN_PITCH_IO
fin_B48_ex2_io = EXPAND EDGE fin_E47_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B48_io = fin_B48a_io NOT fin_B48_ex2_io 
fin_lay48o_io = fin_lay47o_io NOT fin_B48_io 
fin_E47_io = fin_B48_io INSIDE EDGE diffin46_io 
fin_A48_io = EXPAND EDGE fin_E47_io INSIDE BY FIN_PITCH_IO
diffin47_io = diffin46_io NOT fin_A47_io 
fin_E48_ori_io = fin_A48_io INSIDE EDGE diffin47_io 
fin_B49_ori_io = EXPAND EDGE fin_E48_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E48_ex1_io = LENGTH fin_E48_ori_io == FIN_WIDTH_IO
fin_B49_ex1_io = EXPAND EDGE fin_E48_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B49a_io = fin_B49_ori_io NOT fin_B49_ex1_io 
fin_E48_ex2_io = LENGTH fin_E48_ori_io == FIN_PITCH_IO
fin_B49_ex2_io = EXPAND EDGE fin_E48_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B49_io = fin_B49a_io NOT fin_B49_ex2_io 
fin_lay49o_io = fin_lay48o_io NOT fin_B49_io 
fin_E48_io = fin_B49_io INSIDE EDGE diffin47_io 
fin_A49_io = EXPAND EDGE fin_E48_io INSIDE BY FIN_PITCH_IO
diffin48_io = diffin47_io NOT fin_A48_io 
fin_E49_ori_io = fin_A49_io INSIDE EDGE diffin48_io 
fin_B50_ori_io = EXPAND EDGE fin_E49_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E49_ex1_io = LENGTH fin_E49_ori_io == FIN_WIDTH_IO
fin_B50_ex1_io = EXPAND EDGE fin_E49_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B50a_io = fin_B50_ori_io NOT fin_B50_ex1_io 
fin_E49_ex2_io = LENGTH fin_E49_ori_io == FIN_PITCH_IO
fin_B50_ex2_io = EXPAND EDGE fin_E49_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B50_io = fin_B50a_io NOT fin_B50_ex2_io 
fin_lay50o_io = fin_lay49o_io NOT fin_B50_io 
fin_E49_io = fin_B50_io INSIDE EDGE diffin48_io 
fin_A50_io = EXPAND EDGE fin_E49_io INSIDE BY FIN_PITCH_IO
diffin49_io = diffin48_io NOT fin_A49_io 
fin_E50_ori_io = fin_A50_io INSIDE EDGE diffin49_io 
fin_B51_ori_io = EXPAND EDGE fin_E50_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E50_ex1_io = LENGTH fin_E50_ori_io == FIN_WIDTH_IO
fin_B51_ex1_io = EXPAND EDGE fin_E50_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B51a_io = fin_B51_ori_io NOT fin_B51_ex1_io 
fin_E50_ex2_io = LENGTH fin_E50_ori_io == FIN_PITCH_IO
fin_B51_ex2_io = EXPAND EDGE fin_E50_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B51_io = fin_B51a_io NOT fin_B51_ex2_io 
fin_lay51o_io = fin_lay50o_io NOT fin_B51_io 
fin_E50_io = fin_B51_io INSIDE EDGE diffin49_io 
fin_A51_io = EXPAND EDGE fin_E50_io INSIDE BY FIN_PITCH_IO
diffin50_io = diffin49_io NOT fin_A50_io 
fin_E51_ori_io = fin_A51_io INSIDE EDGE diffin50_io 
fin_B52_ori_io = EXPAND EDGE fin_E51_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E51_ex1_io = LENGTH fin_E51_ori_io == FIN_WIDTH_IO
fin_B52_ex1_io = EXPAND EDGE fin_E51_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B52a_io = fin_B52_ori_io NOT fin_B52_ex1_io 
fin_E51_ex2_io = LENGTH fin_E51_ori_io == FIN_PITCH_IO
fin_B52_ex2_io = EXPAND EDGE fin_E51_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B52_io = fin_B52a_io NOT fin_B52_ex2_io 
fin_lay52o_io = fin_lay51o_io NOT fin_B52_io 
fin_E51_io = fin_B52_io INSIDE EDGE diffin50_io 
fin_A52_io = EXPAND EDGE fin_E51_io INSIDE BY FIN_PITCH_IO
diffin51_io = diffin50_io NOT fin_A51_io 
fin_E52_ori_io = fin_A52_io INSIDE EDGE diffin51_io 
fin_B53_ori_io = EXPAND EDGE fin_E52_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E52_ex1_io = LENGTH fin_E52_ori_io == FIN_WIDTH_IO
fin_B53_ex1_io = EXPAND EDGE fin_E52_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B53a_io = fin_B53_ori_io NOT fin_B53_ex1_io 
fin_E52_ex2_io = LENGTH fin_E52_ori_io == FIN_PITCH_IO
fin_B53_ex2_io = EXPAND EDGE fin_E52_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B53_io = fin_B53a_io NOT fin_B53_ex2_io 
fin_lay53o_io = fin_lay52o_io NOT fin_B53_io 
fin_E52_io = fin_B53_io INSIDE EDGE diffin51_io 
fin_A53_io = EXPAND EDGE fin_E52_io INSIDE BY FIN_PITCH_IO
diffin52_io = diffin51_io NOT fin_A52_io 
fin_E53_ori_io = fin_A53_io INSIDE EDGE diffin52_io 
fin_B54_ori_io = EXPAND EDGE fin_E53_ori_io OUTSIDE BY FIN_SPACE_IO
fin_E53_ex1_io = LENGTH fin_E53_ori_io == FIN_WIDTH_IO
fin_B54_ex1_io = EXPAND EDGE fin_E53_ex1_io OUTSIDE BY FIN_SPACE_IO
fin_B54a_io = fin_B54_ori_io NOT fin_B54_ex1_io 
fin_E53_ex2_io = LENGTH fin_E53_ori_io == FIN_PITCH_IO
fin_B54_ex2_io = EXPAND EDGE fin_E53_ex2_io OUTSIDE BY FIN_SPACE_IO
fin_B54_io = fin_B54a_io NOT fin_B54_ex2_io 
fin_lay54o_io = fin_lay53o_io NOT fin_B54_io 
fin_lay1_io = COPY fin_lay54o_io 
Empty = AREA BULK <= 0
#IFDEF CCI_DFM_RULE
   fin_lay_io = COPY fin_lay1_io
#ELSE
   fin_lay_io = COPY Empty
#ENDIF
fin_lay0 = fin_lay1 OR fin_lay_io 
#IFDEF CCI_DFM_RULE
   fin_lay = COPY fin_lay0
#ELSE
   fin_lay = COPY Empty
#ENDIF

//***** Define connectivity/via layer -- mom13minus ****
mom13minus = M13 AND MOMDMY_MINUS 

//* Define layer -- M0_B_SRM03_1
M0_B_SRM03_1_tmp01 = SRM AND SRM16
M0_B_SRM03_1 = M0_B_SRM03_1_tmp01 AND M0_B


//* Define layer -- M0_B_SRM03_2
M0_B_SRM03_2_tmp01 = SRM AND SRM17
M0_B_SRM03_2 = M0_B_SRM03_2_tmp01 AND M0_B

M0_B_SRM03a = M0_B_SRM03_1 OR M0_B_SRM03_2 

//* Define layer -- M0_B_SRM03_3
M0_B_SRM03_3_tmp01 = SRM AND SRM13
M0_B_SRM03_3 = M0_B_SRM03_3_tmp01 AND M0_B

M0_B_SRM03 = M0_B_SRM03a OR M0_B_SRM03_3 

//***** Define connectivity/via layer -- p_gpoly_svt ****
p_gpoly_svt_all = ppoly_co_s AND ODx 
p_gpoly_svt = p_gpoly_svt_all NOT all_mos_gates 

//***** Define connectivity/via layer -- mom1p2_b ****
mom1p21_b = M1_B AND MOMDMY_MXP2 
mom1p2_b1 = mom1p21_b AND MOMDMY_MXP12 
mom1p2_b = mom1p2_b1 INTERACT VIA1 

//***** Define connectivity/via layer -- mom11m2 ****
mom11p21 = M11 AND MOMDMY_MXP2 
mom11p2 = mom11p21 AND MOMDMY_MXP12 
mom11m2 = mom11p21 NOT INTERACT mom11p2 

//***** Define connectivity/via layer -- mom6plus ****
mom6plus = M6 AND MOMDMY_PLUS 

//* Define layer -- M1_A_SRM03_1
M1_A_SRM03_1_tmp01 = SRM AND SRM16
M1_A_SRM03_1 = M1_A_SRM03_1_tmp01 AND M1_A


//* Define layer -- M1_A_SRM03_2
M1_A_SRM03_2_tmp01 = SRM AND SRM17
M1_A_SRM03_2 = M1_A_SRM03_2_tmp01 AND M1_A

M1_A_SRM03a = M1_A_SRM03_1 OR M1_A_SRM03_2 

//* Define layer -- M1_A_SRM03_3
M1_A_SRM03_3_tmp01 = SRM AND SRM13
M1_A_SRM03_3 = M1_A_SRM03_3_tmp01 AND M1_A

M1_A_SRM03 = M1_A_SRM03a OR M1_A_SRM03_3 
FINMOSa = FB1 OR FB2 
FINMOSb = FINMOSa OR FB6 
FINMOSc = FINMOSb OR FB8 
FINMOS = FINMOSc OR FB9 

//***** Define connectivity/via layer -- mom4m2 ****
mom4p21 = M4 AND MOMDMY_MXP2 
mom4p2 = mom4p21 AND MOMDMY_MXP12 
mom4m2 = mom4p21 NOT INTERACT mom4p2 

//***** Define connectivity/via layer -- mom14p2 ****
mom14p21 = M14 AND MOMDMY_MXP2 
mom14p2 = mom14p21 AND MOMDMY_MXP12 

//***** Define connectivity/via layer -- pplug ****
pplug1 = tpdiff_ori AND psub 
plug_sel1 = tndiff_ori OR tpdiff_ori 
tiod1 = diff NOT tpdiff_ori 
tiod2 = tiod1 NOT tndiff_ori 
tiod = tiod2 NOT POx 
plug_sel2 = plug_sel1 OR tiod 
plug_valid = MD_ODa INTERACT MD_valid 
plug_sel3 = plug_sel2 INTERACT plug_valid 
#IFDEF CCI_DFM_RULE
   plug_sel = COPY plug_sel2
#ELSE
   plug_sel = COPY plug_sel3
#ENDIF
pplug2 = pplug1 AND plug_sel 
tndiffco = tndiff_ori INTERACT MD_valid 
pplug3 = pplug1 INTERACT tndiffco 
pplug = pplug2 OR pplug3 

//***** Define connectivity/via layer -- n_pode_io ****
npode_io = npoly_ioa AND PODE_3T 
n_pode_io = npode_io NOT all_mos_gates 
MP_MD_TAP = MP AND MDx 

//***** Define connectivity/via layer -- MD_OD_P_SRM ****
MD_OD_P_SRM = MD_OD_P1 AND SRM_all 

//***** Define connectivity/via layer -- mom10p1 ****
mom10p11 = M10 AND MOMDMY_MXP1 
mom10p1 = mom10p11 AND MOMDMY_MXP12 

//***** Define connectivity/via layer -- mom1p1_a ****
mom1p11_a = M1_A AND MOMDMY_MXP1 
mom1p1_a1 = mom1p11_a AND MOMDMY_MXP12 
mom1p1_a = mom1p1_a1 INTERACT VIA1 
tndiff1 = tndiff_ori NOT tndiff_dio 
tndiff2 = tndiff1 NOT tndiff_bjt 
tndiff_sdi1 = tndiff_ori AND SDI_2 
ngate_hia = COPY ngate_hia12_mac 
tndiff_sdi = tndiff_sdi1 INTERACT ngate_hia  //  for asymmetry HIA MOS drain terminal
tndiff_all = tndiff2 NOT tndiff_sdi 
unrecognized_ndio_1 = tndiff_all NOT SR_DOD 
unrecognized_ndio_2 = unrecognized_ndio_1 NOT nxwell 
unrecognized_dio_1 = COPY all_mos_gates 
unrecognized_dio_2 = COPY unrecognized_dio_1 
unrecognized_dio_n = tndiff_all INTERACT unrecognized_dio_2 
unrecognized_ndio_3 = unrecognized_ndio_2 NOT unrecognized_dio_n 
unrecognized_ndio_4 = diff AND unrecognized_ndio_3 
unrecognized_ndio = unrecognized_ndio_4 NOT SRM_all 
tpdiff1 = tpdiff_ori NOT tpdiff_dio 
tpdiff_all = tpdiff1 NOT tpdiff_bjt 
unrecognized_pdio_1 = tpdiff_all NOT SR_DOD 
unrecognized_pdio_2 = unrecognized_pdio_1 NOT psub 
unrecognized_dio_p = tpdiff_all INTERACT unrecognized_dio_2 
unrecognized_pdio_3 = unrecognized_pdio_2 NOT unrecognized_dio_p 
unrecognized_pdio_4 = diff AND unrecognized_pdio_3 
unrecognized_pdio = unrecognized_pdio_4 NOT SRM_all 

//***** Define connectivity/via layer -- mom14m2 ****
mom14m2 = mom14p21 NOT INTERACT mom14p2 

//***** Define connectivity/via layer -- mom3plus ****
mom3plus = M3 AND MOMDMY_PLUS 

//***** Define connectivity/via layer -- mom4m1 ****
mom4p11 = M4 AND MOMDMY_MXP1 
mom4p1 = mom4p11 AND MOMDMY_MXP12 
mom4m1 = mom4p11 NOT INTERACT mom4p1 

//***** Define connectivity/via layer -- n_gpoly_nocg_io ****
n_gpoly_nocg_io = n_gpoly_io1 AND nocg_dmy_io 
ODs = ODI AND gate1  //  for SRAM nfin

//***** Define connectivity/via layer -- n_fpoly_lvtll ****
n_fpoly_lvtll = npoly_co_lll NOT ODx 

//***** Define connectivity/via layer -- mom2p1_b ****
mom2p11_b = M2_B AND MOMDMY_MXP1 
mom2p1_b1 = mom2p11_b AND MOMDMY_MXP12 
mom2p1_b = mom2p1_b1 INTERACT VIA2 

//***** Define connectivity/via layer -- RH_TN_7 ****

//* Define layer -- rhim_r7a
rhim_r7a_tmp01 = RH_TNi AND RHDMY_ALL
rhim_r7a = rhim_r7a_tmp01 AND RHDMY7i

rhim_r7_body_and_via_up = rhim_r7a AND VIA6i 
rhim_r7 = rhim_r7a NOT INTERACT rhim_r7_body_and_via_up 
RH_TN_7 = RH_TN_all NOT rhim_r7 
VD2_MD_TAP_FB6P45_1 = VD2_MD_TAP NOT INTERACT VD2_MD_TAP_FB8P45_o 
VD2_MD_TAP_FB6P45 = VD2_MD_TAP_FB6P45_1 INTERACT VD2_MD_TAP_FB6P45_o 
pode_r_92_exclude_layer1 = DIODMYi OR IBJTDMY 
pode_r_92_exclude_layer2 = pode_r_92_exclude_layer1 OR HIA_DUMMY 
pode_r_92_exclude_layer = pode_r_92_exclude_layer2 OR SEALRING_ALL 
all_ppode_gate1 = tpgate0 NOT pode_r_92_exclude_layer 
all_ppode_gate = all_ppode_gate1 AND PODE_GATE 
all_abut_ppode_gate = all_ppode_gate INTERACT tpdiff_ori == 2

//***** Define connectivity/via layer -- mom12m2 ****
mom12m2 = mom12p21 NOT INTERACT mom12p2 

//* Define layer -- mkr_cfi_ncore_fb8b
mkr_cfi_ncore_fb8b_tmp01 = core_ngpoly_region AND FB8
mkr_cfi_ncore_fb8b_tmp02 = mkr_cfi_ncore_fb8b_tmp01 NOT FB9
mkr_cfi_ncore_fb8b_tmp03 = mkr_cfi_ncore_fb8b_tmp02 NOT FB_A
mkr_cfi_ncore_fb8b_tmp04 = mkr_cfi_ncore_fb8b_tmp03 AND FB_B
mkr_cfi_ncore_fb8b_tmp05 = mkr_cfi_ncore_fb8b_tmp04 NOT FB_C
mkr_cfi_ncore_fb8b = mkr_cfi_ncore_fb8b_tmp05 NOT PO_P51


//* Define layer -- mkr_cfi_ncore_fb9b
mkr_cfi_ncore_fb9b_tmp01 = core_ngpoly_region NOT FB8
mkr_cfi_ncore_fb9b_tmp02 = mkr_cfi_ncore_fb9b_tmp01 AND FB9
mkr_cfi_ncore_fb9b_tmp03 = mkr_cfi_ncore_fb9b_tmp02 NOT FB_A
mkr_cfi_ncore_fb9b_tmp04 = mkr_cfi_ncore_fb9b_tmp03 AND FB_B
mkr_cfi_ncore_fb9b_tmp05 = mkr_cfi_ncore_fb9b_tmp04 NOT FB_C
mkr_cfi_ncore_fb9b = mkr_cfi_ncore_fb9b_tmp05 NOT PO_P51

mkr_cfi_ncore_fb8b_fb9b = mkr_cfi_ncore_fb8b OR mkr_cfi_ncore_fb9b 

//***** Define connectivity/via layer -- VIA15 ****
RH_TN_16a = RH_TN_all INTERACT RHDMY16i 
VTIN_15 = VIA15i AND RH_TN_16a 
VIA15 = VIA15i NOT VTIN_15 
p_odtap_ext_1 = p_odtap_ext_all NOT INTERACT p_odtap_fb9b_ext_o 
p_odtap_ext_2 = p_odtap_ext_1 NOT INTERACT p_odtap_fb8b_cpp45_ext_o 
p_odtap_ext_3 = p_odtap_ext_2 NOT INTERACT p_odtap_fb8c_cpp45_ext_o 
p_odtap_ext_4 = p_odtap_ext_3 NOT INTERACT p_odtap_fb6b_cpp45_ext_o 
p_odtap_ext = p_odtap_ext_4 NOT INTERACT p_odtap_cpp51_ext_o 

//***** Define connectivity/via layer -- p_gpoly_ulvt ****
p_gpoly_ulvt_all = ppoly_co_ul AND ODx 
p_gpoly_ulvt = p_gpoly_ulvt_all NOT all_mos_gates 

//***** Define connectivity/via layer -- p_fpoly_ulvtll ****
p_fpoly_ulvtll = ppoly_co_ulll NOT ODx 
VD_mkr = VD NOT INTERACT VD_SRM_o 

//* Define layer -- mkr_cfi_pcore_fb8b
mkr_cfi_pcore_fb8b_tmp01 = core_pgpoly_region AND FB8
mkr_cfi_pcore_fb8b_tmp02 = mkr_cfi_pcore_fb8b_tmp01 NOT FB9
mkr_cfi_pcore_fb8b_tmp03 = mkr_cfi_pcore_fb8b_tmp02 NOT FB_A
mkr_cfi_pcore_fb8b_tmp04 = mkr_cfi_pcore_fb8b_tmp03 AND FB_B
mkr_cfi_pcore_fb8b_tmp05 = mkr_cfi_pcore_fb8b_tmp04 NOT FB_C
mkr_cfi_pcore_fb8b = mkr_cfi_pcore_fb8b_tmp05 NOT PO_P51


//* Define layer -- mkr_cfi_pcore_fb9b
mkr_cfi_pcore_fb9b_tmp01 = core_pgpoly_region NOT FB8
mkr_cfi_pcore_fb9b_tmp02 = mkr_cfi_pcore_fb9b_tmp01 AND FB9
mkr_cfi_pcore_fb9b_tmp03 = mkr_cfi_pcore_fb9b_tmp02 NOT FB_A
mkr_cfi_pcore_fb9b_tmp04 = mkr_cfi_pcore_fb9b_tmp03 AND FB_B
mkr_cfi_pcore_fb9b_tmp05 = mkr_cfi_pcore_fb9b_tmp04 NOT FB_C
mkr_cfi_pcore_fb9b = mkr_cfi_pcore_fb9b_tmp05 NOT PO_P51

mkr_cfi_pcore_fb8b_fb9b = mkr_cfi_pcore_fb8b OR mkr_cfi_pcore_fb9b 

//***** Define connectivity/via layer -- mom3minus ****
mom3minus = M3 AND MOMDMY_MINUS 

//***** Define connectivity/via layer -- mom5minus_b ****
mom5minus_b = M5_B AND MOMDMY_MINUS 

//***** Define connectivity/via layer -- mom14minus ****
mom14minus = M14 AND MOMDMY_MINUS 

//***** Define connectivity/via layer -- VIA9 ****
RH_TN_10a = RH_TN_all INTERACT RHDMY10i 
VTIN_9 = VIA9i AND RH_TN_10a 
VIA9 = VIA9i NOT VTIN_9 

//* Define layer -- mkr_cfi_p_srm_mp_1
mkr_cfi_p_srm_mp_1_tmp01 = sram_pgpoly_region NOT SRM11
mkr_cfi_p_srm_mp_1_tmp02 = mkr_cfi_p_srm_mp_1_tmp01 NOT SRM12
mkr_cfi_p_srm_mp_1_tmp03 = mkr_cfi_p_srm_mp_1_tmp02 AND SRM14
mkr_cfi_p_srm_mp_1_tmp04 = mkr_cfi_p_srm_mp_1_tmp03 NOT SRM15
mkr_cfi_p_srm_mp_1_tmp05 = mkr_cfi_p_srm_mp_1_tmp04 NOT SRM13
mkr_cfi_p_srm_mp_1_tmp06 = mkr_cfi_p_srm_mp_1_tmp05 NOT SRM16
mkr_cfi_p_srm_mp_1 = mkr_cfi_p_srm_mp_1_tmp06 NOT SRM17


//* Define layer -- mkr_cfi_p_srm_mp_2
mkr_cfi_p_srm_mp_2_tmp01 = sram_pgpoly_region NOT SRM11
mkr_cfi_p_srm_mp_2_tmp02 = mkr_cfi_p_srm_mp_2_tmp01 NOT SRM12
mkr_cfi_p_srm_mp_2_tmp03 = mkr_cfi_p_srm_mp_2_tmp02 NOT SRM14
mkr_cfi_p_srm_mp_2_tmp04 = mkr_cfi_p_srm_mp_2_tmp03 AND SRM15
mkr_cfi_p_srm_mp_2_tmp05 = mkr_cfi_p_srm_mp_2_tmp04 NOT SRM13
mkr_cfi_p_srm_mp_2_tmp06 = mkr_cfi_p_srm_mp_2_tmp05 NOT SRM16
mkr_cfi_p_srm_mp_2 = mkr_cfi_p_srm_mp_2_tmp06 NOT SRM17

mkr_cfi_p_srm_mpa = mkr_cfi_p_srm_mp_1 OR mkr_cfi_p_srm_mp_2 

//* Define layer -- mkr_cfi_p_srm_mp_3
mkr_cfi_p_srm_mp_3_tmp01 = sram_pgpoly_region NOT SRM11
mkr_cfi_p_srm_mp_3_tmp02 = mkr_cfi_p_srm_mp_3_tmp01 NOT SRM12
mkr_cfi_p_srm_mp_3_tmp03 = mkr_cfi_p_srm_mp_3_tmp02 NOT SRM14
mkr_cfi_p_srm_mp_3_tmp04 = mkr_cfi_p_srm_mp_3_tmp03 NOT SRM15
mkr_cfi_p_srm_mp_3_tmp05 = mkr_cfi_p_srm_mp_3_tmp04 AND SRM13
mkr_cfi_p_srm_mp_3_tmp06 = mkr_cfi_p_srm_mp_3_tmp05 NOT SRM16
mkr_cfi_p_srm_mp_3 = mkr_cfi_p_srm_mp_3_tmp06 NOT SRM17

mkr_cfi_p_srm_mpb = mkr_cfi_p_srm_mpa OR mkr_cfi_p_srm_mp_3 

//* Define layer -- mkr_cfi_p_srm_mp_4
mkr_cfi_p_srm_mp_4_tmp01 = sram_pgpoly_region NOT SRM11
mkr_cfi_p_srm_mp_4_tmp02 = mkr_cfi_p_srm_mp_4_tmp01 NOT SRM12
mkr_cfi_p_srm_mp_4_tmp03 = mkr_cfi_p_srm_mp_4_tmp02 NOT SRM14
mkr_cfi_p_srm_mp_4_tmp04 = mkr_cfi_p_srm_mp_4_tmp03 NOT SRM15
mkr_cfi_p_srm_mp_4_tmp05 = mkr_cfi_p_srm_mp_4_tmp04 NOT SRM13
mkr_cfi_p_srm_mp_4_tmp06 = mkr_cfi_p_srm_mp_4_tmp05 AND SRM16
mkr_cfi_p_srm_mp_4 = mkr_cfi_p_srm_mp_4_tmp06 NOT SRM17

mkr_cfi_p_srm_mpc = mkr_cfi_p_srm_mpb OR mkr_cfi_p_srm_mp_4 

//* Define layer -- mkr_cfi_p_srm_mp_5
mkr_cfi_p_srm_mp_5_tmp01 = sram_pgpoly_region NOT SRM11
mkr_cfi_p_srm_mp_5_tmp02 = mkr_cfi_p_srm_mp_5_tmp01 NOT SRM12
mkr_cfi_p_srm_mp_5_tmp03 = mkr_cfi_p_srm_mp_5_tmp02 NOT SRM14
mkr_cfi_p_srm_mp_5_tmp04 = mkr_cfi_p_srm_mp_5_tmp03 NOT SRM15
mkr_cfi_p_srm_mp_5_tmp05 = mkr_cfi_p_srm_mp_5_tmp04 NOT SRM13
mkr_cfi_p_srm_mp_5_tmp06 = mkr_cfi_p_srm_mp_5_tmp05 NOT SRM16
mkr_cfi_p_srm_mp_5 = mkr_cfi_p_srm_mp_5_tmp06 AND SRM17

mkr_cfi_p_srm_mp = mkr_cfi_p_srm_mpc OR mkr_cfi_p_srm_mp_5 

//***** Define connectivity/via layer -- mom11m1 ****
mom11p11 = M11 AND MOMDMY_MXP1 
mom11p1 = mom11p11 AND MOMDMY_MXP12 
mom11m1 = mom11p11 NOT INTERACT mom11p1 

//***** Define connectivity/via layer -- mom2m1_a ****
mom2m11_a = M2_A AND MOMDMY_MXP1 
mom2m1_a1 = mom2m11_a NOT MOMDMY_MXP12 
mom2m1_a = mom2m1_a1 INTERACT VIA2 
valid_rh_tn7 = RHDMY7i INTERACT rhim_r7 
unrecognized_rh_tn7a = RHDMY7i NOT valid_rh_tn7 
unrecognized_rh_tn_body_with_vtin6 = rhim_r7a INTERACT rhim_r7_body_and_via_up 
unrecognized_rh_tn7 = unrecognized_rh_tn7a OR unrecognized_rh_tn_body_with_vtin6 
unrecognized_rh_tn = COPY unrecognized_rh_tn7 

//***** Define connectivity/via layer -- mom1p1_b ****
mom1p11_b = M1_B AND MOMDMY_MXP1 
mom1p1_b1 = mom1p11_b AND MOMDMY_MXP12 
mom1p1_b = mom1p1_b1 INTERACT VIA1 
ponnw_s = realpo_s NOT nxwell 
nponnw_s = ponnw_s AND NP  //  SRAM NMOS
ngate_s_normal1 = nponnw_s AND SRMDEV 
ngate_s_normal3 = ngate_s_normal1 INTERACT gate1 
ngate_s_normal = ngate_s_normal3 NOT RODMY_srm 
erc_nmos_gates = COPY tngate1 

//***** Define connectivity/via layer -- mom1m2_b ****
mom1m21_b = M1_B AND MOMDMY_MXP2 
mom1m2_b1 = mom1m21_b NOT MOMDMY_MXP12 
mom1m2_b = mom1m2_b1 INTERACT VIA1 

//***** Define connectivity/via layer -- mom5p1_a ****
mom5p11_a = M5_A AND MOMDMY_MXP1 
mom5p1_a1 = mom5p11_a AND MOMDMY_MXP12 
mom5p1_a = mom5p1_a1 INTERACT VIA5 
sram_ngpoly_region_1 = ngate_pg_hdsr_mac OR ngate_pd_hdsr_mac 
sram_ngpoly_region_2 = sram_ngpoly_region_1 OR ngate_pg_hcsr_mac 
sram_ngpoly_region_3 = sram_ngpoly_region_2 OR ngate_pd_hcsr_mac 
sram_ngpoly_region_4 = sram_ngpoly_region_3 OR ngate_pg_hshcsr_mac 
sram_ngpoly_region_5 = sram_ngpoly_region_4 OR ngate_pd_hshcsr_mac 
sram_ngpoly_region_6 = sram_ngpoly_region_5 OR ngate_pg_8tsr_mac 
sram_ngpoly_region_7 = sram_ngpoly_region_6 OR ngate_pd_8tsr_mac 
sram_ngpoly_region_8 = sram_ngpoly_region_7 OR ngate_pg_8trpsr_mac 
sram_ngpoly_region_9 = sram_ngpoly_region_8 OR ngate_pd_8trpsr_mac 
sram_ngpoly_region_10 = sram_ngpoly_region_9 OR ngate_pg_hc8tsr_mac 
sram_ngpoly_region_11 = sram_ngpoly_region_10 OR ngate_pd_hc8tsr_mac 
sram_ngpoly_region_12 = sram_ngpoly_region_11 OR ngate_pg_hc8trpsr_mac 
sram_ngpoly_region_13 = sram_ngpoly_region_12 OR ngate_pd_hc8trpsr_mac 
sram_ngpoly_region_14 = sram_ngpoly_region_13 OR ngate_pg_10tsr_mac 
sram_ngpoly_region_15 = sram_ngpoly_region_14 OR ngate_pd_10tsr_mac 
sram_ngpoly_region_16 = sram_ngpoly_region_15 OR ngate_pg_10trpsr_mac 
sram_ngpoly_region_17 = sram_ngpoly_region_16 OR ngate_pd_10trpsr_mac 
sram_ngpoly_region_18 = sram_ngpoly_region_17 OR ngate_pd_ulvtll10trpsr_mac 
sram_ngpoly_region_19 = sram_ngpoly_region_18 OR ngate_pd_ulvtll10tsr_mac 
sram_ngpoly_region_20 = sram_ngpoly_region_19 OR ngate_pd_ulvtll8trpsr_mac 
sram_ngpoly_region_21 = sram_ngpoly_region_20 OR ngate_pd_ulvtll8tsr_mac 
sram_ngpoly_region_22 = sram_ngpoly_region_21 OR ngate_pd_ulvtllhc8trpsr_mac 
sram_ngpoly_region_23 = sram_ngpoly_region_22 OR ngate_pd_ulvtllhc8tsr_mac 
sram_ngpoly_region_24 = sram_ngpoly_region_23 OR ngate_pg_ulvtll10trpsr_mac 
sram_ngpoly_region_25 = sram_ngpoly_region_24 OR ngate_pg_ulvtll10tsr_mac 
sram_ngpoly_region_26 = sram_ngpoly_region_25 OR ngate_pg_ulvtll8trpsr_mac 
sram_ngpoly_region_27 = sram_ngpoly_region_26 OR ngate_pg_ulvtll8tsr_mac 
sram_ngpoly_region_28 = sram_ngpoly_region_27 OR ngate_pg_ulvtllhc8trpsr_mac 
sram_ngpoly_region_29 = sram_ngpoly_region_28 OR ngate_pg_ulvtllhc8tsr_mac 
sram_ngpoly_region_30 = sram_ngpoly_region_29 OR ngate_pg_dpsr_mac 
sram_ngpoly_region_31 = sram_ngpoly_region_30 OR ngate_pd_dpsr_mac 
sram_ngpoly_region = sram_ngpoly_region_31 OR n_gpoly_srm 

//***** Define connectivity/via layer -- BPC_HV2_2 ****
BPC_HV2_2 = COPY BPC_HV2 
gate1_not_IO2a = COPY gate1 
gate1_not_IO2b = gate1_not_IO2a NOT PODE_GATE 
gate1_not_IO2 = gate1_not_IO2b NOT OD2 

//***** Define connectivity/via layer -- BPC_LVHV_DMY_2 ****
BPC_LVHV_DMY_2_a = BPC_LVHV_DMY INTERACT shp2 
BPC_LVHV_DMY_2_b = BPC_LVHV_DMY NOT INTERACT shp2 
BPC_LVHV_DMY_2 = BPC_LVHV_DMY_2_a OR BPC_LVHV_DMY_2_b 

//***** Define connectivity/via layer -- p_pode_lvt ****
ppode_co_l = ppoly_l AND PODE_3T 
p_pode_lvt = ppode_co_l NOT all_mos_gates 

//***** Define connectivity/via layer -- M0_VD2_TAP ****
M0_AB = M0_A OR M0_B 
M0_VD2_TAP = VD2i AND M0_AB 

//***** Define connectivity/via layer -- p_pode_elvt ****
ppode_co_el = ppoly_el AND PODE_3T 
p_pode_elvt = ppode_co_el NOT all_mos_gates 

//***** Define connectivity/via layer -- p_fpoly_io ****
p_fpoly_io = ppoly_io NOT ODx 
tngate2 = tngate1 NOT PODE_GATE 
tngate3a = tngate2 NOT INTERACT SDI_2 

//***** Define connectivity/via layer -- VIA10 ****
RH_TN_11a = RH_TN_all INTERACT RHDMY11i 
VTIN_10 = VIA10i AND RH_TN_11a 
VIA10 = VIA10i NOT VTIN_10 

//* Define layer -- mkr_cfi_pcore_p51
mkr_cfi_pcore_p51 = core_pgpoly_region AND PO_P51


//***** Define connectivity/via layer -- mom2p2_b ****
mom2p21_b = M2_B AND MOMDMY_MXP2 
mom2p2_b1 = mom2p21_b AND MOMDMY_MXP12 
mom2p2_b = mom2p2_b1 INTERACT VIA2 

//***** Define connectivity/via layer -- mom10minus ****
mom10minus = M10 AND MOMDMY_MINUS 

//***** Define connectivity/via layer -- p_gpoly_lvt ****
p_gpoly_lvt = p_gpoly_lvt1 NOT nocg_dmy 

//* Define layer -- mkr_cfi_ncore_others
mkr_cfi_ncore_others_tmp01 = core_ngpoly_region NOT FB8
mkr_cfi_ncore_others_tmp02 = mkr_cfi_ncore_others_tmp01 NOT FB9
mkr_cfi_ncore_others = mkr_cfi_ncore_others_tmp02 NOT PO_P51


//***** Define connectivity/via layer -- mom14m1 ****
mom14m1 = mom14p11 NOT INTERACT mom14p1 

//* Define layer -- M1_B_SRM01
M1_B_SRM01_tmp01 = SRM AND SRM11
M1_B_SRM01 = M1_B_SRM01_tmp01 AND M1_B

MOM_field2 = metal2i AND MOMDMY2 
n_odtap_fb9b_ext = n_odtap_ext_all INTERACT n_odtap_fb9b_ext_o 

//***** Define connectivity/via layer -- BPC_GND_1 ****
BPC_GND_1_a = BPC_GND INTERACT shp1 
BPC_GND_1_b = BPC_GND NOT INTERACT shp1 
BPC_GND_1 = BPC_GND_1_a OR BPC_GND_1_b 
unrecognized_mos_7 = realpo NOT all_mos_gates 
unrecognized_mos_8 = unrecognized_mos_7 AND diff 
unrecognized_mos_3 = BJTDMY OR all_diode_rec 
unrecognized_mos_9 = unrecognized_mos_8 NOT unrecognized_mos_3 
unrecognized_mos_4 = NP AND nxwell 
unrecognized_mos_5 = PP AND psub 
unrecognized_mos_6 = unrecognized_mos_4 OR unrecognized_mos_5 
unrecognized_mos_10 = unrecognized_mos_9 NOT unrecognized_mos_6 
unrecognized_mos = unrecognized_mos_10 NOT SRM_all 

//***** Define connectivity/via layer -- p_pode_ulvt ****
ppode_co_ul = ppoly_ul AND PODE_3T 
p_pode_ulvt = ppode_co_ul NOT all_mos_gates 

//***** Define connectivity/via layer -- p_pode_io ****
ppode_io = ppoly_ioa AND PODE_3T 
p_pode_io = ppode_io NOT all_mos_gates 
MOM_field17 = metal17i AND MOMDMY17 
n_odtap_fb6b_cpp45_ext_1 = n_odtap_ext_all NOT INTERACT n_odtap_fb9b_ext_o 
n_odtap_fb6b_cpp45_ext_2 = n_odtap_fb6b_cpp45_ext_1 NOT INTERACT n_odtap_fb8b_cpp45_ext_o 
n_odtap_fb6b_cpp45_ext_3 = n_odtap_fb6b_cpp45_ext_2 NOT INTERACT n_odtap_fb8c_cpp45_ext_o 
n_odtap_fb6b_cpp45_ext = n_odtap_fb6b_cpp45_ext_3 INTERACT n_odtap_fb6b_cpp45_ext_o 

//***** Define connectivity/via layer -- p_pode_svt ****
ppode_co_s = ppoly_s AND PODE_3T 
p_pode_svt = ppode_co_s NOT all_mos_gates 

//***** Define connectivity/via layer -- MPC_LV_DMY_2 ****
MPC_LV_DMY_2_a = MPC_LV_DMY INTERACT shp2 
MPC_LV_DMY_2_b = MPC_LV_DMY NOT INTERACT shp2 
MPC_LV_DMY_2 = MPC_LV_DMY_2_a OR MPC_LV_DMY_2_b 

//***** Define connectivity/via layer -- mom0p1_b ****
mom0p11_b = M0_B AND MOMDMY_MXP1 
mom0p1_b1 = mom0p11_b AND MOMDMY_MXP12 
mom0p1_b = mom0p1_b1 INTERACT VIA0 
dio0 = mdiff INTERACT POI 

//***** Define connectivity/via layer -- TPC ****
TPC = TPC_FINAL OR TPCDMY 
MOM_field0 = metal0i AND MOMDMY0 

//***** Define connectivity/via layer -- VIA17 ****
RH_TN_18a = RH_TN_all INTERACT RHDMY18i 
VTIN_17 = VIA17i AND RH_TN_18a 
VIA17 = VIA17i NOT VTIN_17 

//***** Define connectivity/via layer -- nplug ****
nplug1 = tndiff_ori AND nxwell 
nplug2 = nplug1 AND plug_sel 
tpdiffco = tpdiff_ori INTERACT MD_valid 
nplug3 = nplug1 INTERACT tpdiffco 
nplug = nplug2 OR nplug3 

//***** Define connectivity/via layer -- mom13p1 ****
mom13p11 = M13 AND MOMDMY_MXP1 
mom13p1 = mom13p11 AND MOMDMY_MXP12 
erc_pmos_gates = COPY tpgate1 

//***** Define connectivity/via layer -- MPC ****
MPC = MPC_FINAL OR MPCDMY 

//***** Define connectivity/via layer -- mom2p2_a ****
mom2p21_a = M2_A AND MOMDMY_MXP2 
mom2p2_a1 = mom2p21_a AND MOMDMY_MXP12 
mom2p2_a = mom2p2_a1 INTERACT VIA2 

//***** Define connectivity/via layer -- n_fpoly_svt ****
n_fpoly_svt = npoly_co_s NOT ODx 

//* Define layer -- M1_A_SRM01
M1_A_SRM01_tmp01 = SRM AND SRM11
M1_A_SRM01 = M1_A_SRM01_tmp01 AND M1_A


//* Define layer -- M1_B_SRM02_1
M1_B_SRM02_1_tmp01 = SRM AND SRM12
M1_B_SRM02_1 = M1_B_SRM02_1_tmp01 AND M1_B


//* Define layer -- M1_B_SRM02_2
M1_B_SRM02_2_tmp01 = SRM AND SRM14
M1_B_SRM02_2 = M1_B_SRM02_2_tmp01 AND M1_B

M1_B_SRM02a = M1_B_SRM02_1 OR M1_B_SRM02_2 

//* Define layer -- M1_B_SRM02_3
M1_B_SRM02_3_tmp01 = SRM AND SRM15
M1_B_SRM02_3 = M1_B_SRM02_3_tmp01 AND M1_B

M1_B_SRM02 = M1_B_SRM02a OR M1_B_SRM02_3 

//***** Define connectivity/via layer -- MD_OD_P ****
MD_OD_P = MD_OD_P1 NOT SRM_all 

//***** Define connectivity/via layer -- ntap ****
ntapx = tndiff_ori AND NW 
ntap1 = ntapx NOT BJTDMY 
ntap2 = ntap1 INTERACT plug_valid 
ntap3 = ntap1 INTERACT tpdiffco 
ntap = ntap2 OR ntap3 

//***** Define connectivity/via layer -- RV_MTOP_BPC ****
RV_MTOP_BPC1 = Cu_RVi AND BPC_GND_all 
RV_MTOP_BPC_shp = RV_MTOP_BPC1 AND M18 
RV_MTOP_BPC1_shd = Cu_RVi AND BPC_FINAL 
RV_MTOP_BPC_shd = RV_MTOP_BPC1_shd AND M18 
RV_MTOP_BPC = RV_MTOP_BPC_shp OR RV_MTOP_BPC_shd 

//***** Define connectivity/via layer -- mom0p1_a ****
mom0p11_a = M0_A AND MOMDMY_MXP1 
mom0p1_a1 = mom0p11_a AND MOMDMY_MXP12 
mom0p1_a = mom0p1_a1 INTERACT VIA0 

//***** Define connectivity/via layer -- BPC ****
BPC = BPC_FINAL OR BPCDMY 

//***** Define connectivity/via layer -- mom1minus_b ****
mom1minus_b = M1_B AND MOMDMY_MINUS 

//***** Define connectivity/via layer -- p_odtap_bjt ****
p_odtap_bjt = p_odtap2 AND tpdiff_bjt 
MOM_field18 = metal18i AND MOMDMY18 

//* Define layer -- M1_A_SRM02_1
M1_A_SRM02_1_tmp01 = SRM AND SRM12
M1_A_SRM02_1 = M1_A_SRM02_1_tmp01 AND M1_A


//* Define layer -- M1_A_SRM02_2
M1_A_SRM02_2_tmp01 = SRM AND SRM14
M1_A_SRM02_2 = M1_A_SRM02_2_tmp01 AND M1_A

M1_A_SRM02a = M1_A_SRM02_1 OR M1_A_SRM02_2 

//* Define layer -- M1_A_SRM02_3
M1_A_SRM02_3_tmp01 = SRM AND SRM15
M1_A_SRM02_3 = M1_A_SRM02_3_tmp01 AND M1_A

M1_A_SRM02 = M1_A_SRM02a OR M1_A_SRM02_3 
VAR_noRF = VAR NOT INTERACT RFDMYi 
vargt1 = gatenw AND VAR_noRF 
vargt2 = vargt1 NOT var_exclude_layer 

//***** Define connectivity/via layer -- mom13p2 ****
mom13p21 = M13 AND MOMDMY_MXP2 
mom13p2 = mom13p21 AND MOMDMY_MXP12 
nxwell_float1 = nxwell NOT INTERACT VAR  //  exclude nwell under VAR for floating nwell check
nxwell_float2 = nxwell_float1 NOT TCDOVL  //  exclude dummy nwell under TCDDMY
nxwell_dc1a = nxwell AND DC1 
nxwell_dc1 = nxwell_dc1a NOT INTERACT diff 
nxwell_float3 = nxwell_float2 NOT nxwell_dc1  //  exclude dummy nwell in dummy cell 1
nxwell_sealring1 = nxwell AND SEALRING_ALL 
nxwell_sealring = nxwell_sealring1 NOT INTERACT diff 
nxwell_float = nxwell_float3 NOT nxwell_sealring  //  exclude dummy nwell in sealring_all layer
VD2_MD_TAP_FB8P45 = VD2_MD_TAP INTERACT VD2_MD_TAP_FB8P45_o 

//***** Define connectivity/via layer -- MPC_LV_DMY_1 ****
MPC_LV_DMY_1_a = MPC_LV_DMY INTERACT shp1 
MPC_LV_DMY_1_b = MPC_LV_DMY NOT INTERACT shp1 
MPC_LV_DMY_1 = MPC_LV_DMY_1_a OR MPC_LV_DMY_1_b 

//***** Define connectivity/via layer -- mom1plus_a ****
mom1plus_a = M1_A AND MOMDMY_PLUS 
all_sd1 = tndiff_ori2 OR tpdiff_ori2 
all_sd = all_sd1 NOT POx  //  for layout effect measurement

//***** Define connectivity/via layer -- mom4minus ****
mom4minus = M4 AND MOMDMY_MINUS 

//***** Define connectivity/via layer -- mom13m2 ****
mom13m2 = mom13p21 NOT INTERACT mom13p2 

//***** Define connectivity/via layer -- n_fpoly_elvt ****
n_fpoly_elvt = npoly_co_el NOT ODx 

//***** Define connectivity/via layer -- RV_BPC_BOT_RDL ****
RV_BPC_BOT_RDL1 = Cu_RVi AND Cu_RDL 
RV_BPC_BOT_RDL2 = RV_BPC_BOT_RDL1 AND BPC_LVHV_all 
RV_BPC_BOT_RDL = RV_BPC_BOT_RDL2 NOT MPC_LV_all 

//***** Define connectivity/via layer -- mom10m2 ****
mom10m2 = mom10p21 NOT INTERACT mom10p2 
MOM_field14 = metal14i AND MOMDMY14 
ngate_hia_reg = tngate2 INTERACT SDI_2 

//***** Define connectivity/via layer -- mom9minus ****
mom9minus = M9 AND MOMDMY_MINUS 

//***** Define connectivity/via layer -- mom12plus ****
mom12plus = M12 AND MOMDMY_PLUS 

//***** Define connectivity/via layer -- mom5m2_a ****
mom5m21_a = M5_A AND MOMDMY_MXP2 
mom5m2_a1 = mom5m21_a NOT MOMDMY_MXP12 
mom5m2_a = mom5m2_a1 INTERACT VIA5 

//***** Define connectivity/via layer -- MPC_LV_2 ****
MPC_LV_2_a = MPC_LV INTERACT shp2 
MPC_LV_2_b = MPC_LV NOT INTERACT shp2 
MPC_LV_2 = MPC_LV_2_a OR MPC_LV_2_b 
tpgate2 = tpgate1 NOT PODE_GATE 
dfm_gate1a = gate1 NOT INTERACT SRM_all 
dfm_gate1 = dfm_gate1a NOT PODE_3T 

//* Define layer -- M3_SRM01
M3_SRM01_tmp01 = SRM AND SRM11
M3_SRM01 = M3_SRM01_tmp01 AND M3

MOMDMY_tbs_stop_acc1_tmp0 = MOMDMY1 NOT INTERACT MOM_field2 
MOM_field1 = metal1i AND MOMDMY1 
MOMDMY_tbs_stop_acc0 = MOMDMY0 NOT INTERACT MOM_field1 
MOMDMY_tbs_stop_acc1 = MOMDMY_tbs_stop_acc1_tmp0 OR MOMDMY_tbs_stop_acc0 
MOMDMY_tbs_stop_acc2 = MOMDMY_tbs_stop_acc2_tmp0 OR MOMDMY_tbs_stop_acc1 
MOMDMY_tbs_stop_acc3 = MOMDMY_tbs_stop_acc3_tmp0 OR MOMDMY_tbs_stop_acc2 
MOMDMY_tbs_stop_acc4 = MOMDMY_tbs_stop_acc4_tmp0 OR MOMDMY_tbs_stop_acc3 
MOMDMY_tbs_stop_acc5 = MOMDMY_tbs_stop_acc5_tmp0 OR MOMDMY_tbs_stop_acc4 
MOMDMY_tbs_stop_acc6 = MOMDMY_tbs_stop_acc6_tmp0 OR MOMDMY_tbs_stop_acc5 
MOMDMY_tbs_stop_acc7 = MOMDMY_tbs_stop_acc7_tmp0 OR MOMDMY_tbs_stop_acc6 
MOMDMY_tbs_stop_acc8 = MOMDMY_tbs_stop_acc8_tmp0 OR MOMDMY_tbs_stop_acc7 
MOMDMY_tbs_stop_acc9 = MOMDMY_tbs_stop_acc9_tmp0 OR MOMDMY_tbs_stop_acc8 
MOMDMY_tbs_stop_acc10 = MOMDMY_tbs_stop_acc10_tmp0 OR MOMDMY_tbs_stop_acc9 
MOMDMY_tbs_stop_acc11 = MOMDMY_tbs_stop_acc11_tmp0 OR MOMDMY_tbs_stop_acc10 
MOMDMY_tbs_stop_acc = MOMDMY_tbs_stop_acc12_tmp0 OR MOMDMY_tbs_stop_acc11 

//***** Define connectivity/via layer -- dnwc ****
dnwc1 = DNW AND nxwell 
dnwc = dnwc1 NOT TCDOVL 
gate_4t = gate NOT PODE_3T 
gate_core_4t = gate_4t NOT OD12 
gate_ppitch1 = gate_core_4t AND PO_P51 
ppitch_aux = DFM PROPERTY gate_core_4t gate_ppitch1 OVERLAP ABUT ALSO MULTI
[ppitch = 1*count(gate_ppitch1)]

//***** Define connectivity/via layer -- VIA12 ****
RH_TN_13a = RH_TN_all INTERACT RHDMY13i 
VTIN_12 = VIA12i AND RH_TN_13a 
VIA12 = VIA12i NOT VTIN_12 

//***** Define connectivity/via layer -- RV_BPC_BOT_MPC ****
RV_BPC_BOT_MPC1 = Cu_RVi AND MPC_LV_all 
RV_BPC_BOT_MPC = RV_BPC_BOT_MPC1 AND BPC_LVHV_all 

//***** Define connectivity/via layer -- mom0m1_a ****
mom0m11_a = M0_A AND MOMDMY_MXP1 
mom0m1_a1 = mom0m11_a NOT MOMDMY_MXP12 
mom0m1_a = mom0m1_a1 INTERACT VIA0 

//* Define layer -- M0_A_SRM03_1
M0_A_SRM03_1_tmp01 = SRM AND SRM16
M0_A_SRM03_1 = M0_A_SRM03_1_tmp01 AND M0_A


//* Define layer -- M0_A_SRM03_2
M0_A_SRM03_2_tmp01 = SRM AND SRM17
M0_A_SRM03_2 = M0_A_SRM03_2_tmp01 AND M0_A

M0_A_SRM03a = M0_A_SRM03_1 OR M0_A_SRM03_2 

//* Define layer -- M0_A_SRM03_3
M0_A_SRM03_3_tmp01 = SRM AND SRM13
M0_A_SRM03_3 = M0_A_SRM03_3_tmp01 AND M0_A

M0_A_SRM03 = M0_A_SRM03a OR M0_A_SRM03_3 

//***** Define connectivity/via layer -- VG_MP ****
VG_MP = MP AND poly_org 

//***** Define connectivity/via layer -- mom2m2_b ****
mom2m21_b = M2_B AND MOMDMY_MXP2 
mom2m2_b1 = mom2m21_b NOT MOMDMY_MXP12 
mom2m2_b = mom2m2_b1 INTERACT VIA2 

//***** Define connectivity/via layer -- mom6m2 ****
mom6p21 = M6 AND MOMDMY_MXP2 
mom6p2 = mom6p21 AND MOMDMY_MXP12 
mom6m2 = mom6p21 NOT INTERACT mom6p2 

//***** Define connectivity/via layer -- mom9m2 ****
mom9m2 = mom9p21 NOT INTERACT mom9p2 
MOM_field15 = metal15i AND MOMDMY15 

//***** Define connectivity/via layer -- mom11minus ****
mom11minus = M11 AND MOMDMY_MINUS 

//***** Define connectivity/via layer -- VG ****
VG = COPY VGi 

//***** Define connectivity/via layer -- mom13m1 ****
mom13m1 = mom13p11 NOT INTERACT mom13p1 
core_pmos_gates = tpgate1 NOT OD2 

//***** Define connectivity/via layer -- VIA3 ****
RH_TN_4a = RH_TN_all INTERACT RHDMY4i 
VTIN_3 = VIA3i AND RH_TN_4a 
VIA3 = VIA3i NOT VTIN_3 

//* Define layer -- mkr_cfi_ncore_fb9a
mkr_cfi_ncore_fb9a_tmp01 = core_ngpoly_region NOT FB8
mkr_cfi_ncore_fb9a_tmp02 = mkr_cfi_ncore_fb9a_tmp01 AND FB9
mkr_cfi_ncore_fb9a_tmp03 = mkr_cfi_ncore_fb9a_tmp02 AND FB_A
mkr_cfi_ncore_fb9a_tmp04 = mkr_cfi_ncore_fb9a_tmp03 NOT FB_B
mkr_cfi_ncore_fb9a_tmp05 = mkr_cfi_ncore_fb9a_tmp04 NOT FB_C
mkr_cfi_ncore_fb9a = mkr_cfi_ncore_fb9a_tmp05 NOT PO_P51


//***** Define connectivity/via layer -- MD_STI_SRM ****
MD_STI_SRM = MD_STIb AND SRM_all 

//***** Define connectivity/via layer -- BPC_HV1_1 ****
BPC_HV1_1 = COPY BPC_HV1 

//***** Define connectivity/via layer -- BPC_LVHV_DMY_1 ****
BPC_LVHV_DMY_1_a = BPC_LVHV_DMY INTERACT shp1 
BPC_LVHV_DMY_1_b = BPC_LVHV_DMY NOT INTERACT shp1 
BPC_LVHV_DMY_1 = BPC_LVHV_DMY_1_a OR BPC_LVHV_DMY_1_b 

//***** Define connectivity/via layer -- p_pode_lvtll ****
ppode_co_lll = ppoly_lll AND PODE_3T 
p_pode_lvtll = ppode_co_lll NOT all_mos_gates 

//***** Define connectivity/via layer -- mom3m2 ****
mom3p21 = M3 AND MOMDMY_MXP2 
mom3p2 = mom3p21 AND MOMDMY_MXP12 
mom3m2 = mom3p21 NOT INTERACT mom3p2 

//***** Define connectivity/via layer -- mom7plus ****
mom7plus = M7 AND MOMDMY_PLUS 

//* Define layer -- mkr_cfi_pcore_fb8c
mkr_cfi_pcore_fb8c_tmp01 = core_pgpoly_region AND FB8
mkr_cfi_pcore_fb8c_tmp02 = mkr_cfi_pcore_fb8c_tmp01 NOT FB9
mkr_cfi_pcore_fb8c_tmp03 = mkr_cfi_pcore_fb8c_tmp02 NOT FB_A
mkr_cfi_pcore_fb8c_tmp04 = mkr_cfi_pcore_fb8c_tmp03 NOT FB_B
mkr_cfi_pcore_fb8c_tmp05 = mkr_cfi_pcore_fb8c_tmp04 AND FB_C
mkr_cfi_pcore_fb8c = mkr_cfi_pcore_fb8c_tmp05 NOT PO_P51

all_npode_gate1 = tngate0 NOT pode_r_92_exclude_layer 
all_npode_gate = all_npode_gate1 AND PODE_GATE 
all_abut_npode_gate = all_npode_gate INTERACT tndiff_ori == 2

//* Define layer -- mkr_cfi_pcore_fb9a
mkr_cfi_pcore_fb9a_tmp01 = core_pgpoly_region NOT FB8
mkr_cfi_pcore_fb9a_tmp02 = mkr_cfi_pcore_fb9a_tmp01 AND FB9
mkr_cfi_pcore_fb9a_tmp03 = mkr_cfi_pcore_fb9a_tmp02 AND FB_A
mkr_cfi_pcore_fb9a_tmp04 = mkr_cfi_pcore_fb9a_tmp03 NOT FB_B
mkr_cfi_pcore_fb9a_tmp05 = mkr_cfi_pcore_fb9a_tmp04 NOT FB_C
mkr_cfi_pcore_fb9a = mkr_cfi_pcore_fb9a_tmp05 NOT PO_P51


//***** Define connectivity/via layer -- mom2plus_a ****
mom2plus_a = M2_A AND MOMDMY_PLUS 
match_gate = gate NOT PODE_3T  //  Only support Core and IO
v_shrink = SHRINK ANARRAY_HS TOP BY ANARRAY_SHRINK BOTTOM BY ANARRAY_SHRINK
v_edge1 = GROW v_shrink TOP BY ANARRAY_SHRINK BOTTOM BY ANARRAY_SHRINK
v_edge = v_edge1 NOT v_shrink  //  define edge region
inner_reg1 = ANARRAY_HS NOT v_edge 
h_shrink = SHRINK ANARRAY_HS RIGHT BY ANARRAY_SHRINK LEFT BY ANARRAY_SHRINK
h_edge1 = GROW h_shrink RIGHT BY ANARRAY_SHRINK LEFT BY ANARRAY_SHRINK
h_edge = h_edge1 NOT h_shrink  //  define edge region
inner_reg = inner_reg1 NOT h_edge  //  define inner region
gate_inr1 = match_gate AND inner_reg 
gate_cut = match_gate CUT inner_reg
gate_inr = gate_inr1 NOT gate_cut  //  Only inside inner region 
gate_hs = match_gate AND ANARRAY_HS 
gate_edg = gate_hs NOT gate_inr  //  outside inner and cut inner belongs to edge
matching_aux = DFM PROPERTY match_gate gate_inr gate_edg OVERLAP ABUT ALSO MULTI
[matching_region = 1*count(gate_inr) + 2*count(gate_edg) ]

//***** Define connectivity/via layer -- mom8plus ****
mom8plus = M8 AND MOMDMY_PLUS 

//***** Define connectivity/via layer -- MPC_LV_1 ****
MPC_LV_1_a = MPC_LV INTERACT shp1 
MPC_LV_1_b = MPC_LV NOT INTERACT shp1 
MPC_LV_1 = MPC_LV_1_a OR MPC_LV_1_b 

//***** Define connectivity/via layer -- Cu_RV ****
Cu_RV_logic1 = Cu_RVi NOT RV_TPC_RDL 
Cu_RV_logic2 = Cu_RV_logic1 NOT RV_MPC_RDL 
Cu_RV_logic3 = Cu_RV_logic2 NOT RV_BPC_TPC 
Cu_RV_logic4 = Cu_RV_logic3 NOT RV_MTOP_BPC 
Cu_RV_logic5 = Cu_RV_logic4 NOT RV_MTOP_MPC 
Cu_RV_logic6 = Cu_RV_logic5 NOT RV_MTOP_BPC_BOT 
Cu_RV_logic7 = Cu_RV_logic6 NOT RV_BPC_BOT_MPC 
Cu_RV_logic = Cu_RV_logic7 NOT RV_BPC_BOT_RDL 
Cu_RV = Cu_RV_logic OR CB 

//* Define layer -- mkr_cfi_ncore_fb8c
mkr_cfi_ncore_fb8c_tmp01 = core_ngpoly_region AND FB8
mkr_cfi_ncore_fb8c_tmp02 = mkr_cfi_ncore_fb8c_tmp01 NOT FB9
mkr_cfi_ncore_fb8c_tmp03 = mkr_cfi_ncore_fb8c_tmp02 NOT FB_A
mkr_cfi_ncore_fb8c_tmp04 = mkr_cfi_ncore_fb8c_tmp03 NOT FB_B
mkr_cfi_ncore_fb8c_tmp05 = mkr_cfi_ncore_fb8c_tmp04 AND FB_C
mkr_cfi_ncore_fb8c = mkr_cfi_ncore_fb8c_tmp05 NOT PO_P51


//***** Define connectivity/via layer -- VIA4 ****
RH_TN_5a = RH_TN_all INTERACT RHDMY5i 
VTIN_4 = VIA4i AND RH_TN_5a 
VIA4 = VIA4i NOT VTIN_4 

//***** Define connectivity/via layer -- n_fpoly_lvt ****
n_fpoly_lvt = npoly_co_l NOT ODx 

//***** Define connectivity/via layer -- mom0plus_a ****
mom0plus_a = M0_A AND MOMDMY_PLUS 

//***** Define connectivity/via layer -- mom5p1_b ****
mom5p11_b = M5_B AND MOMDMY_MXP1 
mom5p1_b1 = mom5p11_b AND MOMDMY_MXP12 
mom5p1_b = mom5p1_b1 INTERACT VIA5 
VD2_MD_TAP_P51_1 = VD2_MD_TAP NOT INTERACT VD2_MD_TAP_FB8P45_o 
VD2_MD_TAP_P51_2 = VD2_MD_TAP_P51_1 NOT INTERACT VD2_MD_TAP_FB6P45_o 
VD2_MD_TAP_P51_3 = VD2_MD_TAP_P51_2 NOT INTERACT VD2_MD_TAP_FB11_o 
VD2_MD_TAP_P51_4 = VD2_MD_TAP_P51_3 NOT INTERACT VD2_MD_TAP_FB16_o 
VD2_MD_TAP_P51_5 = VD2_MD_TAP_P51_4 NOT INTERACT VD2_MD_TAP_FB18_o 

//* Define layer -- VD2_MD_TAP_P51_o
VD2_MD_TAP_P51_o = VD2_MD_TAP AND PO_P51

VD2_MD_TAP_P51 = VD2_MD_TAP_P51_5 INTERACT VD2_MD_TAP_P51_o 

//***** Define connectivity/via layer -- TPC_GND_DMY_1 ****
TPC_GND_DMY_1_a = TPC_GND_DMY INTERACT shp1 
TPC_GND_DMY_1_b = TPC_GND_DMY NOT INTERACT shp1 
TPC_GND_DMY_1 = TPC_GND_DMY_1_a OR TPC_GND_DMY_1_b 

//***** Define connectivity/via layer -- mom10m1 ****
mom10m1 = mom10p11 NOT INTERACT mom10p1 
p_gpoly_elvt_all = ppoly_co_el AND ODx 
p_gpoly_elvt = p_gpoly_elvt_all NOT all_mos_gates 
core_p_gpoly1 = COPY p_gpoly_svt 
core_p_gpoly2 = p_gpoly_lvt OR core_p_gpoly1 
core_p_gpoly3 = p_gpoly_ulvt OR core_p_gpoly2 
core_p_gpoly4 = p_gpoly_elvt OR core_p_gpoly3 
core_p_gpoly5 = p_gpoly_lvtll OR core_p_gpoly4 
core_p_gpoly6 = p_gpoly_ulvtll OR core_p_gpoly5 
core_pefmos_gate = pch_eflvt_mac_gate OR pch_efsvt_mac_gate 
core_pmos_gate1 = COPY pch_svt_mac_gate 
core_pmos_gate2 = pch_lvt_mac_gate OR core_pmos_gate1 
core_pmos_gate3 = pch_ulvt_mac_gate OR core_pmos_gate2 
core_pmos_gate4 = pch_elvt_mac_gate OR core_pmos_gate3 
core_pmos_gate5 = pch_lvtll_mac_gate OR core_pmos_gate4 
core_pmos_gate6 = pch_ulvtll_mac_gate OR core_pmos_gate5 
core_pmos_gate7 = core_pefmos_gate OR core_pmos_gate6 
core_pgpoly_region1 = core_p_gpoly6 OR core_pmos_gate7 
core_pmpode_gate1 = COPY pch_mpodesvt_mac_gate 
core_pmpode_gate2 = pch_mpodelvt_mac_gate OR core_pmpode_gate1 
core_pmpode_gate3 = pch_mpodeulvt_mac_gate OR core_pmpode_gate2 
core_pmpode_gate4 = pch_mpodeelvt_mac_gate OR core_pmpode_gate3 
core_pmpode_gate5 = pch_mpodelvtll_mac_gate OR core_pmpode_gate4 
core_pmpode_gate6 = pch_mpodeulvtll_mac_gate OR core_pmpode_gate5 
core_pgpoly_region2 = core_pgpoly_region1 OR core_pmpode_gate6 
core_p_efpode_gate = ppode_eflvt_mac_gate OR ppode_efsvt_mac_gate 
core_p_pode_gate1 = COPY ppode_svt_mac_gate 
core_p_pode_gate2 = ppode_lvt_mac_gate OR core_p_pode_gate1 
core_p_pode_gate3 = ppode_ulvt_mac_gate OR core_p_pode_gate2 
core_p_pode_gate4 = ppode_elvt_mac_gate OR core_p_pode_gate3 
core_p_pode_gate5 = ppode_lvtll_mac_gate OR core_p_pode_gate4 
core_p_pode_gate6 = ppode_ulvtll_mac_gate OR core_p_pode_gate5 
core_p_pode_gate7 = core_p_efpode_gate OR core_p_pode_gate6 
core_pgpoly_region3 = core_pgpoly_region2 OR core_p_pode_gate7 
core_p_pode1 = COPY p_pode_svt 
core_p_pode2 = p_pode_lvt OR core_p_pode1 
core_p_pode3 = p_pode_ulvt OR core_p_pode2 
core_p_pode4 = p_pode_elvt OR core_p_pode3 
core_p_pode5 = p_pode_lvtll OR core_p_pode4 
core_p_pode6 = p_pode_ulvtll OR core_p_pode5 
core_pgpoly_region4 = core_pgpoly_region3 OR core_p_pode6 
core_pgpoly_region = core_pgpoly_region4 OR p_gpoly_nocg_lvt 

//***** Define connectivity/via layer -- mom14plus ****
mom14plus = M14 AND MOMDMY_PLUS 

//***** Define connectivity/via layer -- p_fpoly_lvtll ****
p_fpoly_lvtll = ppoly_co_lll NOT ODx 

//***** Define connectivity/via layer -- VIA11 ****
RH_TN_12a = RH_TN_all INTERACT RHDMY12i 
VTIN_11 = VIA11i AND RH_TN_12a 
VIA11 = VIA11i NOT VTIN_11 

//***** Define connectivity/via layer -- mom9m1 ****
mom9m1 = mom9p11 NOT INTERACT mom9p1 

//***** Define connectivity/via layer -- VIA6 ****
VIA6 = VIA6i NOT VTIN_6 
MOM_field16 = metal16i AND MOMDMY16 

//***** Define connectivity/via layer -- TPC_GND_DMY_2 ****
TPC_GND_DMY_2_a = TPC_GND_DMY INTERACT shp2 
TPC_GND_DMY_2_b = TPC_GND_DMY NOT INTERACT shp2 
TPC_GND_DMY_2 = TPC_GND_DMY_2_a OR TPC_GND_DMY_2_b 

//***** Define connectivity/via layer -- n_pplug ****
n_pplug1 = tpdiff_ori AND plug_sel 
n_pplug2 = n_pplug1 NOT nxwell 
rwel = psub INSIDE DNW 
n_pplug3 = n_pplug2 NOT rwel 
n_pplug4 = n_pplug3 AND n_psub 
n_pplug = n_pplug4 NOT TCDOVL 
VD2_MD_TAP_FB16_1 = VD2_MD_TAP NOT INTERACT VD2_MD_TAP_FB8P45_o 
VD2_MD_TAP_FB16_2 = VD2_MD_TAP_FB16_1 NOT INTERACT VD2_MD_TAP_FB6P45_o 
VD2_MD_TAP_FB16_3 = VD2_MD_TAP_FB16_2 NOT INTERACT VD2_MD_TAP_FB11_o 
VD2_MD_TAP_FB16 = VD2_MD_TAP_FB16_3 INTERACT VD2_MD_TAP_FB16_o 

//***** Define connectivity/via layer -- BPC_GND_2 ****
BPC_GND_2_a = BPC_GND INTERACT shp2 
BPC_GND_2_b = BPC_GND NOT INTERACT shp2 
BPC_GND_2 = BPC_GND_2_a OR BPC_GND_2_b 
gate_mac1 = tngate1 OR tpgate1 
gate_mac2 = gate_mac1 NOT PODE_3T  //  for layout effect measurement
gate_mac = gate_mac2 TOUCH all_sd == 2
iso_cpode = COPY CPODEa 

//***** Define connectivity/via layer -- mom3m1 ****
mom3m1 = mom3p11 NOT INTERACT mom3p1 

//***** Define connectivity/via layer -- mom0m1_b ****
mom0m11_b = M0_B AND MOMDMY_MXP1 
mom0m1_b1 = mom0m11_b NOT MOMDMY_MXP12 
mom0m1_b = mom0m1_b1 INTERACT VIA0 

//***** Define connectivity/via layer -- mom0p2_b ****
mom0p21_b = M0_B AND MOMDMY_MXP2 
mom0p2_b1 = mom0p21_b AND MOMDMY_MXP12 
mom0p2_b = mom0p2_b1 INTERACT VIA0 

//***** Define connectivity/via layer -- ptap ****
ptap1 = tpdiff_ori AND psub 
ptap2 = ptap1 OR Empty 
ptap3 = ptap2 AND plug_sel 
ptap4 = ptap1 INTERACT tndiffco 
ptap5 = ptap3 OR ptap4 
ptap = ptap5 NOT TCDOVL 
dnwdmy = DNW AND LVSDMY4 
VTULP = COPY VTUL_P 
VD2_MD_TAP_mkr_1 = VD2_MD_TAP NOT INTERACT VD2_MD_TAP_FB8P45_o 
VD2_MD_TAP_mkr_2 = VD2_MD_TAP_mkr_1 NOT INTERACT VD2_MD_TAP_FB6P45_o 
VD2_MD_TAP_mkr_3 = VD2_MD_TAP_mkr_2 NOT INTERACT VD2_MD_TAP_FB11_o 
VD2_MD_TAP_mkr_4 = VD2_MD_TAP_mkr_3 NOT INTERACT VD2_MD_TAP_FB16_o 
VD2_MD_TAP_mkr_5 = VD2_MD_TAP_mkr_4 NOT INTERACT VD2_MD_TAP_FB18_o 
VD2_MD_TAP_mkr = VD2_MD_TAP_mkr_5 NOT INTERACT VD2_MD_TAP_P51_o 

//***** Define connectivity/via layer -- n_odtap_srm ****
n_odtap_srm = n_odtap1 AND SRM_all 
MOM_M0 = M0_A OR M0_B 
MOM_M1 = M1_A OR M1_B 
MOM_M2_tmp0 = M2 OR M2_A 
MOM_M2 = MOM_M2_tmp0 OR M2_B 
MOM_M3_tmp0 = M3 OR M3_A 
MOM_M3 = MOM_M3_tmp0 OR M3_B 
MOM_M4_tmp0 = M4 OR M4_A 
MOM_M4 = MOM_M4_tmp0 OR M4_B 
MOM_M5_tmp0 = M5 OR M5_A 
MOM_M5 = MOM_M5_tmp0 OR M5_B 
MOM_M6_tmp0 = M6 OR M6_A 
MOM_M6 = MOM_M6_tmp0 OR M6_B 
MOM_M7_tmp0 = M7 OR M7_A 
MOM_M7 = MOM_M7_tmp0 OR M7_B 
MOM_M8_tmp0 = M8 OR M8_A 
MOM_M8 = MOM_M8_tmp0 OR M8_B 
MOM_M9_tmp0 = M9 OR M9_A 
MOM_M9 = MOM_M9_tmp0 OR M9_B 
MOM_M10_tmp0 = M10 OR M10_A 
MOM_M10 = MOM_M10_tmp0 OR M10_B 
MOM_M11_tmp0 = M11 OR M11_A 
MOM_M11 = MOM_M11_tmp0 OR M11_B 
MOM_M12_tmp0 = M12 OR M12_A 
MOM_M12 = MOM_M12_tmp0 OR M12_B 
MOM_M13_tmp0 = M13 OR M13_A 
MOM_M13 = MOM_M13_tmp0 OR M13_B 
MOM_M14_tmp0 = M14 OR M14_A 
MOM_M14 = MOM_M14_tmp0 OR M14_B 
MOM_M15_tmp0 = M15 OR M15_A 
MOM_M15 = MOM_M15_tmp0 OR M15_B 
MOM_M16_tmp0 = M16 OR M16_A 
MOM_M16 = MOM_M16_tmp0 OR M16_B 
MOM_M17_tmp0 = M17 OR M17_A 
MOM_M17 = MOM_M17_tmp0 OR M17_B 
MOM_M18_tmp0 = M18 OR M18_A 
MOM_M18 = MOM_M18_tmp0 OR M18_B 
MOMDMY_stop0 = MOMDMY0 NOT INTERACT MOM_field1 
MOMDMY_stop1 = MOMDMY1 NOT INTERACT MOM_field2 
MOMDMY_stop2 = MOMDMY2 NOT INTERACT MOM_field3 
MOMDMY_stop3 = MOMDMY3 NOT INTERACT MOM_field4 
MOMDMY_stop4 = MOMDMY4 NOT INTERACT MOM_field5 
MOMDMY_stop5 = MOMDMY5 NOT INTERACT MOM_field6 
MOMDMY_stop6 = MOMDMY6 NOT INTERACT MOM_field7 
MOMDMY_stop7 = MOMDMY7 NOT INTERACT MOM_field8 
MOMDMY_stop8 = MOMDMY8 NOT INTERACT MOM_field9 
MOMDMY_stop9 = MOMDMY9 NOT INTERACT MOM_field10 
MOMDMY_stop10 = MOMDMY10 NOT INTERACT MOM_field11 
MOMDMY_stop11 = MOMDMY11 NOT INTERACT MOM_field12 
MOMDMY_stop12 = MOMDMY12 NOT INTERACT MOM_field13 
MOMDMY_stop13 = MOMDMY13 NOT INTERACT MOM_field14 
MOMDMY_stop14 = MOMDMY14 NOT INTERACT MOM_field15 
MOMDMY_stop15 = MOMDMY15 NOT INTERACT MOM_field16 
MOMDMY_stop16 = MOMDMY16 NOT INTERACT MOM_field17 
MOMDMY_stop17 = MOMDMY17 NOT INTERACT MOM_field18 
MOMDMY_stop18 = COPY MOMDMY18 
MOMDMY_start0 = COPY MOMDMY0 
MOMDMY_start1_tmp0 = MOMDMY1 NOT INTERACT MOM_field0 
MOMDMY_start1 = MOMDMY_start1_tmp0 OR MOMDMY_start0 
MOMDMY_start2_tmp0 = MOMDMY2 NOT INTERACT MOM_field1 
MOMDMY_start2 = MOMDMY_start2_tmp0 OR MOMDMY_start1 
MOMDMY_start3_tmp0 = MOMDMY3 NOT INTERACT MOM_field2 
MOMDMY_start3 = MOMDMY_start3_tmp0 OR MOMDMY_start2 
MOMDMY_start4_tmp0 = MOMDMY4 NOT INTERACT MOM_field3 
MOMDMY_start4 = MOMDMY_start4_tmp0 OR MOMDMY_start3 
MOMDMY_start5_tmp0 = MOMDMY5 NOT INTERACT MOM_field4 
MOMDMY_start5 = MOMDMY_start5_tmp0 OR MOMDMY_start4 
MOMDMY_start6_tmp0 = MOMDMY6 NOT INTERACT MOM_field5 
MOMDMY_start6 = MOMDMY_start6_tmp0 OR MOMDMY_start5 
MOMDMY_start7_tmp0 = MOMDMY7 NOT INTERACT MOM_field6 
MOMDMY_start7 = MOMDMY_start7_tmp0 OR MOMDMY_start6 
MOMDMY_start8_tmp0 = MOMDMY8 NOT INTERACT MOM_field7 
MOMDMY_start8 = MOMDMY_start8_tmp0 OR MOMDMY_start7 
MOMDMY_start9_tmp0 = MOMDMY9 NOT INTERACT MOM_field8 
MOMDMY_start9 = MOMDMY_start9_tmp0 OR MOMDMY_start8 
MOMDMY_start10_tmp0 = MOMDMY10 NOT INTERACT MOM_field9 
MOMDMY_start10 = MOMDMY_start10_tmp0 OR MOMDMY_start9 
MOMDMY_start11_tmp0 = MOMDMY11 NOT INTERACT MOM_field10 
MOMDMY_start11 = MOMDMY_start11_tmp0 OR MOMDMY_start10 
MOMDMY_start12_tmp0 = MOMDMY12 NOT INTERACT MOM_field11 
MOMDMY_start12 = MOMDMY_start12_tmp0 OR MOMDMY_start11 
MOMDMY_start13_tmp0 = MOMDMY13 NOT INTERACT MOM_field12 
MOMDMY_start13 = MOMDMY_start13_tmp0 OR MOMDMY_start12 
MOMDMY_start14_tmp0 = MOMDMY14 NOT INTERACT MOM_field13 
MOMDMY_start = MOMDMY_start14_tmp0 OR MOMDMY_start13 
MOMDMY1_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop1 
MOMDMY1_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop1 
MOMDMY1_REC_tmp2 = MOMDMY1_REC_tmp0 OR MOMDMY1_REC_tmp1 
MOMDMY1_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT1 10000 INSIDE OF LAYER MOMDMY1_REC_tmp2
MOMDMY2_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop2 
MOMDMY2_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop2 
MOMDMY2_REC_tmp2 = MOMDMY2_REC_tmp0 OR MOMDMY2_REC_tmp1 
MOMDMY2_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT2 10000 INSIDE OF LAYER MOMDMY2_REC_tmp2
MOMDMY3_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop3 
MOMDMY3_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop3 
MOMDMY3_REC_tmp2 = MOMDMY3_REC_tmp0 OR MOMDMY3_REC_tmp1 
MOMDMY3_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT3 10000 INSIDE OF LAYER MOMDMY3_REC_tmp2
MOMDMY4_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop4 
MOMDMY4_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop4 
MOMDMY4_REC_tmp2 = MOMDMY4_REC_tmp0 OR MOMDMY4_REC_tmp1 
MOMDMY4_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT4 10000 INSIDE OF LAYER MOMDMY4_REC_tmp2
MOMDMY5_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop5 
MOMDMY5_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop5 
MOMDMY5_REC_tmp2 = MOMDMY5_REC_tmp0 OR MOMDMY5_REC_tmp1 
MOMDMY5_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT5 10000 INSIDE OF LAYER MOMDMY5_REC_tmp2
MOMDMY6_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop6 
MOMDMY6_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop6 
MOMDMY6_REC_tmp2 = MOMDMY6_REC_tmp0 OR MOMDMY6_REC_tmp1 
MOMDMY6_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT6 10000 INSIDE OF LAYER MOMDMY6_REC_tmp2
MOMDMY7_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop7 
MOMDMY7_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop7 
MOMDMY7_REC_tmp2 = MOMDMY7_REC_tmp0 OR MOMDMY7_REC_tmp1 
MOMDMY7_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT7 10000 INSIDE OF LAYER MOMDMY7_REC_tmp2
MOMDMY8_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop8 
MOMDMY8_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop8 
MOMDMY8_REC_tmp2 = MOMDMY8_REC_tmp0 OR MOMDMY8_REC_tmp1 
MOMDMY8_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT8 10000 INSIDE OF LAYER MOMDMY8_REC_tmp2
MOMDMY9_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop9 
MOMDMY9_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop9 
MOMDMY9_REC_tmp2 = MOMDMY9_REC_tmp0 OR MOMDMY9_REC_tmp1 
MOMDMY9_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT9 10000 INSIDE OF LAYER MOMDMY9_REC_tmp2
MOMDMY10_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop10 
MOMDMY10_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop10 
MOMDMY10_REC_tmp2 = MOMDMY10_REC_tmp0 OR MOMDMY10_REC_tmp1 
MOMDMY10_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT10 10000 INSIDE OF LAYER MOMDMY10_REC_tmp2
MOMDMY11_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop11 
MOMDMY11_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop11 
MOMDMY11_REC_tmp2 = MOMDMY11_REC_tmp0 OR MOMDMY11_REC_tmp1 
MOMDMY11_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT11 10000 INSIDE OF LAYER MOMDMY11_REC_tmp2
MOMDMY12_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop12 
MOMDMY12_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop12 
MOMDMY12_REC_tmp2 = MOMDMY12_REC_tmp0 OR MOMDMY12_REC_tmp1 
MOMDMY12_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT12 10000 INSIDE OF LAYER MOMDMY12_REC_tmp2
MOMDMY13_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop13 
MOMDMY13_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop13 
MOMDMY13_REC_tmp2 = MOMDMY13_REC_tmp0 OR MOMDMY13_REC_tmp1 
MOMDMY13_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT13 10000 INSIDE OF LAYER MOMDMY13_REC_tmp2
MOMDMY14_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop14 
MOMDMY14_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop14 
MOMDMY14_REC_tmp2 = MOMDMY14_REC_tmp0 OR MOMDMY14_REC_tmp1 
MOMDMY14_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT14 10000 INSIDE OF LAYER MOMDMY14_REC_tmp2
MOMDMY15_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop15 
MOMDMY15_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop15 
MOMDMY15_REC_tmp2 = MOMDMY15_REC_tmp0 OR MOMDMY15_REC_tmp1 
MOMDMY15_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT15 10000 INSIDE OF LAYER MOMDMY15_REC_tmp2
MOMDMY16_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop16 
MOMDMY16_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop16 
MOMDMY16_REC_tmp2 = MOMDMY16_REC_tmp0 OR MOMDMY16_REC_tmp1 
MOMDMY16_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT16 10000 INSIDE OF LAYER MOMDMY16_REC_tmp2
MOMDMY17_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop17 
MOMDMY17_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop17 
MOMDMY17_REC_tmp2 = MOMDMY17_REC_tmp0 OR MOMDMY17_REC_tmp1 
MOMDMY17_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT17 10000 INSIDE OF LAYER MOMDMY17_REC_tmp2
MOMDMY18_REC_tmp0 = MOMDMY_start INTERACT MOMDMY_stop18 
MOMDMY18_REC_tmp1 = MOMDMY_MX INTERACT MOMDMY_stop18 
MOMDMY18_REC_tmp2 = MOMDMY18_REC_tmp0 OR MOMDMY18_REC_tmp1 
MOMDMY18_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT18 10000 INSIDE OF LAYER MOMDMY18_REC_tmp2
MOM_LAYER_1 = MOMDMY1_REC OR MOMDMY2_REC 
MOM_LAYER_2 = MOM_LAYER_1 OR MOMDMY2_REC 
MOM_LAYER_3 = MOM_LAYER_2 OR MOMDMY3_REC 
MOM_LAYER_4 = MOM_LAYER_3 OR MOMDMY4_REC 
MOM_LAYER_5 = MOM_LAYER_4 OR MOMDMY5_REC 
MOM_LAYER_6 = MOM_LAYER_5 OR MOMDMY6_REC 
MOM_LAYER_7 = MOM_LAYER_6 OR MOMDMY7_REC 
MOM_LAYER_8 = MOM_LAYER_7 OR MOMDMY8_REC 
MOM_LAYER_9 = MOM_LAYER_8 OR MOMDMY9_REC 
MOM_LAYER_10 = MOM_LAYER_9 OR MOMDMY10_REC 
MOM_LAYER_11 = MOM_LAYER_10 OR MOMDMY11_REC 
MOM_LAYER_12 = MOM_LAYER_11 OR MOMDMY12_REC 
MOM_LAYER_13 = MOM_LAYER_12 OR MOMDMY13_REC 
MOM_LAYER_14 = MOM_LAYER_13 OR MOMDMY14_REC 
MOM_LAYER_15 = MOM_LAYER_14 OR MOMDMY15_REC 
MOM_LAYER_16 = MOM_LAYER_15 OR MOMDMY16_REC 
MOM_LAYER_17 = MOM_LAYER_16 OR MOMDMY17_REC 
MOM_LAYER_18 = MOM_LAYER_17 OR MOMDMY18_REC 
MOMDMY_NW_SHIELD_tmp0 = MOMDMY_start INTERACT MOMDMY_NWi 
MOMDMY_NW_SHIELD_tmp1 = MOMDMY_MX OR MOMDMY_NW_SHIELD_tmp0 
MOMDMY_NW_SHIELD_tmp2 = MOMDMY_NW_SHIELD_tmp1 OR MOMDMY_ARY 
MOMDMY_NW_SHIELD_tmp3 = MOMDMY_NW_SHIELD_tmp2 NOT INTERACT MOMDMY_PWi 
MOMDMY_NW_SHIELD_tmp4 = MOMDMY_NW_SHIELD_tmp3 NOT INTERACT MOMDMY_NTNi 
MOMDMY_NW_SHIELD_tmp5 = MOMDMY_NW_SHIELD_tmp4 INTERACT nxwell 
MOMDMY_NW_SHIELD = MOMDMY_NW_SHIELD_tmp5 NOT INTERACT MOMDMY_TSHD 
NW_SHIELD_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT1 10000 INSIDE OF LAYER MOMDMY_NW_SHIELD
MOMDMY_PW_SHIELD_tmp0 = MOMDMY_start INTERACT MOMDMY_PWi 
MOMDMY_PW_SHIELD_tmp1 = MOMDMY_MX OR MOMDMY_PW_SHIELD_tmp0 
MOMDMY_PW_SHIELD_tmp2 = MOMDMY_PW_SHIELD_tmp1 NOT INTERACT MOMDMY_NWi 
MOMDMY_PW_SHIELD_tmp3 = MOMDMY_PW_SHIELD_tmp2 NOT INTERACT MOMDMY_NTNi 
MOMDMY_PW_SHIELD = MOMDMY_PW_SHIELD_tmp3 NOT INTERACT MOMDMY_TSHD 
PW_SHIELD_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT2 10000 INSIDE OF LAYER MOMDMY_PW_SHIELD
MOMDMY_NTN_SHIELD_tmp0 = MOMDMY_start INTERACT MOMDMY_NTNi 
MOMDMY_NTN_SHIELD_tmp1 = MOMDMY_MX OR MOMDMY_NTN_SHIELD_tmp0 
MOMDMY_NTN_SHIELD_tmp2 = MOMDMY_NTN_SHIELD_tmp1 INTERACT NT_N 
MOMDMY_NTN_SHIELD_tmp3 = MOMDMY_NTN_SHIELD_tmp2 NOT INTERACT MOMDMY_NWi 
MOMDMY_NTN_SHIELD_tmp4 = MOMDMY_NTN_SHIELD_tmp3 NOT INTERACT MOMDMY_PWi 
MOMDMY_NTN_SHIELD = MOMDMY_NTN_SHIELD_tmp4 NOT INTERACT MOMDMY_TSHD 
NTN_SHIELD_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT3 10000 INSIDE OF LAYER MOMDMY_NTN_SHIELD
MOMDMY_TOP_SHIELD_tmp0 = MOMDMY_ARY OR MOMDMY_tbs_stop_acc 
MOMDMY_TOP_SHIELD_tmp1 = MOMDMY_TOP_SHIELD_tmp0 INTERACT MOMDMY_TSHD 
MOMDMY_TOP_SHIELD_tmp2 = MOMDMY_TOP_SHIELD_tmp1 NOT INTERACT MOMDMY_NWi 
MOMDMY_TOP_SHIELD_tmp3 = MOMDMY_TOP_SHIELD_tmp2 NOT INTERACT MOMDMY_PWi 
MOMDMY_TOP_SHIELD = MOMDMY_TOP_SHIELD_tmp3 NOT INTERACT MOMDMY_NTNi 
TOP_SHIELD_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT4 10000 INSIDE OF LAYER MOMDMY_TOP_SHIELD
MOMDMY_TOPBOT_SHIELD_tmp0 = MOMDMY_ARY OR MOMDMY_tbs_stop_acc 
MOMDMY_TOPBOT_SHIELD_tmp1 = MOMDMY_TOPBOT_SHIELD_tmp0 INTERACT MOMDMY_TSHD 
MOMDMY_TOPBOT_SHIELD_tmp2 = MOMDMY_TOPBOT_SHIELD_tmp1 INTERACT MOMDMY_NWi 
MOMDMY_TOPBOT_SHIELD_tmp3 = MOMDMY_TOPBOT_SHIELD_tmp2 NOT INTERACT MOMDMY_PWi 
MOMDMY_TOPBOT_SHIELD = MOMDMY_TOPBOT_SHIELD_tmp3 NOT INTERACT MOMDMY_NTNi 
TOPBOT_SHIELD_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT5 10000 INSIDE OF LAYER MOMDMY_TOPBOT_SHIELD
SHIELD_LAYER_tmp0 = PW_SHIELD_REC OR NTN_SHIELD_REC 
SHIELD_LAYER_tmp1 = SHIELD_LAYER_tmp0 OR NW_SHIELD_REC 
SHIELD_LAYER_tmp2 = SHIELD_LAYER_tmp1 OR TOP_SHIELD_REC 
SHIELD_LAYER = SHIELD_LAYER_tmp2 OR TOPBOT_SHIELD_REC 
MOMDMY_tbs_start0 = COPY MOMDMY0 
MOMDMY_tbs_start1 = MOMDMY1 NOT INTERACT MOM_field0 
MOMDMY_tbs_start2 = MOMDMY2 NOT INTERACT MOM_field1 
MOMDMY_tbs_start3 = MOMDMY3 NOT INTERACT MOM_field2 
MOMDMY_tbs_start4 = MOMDMY4 NOT INTERACT MOM_field3 
MOMDMY_tbs_start5 = MOMDMY5 NOT INTERACT MOM_field4 
MOMDMY_tbs_start6 = MOMDMY6 NOT INTERACT MOM_field5 
MOMDMY_tbs_start7 = MOMDMY7 NOT INTERACT MOM_field6 
MOMDMY_tbs_start8 = MOMDMY8 NOT INTERACT MOM_field7 
MOMDMY_tbs_start9 = MOMDMY9 NOT INTERACT MOM_field8 
MOMDMY_tbs_start10 = MOMDMY10 NOT INTERACT MOM_field9 
MOMDMY0_tbs_REC_tmp0 = MOMDMY_tbs_stop_acc INTERACT MOMDMY_tbs_start0 
MOMDMY0_tbs_REC_tmp1 = MOMDMY_ARY INTERACT MOMDMY_tbs_start0 
MOMDMY0_tbs_REC_tmp2 = MOMDMY0_tbs_REC_tmp0 OR MOMDMY0_tbs_REC_tmp1 
MOMDMY0_tbs_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT1 10000 INSIDE OF LAYER MOMDMY0_tbs_REC_tmp2
MOMDMY1_tbs_REC_tmp0 = MOMDMY_tbs_stop_acc INTERACT MOMDMY_tbs_start1 
MOMDMY1_tbs_REC_tmp1 = MOMDMY_ARY INTERACT MOMDMY_tbs_start1 
MOMDMY1_tbs_REC_tmp2 = MOMDMY1_tbs_REC_tmp0 OR MOMDMY1_tbs_REC_tmp1 
MOMDMY1_tbs_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT2 10000 INSIDE OF LAYER MOMDMY1_tbs_REC_tmp2
MOMDMY2_tbs_REC_tmp0 = MOMDMY_tbs_stop_acc INTERACT MOMDMY_tbs_start2 
MOMDMY2_tbs_REC_tmp1 = MOMDMY_ARY INTERACT MOMDMY_tbs_start2 
MOMDMY2_tbs_REC_tmp2 = MOMDMY2_tbs_REC_tmp0 OR MOMDMY2_tbs_REC_tmp1 
MOMDMY2_tbs_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT3 10000 INSIDE OF LAYER MOMDMY2_tbs_REC_tmp2
MOMDMY3_tbs_REC_tmp0 = MOMDMY_tbs_stop_acc INTERACT MOMDMY_tbs_start3 
MOMDMY3_tbs_REC_tmp1 = MOMDMY_ARY INTERACT MOMDMY_tbs_start3 
MOMDMY3_tbs_REC_tmp2 = MOMDMY3_tbs_REC_tmp0 OR MOMDMY3_tbs_REC_tmp1 
MOMDMY3_tbs_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT4 10000 INSIDE OF LAYER MOMDMY3_tbs_REC_tmp2
MOMDMY4_tbs_REC_tmp0 = MOMDMY_tbs_stop_acc INTERACT MOMDMY_tbs_start4 
MOMDMY4_tbs_REC_tmp1 = MOMDMY_ARY INTERACT MOMDMY_tbs_start4 
MOMDMY4_tbs_REC_tmp2 = MOMDMY4_tbs_REC_tmp0 OR MOMDMY4_tbs_REC_tmp1 
MOMDMY4_tbs_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT5 10000 INSIDE OF LAYER MOMDMY4_tbs_REC_tmp2
MOMDMY5_tbs_REC_tmp0 = MOMDMY_tbs_stop_acc INTERACT MOMDMY_tbs_start5 
MOMDMY5_tbs_REC_tmp1 = MOMDMY_ARY INTERACT MOMDMY_tbs_start5 
MOMDMY5_tbs_REC_tmp2 = MOMDMY5_tbs_REC_tmp0 OR MOMDMY5_tbs_REC_tmp1 
MOMDMY5_tbs_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT6 10000 INSIDE OF LAYER MOMDMY5_tbs_REC_tmp2
MOMDMY6_tbs_REC_tmp0 = MOMDMY_tbs_stop_acc INTERACT MOMDMY_tbs_start6 
MOMDMY6_tbs_REC_tmp1 = MOMDMY_ARY INTERACT MOMDMY_tbs_start6 
MOMDMY6_tbs_REC_tmp2 = MOMDMY6_tbs_REC_tmp0 OR MOMDMY6_tbs_REC_tmp1 
MOMDMY6_tbs_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT7 10000 INSIDE OF LAYER MOMDMY6_tbs_REC_tmp2
MOMDMY7_tbs_REC_tmp0 = MOMDMY_tbs_stop_acc INTERACT MOMDMY_tbs_start7 
MOMDMY7_tbs_REC_tmp1 = MOMDMY_ARY INTERACT MOMDMY_tbs_start7 
MOMDMY7_tbs_REC_tmp2 = MOMDMY7_tbs_REC_tmp0 OR MOMDMY7_tbs_REC_tmp1 
MOMDMY7_tbs_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT8 10000 INSIDE OF LAYER MOMDMY7_tbs_REC_tmp2
MOMDMY8_tbs_REC_tmp0 = MOMDMY_tbs_stop_acc INTERACT MOMDMY_tbs_start8 
MOMDMY8_tbs_REC_tmp1 = MOMDMY_ARY INTERACT MOMDMY_tbs_start8 
MOMDMY8_tbs_REC_tmp2 = MOMDMY8_tbs_REC_tmp0 OR MOMDMY8_tbs_REC_tmp1 
MOMDMY8_tbs_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT9 10000 INSIDE OF LAYER MOMDMY8_tbs_REC_tmp2
MOMDMY9_tbs_REC_tmp0 = MOMDMY_tbs_stop_acc INTERACT MOMDMY_tbs_start9 
MOMDMY9_tbs_REC_tmp1 = MOMDMY_ARY INTERACT MOMDMY_tbs_start9 
MOMDMY9_tbs_REC_tmp2 = MOMDMY9_tbs_REC_tmp0 OR MOMDMY9_tbs_REC_tmp1 
MOMDMY9_tbs_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT10 10000 INSIDE OF LAYER MOMDMY9_tbs_REC_tmp2
MOMDMY10_tbs_REC_tmp0 = MOMDMY_tbs_stop_acc INTERACT MOMDMY_tbs_start10 
MOMDMY10_tbs_REC_tmp1 = MOMDMY_ARY INTERACT MOMDMY_tbs_start10 
MOMDMY10_tbs_REC_tmp2 = MOMDMY10_tbs_REC_tmp0 OR MOMDMY10_tbs_REC_tmp1 
MOMDMY10_tbs_REC = RECTANGLES MINGRID_RECT1 MINGRID_RECT11 10000 INSIDE OF LAYER MOMDMY10_tbs_REC_tmp2
MOM_tbs_LAYER_1 = MOMDMY0_tbs_REC OR MOMDMY1_tbs_REC 
MOM_tbs_LAYER_2 = MOM_tbs_LAYER_1 OR MOMDMY2_tbs_REC 
MOM_tbs_LAYER_3 = MOM_tbs_LAYER_2 OR MOMDMY3_tbs_REC 
MOM_tbs_LAYER_4 = MOM_tbs_LAYER_3 OR MOMDMY4_tbs_REC 
MOM_tbs_LAYER_5 = MOM_tbs_LAYER_4 OR MOMDMY5_tbs_REC 
MOM_tbs_LAYER_6 = MOM_tbs_LAYER_5 OR MOMDMY6_tbs_REC 
MOM_tbs_LAYER_7 = MOM_tbs_LAYER_6 OR MOMDMY7_tbs_REC 
MOM_tbs_LAYER_8 = MOM_tbs_LAYER_7 OR MOMDMY8_tbs_REC 
MOM_tbs_LAYER_9 = MOM_tbs_LAYER_8 OR MOMDMY9_tbs_REC 
MOM_tbs_LAYER_10 = MOM_tbs_LAYER_9 OR MOMDMY10_tbs_REC 
MOMDMY0_1 = MOMDMY0 INTERACT MOM_field0 
MOMDMY1_1 = MOMDMY1 INTERACT MOM_field1 
MOMDMY2_1 = MOMDMY2 INTERACT MOM_field2 
MOMDMY3_1 = MOMDMY3 INTERACT MOM_field3 
MOMDMY4_1 = MOMDMY4 INTERACT MOM_field4 
MOMDMY5_1 = MOMDMY5 INTERACT MOM_field5 
MOMDMY6_1 = MOMDMY6 INTERACT MOM_field6 
MOMDMY7_1 = MOMDMY7 INTERACT MOM_field7 
MOMDMY8_1 = MOMDMY8 INTERACT MOM_field8 
MOMDMY9_1 = MOMDMY9 INTERACT MOM_field9 
MOMDMY10_1 = MOMDMY10 INTERACT MOM_field10 
MOMDMY11_1 = MOMDMY11 INTERACT MOM_field11 
MOMDMY12_1 = MOMDMY12 INTERACT MOM_field12 
MOMDMY13_1 = MOMDMY13 INTERACT MOM_field13 
MOMDMY14_1 = MOMDMY14 INTERACT MOM_field14 
MOMDMY15_1 = MOMDMY15 INTERACT MOM_field15 
MOMDMY16_1 = MOMDMY16 INTERACT MOM_field16 
MOMDMY17_1 = MOMDMY17 INTERACT MOM_field17 
MOMDMY18_1 = MOMDMY18 INTERACT MOM_field18 
MOMDMY_all0 = MOMDMY0_1 OR MOMDMY1_1 
MOMDMY_all1 = MOMDMY_all0 OR MOMDMY2_1 
MOMDMY_all2 = MOMDMY_all1 OR MOMDMY3_1 
MOMDMY_all3 = MOMDMY_all2 OR MOMDMY4_1 
MOMDMY_all4 = MOMDMY_all3 OR MOMDMY5_1 
MOMDMY_all5 = MOMDMY_all4 OR MOMDMY6_1 
MOMDMY_all6 = MOMDMY_all5 OR MOMDMY7_1 
MOMDMY_all7 = MOMDMY_all6 OR MOMDMY8_1 
MOMDMY_all8 = MOMDMY_all7 OR MOMDMY9_1 
MOMDMY_all9 = MOMDMY_all8 OR MOMDMY10_1 
MOMDMY_all10 = MOMDMY_all9 OR MOMDMY11_1 
MOMDMY_all11 = MOMDMY_all10 OR MOMDMY12_1 
MOMDMY_all12 = MOMDMY_all11 OR MOMDMY13_1 
MOMDMY_all13 = MOMDMY_all12 OR MOMDMY14_1 
MOMDMY_all14 = MOMDMY_all13 OR MOMDMY15_1 
MOMDMY_all15 = MOMDMY_all14 OR MOMDMY16_1 
MOMDMY_all16 = MOMDMY_all15 OR MOMDMY17_1 
MOMDMY_all = MOMDMY_all16 OR MOMDMY18_1 
cmom0_reg1 = MOMDMY0 INTERACT RTMOMDMY 
cmom0_reg2 = cmom0_reg1 NOT INTERACT MOMDMY_MX 
cmom0_reg3 = cmom0_reg2 NOT INTERACT MOMDMY_MXP1 
cmom0_reg4 = cmom0_reg3 NOT INTERACT MOMDMY_MXP2 
cmom0_reg4_1 = cmom0_reg4 NOT INTERACT MOMDMY_MXP12 
cmom0_reg4_2 = cmom0_reg4_1 NOT INTERACT MOMDMY_ARY 
cmom0_reg4_3 = cmom0_reg4_2 NOT INTERACT MOMDMY_TSHD 
cmom0_reg5 = cmom0_reg4_3 NOT INTERACT RFMOMDMY_2T 
cmom0_reg6 = cmom0_reg5 NOT INTERACT RFDMYi 
cmom0_reg = cmom0_reg6 NOT INTERACT MOMDMY_2T 
cmom0_reg_psub1 = cmom0_reg NOT INTERACT MOMDMY_NWi 
cmom0_reg_psub21 = cmom0_reg_psub1 INTERACT MOMDMY_PWi 
cmom0_reg_psub22 = cmom0_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom0_reg_psub31 = cmom0_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom0_reg_psub32 = cmom0_reg_psub31 INTERACT MOMDMY_NTNi 
cmom0_reg_psub4 = cmom0_reg_psub22 OR cmom0_reg_psub32 
cmom0_reg_psub = COPY cmom0_reg_psub4 
cmom0_reg_nw1 = cmom0_reg INTERACT MOMDMY_NWi 
cmom0_reg_nw2 = cmom0_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom0_reg_nw3 = cmom0_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom0_reg_nw = COPY cmom0_reg_nw3 
cmom0_reg_2t1 = cmom0_reg5 INTERACT MOMDMY_2T 
cmom0_reg_2t2 = cmom0_reg_2t1 NOT INTERACT MOMDMY_NWi 
cmom0_reg_2t3 = cmom0_reg_2t2 NOT INTERACT MOMDMY_PWi 
cmom0_reg_2t4 = cmom0_reg_2t3 NOT INTERACT MOMDMY_NTNi 
cmom0_reg_2t = COPY cmom0_reg_2t4 
cmom0_rf_reg1 = cmom0_reg5 INTERACT RFDMYi 
cmom0_rf_reg = cmom0_rf_reg1 NOT INTERACT MOMDMY_2T 
cmom0_rf_reg_psub1 = cmom0_rf_reg NOT INTERACT MOMDMY_NWi 
cmom0_rf_reg_psub21 = cmom0_rf_reg_psub1 INTERACT MOMDMY_PWi 
cmom0_rf_reg_psub22 = cmom0_rf_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom0_rf_reg_psub31 = cmom0_rf_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom0_rf_reg_psub32 = cmom0_rf_reg_psub31 INTERACT MOMDMY_NTNi 
cmom0_rf_reg_psub4 = cmom0_rf_reg_psub22 OR cmom0_rf_reg_psub32 
cmom0_rf_reg_psub = COPY cmom0_rf_reg_psub4 
cmom0_rf_reg_nw1 = cmom0_rf_reg INTERACT MOMDMY_NWi 
cmom0_rf_reg_nw2 = cmom0_rf_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom0_rf_reg_nw3 = cmom0_rf_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom0_rf_reg_nw = COPY cmom0_rf_reg_nw3 
cmom0_mx_reg0 = MOMDMY_MX INTERACT RTMOMDMY 
cmom0_mx_reg1 = cmom0_mx_reg0 INTERACT MOMDMY0 
cmom0_mx_reg2 = cmom0_mx_reg1 NOT INTERACT RFDMYi 
cmom0_mx_reg_4t1 = cmom0_mx_reg1 INTERACT MOMDMY_2T 
cmom0_mx_reg_4t2 = cmom0_mx_reg_4t1 NOT INTERACT MOMDMY_NWi 
cmom0_mx_reg_4t3 = cmom0_mx_reg_4t2 NOT INTERACT MOMDMY_PWi 
cmom0_mx_reg_4t4 = cmom0_mx_reg_4t3 NOT INTERACT MOMDMY_NTNi 
cmom0_mx_reg_4t5 = cmom0_mx_reg_4t4 NOT INTERACT MOMDMY_ARY 
cmom0_mx_reg_4t6 = cmom0_mx_reg_4t5 NOT INTERACT MOMDMY_TSHD 
cmom0_mx_reg_4t = cmom0_mx_reg_4t6 NOT INTERACT RFMOMDMY_2T 
cmom0_mx_reg_4t_a = cmom0_mx_reg_4t INTERACT mom0p1_a 
cmom0_mx_reg_4t_b = cmom0_mx_reg_4t INTERACT mom0p1_b 
cmom0_mx_reg3 = cmom0_mx_reg2 NOT INTERACT MOMDMY_2T 
cmom0_mx_reg_nw1 = cmom0_mx_reg3 INTERACT MOMDMY_NWi 
cmom0_mx_reg_nw2 = cmom0_mx_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom0_mx_reg_nw = cmom0_mx_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom0_mx_reg_nw_a = cmom0_mx_reg_nw INTERACT mom0p1_a 
cmom0_mx_reg_nw_b = cmom0_mx_reg_nw INTERACT mom0p1_b 
cmom0_mx_reg_psub1 = cmom0_mx_reg3 NOT INTERACT MOMDMY_NWi 
cmom0_mx_reg_psub21 = cmom0_mx_reg_psub1 INTERACT MOMDMY_PWi 
cmom0_mx_reg_psub22 = cmom0_mx_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom0_mx_reg_psub31 = cmom0_mx_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom0_mx_reg_psub32 = cmom0_mx_reg_psub31 INTERACT MOMDMY_NTNi 
cmom0_mx_reg_psub = cmom0_mx_reg_psub22 OR cmom0_mx_reg_psub32 
cmom0_mx_reg_psub_a = cmom0_mx_reg_psub INTERACT mom0p1_a 
cmom0_mx_reg_psub_b = cmom0_mx_reg_psub INTERACT mom0p1_b 
mom1_0 = MOMDMY1 NOT INTERACT MOM_field0 
cmom1_reg1 = mom1_0 INTERACT RTMOMDMY 
cmom1_reg2 = cmom1_reg1 NOT INTERACT MOMDMY_MX 
cmom1_reg3 = cmom1_reg2 NOT INTERACT MOMDMY_MXP1 
cmom1_reg4 = cmom1_reg3 NOT INTERACT MOMDMY_MXP2 
cmom1_reg4_1 = cmom1_reg4 NOT INTERACT MOMDMY_MXP12 
cmom1_reg4_2 = cmom1_reg4_1 NOT INTERACT MOMDMY_ARY 
cmom1_reg4_3 = cmom1_reg4_2 NOT INTERACT MOMDMY_TSHD 
cmom1_reg5 = cmom1_reg4_3 NOT INTERACT RFMOMDMY_2T 
cmom1_reg6 = cmom1_reg5 NOT INTERACT RFDMYi 
cmom1_reg = cmom1_reg6 NOT INTERACT MOMDMY_2T 
cmom1_reg_psub1 = cmom1_reg NOT INTERACT MOMDMY_NWi 
cmom1_reg_psub21 = cmom1_reg_psub1 INTERACT MOMDMY_PWi 
cmom1_reg_psub22 = cmom1_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom1_reg_psub31 = cmom1_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom1_reg_psub32 = cmom1_reg_psub31 INTERACT MOMDMY_NTNi 
cmom1_reg_psub4 = cmom1_reg_psub22 OR cmom1_reg_psub32 
cmom1_reg_psub = COPY cmom1_reg_psub4 
cmom1_reg_nw1 = cmom1_reg INTERACT MOMDMY_NWi 
cmom1_reg_nw2 = cmom1_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom1_reg_nw3 = cmom1_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom1_reg_nw = COPY cmom1_reg_nw3 
cmom1_reg_2t1 = cmom1_reg5 INTERACT MOMDMY_2T 
cmom1_reg_2t2 = cmom1_reg_2t1 NOT INTERACT MOMDMY_NWi 
cmom1_reg_2t3 = cmom1_reg_2t2 NOT INTERACT MOMDMY_PWi 
cmom1_reg_2t4 = cmom1_reg_2t3 NOT INTERACT MOMDMY_NTNi 
cmom1_reg_2t = COPY cmom1_reg_2t4 
cmom1_rf_reg1 = cmom1_reg5 INTERACT RFDMYi 
cmom1_rf_reg = cmom1_rf_reg1 NOT INTERACT MOMDMY_2T 
cmom1_rf_reg_psub1 = cmom1_rf_reg NOT INTERACT MOMDMY_NWi 
cmom1_rf_reg_psub21 = cmom1_rf_reg_psub1 INTERACT MOMDMY_PWi 
cmom1_rf_reg_psub22 = cmom1_rf_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom1_rf_reg_psub31 = cmom1_rf_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom1_rf_reg_psub32 = cmom1_rf_reg_psub31 INTERACT MOMDMY_NTNi 
cmom1_rf_reg_psub4 = cmom1_rf_reg_psub22 OR cmom1_rf_reg_psub32 
cmom1_rf_reg_psub = COPY cmom1_rf_reg_psub4 
cmom1_rf_reg_nw1 = cmom1_rf_reg INTERACT MOMDMY_NWi 
cmom1_rf_reg_nw2 = cmom1_rf_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom1_rf_reg_nw3 = cmom1_rf_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom1_rf_reg_nw = COPY cmom1_rf_reg_nw3 
cmom1_mx_reg0 = MOMDMY_MX INTERACT RTMOMDMY 
cmom1_mx_reg1 = cmom1_mx_reg0 INTERACT mom1_0 
cmom1_mx_reg2 = cmom1_mx_reg1 NOT INTERACT RFDMYi 
cmom1_mx_reg_4t1 = cmom1_mx_reg1 INTERACT MOMDMY_2T 
cmom1_mx_reg_4t2 = cmom1_mx_reg_4t1 NOT INTERACT MOMDMY_NWi 
cmom1_mx_reg_4t3 = cmom1_mx_reg_4t2 NOT INTERACT MOMDMY_PWi 
cmom1_mx_reg_4t4 = cmom1_mx_reg_4t3 NOT INTERACT MOMDMY_NTNi 
cmom1_mx_reg_4t5 = cmom1_mx_reg_4t4 NOT INTERACT MOMDMY_ARY 
cmom1_mx_reg_4t6 = cmom1_mx_reg_4t5 NOT INTERACT MOMDMY_TSHD 
cmom1_mx_reg_4t = cmom1_mx_reg_4t6 NOT INTERACT RFMOMDMY_2T 
cmom1_mx_reg_4t_a = cmom1_mx_reg_4t INTERACT mom1p1_a 
cmom1_mx_reg_4t_b = cmom1_mx_reg_4t INTERACT mom1p1_b 
cmom1_mx_reg3 = cmom1_mx_reg2 NOT INTERACT MOMDMY_2T 
cmom1_mx_reg_nw1 = cmom1_mx_reg3 INTERACT MOMDMY_NWi 
cmom1_mx_reg_nw2 = cmom1_mx_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom1_mx_reg_nw = cmom1_mx_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom1_mx_reg_nw_a = cmom1_mx_reg_nw INTERACT mom1p1_a 
cmom1_mx_reg_nw_b = cmom1_mx_reg_nw INTERACT mom1p1_b 
cmom1_mx_reg_psub1 = cmom1_mx_reg3 NOT INTERACT MOMDMY_NWi 
cmom1_mx_reg_psub21 = cmom1_mx_reg_psub1 INTERACT MOMDMY_PWi 
cmom1_mx_reg_psub22 = cmom1_mx_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom1_mx_reg_psub31 = cmom1_mx_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom1_mx_reg_psub32 = cmom1_mx_reg_psub31 INTERACT MOMDMY_NTNi 
cmom1_mx_reg_psub = cmom1_mx_reg_psub22 OR cmom1_mx_reg_psub32 
cmom1_mx_reg_psub_a = cmom1_mx_reg_psub INTERACT mom1p1_a 
cmom1_mx_reg_psub_b = cmom1_mx_reg_psub INTERACT mom1p1_b 
mom2_0 = MOMDMY2 NOT INTERACT MOM_field0 
mom2_1 = mom2_0 NOT INTERACT MOM_field1 
cmom2_reg1 = mom2_1 INTERACT RTMOMDMY 
cmom2_reg2 = cmom2_reg1 NOT INTERACT MOMDMY_MX 
cmom2_reg3 = cmom2_reg2 NOT INTERACT MOMDMY_MXP1 
cmom2_reg4 = cmom2_reg3 NOT INTERACT MOMDMY_MXP2 
cmom2_reg4_1 = cmom2_reg4 NOT INTERACT MOMDMY_MXP12 
cmom2_reg4_2 = cmom2_reg4_1 NOT INTERACT MOMDMY_ARY 
cmom2_reg4_3 = cmom2_reg4_2 NOT INTERACT MOMDMY_TSHD 
cmom2_reg5 = cmom2_reg4_3 NOT INTERACT RFMOMDMY_2T 
cmom2_reg6 = cmom2_reg5 NOT INTERACT RFDMYi 
cmom2_reg = cmom2_reg6 NOT INTERACT MOMDMY_2T 
cmom2_reg_psub1 = cmom2_reg NOT INTERACT MOMDMY_NWi 
cmom2_reg_psub21 = cmom2_reg_psub1 INTERACT MOMDMY_PWi 
cmom2_reg_psub22 = cmom2_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom2_reg_psub31 = cmom2_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom2_reg_psub32 = cmom2_reg_psub31 INTERACT MOMDMY_NTNi 
cmom2_reg_psub4 = cmom2_reg_psub22 OR cmom2_reg_psub32 
cmom2_reg_psub_non = cmom2_reg_psub4 INTERACT M2 
cmom2_reg_psub = cmom2_reg_psub4 NOT cmom2_reg_psub_non 
cmom2_reg_nw1 = cmom2_reg INTERACT MOMDMY_NWi 
cmom2_reg_nw2 = cmom2_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom2_reg_nw3 = cmom2_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom2_reg_nw_non = cmom2_reg_nw3 INTERACT M2 
cmom2_reg_nw = cmom2_reg_nw3 NOT cmom2_reg_nw_non 
cmom2_reg_2t1 = cmom2_reg5 INTERACT MOMDMY_2T 
cmom2_reg_2t2 = cmom2_reg_2t1 NOT INTERACT MOMDMY_NWi 
cmom2_reg_2t3 = cmom2_reg_2t2 NOT INTERACT MOMDMY_PWi 
cmom2_reg_2t4 = cmom2_reg_2t3 NOT INTERACT MOMDMY_NTNi 
cmom2_reg_2t_non = cmom2_reg_2t4 INTERACT M2 
cmom2_reg_2t = cmom2_reg_2t4 NOT cmom2_reg_2t_non 
cmom2_rf_reg1 = cmom2_reg5 INTERACT RFDMYi 
cmom2_rf_reg = cmom2_rf_reg1 NOT INTERACT MOMDMY_2T 
cmom2_rf_reg_psub1 = cmom2_rf_reg NOT INTERACT MOMDMY_NWi 
cmom2_rf_reg_psub21 = cmom2_rf_reg_psub1 INTERACT MOMDMY_PWi 
cmom2_rf_reg_psub22 = cmom2_rf_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom2_rf_reg_psub31 = cmom2_rf_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom2_rf_reg_psub32 = cmom2_rf_reg_psub31 INTERACT MOMDMY_NTNi 
cmom2_rf_reg_psub4 = cmom2_rf_reg_psub22 OR cmom2_rf_reg_psub32 
cmom2_rf_reg_psub_non = cmom2_rf_reg_psub4 INTERACT M2 
cmom2_rf_reg_psub = cmom2_rf_reg_psub4 NOT cmom2_rf_reg_psub_non 
cmom2_rf_reg_nw1 = cmom2_rf_reg INTERACT MOMDMY_NWi 
cmom2_rf_reg_nw2 = cmom2_rf_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom2_rf_reg_nw3 = cmom2_rf_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom2_rf_reg_nw_non = cmom2_rf_reg_nw3 INTERACT M2 
cmom2_rf_reg_nw = cmom2_rf_reg_nw3 NOT cmom2_rf_reg_nw_non 
cmom2_mx_reg0 = MOMDMY_MX INTERACT RTMOMDMY 
cmom2_mx_reg1 = cmom2_mx_reg0 INTERACT mom2_1 
cmom2_mx_reg2 = cmom2_mx_reg1 NOT INTERACT RFDMYi 
cmom2_mx_reg_4t1 = cmom2_mx_reg1 INTERACT MOMDMY_2T 
cmom2_mx_reg_4t2 = cmom2_mx_reg_4t1 NOT INTERACT MOMDMY_NWi 
cmom2_mx_reg_4t3 = cmom2_mx_reg_4t2 NOT INTERACT MOMDMY_PWi 
cmom2_mx_reg_4t4 = cmom2_mx_reg_4t3 NOT INTERACT MOMDMY_NTNi 
cmom2_mx_reg_4t5 = cmom2_mx_reg_4t4 NOT INTERACT MOMDMY_ARY 
cmom2_mx_reg_4t6 = cmom2_mx_reg_4t5 NOT INTERACT MOMDMY_TSHD 
cmom2_mx_reg_4t = cmom2_mx_reg_4t6 NOT INTERACT RFMOMDMY_2T 
cmom2_mx_reg_4t_a = cmom2_mx_reg_4t INTERACT mom2p1_a 
cmom2_mx_reg_4t_b = cmom2_mx_reg_4t INTERACT mom2p1_b 
cmom2_mx_reg3 = cmom2_mx_reg2 NOT INTERACT MOMDMY_2T 
cmom2_mx_reg_nw1 = cmom2_mx_reg3 INTERACT MOMDMY_NWi 
cmom2_mx_reg_nw2 = cmom2_mx_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom2_mx_reg_nw = cmom2_mx_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom2_mx_reg_nw_a = cmom2_mx_reg_nw INTERACT mom2p1_a 
cmom2_mx_reg_nw_b = cmom2_mx_reg_nw INTERACT mom2p1_b 
cmom2_mx_reg_psub1 = cmom2_mx_reg3 NOT INTERACT MOMDMY_NWi 
cmom2_mx_reg_psub21 = cmom2_mx_reg_psub1 INTERACT MOMDMY_PWi 
cmom2_mx_reg_psub22 = cmom2_mx_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom2_mx_reg_psub31 = cmom2_mx_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom2_mx_reg_psub32 = cmom2_mx_reg_psub31 INTERACT MOMDMY_NTNi 
cmom2_mx_reg_psub = cmom2_mx_reg_psub22 OR cmom2_mx_reg_psub32 
cmom2_mx_reg_psub_a = cmom2_mx_reg_psub INTERACT mom2p1_a 
cmom2_mx_reg_psub_b = cmom2_mx_reg_psub INTERACT mom2p1_b 
mom3_0 = MOMDMY3 NOT INTERACT MOM_field0 
mom3_1 = mom3_0 NOT INTERACT MOM_field1 
mom3_2 = mom3_1 NOT INTERACT MOM_field2 
cmom3_reg1 = mom3_2 INTERACT RTMOMDMY 
cmom3_reg2 = cmom3_reg1 NOT INTERACT MOMDMY_MX 
cmom3_reg3 = cmom3_reg2 NOT INTERACT MOMDMY_MXP1 
cmom3_reg4 = cmom3_reg3 NOT INTERACT MOMDMY_MXP2 
cmom3_reg4_1 = cmom3_reg4 NOT INTERACT MOMDMY_MXP12 
cmom3_reg4_2 = cmom3_reg4_1 NOT INTERACT MOMDMY_ARY 
cmom3_reg4_3 = cmom3_reg4_2 NOT INTERACT MOMDMY_TSHD 
cmom3_reg5 = cmom3_reg4_3 NOT INTERACT RFMOMDMY_2T 
cmom3_reg6 = cmom3_reg5 NOT INTERACT RFDMYi 
cmom3_reg = cmom3_reg6 NOT INTERACT MOMDMY_2T 
cmom3_reg_psub1 = cmom3_reg NOT INTERACT MOMDMY_NWi 
cmom3_reg_psub21 = cmom3_reg_psub1 INTERACT MOMDMY_PWi 
cmom3_reg_psub22 = cmom3_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom3_reg_psub31 = cmom3_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom3_reg_psub32 = cmom3_reg_psub31 INTERACT MOMDMY_NTNi 
cmom3_reg_psub4 = cmom3_reg_psub22 OR cmom3_reg_psub32 
cmom3_reg_psub_non = cmom3_reg_psub4 INTERACT M3 
cmom3_reg_psub = cmom3_reg_psub4 NOT cmom3_reg_psub_non 
cmom3_reg_nw1 = cmom3_reg INTERACT MOMDMY_NWi 
cmom3_reg_nw2 = cmom3_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom3_reg_nw3 = cmom3_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom3_reg_nw_non = cmom3_reg_nw3 INTERACT M3 
cmom3_reg_nw = cmom3_reg_nw3 NOT cmom3_reg_nw_non 
cmom3_reg_2t1 = cmom3_reg5 INTERACT MOMDMY_2T 
cmom3_reg_2t2 = cmom3_reg_2t1 NOT INTERACT MOMDMY_NWi 
cmom3_reg_2t3 = cmom3_reg_2t2 NOT INTERACT MOMDMY_PWi 
cmom3_reg_2t4 = cmom3_reg_2t3 NOT INTERACT MOMDMY_NTNi 
cmom3_reg_2t_non = cmom3_reg_2t4 INTERACT M3 
cmom3_reg_2t = cmom3_reg_2t4 NOT cmom3_reg_2t_non 
cmom3_rf_reg1 = cmom3_reg5 INTERACT RFDMYi 
cmom3_rf_reg = cmom3_rf_reg1 NOT INTERACT MOMDMY_2T 
cmom3_rf_reg_psub1 = cmom3_rf_reg NOT INTERACT MOMDMY_NWi 
cmom3_rf_reg_psub21 = cmom3_rf_reg_psub1 INTERACT MOMDMY_PWi 
cmom3_rf_reg_psub22 = cmom3_rf_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom3_rf_reg_psub31 = cmom3_rf_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom3_rf_reg_psub32 = cmom3_rf_reg_psub31 INTERACT MOMDMY_NTNi 
cmom3_rf_reg_psub4 = cmom3_rf_reg_psub22 OR cmom3_rf_reg_psub32 
cmom3_rf_reg_psub_non = cmom3_rf_reg_psub4 INTERACT M3 
cmom3_rf_reg_psub = cmom3_rf_reg_psub4 NOT cmom3_rf_reg_psub_non 
cmom3_rf_reg_nw1 = cmom3_rf_reg INTERACT MOMDMY_NWi 
cmom3_rf_reg_nw2 = cmom3_rf_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom3_rf_reg_nw3 = cmom3_rf_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom3_rf_reg_nw_non = cmom3_rf_reg_nw3 INTERACT M3 
cmom3_rf_reg_nw = cmom3_rf_reg_nw3 NOT cmom3_rf_reg_nw_non 
cmom3_mx_reg0 = MOMDMY_MX INTERACT RTMOMDMY 
cmom3_mx_reg1 = cmom3_mx_reg0 INTERACT mom3_2 
cmom3_mx_reg2 = cmom3_mx_reg1 NOT INTERACT RFDMYi 
cmom3_mx_reg_4t1 = cmom3_mx_reg1 INTERACT MOMDMY_2T 
cmom3_mx_reg_4t2 = cmom3_mx_reg_4t1 NOT INTERACT MOMDMY_NWi 
cmom3_mx_reg_4t3 = cmom3_mx_reg_4t2 NOT INTERACT MOMDMY_PWi 
cmom3_mx_reg_4t4 = cmom3_mx_reg_4t3 NOT INTERACT MOMDMY_NTNi 
cmom3_mx_reg_4t5 = cmom3_mx_reg_4t4 NOT INTERACT MOMDMY_ARY 
cmom3_mx_reg_4t6 = cmom3_mx_reg_4t5 NOT INTERACT MOMDMY_TSHD 
cmom3_mx_reg_4t = cmom3_mx_reg_4t6 NOT INTERACT RFMOMDMY_2T 
cmom3_mx_reg_4t_non = cmom3_mx_reg_4t INTERACT mom3p1 
cmom3_mx_reg3 = cmom3_mx_reg2 NOT INTERACT MOMDMY_2T 
cmom3_mx_reg_nw1 = cmom3_mx_reg3 INTERACT MOMDMY_NWi 
cmom3_mx_reg_nw2 = cmom3_mx_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom3_mx_reg_nw = cmom3_mx_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom3_mx_reg_nw_non = cmom3_mx_reg_nw INTERACT mom3p1 
cmom3_mx_reg_psub1 = cmom3_mx_reg3 NOT INTERACT MOMDMY_NWi 
cmom3_mx_reg_psub21 = cmom3_mx_reg_psub1 INTERACT MOMDMY_PWi 
cmom3_mx_reg_psub22 = cmom3_mx_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom3_mx_reg_psub31 = cmom3_mx_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom3_mx_reg_psub32 = cmom3_mx_reg_psub31 INTERACT MOMDMY_NTNi 
cmom3_mx_reg_psub = cmom3_mx_reg_psub22 OR cmom3_mx_reg_psub32 
cmom3_mx_reg_psub_non = cmom3_mx_reg_psub INTERACT mom3p1 
mom4_0 = MOMDMY4 NOT INTERACT MOM_field0 
mom4_1 = mom4_0 NOT INTERACT MOM_field1 
mom4_2 = mom4_1 NOT INTERACT MOM_field2 
mom4_3 = mom4_2 NOT INTERACT MOM_field3 
cmom4_reg1 = mom4_3 INTERACT RTMOMDMY 
cmom4_reg2 = cmom4_reg1 NOT INTERACT MOMDMY_MX 
cmom4_reg3 = cmom4_reg2 NOT INTERACT MOMDMY_MXP1 
cmom4_reg4 = cmom4_reg3 NOT INTERACT MOMDMY_MXP2 
cmom4_reg4_1 = cmom4_reg4 NOT INTERACT MOMDMY_MXP12 
cmom4_reg4_2 = cmom4_reg4_1 NOT INTERACT MOMDMY_ARY 
cmom4_reg4_3 = cmom4_reg4_2 NOT INTERACT MOMDMY_TSHD 
cmom4_reg5 = cmom4_reg4_3 NOT INTERACT RFMOMDMY_2T 
cmom4_reg6 = cmom4_reg5 NOT INTERACT RFDMYi 
cmom4_reg = cmom4_reg6 NOT INTERACT MOMDMY_2T 
cmom4_reg_psub1 = cmom4_reg NOT INTERACT MOMDMY_NWi 
cmom4_reg_psub21 = cmom4_reg_psub1 INTERACT MOMDMY_PWi 
cmom4_reg_psub22 = cmom4_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom4_reg_psub31 = cmom4_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom4_reg_psub32 = cmom4_reg_psub31 INTERACT MOMDMY_NTNi 
cmom4_reg_psub4 = cmom4_reg_psub22 OR cmom4_reg_psub32 
cmom4_reg_psub_non = cmom4_reg_psub4 INTERACT M4 
cmom4_reg_psub = cmom4_reg_psub4 NOT cmom4_reg_psub_non 
cmom4_reg_nw1 = cmom4_reg INTERACT MOMDMY_NWi 
cmom4_reg_nw2 = cmom4_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom4_reg_nw3 = cmom4_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom4_reg_nw_non = cmom4_reg_nw3 INTERACT M4 
cmom4_reg_nw = cmom4_reg_nw3 NOT cmom4_reg_nw_non 
cmom4_reg_2t1 = cmom4_reg5 INTERACT MOMDMY_2T 
cmom4_reg_2t2 = cmom4_reg_2t1 NOT INTERACT MOMDMY_NWi 
cmom4_reg_2t3 = cmom4_reg_2t2 NOT INTERACT MOMDMY_PWi 
cmom4_reg_2t4 = cmom4_reg_2t3 NOT INTERACT MOMDMY_NTNi 
cmom4_reg_2t_non = cmom4_reg_2t4 INTERACT M4 
cmom4_reg_2t = cmom4_reg_2t4 NOT cmom4_reg_2t_non 
cmom4_rf_reg1 = cmom4_reg5 INTERACT RFDMYi 
cmom4_rf_reg = cmom4_rf_reg1 NOT INTERACT MOMDMY_2T 
cmom4_rf_reg_psub1 = cmom4_rf_reg NOT INTERACT MOMDMY_NWi 
cmom4_rf_reg_psub21 = cmom4_rf_reg_psub1 INTERACT MOMDMY_PWi 
cmom4_rf_reg_psub22 = cmom4_rf_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom4_rf_reg_psub31 = cmom4_rf_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom4_rf_reg_psub32 = cmom4_rf_reg_psub31 INTERACT MOMDMY_NTNi 
cmom4_rf_reg_psub4 = cmom4_rf_reg_psub22 OR cmom4_rf_reg_psub32 
cmom4_rf_reg_psub_non = cmom4_rf_reg_psub4 INTERACT M4 
cmom4_rf_reg_psub = cmom4_rf_reg_psub4 NOT cmom4_rf_reg_psub_non 
cmom4_rf_reg_nw1 = cmom4_rf_reg INTERACT MOMDMY_NWi 
cmom4_rf_reg_nw2 = cmom4_rf_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom4_rf_reg_nw3 = cmom4_rf_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom4_rf_reg_nw_non = cmom4_rf_reg_nw3 INTERACT M4 
cmom4_rf_reg_nw = cmom4_rf_reg_nw3 NOT cmom4_rf_reg_nw_non 
cmom4_mx_reg0 = MOMDMY_MX INTERACT RTMOMDMY 
cmom4_mx_reg1 = cmom4_mx_reg0 INTERACT mom4_3 
cmom4_mx_reg2 = cmom4_mx_reg1 NOT INTERACT RFDMYi 
cmom4_mx_reg_4t1 = cmom4_mx_reg1 INTERACT MOMDMY_2T 
cmom4_mx_reg_4t2 = cmom4_mx_reg_4t1 NOT INTERACT MOMDMY_NWi 
cmom4_mx_reg_4t3 = cmom4_mx_reg_4t2 NOT INTERACT MOMDMY_PWi 
cmom4_mx_reg_4t4 = cmom4_mx_reg_4t3 NOT INTERACT MOMDMY_NTNi 
cmom4_mx_reg_4t5 = cmom4_mx_reg_4t4 NOT INTERACT MOMDMY_ARY 
cmom4_mx_reg_4t6 = cmom4_mx_reg_4t5 NOT INTERACT MOMDMY_TSHD 
cmom4_mx_reg_4t = cmom4_mx_reg_4t6 NOT INTERACT RFMOMDMY_2T 
cmom4_mx_reg_4t_non = cmom4_mx_reg_4t INTERACT mom4p1 
cmom4_mx_reg3 = cmom4_mx_reg2 NOT INTERACT MOMDMY_2T 
cmom4_mx_reg_nw1 = cmom4_mx_reg3 INTERACT MOMDMY_NWi 
cmom4_mx_reg_nw2 = cmom4_mx_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom4_mx_reg_nw = cmom4_mx_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom4_mx_reg_nw_non = cmom4_mx_reg_nw INTERACT mom4p1 
cmom4_mx_reg_psub1 = cmom4_mx_reg3 NOT INTERACT MOMDMY_NWi 
cmom4_mx_reg_psub21 = cmom4_mx_reg_psub1 INTERACT MOMDMY_PWi 
cmom4_mx_reg_psub22 = cmom4_mx_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom4_mx_reg_psub31 = cmom4_mx_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom4_mx_reg_psub32 = cmom4_mx_reg_psub31 INTERACT MOMDMY_NTNi 
cmom4_mx_reg_psub = cmom4_mx_reg_psub22 OR cmom4_mx_reg_psub32 
cmom4_mx_reg_psub_non = cmom4_mx_reg_psub INTERACT mom4p1 
mom5_0 = MOMDMY5 NOT INTERACT MOM_field0 
mom5_1 = mom5_0 NOT INTERACT MOM_field1 
mom5_2 = mom5_1 NOT INTERACT MOM_field2 
mom5_3 = mom5_2 NOT INTERACT MOM_field3 
mom5_4 = mom5_3 NOT INTERACT MOM_field4 
cmom5_reg1 = mom5_4 INTERACT RTMOMDMY 
cmom5_reg2 = cmom5_reg1 NOT INTERACT MOMDMY_MX 
cmom5_reg3 = cmom5_reg2 NOT INTERACT MOMDMY_MXP1 
cmom5_reg4 = cmom5_reg3 NOT INTERACT MOMDMY_MXP2 
cmom5_reg4_1 = cmom5_reg4 NOT INTERACT MOMDMY_MXP12 
cmom5_reg4_2 = cmom5_reg4_1 NOT INTERACT MOMDMY_ARY 
cmom5_reg4_3 = cmom5_reg4_2 NOT INTERACT MOMDMY_TSHD 
cmom5_reg5 = cmom5_reg4_3 NOT INTERACT RFMOMDMY_2T 
cmom5_reg6 = cmom5_reg5 NOT INTERACT RFDMYi 
cmom5_reg = cmom5_reg6 NOT INTERACT MOMDMY_2T 
cmom5_reg_psub1 = cmom5_reg NOT INTERACT MOMDMY_NWi 
cmom5_reg_psub21 = cmom5_reg_psub1 INTERACT MOMDMY_PWi 
cmom5_reg_psub22 = cmom5_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom5_reg_psub31 = cmom5_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom5_reg_psub32 = cmom5_reg_psub31 INTERACT MOMDMY_NTNi 
cmom5_reg_psub4 = cmom5_reg_psub22 OR cmom5_reg_psub32 
cmom5_reg_psub_non = cmom5_reg_psub4 INTERACT M5 
cmom5_reg_psub = cmom5_reg_psub4 NOT cmom5_reg_psub_non 
cmom5_reg_nw1 = cmom5_reg INTERACT MOMDMY_NWi 
cmom5_reg_nw2 = cmom5_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom5_reg_nw3 = cmom5_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom5_reg_nw_non = cmom5_reg_nw3 INTERACT M5 
cmom5_reg_nw = cmom5_reg_nw3 NOT cmom5_reg_nw_non 
cmom5_reg_2t1 = cmom5_reg5 INTERACT MOMDMY_2T 
cmom5_reg_2t2 = cmom5_reg_2t1 NOT INTERACT MOMDMY_NWi 
cmom5_reg_2t3 = cmom5_reg_2t2 NOT INTERACT MOMDMY_PWi 
cmom5_reg_2t4 = cmom5_reg_2t3 NOT INTERACT MOMDMY_NTNi 
cmom5_reg_2t_non = cmom5_reg_2t4 INTERACT M5 
cmom5_reg_2t = cmom5_reg_2t4 NOT cmom5_reg_2t_non 
cmom5_rf_reg1 = cmom5_reg5 INTERACT RFDMYi 
cmom5_rf_reg = cmom5_rf_reg1 NOT INTERACT MOMDMY_2T 
cmom5_rf_reg_psub1 = cmom5_rf_reg NOT INTERACT MOMDMY_NWi 
cmom5_rf_reg_psub21 = cmom5_rf_reg_psub1 INTERACT MOMDMY_PWi 
cmom5_rf_reg_psub22 = cmom5_rf_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom5_rf_reg_psub31 = cmom5_rf_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom5_rf_reg_psub32 = cmom5_rf_reg_psub31 INTERACT MOMDMY_NTNi 
cmom5_rf_reg_psub4 = cmom5_rf_reg_psub22 OR cmom5_rf_reg_psub32 
cmom5_rf_reg_psub_non = cmom5_rf_reg_psub4 INTERACT M5 
cmom5_rf_reg_psub = cmom5_rf_reg_psub4 NOT cmom5_rf_reg_psub_non 
cmom5_rf_reg_nw1 = cmom5_rf_reg INTERACT MOMDMY_NWi 
cmom5_rf_reg_nw2 = cmom5_rf_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom5_rf_reg_nw3 = cmom5_rf_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom5_rf_reg_nw_non = cmom5_rf_reg_nw3 INTERACT M5 
cmom5_rf_reg_nw = cmom5_rf_reg_nw3 NOT cmom5_rf_reg_nw_non 
cmom5_mx_reg0 = MOMDMY_MX INTERACT RTMOMDMY 
cmom5_mx_reg1 = cmom5_mx_reg0 INTERACT mom5_4 
cmom5_mx_reg2 = cmom5_mx_reg1 NOT INTERACT RFDMYi 
cmom5_mx_reg_4t1 = cmom5_mx_reg1 INTERACT MOMDMY_2T 
cmom5_mx_reg_4t2 = cmom5_mx_reg_4t1 NOT INTERACT MOMDMY_NWi 
cmom5_mx_reg_4t3 = cmom5_mx_reg_4t2 NOT INTERACT MOMDMY_PWi 
cmom5_mx_reg_4t4 = cmom5_mx_reg_4t3 NOT INTERACT MOMDMY_NTNi 
cmom5_mx_reg_4t5 = cmom5_mx_reg_4t4 NOT INTERACT MOMDMY_ARY 
cmom5_mx_reg_4t6 = cmom5_mx_reg_4t5 NOT INTERACT MOMDMY_TSHD 
cmom5_mx_reg_4t = cmom5_mx_reg_4t6 NOT INTERACT RFMOMDMY_2T 
cmom5_mx_reg_4t_a = cmom5_mx_reg_4t INTERACT mom5p1_a 
cmom5_mx_reg_4t_b = cmom5_mx_reg_4t INTERACT mom5p1_b 
cmom5_mx_reg3 = cmom5_mx_reg2 NOT INTERACT MOMDMY_2T 
cmom5_mx_reg_nw1 = cmom5_mx_reg3 INTERACT MOMDMY_NWi 
cmom5_mx_reg_nw2 = cmom5_mx_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom5_mx_reg_nw = cmom5_mx_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom5_mx_reg_nw_a = cmom5_mx_reg_nw INTERACT mom5p1_a 
cmom5_mx_reg_nw_b = cmom5_mx_reg_nw INTERACT mom5p1_b 
cmom5_mx_reg_psub1 = cmom5_mx_reg3 NOT INTERACT MOMDMY_NWi 
cmom5_mx_reg_psub21 = cmom5_mx_reg_psub1 INTERACT MOMDMY_PWi 
cmom5_mx_reg_psub22 = cmom5_mx_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom5_mx_reg_psub31 = cmom5_mx_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom5_mx_reg_psub32 = cmom5_mx_reg_psub31 INTERACT MOMDMY_NTNi 
cmom5_mx_reg_psub = cmom5_mx_reg_psub22 OR cmom5_mx_reg_psub32 
cmom5_mx_reg_psub_a = cmom5_mx_reg_psub INTERACT mom5p1_a 
cmom5_mx_reg_psub_b = cmom5_mx_reg_psub INTERACT mom5p1_b 
mom6_0 = MOMDMY6 NOT INTERACT MOM_field0 
mom6_1 = mom6_0 NOT INTERACT MOM_field1 
mom6_2 = mom6_1 NOT INTERACT MOM_field2 
mom6_3 = mom6_2 NOT INTERACT MOM_field3 
mom6_4 = mom6_3 NOT INTERACT MOM_field4 
mom6_5 = mom6_4 NOT INTERACT MOM_field5 
cmom6_reg1 = mom6_5 INTERACT RTMOMDMY 
cmom6_reg2 = cmom6_reg1 NOT INTERACT MOMDMY_MX 
cmom6_reg3 = cmom6_reg2 NOT INTERACT MOMDMY_MXP1 
cmom6_reg4 = cmom6_reg3 NOT INTERACT MOMDMY_MXP2 
cmom6_reg4_1 = cmom6_reg4 NOT INTERACT MOMDMY_MXP12 
cmom6_reg4_2 = cmom6_reg4_1 NOT INTERACT MOMDMY_ARY 
cmom6_reg4_3 = cmom6_reg4_2 NOT INTERACT MOMDMY_TSHD 
cmom6_reg5 = cmom6_reg4_3 NOT INTERACT RFMOMDMY_2T 
cmom6_reg6 = cmom6_reg5 NOT INTERACT RFDMYi 
cmom6_reg = cmom6_reg6 NOT INTERACT MOMDMY_2T 
cmom6_reg_psub1 = cmom6_reg NOT INTERACT MOMDMY_NWi 
cmom6_reg_psub21 = cmom6_reg_psub1 INTERACT MOMDMY_PWi 
cmom6_reg_psub22 = cmom6_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom6_reg_psub31 = cmom6_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom6_reg_psub32 = cmom6_reg_psub31 INTERACT MOMDMY_NTNi 
cmom6_reg_psub4 = cmom6_reg_psub22 OR cmom6_reg_psub32 
cmom6_reg_psub_non = cmom6_reg_psub4 INTERACT M6 
cmom6_reg_psub = cmom6_reg_psub4 NOT cmom6_reg_psub_non 
cmom6_reg_nw1 = cmom6_reg INTERACT MOMDMY_NWi 
cmom6_reg_nw2 = cmom6_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom6_reg_nw3 = cmom6_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom6_reg_nw_non = cmom6_reg_nw3 INTERACT M6 
cmom6_reg_nw = cmom6_reg_nw3 NOT cmom6_reg_nw_non 
cmom6_reg_2t1 = cmom6_reg5 INTERACT MOMDMY_2T 
cmom6_reg_2t2 = cmom6_reg_2t1 NOT INTERACT MOMDMY_NWi 
cmom6_reg_2t3 = cmom6_reg_2t2 NOT INTERACT MOMDMY_PWi 
cmom6_reg_2t4 = cmom6_reg_2t3 NOT INTERACT MOMDMY_NTNi 
cmom6_reg_2t_non = cmom6_reg_2t4 INTERACT M6 
cmom6_reg_2t = cmom6_reg_2t4 NOT cmom6_reg_2t_non 
cmom6_rf_reg1 = cmom6_reg5 INTERACT RFDMYi 
cmom6_rf_reg = cmom6_rf_reg1 NOT INTERACT MOMDMY_2T 
cmom6_rf_reg_psub1 = cmom6_rf_reg NOT INTERACT MOMDMY_NWi 
cmom6_rf_reg_psub21 = cmom6_rf_reg_psub1 INTERACT MOMDMY_PWi 
cmom6_rf_reg_psub22 = cmom6_rf_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom6_rf_reg_psub31 = cmom6_rf_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom6_rf_reg_psub32 = cmom6_rf_reg_psub31 INTERACT MOMDMY_NTNi 
cmom6_rf_reg_psub4 = cmom6_rf_reg_psub22 OR cmom6_rf_reg_psub32 
cmom6_rf_reg_psub_non = cmom6_rf_reg_psub4 INTERACT M6 
cmom6_rf_reg_psub = cmom6_rf_reg_psub4 NOT cmom6_rf_reg_psub_non 
cmom6_rf_reg_nw1 = cmom6_rf_reg INTERACT MOMDMY_NWi 
cmom6_rf_reg_nw2 = cmom6_rf_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom6_rf_reg_nw3 = cmom6_rf_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom6_rf_reg_nw_non = cmom6_rf_reg_nw3 INTERACT M6 
cmom6_rf_reg_nw = cmom6_rf_reg_nw3 NOT cmom6_rf_reg_nw_non 
cmom6_mx_reg0 = MOMDMY_MX INTERACT RTMOMDMY 
cmom6_mx_reg1 = cmom6_mx_reg0 INTERACT mom6_5 
cmom6_mx_reg2 = cmom6_mx_reg1 NOT INTERACT RFDMYi 
cmom6_mx_reg_4t1 = cmom6_mx_reg1 INTERACT MOMDMY_2T 
cmom6_mx_reg_4t2 = cmom6_mx_reg_4t1 NOT INTERACT MOMDMY_NWi 
cmom6_mx_reg_4t3 = cmom6_mx_reg_4t2 NOT INTERACT MOMDMY_PWi 
cmom6_mx_reg_4t4 = cmom6_mx_reg_4t3 NOT INTERACT MOMDMY_NTNi 
cmom6_mx_reg_4t5 = cmom6_mx_reg_4t4 NOT INTERACT MOMDMY_ARY 
cmom6_mx_reg_4t6 = cmom6_mx_reg_4t5 NOT INTERACT MOMDMY_TSHD 
cmom6_mx_reg_4t = cmom6_mx_reg_4t6 NOT INTERACT RFMOMDMY_2T 
cmom6_mx_reg_4t_non = cmom6_mx_reg_4t INTERACT mom6p1 
cmom6_mx_reg3 = cmom6_mx_reg2 NOT INTERACT MOMDMY_2T 
cmom6_mx_reg_nw1 = cmom6_mx_reg3 INTERACT MOMDMY_NWi 
cmom6_mx_reg_nw2 = cmom6_mx_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom6_mx_reg_nw = cmom6_mx_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom6_mx_reg_nw_non = cmom6_mx_reg_nw INTERACT mom6p1 
cmom6_mx_reg_psub1 = cmom6_mx_reg3 NOT INTERACT MOMDMY_NWi 
cmom6_mx_reg_psub21 = cmom6_mx_reg_psub1 INTERACT MOMDMY_PWi 
cmom6_mx_reg_psub22 = cmom6_mx_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom6_mx_reg_psub31 = cmom6_mx_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom6_mx_reg_psub32 = cmom6_mx_reg_psub31 INTERACT MOMDMY_NTNi 
cmom6_mx_reg_psub = cmom6_mx_reg_psub22 OR cmom6_mx_reg_psub32 
cmom6_mx_reg_psub_non = cmom6_mx_reg_psub INTERACT mom6p1 
mom7_0 = MOMDMY7 NOT INTERACT MOM_field0 
mom7_1 = mom7_0 NOT INTERACT MOM_field1 
mom7_2 = mom7_1 NOT INTERACT MOM_field2 
mom7_3 = mom7_2 NOT INTERACT MOM_field3 
mom7_4 = mom7_3 NOT INTERACT MOM_field4 
mom7_5 = mom7_4 NOT INTERACT MOM_field5 
mom7_6 = mom7_5 NOT INTERACT MOM_field6 
cmom7_reg1 = mom7_6 INTERACT RTMOMDMY 
cmom7_reg2 = cmom7_reg1 NOT INTERACT MOMDMY_MX 
cmom7_reg3 = cmom7_reg2 NOT INTERACT MOMDMY_MXP1 
cmom7_reg4 = cmom7_reg3 NOT INTERACT MOMDMY_MXP2 
cmom7_reg4_1 = cmom7_reg4 NOT INTERACT MOMDMY_MXP12 
cmom7_reg4_2 = cmom7_reg4_1 NOT INTERACT MOMDMY_ARY 
cmom7_reg4_3 = cmom7_reg4_2 NOT INTERACT MOMDMY_TSHD 
cmom7_reg5 = cmom7_reg4_3 NOT INTERACT RFMOMDMY_2T 
cmom7_reg6 = cmom7_reg5 NOT INTERACT RFDMYi 
cmom7_reg = cmom7_reg6 NOT INTERACT MOMDMY_2T 
cmom7_reg_psub1 = cmom7_reg NOT INTERACT MOMDMY_NWi 
cmom7_reg_psub21 = cmom7_reg_psub1 INTERACT MOMDMY_PWi 
cmom7_reg_psub22 = cmom7_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom7_reg_psub31 = cmom7_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom7_reg_psub32 = cmom7_reg_psub31 INTERACT MOMDMY_NTNi 
cmom7_reg_psub4 = cmom7_reg_psub22 OR cmom7_reg_psub32 
cmom7_reg_psub_non = cmom7_reg_psub4 INTERACT M7 
cmom7_reg_psub = cmom7_reg_psub4 NOT cmom7_reg_psub_non 
cmom7_reg_nw1 = cmom7_reg INTERACT MOMDMY_NWi 
cmom7_reg_nw2 = cmom7_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom7_reg_nw3 = cmom7_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom7_reg_nw_non = cmom7_reg_nw3 INTERACT M7 
cmom7_reg_nw = cmom7_reg_nw3 NOT cmom7_reg_nw_non 
cmom7_reg_2t1 = cmom7_reg5 INTERACT MOMDMY_2T 
cmom7_reg_2t2 = cmom7_reg_2t1 NOT INTERACT MOMDMY_NWi 
cmom7_reg_2t3 = cmom7_reg_2t2 NOT INTERACT MOMDMY_PWi 
cmom7_reg_2t4 = cmom7_reg_2t3 NOT INTERACT MOMDMY_NTNi 
cmom7_reg_2t_non = cmom7_reg_2t4 INTERACT M7 
cmom7_reg_2t = cmom7_reg_2t4 NOT cmom7_reg_2t_non 
cmom7_rf_reg1 = cmom7_reg5 INTERACT RFDMYi 
cmom7_rf_reg = cmom7_rf_reg1 NOT INTERACT MOMDMY_2T 
cmom7_rf_reg_psub1 = cmom7_rf_reg NOT INTERACT MOMDMY_NWi 
cmom7_rf_reg_psub21 = cmom7_rf_reg_psub1 INTERACT MOMDMY_PWi 
cmom7_rf_reg_psub22 = cmom7_rf_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom7_rf_reg_psub31 = cmom7_rf_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom7_rf_reg_psub32 = cmom7_rf_reg_psub31 INTERACT MOMDMY_NTNi 
cmom7_rf_reg_psub4 = cmom7_rf_reg_psub22 OR cmom7_rf_reg_psub32 
cmom7_rf_reg_psub_non = cmom7_rf_reg_psub4 INTERACT M7 
cmom7_rf_reg_psub = cmom7_rf_reg_psub4 NOT cmom7_rf_reg_psub_non 
cmom7_rf_reg_nw1 = cmom7_rf_reg INTERACT MOMDMY_NWi 
cmom7_rf_reg_nw2 = cmom7_rf_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom7_rf_reg_nw3 = cmom7_rf_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom7_rf_reg_nw_non = cmom7_rf_reg_nw3 INTERACT M7 
cmom7_rf_reg_nw = cmom7_rf_reg_nw3 NOT cmom7_rf_reg_nw_non 
cmom7_mx_reg0 = MOMDMY_MX INTERACT RTMOMDMY 
cmom7_mx_reg1 = cmom7_mx_reg0 INTERACT mom7_6 
cmom7_mx_reg2 = cmom7_mx_reg1 NOT INTERACT RFDMYi 
cmom7_mx_reg_4t1 = cmom7_mx_reg1 INTERACT MOMDMY_2T 
cmom7_mx_reg_4t2 = cmom7_mx_reg_4t1 NOT INTERACT MOMDMY_NWi 
cmom7_mx_reg_4t3 = cmom7_mx_reg_4t2 NOT INTERACT MOMDMY_PWi 
cmom7_mx_reg_4t4 = cmom7_mx_reg_4t3 NOT INTERACT MOMDMY_NTNi 
cmom7_mx_reg_4t5 = cmom7_mx_reg_4t4 NOT INTERACT MOMDMY_ARY 
cmom7_mx_reg_4t6 = cmom7_mx_reg_4t5 NOT INTERACT MOMDMY_TSHD 
cmom7_mx_reg_4t = cmom7_mx_reg_4t6 NOT INTERACT RFMOMDMY_2T 
cmom7_mx_reg_4t_non = cmom7_mx_reg_4t INTERACT mom7p1 
cmom7_mx_reg3 = cmom7_mx_reg2 NOT INTERACT MOMDMY_2T 
cmom7_mx_reg_nw1 = cmom7_mx_reg3 INTERACT MOMDMY_NWi 
cmom7_mx_reg_nw2 = cmom7_mx_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom7_mx_reg_nw = cmom7_mx_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom7_mx_reg_nw_non = cmom7_mx_reg_nw INTERACT mom7p1 
cmom7_mx_reg_psub1 = cmom7_mx_reg3 NOT INTERACT MOMDMY_NWi 
cmom7_mx_reg_psub21 = cmom7_mx_reg_psub1 INTERACT MOMDMY_PWi 
cmom7_mx_reg_psub22 = cmom7_mx_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom7_mx_reg_psub31 = cmom7_mx_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom7_mx_reg_psub32 = cmom7_mx_reg_psub31 INTERACT MOMDMY_NTNi 
cmom7_mx_reg_psub = cmom7_mx_reg_psub22 OR cmom7_mx_reg_psub32 
cmom7_mx_reg_psub_non = cmom7_mx_reg_psub INTERACT mom7p1 
mom8_0 = MOMDMY8 NOT INTERACT MOM_field0 
mom8_1 = mom8_0 NOT INTERACT MOM_field1 
mom8_2 = mom8_1 NOT INTERACT MOM_field2 
mom8_3 = mom8_2 NOT INTERACT MOM_field3 
mom8_4 = mom8_3 NOT INTERACT MOM_field4 
mom8_5 = mom8_4 NOT INTERACT MOM_field5 
mom8_6 = mom8_5 NOT INTERACT MOM_field6 
mom8_7 = mom8_6 NOT INTERACT MOM_field7 
cmom8_reg1 = mom8_7 INTERACT RTMOMDMY 
cmom8_reg2 = cmom8_reg1 NOT INTERACT MOMDMY_MX 
cmom8_reg3 = cmom8_reg2 NOT INTERACT MOMDMY_MXP1 
cmom8_reg4 = cmom8_reg3 NOT INTERACT MOMDMY_MXP2 
cmom8_reg4_1 = cmom8_reg4 NOT INTERACT MOMDMY_MXP12 
cmom8_reg4_2 = cmom8_reg4_1 NOT INTERACT MOMDMY_ARY 
cmom8_reg4_3 = cmom8_reg4_2 NOT INTERACT MOMDMY_TSHD 
cmom8_reg5 = cmom8_reg4_3 NOT INTERACT RFMOMDMY_2T 
cmom8_reg6 = cmom8_reg5 NOT INTERACT RFDMYi 
cmom8_reg = cmom8_reg6 NOT INTERACT MOMDMY_2T 
cmom8_reg_psub1 = cmom8_reg NOT INTERACT MOMDMY_NWi 
cmom8_reg_psub21 = cmom8_reg_psub1 INTERACT MOMDMY_PWi 
cmom8_reg_psub22 = cmom8_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom8_reg_psub31 = cmom8_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom8_reg_psub32 = cmom8_reg_psub31 INTERACT MOMDMY_NTNi 
cmom8_reg_psub4 = cmom8_reg_psub22 OR cmom8_reg_psub32 
cmom8_reg_psub_non = cmom8_reg_psub4 INTERACT M8 
cmom8_reg_psub = cmom8_reg_psub4 NOT cmom8_reg_psub_non 
cmom8_reg_nw1 = cmom8_reg INTERACT MOMDMY_NWi 
cmom8_reg_nw2 = cmom8_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom8_reg_nw3 = cmom8_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom8_reg_nw_non = cmom8_reg_nw3 INTERACT M8 
cmom8_reg_nw = cmom8_reg_nw3 NOT cmom8_reg_nw_non 
cmom8_reg_2t1 = cmom8_reg5 INTERACT MOMDMY_2T 
cmom8_reg_2t2 = cmom8_reg_2t1 NOT INTERACT MOMDMY_NWi 
cmom8_reg_2t3 = cmom8_reg_2t2 NOT INTERACT MOMDMY_PWi 
cmom8_reg_2t4 = cmom8_reg_2t3 NOT INTERACT MOMDMY_NTNi 
cmom8_reg_2t_non = cmom8_reg_2t4 INTERACT M8 
cmom8_reg_2t = cmom8_reg_2t4 NOT cmom8_reg_2t_non 
cmom8_rf_reg1 = cmom8_reg5 INTERACT RFDMYi 
cmom8_rf_reg = cmom8_rf_reg1 NOT INTERACT MOMDMY_2T 
cmom8_rf_reg_psub1 = cmom8_rf_reg NOT INTERACT MOMDMY_NWi 
cmom8_rf_reg_psub21 = cmom8_rf_reg_psub1 INTERACT MOMDMY_PWi 
cmom8_rf_reg_psub22 = cmom8_rf_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom8_rf_reg_psub31 = cmom8_rf_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom8_rf_reg_psub32 = cmom8_rf_reg_psub31 INTERACT MOMDMY_NTNi 
cmom8_rf_reg_psub4 = cmom8_rf_reg_psub22 OR cmom8_rf_reg_psub32 
cmom8_rf_reg_psub_non = cmom8_rf_reg_psub4 INTERACT M8 
cmom8_rf_reg_psub = cmom8_rf_reg_psub4 NOT cmom8_rf_reg_psub_non 
cmom8_rf_reg_nw1 = cmom8_rf_reg INTERACT MOMDMY_NWi 
cmom8_rf_reg_nw2 = cmom8_rf_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom8_rf_reg_nw3 = cmom8_rf_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom8_rf_reg_nw_non = cmom8_rf_reg_nw3 INTERACT M8 
cmom8_rf_reg_nw = cmom8_rf_reg_nw3 NOT cmom8_rf_reg_nw_non 
cmom8_mx_reg0 = MOMDMY_MX INTERACT RTMOMDMY 
cmom8_mx_reg1 = cmom8_mx_reg0 INTERACT mom8_7 
cmom8_mx_reg2 = cmom8_mx_reg1 NOT INTERACT RFDMYi 
cmom8_mx_reg_4t1 = cmom8_mx_reg1 INTERACT MOMDMY_2T 
cmom8_mx_reg_4t2 = cmom8_mx_reg_4t1 NOT INTERACT MOMDMY_NWi 
cmom8_mx_reg_4t3 = cmom8_mx_reg_4t2 NOT INTERACT MOMDMY_PWi 
cmom8_mx_reg_4t4 = cmom8_mx_reg_4t3 NOT INTERACT MOMDMY_NTNi 
cmom8_mx_reg_4t5 = cmom8_mx_reg_4t4 NOT INTERACT MOMDMY_ARY 
cmom8_mx_reg_4t6 = cmom8_mx_reg_4t5 NOT INTERACT MOMDMY_TSHD 
cmom8_mx_reg_4t = cmom8_mx_reg_4t6 NOT INTERACT RFMOMDMY_2T 
cmom8_mx_reg_4t_non = cmom8_mx_reg_4t INTERACT mom8p1 
cmom8_mx_reg3 = cmom8_mx_reg2 NOT INTERACT MOMDMY_2T 
cmom8_mx_reg_nw1 = cmom8_mx_reg3 INTERACT MOMDMY_NWi 
cmom8_mx_reg_nw2 = cmom8_mx_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom8_mx_reg_nw = cmom8_mx_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom8_mx_reg_nw_non = cmom8_mx_reg_nw INTERACT mom8p1 
cmom8_mx_reg_psub1 = cmom8_mx_reg3 NOT INTERACT MOMDMY_NWi 
cmom8_mx_reg_psub21 = cmom8_mx_reg_psub1 INTERACT MOMDMY_PWi 
cmom8_mx_reg_psub22 = cmom8_mx_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom8_mx_reg_psub31 = cmom8_mx_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom8_mx_reg_psub32 = cmom8_mx_reg_psub31 INTERACT MOMDMY_NTNi 
cmom8_mx_reg_psub = cmom8_mx_reg_psub22 OR cmom8_mx_reg_psub32 
cmom8_mx_reg_psub_non = cmom8_mx_reg_psub INTERACT mom8p1 
mom9_0 = MOMDMY9 NOT INTERACT MOM_field0 
mom9_1 = mom9_0 NOT INTERACT MOM_field1 
mom9_2 = mom9_1 NOT INTERACT MOM_field2 
mom9_3 = mom9_2 NOT INTERACT MOM_field3 
mom9_4 = mom9_3 NOT INTERACT MOM_field4 
mom9_5 = mom9_4 NOT INTERACT MOM_field5 
mom9_6 = mom9_5 NOT INTERACT MOM_field6 
mom9_7 = mom9_6 NOT INTERACT MOM_field7 
mom9_8 = mom9_7 NOT INTERACT MOM_field8 
cmom9_reg1 = mom9_8 INTERACT RTMOMDMY 
cmom9_reg2 = cmom9_reg1 NOT INTERACT MOMDMY_MX 
cmom9_reg3 = cmom9_reg2 NOT INTERACT MOMDMY_MXP1 
cmom9_reg4 = cmom9_reg3 NOT INTERACT MOMDMY_MXP2 
cmom9_reg4_1 = cmom9_reg4 NOT INTERACT MOMDMY_MXP12 
cmom9_reg4_2 = cmom9_reg4_1 NOT INTERACT MOMDMY_ARY 
cmom9_reg4_3 = cmom9_reg4_2 NOT INTERACT MOMDMY_TSHD 
cmom9_reg5 = cmom9_reg4_3 NOT INTERACT RFMOMDMY_2T 
cmom9_reg6 = cmom9_reg5 NOT INTERACT RFDMYi 
cmom9_reg = cmom9_reg6 NOT INTERACT MOMDMY_2T 
cmom9_reg_psub1 = cmom9_reg NOT INTERACT MOMDMY_NWi 
cmom9_reg_psub21 = cmom9_reg_psub1 INTERACT MOMDMY_PWi 
cmom9_reg_psub22 = cmom9_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom9_reg_psub31 = cmom9_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom9_reg_psub32 = cmom9_reg_psub31 INTERACT MOMDMY_NTNi 
cmom9_reg_psub4 = cmom9_reg_psub22 OR cmom9_reg_psub32 
cmom9_reg_psub_non = cmom9_reg_psub4 INTERACT M9 
cmom9_reg_psub = cmom9_reg_psub4 NOT cmom9_reg_psub_non 
cmom9_reg_nw1 = cmom9_reg INTERACT MOMDMY_NWi 
cmom9_reg_nw2 = cmom9_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom9_reg_nw3 = cmom9_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom9_reg_nw_non = cmom9_reg_nw3 INTERACT M9 
cmom9_reg_nw = cmom9_reg_nw3 NOT cmom9_reg_nw_non 
cmom9_reg_2t1 = cmom9_reg5 INTERACT MOMDMY_2T 
cmom9_reg_2t2 = cmom9_reg_2t1 NOT INTERACT MOMDMY_NWi 
cmom9_reg_2t3 = cmom9_reg_2t2 NOT INTERACT MOMDMY_PWi 
cmom9_reg_2t4 = cmom9_reg_2t3 NOT INTERACT MOMDMY_NTNi 
cmom9_reg_2t_non = cmom9_reg_2t4 INTERACT M9 
cmom9_reg_2t = cmom9_reg_2t4 NOT cmom9_reg_2t_non 
cmom9_rf_reg1 = cmom9_reg5 INTERACT RFDMYi 
cmom9_rf_reg = cmom9_rf_reg1 NOT INTERACT MOMDMY_2T 
cmom9_rf_reg_psub1 = cmom9_rf_reg NOT INTERACT MOMDMY_NWi 
cmom9_rf_reg_psub21 = cmom9_rf_reg_psub1 INTERACT MOMDMY_PWi 
cmom9_rf_reg_psub22 = cmom9_rf_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom9_rf_reg_psub31 = cmom9_rf_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom9_rf_reg_psub32 = cmom9_rf_reg_psub31 INTERACT MOMDMY_NTNi 
cmom9_rf_reg_psub4 = cmom9_rf_reg_psub22 OR cmom9_rf_reg_psub32 
cmom9_rf_reg_psub_non = cmom9_rf_reg_psub4 INTERACT M9 
cmom9_rf_reg_psub = cmom9_rf_reg_psub4 NOT cmom9_rf_reg_psub_non 
cmom9_rf_reg_nw1 = cmom9_rf_reg INTERACT MOMDMY_NWi 
cmom9_rf_reg_nw2 = cmom9_rf_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom9_rf_reg_nw3 = cmom9_rf_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom9_rf_reg_nw_non = cmom9_rf_reg_nw3 INTERACT M9 
cmom9_rf_reg_nw = cmom9_rf_reg_nw3 NOT cmom9_rf_reg_nw_non 
cmom9_mx_reg0 = MOMDMY_MX INTERACT RTMOMDMY 
cmom9_mx_reg1 = cmom9_mx_reg0 INTERACT mom9_8 
cmom9_mx_reg2 = cmom9_mx_reg1 NOT INTERACT RFDMYi 
cmom9_mx_reg_4t1 = cmom9_mx_reg1 INTERACT MOMDMY_2T 
cmom9_mx_reg_4t2 = cmom9_mx_reg_4t1 NOT INTERACT MOMDMY_NWi 
cmom9_mx_reg_4t3 = cmom9_mx_reg_4t2 NOT INTERACT MOMDMY_PWi 
cmom9_mx_reg_4t4 = cmom9_mx_reg_4t3 NOT INTERACT MOMDMY_NTNi 
cmom9_mx_reg_4t5 = cmom9_mx_reg_4t4 NOT INTERACT MOMDMY_ARY 
cmom9_mx_reg_4t6 = cmom9_mx_reg_4t5 NOT INTERACT MOMDMY_TSHD 
cmom9_mx_reg_4t = cmom9_mx_reg_4t6 NOT INTERACT RFMOMDMY_2T 
cmom9_mx_reg_4t_non = cmom9_mx_reg_4t INTERACT mom9p1 
cmom9_mx_reg3 = cmom9_mx_reg2 NOT INTERACT MOMDMY_2T 
cmom9_mx_reg_nw1 = cmom9_mx_reg3 INTERACT MOMDMY_NWi 
cmom9_mx_reg_nw2 = cmom9_mx_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom9_mx_reg_nw = cmom9_mx_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom9_mx_reg_nw_non = cmom9_mx_reg_nw INTERACT mom9p1 
cmom9_mx_reg_psub1 = cmom9_mx_reg3 NOT INTERACT MOMDMY_NWi 
cmom9_mx_reg_psub21 = cmom9_mx_reg_psub1 INTERACT MOMDMY_PWi 
cmom9_mx_reg_psub22 = cmom9_mx_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom9_mx_reg_psub31 = cmom9_mx_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom9_mx_reg_psub32 = cmom9_mx_reg_psub31 INTERACT MOMDMY_NTNi 
cmom9_mx_reg_psub = cmom9_mx_reg_psub22 OR cmom9_mx_reg_psub32 
cmom9_mx_reg_psub_non = cmom9_mx_reg_psub INTERACT mom9p1 
mom10_0 = MOMDMY10 NOT INTERACT MOM_field0 
mom10_1 = mom10_0 NOT INTERACT MOM_field1 
mom10_2 = mom10_1 NOT INTERACT MOM_field2 
mom10_3 = mom10_2 NOT INTERACT MOM_field3 
mom10_4 = mom10_3 NOT INTERACT MOM_field4 
mom10_5 = mom10_4 NOT INTERACT MOM_field5 
mom10_6 = mom10_5 NOT INTERACT MOM_field6 
mom10_7 = mom10_6 NOT INTERACT MOM_field7 
mom10_8 = mom10_7 NOT INTERACT MOM_field8 
mom10_9 = mom10_8 NOT INTERACT MOM_field9 
cmom10_reg1 = mom10_9 INTERACT RTMOMDMY 
cmom10_reg2 = cmom10_reg1 NOT INTERACT MOMDMY_MX 
cmom10_reg3 = cmom10_reg2 NOT INTERACT MOMDMY_MXP1 
cmom10_reg4 = cmom10_reg3 NOT INTERACT MOMDMY_MXP2 
cmom10_reg4_1 = cmom10_reg4 NOT INTERACT MOMDMY_MXP12 
cmom10_reg4_2 = cmom10_reg4_1 NOT INTERACT MOMDMY_ARY 
cmom10_reg4_3 = cmom10_reg4_2 NOT INTERACT MOMDMY_TSHD 
cmom10_reg5 = cmom10_reg4_3 NOT INTERACT RFMOMDMY_2T 
cmom10_reg6 = cmom10_reg5 NOT INTERACT RFDMYi 
cmom10_reg = cmom10_reg6 NOT INTERACT MOMDMY_2T 
cmom10_reg_psub1 = cmom10_reg NOT INTERACT MOMDMY_NWi 
cmom10_reg_psub21 = cmom10_reg_psub1 INTERACT MOMDMY_PWi 
cmom10_reg_psub22 = cmom10_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom10_reg_psub31 = cmom10_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom10_reg_psub32 = cmom10_reg_psub31 INTERACT MOMDMY_NTNi 
cmom10_reg_psub4 = cmom10_reg_psub22 OR cmom10_reg_psub32 
cmom10_reg_psub_non = cmom10_reg_psub4 INTERACT M10 
cmom10_reg_psub = cmom10_reg_psub4 NOT cmom10_reg_psub_non 
cmom10_reg_nw1 = cmom10_reg INTERACT MOMDMY_NWi 
cmom10_reg_nw2 = cmom10_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom10_reg_nw3 = cmom10_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom10_reg_nw_non = cmom10_reg_nw3 INTERACT M10 
cmom10_reg_nw = cmom10_reg_nw3 NOT cmom10_reg_nw_non 
cmom10_reg_2t1 = cmom10_reg5 INTERACT MOMDMY_2T 
cmom10_reg_2t2 = cmom10_reg_2t1 NOT INTERACT MOMDMY_NWi 
cmom10_reg_2t3 = cmom10_reg_2t2 NOT INTERACT MOMDMY_PWi 
cmom10_reg_2t4 = cmom10_reg_2t3 NOT INTERACT MOMDMY_NTNi 
cmom10_reg_2t_non = cmom10_reg_2t4 INTERACT M10 
cmom10_reg_2t = cmom10_reg_2t4 NOT cmom10_reg_2t_non 
cmom10_rf_reg1 = cmom10_reg5 INTERACT RFDMYi 
cmom10_rf_reg = cmom10_rf_reg1 NOT INTERACT MOMDMY_2T 
cmom10_rf_reg_psub1 = cmom10_rf_reg NOT INTERACT MOMDMY_NWi 
cmom10_rf_reg_psub21 = cmom10_rf_reg_psub1 INTERACT MOMDMY_PWi 
cmom10_rf_reg_psub22 = cmom10_rf_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom10_rf_reg_psub31 = cmom10_rf_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom10_rf_reg_psub32 = cmom10_rf_reg_psub31 INTERACT MOMDMY_NTNi 
cmom10_rf_reg_psub4 = cmom10_rf_reg_psub22 OR cmom10_rf_reg_psub32 
cmom10_rf_reg_psub_non = cmom10_rf_reg_psub4 INTERACT M10 
cmom10_rf_reg_psub = cmom10_rf_reg_psub4 NOT cmom10_rf_reg_psub_non 
cmom10_rf_reg_nw1 = cmom10_rf_reg INTERACT MOMDMY_NWi 
cmom10_rf_reg_nw2 = cmom10_rf_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom10_rf_reg_nw3 = cmom10_rf_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom10_rf_reg_nw_non = cmom10_rf_reg_nw3 INTERACT M10 
cmom10_rf_reg_nw = cmom10_rf_reg_nw3 NOT cmom10_rf_reg_nw_non 
cmom10_mx_reg0 = MOMDMY_MX INTERACT RTMOMDMY 
cmom10_mx_reg1 = cmom10_mx_reg0 INTERACT mom10_9 
cmom10_mx_reg2 = cmom10_mx_reg1 NOT INTERACT RFDMYi 
cmom10_mx_reg_4t1 = cmom10_mx_reg1 INTERACT MOMDMY_2T 
cmom10_mx_reg_4t2 = cmom10_mx_reg_4t1 NOT INTERACT MOMDMY_NWi 
cmom10_mx_reg_4t3 = cmom10_mx_reg_4t2 NOT INTERACT MOMDMY_PWi 
cmom10_mx_reg_4t4 = cmom10_mx_reg_4t3 NOT INTERACT MOMDMY_NTNi 
cmom10_mx_reg_4t5 = cmom10_mx_reg_4t4 NOT INTERACT MOMDMY_ARY 
cmom10_mx_reg_4t6 = cmom10_mx_reg_4t5 NOT INTERACT MOMDMY_TSHD 
cmom10_mx_reg_4t = cmom10_mx_reg_4t6 NOT INTERACT RFMOMDMY_2T 
cmom10_mx_reg_4t_non = cmom10_mx_reg_4t INTERACT mom10p1 
cmom10_mx_reg3 = cmom10_mx_reg2 NOT INTERACT MOMDMY_2T 
cmom10_mx_reg_nw1 = cmom10_mx_reg3 INTERACT MOMDMY_NWi 
cmom10_mx_reg_nw2 = cmom10_mx_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom10_mx_reg_nw = cmom10_mx_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom10_mx_reg_nw_non = cmom10_mx_reg_nw INTERACT mom10p1 
cmom10_mx_reg_psub1 = cmom10_mx_reg3 NOT INTERACT MOMDMY_NWi 
cmom10_mx_reg_psub21 = cmom10_mx_reg_psub1 INTERACT MOMDMY_PWi 
cmom10_mx_reg_psub22 = cmom10_mx_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom10_mx_reg_psub31 = cmom10_mx_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom10_mx_reg_psub32 = cmom10_mx_reg_psub31 INTERACT MOMDMY_NTNi 
cmom10_mx_reg_psub = cmom10_mx_reg_psub22 OR cmom10_mx_reg_psub32 
cmom10_mx_reg_psub_non = cmom10_mx_reg_psub INTERACT mom10p1 
mom11_0 = MOMDMY11 NOT INTERACT MOM_field0 
mom11_1 = mom11_0 NOT INTERACT MOM_field1 
mom11_2 = mom11_1 NOT INTERACT MOM_field2 
mom11_3 = mom11_2 NOT INTERACT MOM_field3 
mom11_4 = mom11_3 NOT INTERACT MOM_field4 
mom11_5 = mom11_4 NOT INTERACT MOM_field5 
mom11_6 = mom11_5 NOT INTERACT MOM_field6 
mom11_7 = mom11_6 NOT INTERACT MOM_field7 
mom11_8 = mom11_7 NOT INTERACT MOM_field8 
mom11_9 = mom11_8 NOT INTERACT MOM_field9 
mom11_10 = mom11_9 NOT INTERACT MOM_field10 
cmom11_reg1 = mom11_10 INTERACT RTMOMDMY 
cmom11_reg2 = cmom11_reg1 NOT INTERACT MOMDMY_MX 
cmom11_reg3 = cmom11_reg2 NOT INTERACT MOMDMY_MXP1 
cmom11_reg4 = cmom11_reg3 NOT INTERACT MOMDMY_MXP2 
cmom11_reg4_1 = cmom11_reg4 NOT INTERACT MOMDMY_MXP12 
cmom11_reg4_2 = cmom11_reg4_1 NOT INTERACT MOMDMY_ARY 
cmom11_reg4_3 = cmom11_reg4_2 NOT INTERACT MOMDMY_TSHD 
cmom11_reg5 = cmom11_reg4_3 NOT INTERACT RFMOMDMY_2T 
cmom11_reg6 = cmom11_reg5 NOT INTERACT RFDMYi 
cmom11_reg = cmom11_reg6 NOT INTERACT MOMDMY_2T 
cmom11_reg_psub1 = cmom11_reg NOT INTERACT MOMDMY_NWi 
cmom11_reg_psub21 = cmom11_reg_psub1 INTERACT MOMDMY_PWi 
cmom11_reg_psub22 = cmom11_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom11_reg_psub31 = cmom11_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom11_reg_psub32 = cmom11_reg_psub31 INTERACT MOMDMY_NTNi 
cmom11_reg_psub4 = cmom11_reg_psub22 OR cmom11_reg_psub32 
cmom11_reg_psub_non = cmom11_reg_psub4 INTERACT M11 
cmom11_reg_psub = cmom11_reg_psub4 NOT cmom11_reg_psub_non 
cmom11_reg_nw1 = cmom11_reg INTERACT MOMDMY_NWi 
cmom11_reg_nw2 = cmom11_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom11_reg_nw3 = cmom11_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom11_reg_nw_non = cmom11_reg_nw3 INTERACT M11 
cmom11_reg_nw = cmom11_reg_nw3 NOT cmom11_reg_nw_non 
cmom11_reg_2t1 = cmom11_reg5 INTERACT MOMDMY_2T 
cmom11_reg_2t2 = cmom11_reg_2t1 NOT INTERACT MOMDMY_NWi 
cmom11_reg_2t3 = cmom11_reg_2t2 NOT INTERACT MOMDMY_PWi 
cmom11_reg_2t4 = cmom11_reg_2t3 NOT INTERACT MOMDMY_NTNi 
cmom11_reg_2t_non = cmom11_reg_2t4 INTERACT M11 
cmom11_reg_2t = cmom11_reg_2t4 NOT cmom11_reg_2t_non 
cmom11_rf_reg1 = cmom11_reg5 INTERACT RFDMYi 
cmom11_rf_reg = cmom11_rf_reg1 NOT INTERACT MOMDMY_2T 
cmom11_rf_reg_psub1 = cmom11_rf_reg NOT INTERACT MOMDMY_NWi 
cmom11_rf_reg_psub21 = cmom11_rf_reg_psub1 INTERACT MOMDMY_PWi 
cmom11_rf_reg_psub22 = cmom11_rf_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom11_rf_reg_psub31 = cmom11_rf_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom11_rf_reg_psub32 = cmom11_rf_reg_psub31 INTERACT MOMDMY_NTNi 
cmom11_rf_reg_psub4 = cmom11_rf_reg_psub22 OR cmom11_rf_reg_psub32 
cmom11_rf_reg_psub_non = cmom11_rf_reg_psub4 INTERACT M11 
cmom11_rf_reg_psub = cmom11_rf_reg_psub4 NOT cmom11_rf_reg_psub_non 
cmom11_rf_reg_nw1 = cmom11_rf_reg INTERACT MOMDMY_NWi 
cmom11_rf_reg_nw2 = cmom11_rf_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom11_rf_reg_nw3 = cmom11_rf_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom11_rf_reg_nw_non = cmom11_rf_reg_nw3 INTERACT M11 
cmom11_rf_reg_nw = cmom11_rf_reg_nw3 NOT cmom11_rf_reg_nw_non 
cmom11_mx_reg0 = MOMDMY_MX INTERACT RTMOMDMY 
cmom11_mx_reg1 = cmom11_mx_reg0 INTERACT mom11_10 
cmom11_mx_reg2 = cmom11_mx_reg1 NOT INTERACT RFDMYi 
cmom11_mx_reg_4t1 = cmom11_mx_reg1 INTERACT MOMDMY_2T 
cmom11_mx_reg_4t2 = cmom11_mx_reg_4t1 NOT INTERACT MOMDMY_NWi 
cmom11_mx_reg_4t3 = cmom11_mx_reg_4t2 NOT INTERACT MOMDMY_PWi 
cmom11_mx_reg_4t4 = cmom11_mx_reg_4t3 NOT INTERACT MOMDMY_NTNi 
cmom11_mx_reg_4t5 = cmom11_mx_reg_4t4 NOT INTERACT MOMDMY_ARY 
cmom11_mx_reg_4t6 = cmom11_mx_reg_4t5 NOT INTERACT MOMDMY_TSHD 
cmom11_mx_reg_4t = cmom11_mx_reg_4t6 NOT INTERACT RFMOMDMY_2T 
cmom11_mx_reg_4t_non = cmom11_mx_reg_4t INTERACT mom11p1 
cmom11_mx_reg3 = cmom11_mx_reg2 NOT INTERACT MOMDMY_2T 
cmom11_mx_reg_nw1 = cmom11_mx_reg3 INTERACT MOMDMY_NWi 
cmom11_mx_reg_nw2 = cmom11_mx_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom11_mx_reg_nw = cmom11_mx_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom11_mx_reg_nw_non = cmom11_mx_reg_nw INTERACT mom11p1 
cmom11_mx_reg_psub1 = cmom11_mx_reg3 NOT INTERACT MOMDMY_NWi 
cmom11_mx_reg_psub21 = cmom11_mx_reg_psub1 INTERACT MOMDMY_PWi 
cmom11_mx_reg_psub22 = cmom11_mx_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom11_mx_reg_psub31 = cmom11_mx_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom11_mx_reg_psub32 = cmom11_mx_reg_psub31 INTERACT MOMDMY_NTNi 
cmom11_mx_reg_psub = cmom11_mx_reg_psub22 OR cmom11_mx_reg_psub32 
cmom11_mx_reg_psub_non = cmom11_mx_reg_psub INTERACT mom11p1 
mom12_0 = MOMDMY12 NOT INTERACT MOM_field0 
mom12_1 = mom12_0 NOT INTERACT MOM_field1 
mom12_2 = mom12_1 NOT INTERACT MOM_field2 
mom12_3 = mom12_2 NOT INTERACT MOM_field3 
mom12_4 = mom12_3 NOT INTERACT MOM_field4 
mom12_5 = mom12_4 NOT INTERACT MOM_field5 
mom12_6 = mom12_5 NOT INTERACT MOM_field6 
mom12_7 = mom12_6 NOT INTERACT MOM_field7 
mom12_8 = mom12_7 NOT INTERACT MOM_field8 
mom12_9 = mom12_8 NOT INTERACT MOM_field9 
mom12_10 = mom12_9 NOT INTERACT MOM_field10 
mom12_11 = mom12_10 NOT INTERACT MOM_field11 
cmom12_reg1 = mom12_11 INTERACT RTMOMDMY 
cmom12_reg2 = cmom12_reg1 NOT INTERACT MOMDMY_MX 
cmom12_reg3 = cmom12_reg2 NOT INTERACT MOMDMY_MXP1 
cmom12_reg4 = cmom12_reg3 NOT INTERACT MOMDMY_MXP2 
cmom12_reg4_1 = cmom12_reg4 NOT INTERACT MOMDMY_MXP12 
cmom12_reg4_2 = cmom12_reg4_1 NOT INTERACT MOMDMY_ARY 
cmom12_reg4_3 = cmom12_reg4_2 NOT INTERACT MOMDMY_TSHD 
cmom12_reg5 = cmom12_reg4_3 NOT INTERACT RFMOMDMY_2T 
cmom12_reg6 = cmom12_reg5 NOT INTERACT RFDMYi 
cmom12_reg = cmom12_reg6 NOT INTERACT MOMDMY_2T 
cmom12_reg_psub1 = cmom12_reg NOT INTERACT MOMDMY_NWi 
cmom12_reg_psub21 = cmom12_reg_psub1 INTERACT MOMDMY_PWi 
cmom12_reg_psub22 = cmom12_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom12_reg_psub31 = cmom12_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom12_reg_psub32 = cmom12_reg_psub31 INTERACT MOMDMY_NTNi 
cmom12_reg_psub4 = cmom12_reg_psub22 OR cmom12_reg_psub32 
cmom12_reg_psub_non = cmom12_reg_psub4 INTERACT M12 
cmom12_reg_psub = cmom12_reg_psub4 NOT cmom12_reg_psub_non 
cmom12_reg_nw1 = cmom12_reg INTERACT MOMDMY_NWi 
cmom12_reg_nw2 = cmom12_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom12_reg_nw3 = cmom12_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom12_reg_nw_non = cmom12_reg_nw3 INTERACT M12 
cmom12_reg_nw = cmom12_reg_nw3 NOT cmom12_reg_nw_non 
cmom12_reg_2t1 = cmom12_reg5 INTERACT MOMDMY_2T 
cmom12_reg_2t2 = cmom12_reg_2t1 NOT INTERACT MOMDMY_NWi 
cmom12_reg_2t3 = cmom12_reg_2t2 NOT INTERACT MOMDMY_PWi 
cmom12_reg_2t4 = cmom12_reg_2t3 NOT INTERACT MOMDMY_NTNi 
cmom12_reg_2t_non = cmom12_reg_2t4 INTERACT M12 
cmom12_reg_2t = cmom12_reg_2t4 NOT cmom12_reg_2t_non 
cmom12_rf_reg1 = cmom12_reg5 INTERACT RFDMYi 
cmom12_rf_reg = cmom12_rf_reg1 NOT INTERACT MOMDMY_2T 
cmom12_rf_reg_psub1 = cmom12_rf_reg NOT INTERACT MOMDMY_NWi 
cmom12_rf_reg_psub21 = cmom12_rf_reg_psub1 INTERACT MOMDMY_PWi 
cmom12_rf_reg_psub22 = cmom12_rf_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom12_rf_reg_psub31 = cmom12_rf_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom12_rf_reg_psub32 = cmom12_rf_reg_psub31 INTERACT MOMDMY_NTNi 
cmom12_rf_reg_psub4 = cmom12_rf_reg_psub22 OR cmom12_rf_reg_psub32 
cmom12_rf_reg_psub_non = cmom12_rf_reg_psub4 INTERACT M12 
cmom12_rf_reg_psub = cmom12_rf_reg_psub4 NOT cmom12_rf_reg_psub_non 
cmom12_rf_reg_nw1 = cmom12_rf_reg INTERACT MOMDMY_NWi 
cmom12_rf_reg_nw2 = cmom12_rf_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom12_rf_reg_nw3 = cmom12_rf_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom12_rf_reg_nw_non = cmom12_rf_reg_nw3 INTERACT M12 
cmom12_rf_reg_nw = cmom12_rf_reg_nw3 NOT cmom12_rf_reg_nw_non 
cmom12_mx_reg0 = MOMDMY_MX INTERACT RTMOMDMY 
cmom12_mx_reg1 = cmom12_mx_reg0 INTERACT mom12_11 
cmom12_mx_reg2 = cmom12_mx_reg1 NOT INTERACT RFDMYi 
cmom12_mx_reg_4t1 = cmom12_mx_reg1 INTERACT MOMDMY_2T 
cmom12_mx_reg_4t2 = cmom12_mx_reg_4t1 NOT INTERACT MOMDMY_NWi 
cmom12_mx_reg_4t3 = cmom12_mx_reg_4t2 NOT INTERACT MOMDMY_PWi 
cmom12_mx_reg_4t4 = cmom12_mx_reg_4t3 NOT INTERACT MOMDMY_NTNi 
cmom12_mx_reg_4t5 = cmom12_mx_reg_4t4 NOT INTERACT MOMDMY_ARY 
cmom12_mx_reg_4t6 = cmom12_mx_reg_4t5 NOT INTERACT MOMDMY_TSHD 
cmom12_mx_reg_4t = cmom12_mx_reg_4t6 NOT INTERACT RFMOMDMY_2T 
cmom12_mx_reg_4t_non = cmom12_mx_reg_4t INTERACT mom12p1 
cmom12_mx_reg3 = cmom12_mx_reg2 NOT INTERACT MOMDMY_2T 
cmom12_mx_reg_nw1 = cmom12_mx_reg3 INTERACT MOMDMY_NWi 
cmom12_mx_reg_nw2 = cmom12_mx_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom12_mx_reg_nw = cmom12_mx_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom12_mx_reg_nw_non = cmom12_mx_reg_nw INTERACT mom12p1 
cmom12_mx_reg_psub1 = cmom12_mx_reg3 NOT INTERACT MOMDMY_NWi 
cmom12_mx_reg_psub21 = cmom12_mx_reg_psub1 INTERACT MOMDMY_PWi 
cmom12_mx_reg_psub22 = cmom12_mx_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom12_mx_reg_psub31 = cmom12_mx_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom12_mx_reg_psub32 = cmom12_mx_reg_psub31 INTERACT MOMDMY_NTNi 
cmom12_mx_reg_psub = cmom12_mx_reg_psub22 OR cmom12_mx_reg_psub32 
cmom12_mx_reg_psub_non = cmom12_mx_reg_psub INTERACT mom12p1 
mom13_0 = MOMDMY13 NOT INTERACT MOM_field0 
mom13_1 = mom13_0 NOT INTERACT MOM_field1 
mom13_2 = mom13_1 NOT INTERACT MOM_field2 
mom13_3 = mom13_2 NOT INTERACT MOM_field3 
mom13_4 = mom13_3 NOT INTERACT MOM_field4 
mom13_5 = mom13_4 NOT INTERACT MOM_field5 
mom13_6 = mom13_5 NOT INTERACT MOM_field6 
mom13_7 = mom13_6 NOT INTERACT MOM_field7 
mom13_8 = mom13_7 NOT INTERACT MOM_field8 
mom13_9 = mom13_8 NOT INTERACT MOM_field9 
mom13_10 = mom13_9 NOT INTERACT MOM_field10 
mom13_11 = mom13_10 NOT INTERACT MOM_field11 
mom13_12 = mom13_11 NOT INTERACT MOM_field12 
cmom13_reg1 = mom13_12 INTERACT RTMOMDMY 
cmom13_reg2 = cmom13_reg1 NOT INTERACT MOMDMY_MX 
cmom13_reg3 = cmom13_reg2 NOT INTERACT MOMDMY_MXP1 
cmom13_reg4 = cmom13_reg3 NOT INTERACT MOMDMY_MXP2 
cmom13_reg4_1 = cmom13_reg4 NOT INTERACT MOMDMY_MXP12 
cmom13_reg4_2 = cmom13_reg4_1 NOT INTERACT MOMDMY_ARY 
cmom13_reg4_3 = cmom13_reg4_2 NOT INTERACT MOMDMY_TSHD 
cmom13_reg5 = cmom13_reg4_3 NOT INTERACT RFMOMDMY_2T 
cmom13_reg6 = cmom13_reg5 NOT INTERACT RFDMYi 
cmom13_reg = cmom13_reg6 NOT INTERACT MOMDMY_2T 
cmom13_reg_psub1 = cmom13_reg NOT INTERACT MOMDMY_NWi 
cmom13_reg_psub21 = cmom13_reg_psub1 INTERACT MOMDMY_PWi 
cmom13_reg_psub22 = cmom13_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom13_reg_psub31 = cmom13_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom13_reg_psub32 = cmom13_reg_psub31 INTERACT MOMDMY_NTNi 
cmom13_reg_psub4 = cmom13_reg_psub22 OR cmom13_reg_psub32 
cmom13_reg_psub_non = cmom13_reg_psub4 INTERACT M13 
cmom13_reg_psub = cmom13_reg_psub4 NOT cmom13_reg_psub_non 
cmom13_reg_nw1 = cmom13_reg INTERACT MOMDMY_NWi 
cmom13_reg_nw2 = cmom13_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom13_reg_nw3 = cmom13_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom13_reg_nw_non = cmom13_reg_nw3 INTERACT M13 
cmom13_reg_nw = cmom13_reg_nw3 NOT cmom13_reg_nw_non 
cmom13_reg_2t1 = cmom13_reg5 INTERACT MOMDMY_2T 
cmom13_reg_2t2 = cmom13_reg_2t1 NOT INTERACT MOMDMY_NWi 
cmom13_reg_2t3 = cmom13_reg_2t2 NOT INTERACT MOMDMY_PWi 
cmom13_reg_2t4 = cmom13_reg_2t3 NOT INTERACT MOMDMY_NTNi 
cmom13_reg_2t_non = cmom13_reg_2t4 INTERACT M13 
cmom13_reg_2t = cmom13_reg_2t4 NOT cmom13_reg_2t_non 
cmom13_rf_reg1 = cmom13_reg5 INTERACT RFDMYi 
cmom13_rf_reg = cmom13_rf_reg1 NOT INTERACT MOMDMY_2T 
cmom13_rf_reg_psub1 = cmom13_rf_reg NOT INTERACT MOMDMY_NWi 
cmom13_rf_reg_psub21 = cmom13_rf_reg_psub1 INTERACT MOMDMY_PWi 
cmom13_rf_reg_psub22 = cmom13_rf_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom13_rf_reg_psub31 = cmom13_rf_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom13_rf_reg_psub32 = cmom13_rf_reg_psub31 INTERACT MOMDMY_NTNi 
cmom13_rf_reg_psub4 = cmom13_rf_reg_psub22 OR cmom13_rf_reg_psub32 
cmom13_rf_reg_psub_non = cmom13_rf_reg_psub4 INTERACT M13 
cmom13_rf_reg_psub = cmom13_rf_reg_psub4 NOT cmom13_rf_reg_psub_non 
cmom13_rf_reg_nw1 = cmom13_rf_reg INTERACT MOMDMY_NWi 
cmom13_rf_reg_nw2 = cmom13_rf_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom13_rf_reg_nw3 = cmom13_rf_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom13_rf_reg_nw_non = cmom13_rf_reg_nw3 INTERACT M13 
cmom13_rf_reg_nw = cmom13_rf_reg_nw3 NOT cmom13_rf_reg_nw_non 
cmom13_mx_reg0 = MOMDMY_MX INTERACT RTMOMDMY 
cmom13_mx_reg1 = cmom13_mx_reg0 INTERACT mom13_12 
cmom13_mx_reg2 = cmom13_mx_reg1 NOT INTERACT RFDMYi 
cmom13_mx_reg_4t1 = cmom13_mx_reg1 INTERACT MOMDMY_2T 
cmom13_mx_reg_4t2 = cmom13_mx_reg_4t1 NOT INTERACT MOMDMY_NWi 
cmom13_mx_reg_4t3 = cmom13_mx_reg_4t2 NOT INTERACT MOMDMY_PWi 
cmom13_mx_reg_4t4 = cmom13_mx_reg_4t3 NOT INTERACT MOMDMY_NTNi 
cmom13_mx_reg_4t5 = cmom13_mx_reg_4t4 NOT INTERACT MOMDMY_ARY 
cmom13_mx_reg_4t6 = cmom13_mx_reg_4t5 NOT INTERACT MOMDMY_TSHD 
cmom13_mx_reg_4t = cmom13_mx_reg_4t6 NOT INTERACT RFMOMDMY_2T 
cmom13_mx_reg_4t_non = cmom13_mx_reg_4t INTERACT mom13p1 
cmom13_mx_reg3 = cmom13_mx_reg2 NOT INTERACT MOMDMY_2T 
cmom13_mx_reg_nw1 = cmom13_mx_reg3 INTERACT MOMDMY_NWi 
cmom13_mx_reg_nw2 = cmom13_mx_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom13_mx_reg_nw = cmom13_mx_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom13_mx_reg_nw_non = cmom13_mx_reg_nw INTERACT mom13p1 
cmom13_mx_reg_psub1 = cmom13_mx_reg3 NOT INTERACT MOMDMY_NWi 
cmom13_mx_reg_psub21 = cmom13_mx_reg_psub1 INTERACT MOMDMY_PWi 
cmom13_mx_reg_psub22 = cmom13_mx_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom13_mx_reg_psub31 = cmom13_mx_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom13_mx_reg_psub32 = cmom13_mx_reg_psub31 INTERACT MOMDMY_NTNi 
cmom13_mx_reg_psub = cmom13_mx_reg_psub22 OR cmom13_mx_reg_psub32 
cmom13_mx_reg_psub_non = cmom13_mx_reg_psub INTERACT mom13p1 
mom14_0 = MOMDMY14 NOT INTERACT MOM_field0 
mom14_1 = mom14_0 NOT INTERACT MOM_field1 
mom14_2 = mom14_1 NOT INTERACT MOM_field2 
mom14_3 = mom14_2 NOT INTERACT MOM_field3 
mom14_4 = mom14_3 NOT INTERACT MOM_field4 
mom14_5 = mom14_4 NOT INTERACT MOM_field5 
mom14_6 = mom14_5 NOT INTERACT MOM_field6 
mom14_7 = mom14_6 NOT INTERACT MOM_field7 
mom14_8 = mom14_7 NOT INTERACT MOM_field8 
mom14_9 = mom14_8 NOT INTERACT MOM_field9 
mom14_10 = mom14_9 NOT INTERACT MOM_field10 
mom14_11 = mom14_10 NOT INTERACT MOM_field11 
mom14_12 = mom14_11 NOT INTERACT MOM_field12 
mom14_13 = mom14_12 NOT INTERACT MOM_field13 
cmom14_reg1 = mom14_13 INTERACT RTMOMDMY 
cmom14_reg2 = cmom14_reg1 NOT INTERACT MOMDMY_MX 
cmom14_reg3 = cmom14_reg2 NOT INTERACT MOMDMY_MXP1 
cmom14_reg4 = cmom14_reg3 NOT INTERACT MOMDMY_MXP2 
cmom14_reg4_1 = cmom14_reg4 NOT INTERACT MOMDMY_MXP12 
cmom14_reg4_2 = cmom14_reg4_1 NOT INTERACT MOMDMY_ARY 
cmom14_reg4_3 = cmom14_reg4_2 NOT INTERACT MOMDMY_TSHD 
cmom14_reg5 = cmom14_reg4_3 NOT INTERACT RFMOMDMY_2T 
cmom14_reg6 = cmom14_reg5 NOT INTERACT RFDMYi 
cmom14_reg = cmom14_reg6 NOT INTERACT MOMDMY_2T 
cmom14_reg_psub1 = cmom14_reg NOT INTERACT MOMDMY_NWi 
cmom14_reg_psub21 = cmom14_reg_psub1 INTERACT MOMDMY_PWi 
cmom14_reg_psub22 = cmom14_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom14_reg_psub31 = cmom14_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom14_reg_psub32 = cmom14_reg_psub31 INTERACT MOMDMY_NTNi 
cmom14_reg_psub4 = cmom14_reg_psub22 OR cmom14_reg_psub32 
cmom14_reg_psub_non = cmom14_reg_psub4 INTERACT M14 
cmom14_reg_psub = cmom14_reg_psub4 NOT cmom14_reg_psub_non 
cmom14_reg_nw1 = cmom14_reg INTERACT MOMDMY_NWi 
cmom14_reg_nw2 = cmom14_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom14_reg_nw3 = cmom14_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom14_reg_nw_non = cmom14_reg_nw3 INTERACT M14 
cmom14_reg_nw = cmom14_reg_nw3 NOT cmom14_reg_nw_non 
cmom14_reg_2t1 = cmom14_reg5 INTERACT MOMDMY_2T 
cmom14_reg_2t2 = cmom14_reg_2t1 NOT INTERACT MOMDMY_NWi 
cmom14_reg_2t3 = cmom14_reg_2t2 NOT INTERACT MOMDMY_PWi 
cmom14_reg_2t4 = cmom14_reg_2t3 NOT INTERACT MOMDMY_NTNi 
cmom14_reg_2t_non = cmom14_reg_2t4 INTERACT M14 
cmom14_reg_2t = cmom14_reg_2t4 NOT cmom14_reg_2t_non 
cmom14_rf_reg1 = cmom14_reg5 INTERACT RFDMYi 
cmom14_rf_reg = cmom14_rf_reg1 NOT INTERACT MOMDMY_2T 
cmom14_rf_reg_psub1 = cmom14_rf_reg NOT INTERACT MOMDMY_NWi 
cmom14_rf_reg_psub21 = cmom14_rf_reg_psub1 INTERACT MOMDMY_PWi 
cmom14_rf_reg_psub22 = cmom14_rf_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom14_rf_reg_psub31 = cmom14_rf_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom14_rf_reg_psub32 = cmom14_rf_reg_psub31 INTERACT MOMDMY_NTNi 
cmom14_rf_reg_psub4 = cmom14_rf_reg_psub22 OR cmom14_rf_reg_psub32 
cmom14_rf_reg_psub_non = cmom14_rf_reg_psub4 INTERACT M14 
cmom14_rf_reg_psub = cmom14_rf_reg_psub4 NOT cmom14_rf_reg_psub_non 
cmom14_rf_reg_nw1 = cmom14_rf_reg INTERACT MOMDMY_NWi 
cmom14_rf_reg_nw2 = cmom14_rf_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom14_rf_reg_nw3 = cmom14_rf_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom14_rf_reg_nw_non = cmom14_rf_reg_nw3 INTERACT M14 
cmom14_rf_reg_nw = cmom14_rf_reg_nw3 NOT cmom14_rf_reg_nw_non 
cmom14_mx_reg0 = MOMDMY_MX INTERACT RTMOMDMY 
cmom14_mx_reg1 = cmom14_mx_reg0 INTERACT mom14_13 
cmom14_mx_reg2 = cmom14_mx_reg1 NOT INTERACT RFDMYi 
cmom14_mx_reg_4t1 = cmom14_mx_reg1 INTERACT MOMDMY_2T 
cmom14_mx_reg_4t2 = cmom14_mx_reg_4t1 NOT INTERACT MOMDMY_NWi 
cmom14_mx_reg_4t3 = cmom14_mx_reg_4t2 NOT INTERACT MOMDMY_PWi 
cmom14_mx_reg_4t4 = cmom14_mx_reg_4t3 NOT INTERACT MOMDMY_NTNi 
cmom14_mx_reg_4t5 = cmom14_mx_reg_4t4 NOT INTERACT MOMDMY_ARY 
cmom14_mx_reg_4t6 = cmom14_mx_reg_4t5 NOT INTERACT MOMDMY_TSHD 
cmom14_mx_reg_4t = cmom14_mx_reg_4t6 NOT INTERACT RFMOMDMY_2T 
cmom14_mx_reg_4t_non = cmom14_mx_reg_4t INTERACT mom14p1 
cmom14_mx_reg3 = cmom14_mx_reg2 NOT INTERACT MOMDMY_2T 
cmom14_mx_reg_nw1 = cmom14_mx_reg3 INTERACT MOMDMY_NWi 
cmom14_mx_reg_nw2 = cmom14_mx_reg_nw1 NOT INTERACT MOMDMY_PWi 
cmom14_mx_reg_nw = cmom14_mx_reg_nw2 NOT INTERACT MOMDMY_NTNi 
cmom14_mx_reg_nw_non = cmom14_mx_reg_nw INTERACT mom14p1 
cmom14_mx_reg_psub1 = cmom14_mx_reg3 NOT INTERACT MOMDMY_NWi 
cmom14_mx_reg_psub21 = cmom14_mx_reg_psub1 INTERACT MOMDMY_PWi 
cmom14_mx_reg_psub22 = cmom14_mx_reg_psub21 NOT INTERACT MOMDMY_NTNi 
cmom14_mx_reg_psub31 = cmom14_mx_reg_psub1 NOT INTERACT MOMDMY_PWi 
cmom14_mx_reg_psub32 = cmom14_mx_reg_psub31 INTERACT MOMDMY_NTNi 
cmom14_mx_reg_psub = cmom14_mx_reg_psub22 OR cmom14_mx_reg_psub32 
cmom14_mx_reg_psub_non = cmom14_mx_reg_psub INTERACT mom14p1 
mom2 = MOMDMY2 NOT INTERACT MOM_field3 
cmom2_ary_reg0 = MOMDMY_ARY INTERACT RTMOMDMY 
cmom2_ary_reg1 = cmom2_ary_reg0 NOT INTERACT MOMDMY_MX 
cmom2_ary_reg2 = cmom2_ary_reg1 NOT INTERACT MOMDMY_2T 
cmom2_ary_reg3 = cmom2_ary_reg2 NOT INTERACT MOMDMY_PWi 
cmom2_ary_reg4 = cmom2_ary_reg3 NOT INTERACT MOMDMY_NTNi 
cmom2_ary_reg5 = cmom2_ary_reg4 NOT INTERACT RFMOMDMY_2T 
cmom2_ary_reg6 = cmom2_ary_reg5 NOT INTERACT MOMDMY_NWi 
cmom2_ary_reg_nw1 = cmom2_ary_reg5 INTERACT MOMDMY_NWi 
cmom2_ary_reg_nw2 = cmom2_ary_reg_nw1 NOT INTERACT MOMDMY_TSHD 
cmom2_ary_reg_nw = cmom2_ary_reg_nw2 NOT INTERACT RFDMYi 
cmom2_ary_reg_nw_a = cmom2_ary_reg_nw INTERACT mom2_ary_plus_a 
cmom2_ary_reg_nw_non = cmom2_ary_reg_nw INTERACT mom2_ary_plus 
cmom2_ary_reg_sm = cmom2_ary_reg6 INTERACT MOMDMY_TSHD 
cmom2_ary_reg_sm_a = cmom2_ary_reg_sm INTERACT mom2_ary_plus_a 
cmom2_ary_reg_sm_a_non = cmom2_ary_reg_sm_a INTERACT M3 
cmom2_ary_reg_sm_non = cmom2_ary_reg_sm INTERACT mom2_ary_plus 
cmom2_ary_reg_sm_non_non = cmom2_ary_reg_sm_non INTERACT M3 
cmom2_ary_reg_sm_4t1 = cmom2_ary_reg_nw1 INTERACT MOMDMY_TSHD 
cmom2_ary_reg_sm_4t = cmom2_ary_reg_sm_4t1 NOT INTERACT RFDMYi 
cmom2_ary_reg_sm_4t_a = cmom2_ary_reg_sm_4t INTERACT mom2_ary_plus_a 
cmom2_ary_reg_sm_4t_a_non = cmom2_ary_reg_sm_4t_a INTERACT M3 
cmom2_ary_reg_sm_4t_non = cmom2_ary_reg_sm_4t INTERACT mom2_ary_plus 
cmom2_ary_reg_sm_4t_non_non = cmom2_ary_reg_sm_4t_non INTERACT M3 
cmom2_reg_sm_rf1 = mom2 NOT INTERACT MOMDMY_ARY 
cmom2_reg_sm_rf2 = cmom2_reg_sm_rf1 INTERACT RTMOMDMY 
cmom2_reg_sm_rf3 = cmom2_reg_sm_rf2 NOT INTERACT MOMDMY_MX 
cmom2_reg_sm_rf4 = cmom2_reg_sm_rf3 NOT INTERACT MOMDMY_2T 
cmom2_reg_sm_rf5 = cmom2_reg_sm_rf4 NOT INTERACT MOMDMY_PWi 
cmom2_reg_sm_rf6 = cmom2_reg_sm_rf5 NOT INTERACT MOMDMY_NTNi 
cmom2_reg_sm_rf7 = cmom2_reg_sm_rf6 NOT INTERACT MOMDMY_NWi 
cmom2_reg_sm_rf = cmom2_reg_sm_rf7 INTERACT RFMOMDMY_2T 
cmom2_reg_sm_rf_a = cmom2_reg_sm_rf INTERACT mom2_ary_plus_a 
cmom2_reg_sm_rf_a_non = cmom2_reg_sm_rf_a INTERACT M3 
cmom2_reg_sm_rf_non = cmom2_reg_sm_rf INTERACT mom2_ary_plus 
cmom2_reg_sm_rf_non_non = cmom2_reg_sm_rf_non INTERACT M3 
cmom2_reg_sm_4t_rf1 = cmom2_reg_sm_rf6 INTERACT MOMDMY_NWi 
cmom2_reg_sm_4t_rf2 = cmom2_reg_sm_4t_rf1 NOT INTERACT RFMOMDMY_2T 
cmom2_reg_sm_4t_rf = cmom2_reg_sm_4t_rf2 INTERACT RFDMYi 
cmom2_reg_sm_4t_rf_a = cmom2_reg_sm_4t_rf INTERACT mom2_ary_plus_a 
cmom2_reg_sm_4t_rf_a_non = cmom2_reg_sm_4t_rf_a INTERACT M3 
cmom2_reg_sm_4t_rf_non = cmom2_reg_sm_4t_rf INTERACT mom2_ary_plus 
cmom2_reg_sm_4t_rf_non_non = cmom2_reg_sm_4t_rf_non INTERACT M3 
mom3 = MOMDMY3 NOT INTERACT MOM_field4 
cmom3_ary_reg0 = MOMDMY_ARY INTERACT RTMOMDMY 
cmom3_ary_reg1 = cmom3_ary_reg0 NOT INTERACT MOMDMY_MX 
cmom3_ary_reg2 = cmom3_ary_reg1 NOT INTERACT MOMDMY_2T 
cmom3_ary_reg3 = cmom3_ary_reg2 NOT INTERACT MOMDMY_PWi 
cmom3_ary_reg4 = cmom3_ary_reg3 NOT INTERACT MOMDMY_NTNi 
cmom3_ary_reg5 = cmom3_ary_reg4 NOT INTERACT RFMOMDMY_2T 
cmom3_ary_reg6 = cmom3_ary_reg5 NOT INTERACT MOMDMY_NWi 
cmom3_ary_reg_nw1 = cmom3_ary_reg5 INTERACT MOMDMY_NWi 
cmom3_ary_reg_nw2 = cmom3_ary_reg_nw1 NOT INTERACT MOMDMY_TSHD 
cmom3_ary_reg_nw = cmom3_ary_reg_nw2 NOT INTERACT RFDMYi 
cmom3_ary_reg_nw_a = cmom3_ary_reg_nw INTERACT mom3_ary_plus_a 
cmom3_ary_reg_nw_non = cmom3_ary_reg_nw INTERACT mom3_ary_plus 
cmom3_ary_reg_sm = cmom3_ary_reg6 INTERACT MOMDMY_TSHD 
cmom3_ary_reg_sm_a = cmom3_ary_reg_sm INTERACT mom3_ary_plus_a 
cmom3_ary_reg_sm_a_non = cmom3_ary_reg_sm_a INTERACT M4 
cmom3_ary_reg_sm_non = cmom3_ary_reg_sm INTERACT mom3_ary_plus 
cmom3_ary_reg_sm_non_non = cmom3_ary_reg_sm_non INTERACT M4 
cmom3_ary_reg_sm_4t1 = cmom3_ary_reg_nw1 INTERACT MOMDMY_TSHD 
cmom3_ary_reg_sm_4t = cmom3_ary_reg_sm_4t1 NOT INTERACT RFDMYi 
cmom3_ary_reg_sm_4t_a = cmom3_ary_reg_sm_4t INTERACT mom3_ary_plus_a 
cmom3_ary_reg_sm_4t_a_non = cmom3_ary_reg_sm_4t_a INTERACT M4 
cmom3_ary_reg_sm_4t_non = cmom3_ary_reg_sm_4t INTERACT mom3_ary_plus 
cmom3_ary_reg_sm_4t_non_non = cmom3_ary_reg_sm_4t_non INTERACT M4 
cmom3_reg_sm_rf1 = mom3 NOT INTERACT MOMDMY_ARY 
cmom3_reg_sm_rf2 = cmom3_reg_sm_rf1 INTERACT RTMOMDMY 
cmom3_reg_sm_rf3 = cmom3_reg_sm_rf2 NOT INTERACT MOMDMY_MX 
cmom3_reg_sm_rf4 = cmom3_reg_sm_rf3 NOT INTERACT MOMDMY_2T 
cmom3_reg_sm_rf5 = cmom3_reg_sm_rf4 NOT INTERACT MOMDMY_PWi 
cmom3_reg_sm_rf6 = cmom3_reg_sm_rf5 NOT INTERACT MOMDMY_NTNi 
cmom3_reg_sm_rf7 = cmom3_reg_sm_rf6 NOT INTERACT MOMDMY_NWi 
cmom3_reg_sm_rf = cmom3_reg_sm_rf7 INTERACT RFMOMDMY_2T 
cmom3_reg_sm_rf_a = cmom3_reg_sm_rf INTERACT mom3_ary_plus_a 
cmom3_reg_sm_rf_a_non = cmom3_reg_sm_rf_a INTERACT M4 
cmom3_reg_sm_rf_non = cmom3_reg_sm_rf INTERACT mom3_ary_plus 
cmom3_reg_sm_rf_non_non = cmom3_reg_sm_rf_non INTERACT M4 
cmom3_reg_sm_4t_rf1 = cmom3_reg_sm_rf6 INTERACT MOMDMY_NWi 
cmom3_reg_sm_4t_rf2 = cmom3_reg_sm_4t_rf1 NOT INTERACT RFMOMDMY_2T 
cmom3_reg_sm_4t_rf = cmom3_reg_sm_4t_rf2 INTERACT RFDMYi 
cmom3_reg_sm_4t_rf_a = cmom3_reg_sm_4t_rf INTERACT mom3_ary_plus_a 
cmom3_reg_sm_4t_rf_a_non = cmom3_reg_sm_4t_rf_a INTERACT M4 
cmom3_reg_sm_4t_rf_non = cmom3_reg_sm_4t_rf INTERACT mom3_ary_plus 
cmom3_reg_sm_4t_rf_non_non = cmom3_reg_sm_4t_rf_non INTERACT M4 
mom4 = MOMDMY4 NOT INTERACT MOM_field5 
cmom4_ary_reg0 = MOMDMY_ARY INTERACT RTMOMDMY 
cmom4_ary_reg1 = cmom4_ary_reg0 NOT INTERACT MOMDMY_MX 
cmom4_ary_reg2 = cmom4_ary_reg1 NOT INTERACT MOMDMY_2T 
cmom4_ary_reg3 = cmom4_ary_reg2 NOT INTERACT MOMDMY_PWi 
cmom4_ary_reg4 = cmom4_ary_reg3 NOT INTERACT MOMDMY_NTNi 
cmom4_ary_reg5 = cmom4_ary_reg4 NOT INTERACT RFMOMDMY_2T 
cmom4_ary_reg6 = cmom4_ary_reg5 NOT INTERACT MOMDMY_NWi 
cmom4_ary_reg_nw1 = cmom4_ary_reg5 INTERACT MOMDMY_NWi 
cmom4_ary_reg_nw2 = cmom4_ary_reg_nw1 NOT INTERACT MOMDMY_TSHD 
cmom4_ary_reg_nw = cmom4_ary_reg_nw2 NOT INTERACT RFDMYi 
cmom4_ary_reg_nw_a = cmom4_ary_reg_nw INTERACT mom4_ary_plus_a 
cmom4_ary_reg_nw_non = cmom4_ary_reg_nw INTERACT mom4_ary_plus 
cmom4_ary_reg_sm = cmom4_ary_reg6 INTERACT MOMDMY_TSHD 
cmom4_ary_reg_sm_a = cmom4_ary_reg_sm INTERACT mom4_ary_plus_a 
cmom4_ary_reg_sm_a_non = cmom4_ary_reg_sm_a INTERACT M5 
cmom4_ary_reg_sm_non = cmom4_ary_reg_sm INTERACT mom4_ary_plus 
cmom4_ary_reg_sm_non_non = cmom4_ary_reg_sm_non INTERACT M5 
cmom4_ary_reg_sm_4t1 = cmom4_ary_reg_nw1 INTERACT MOMDMY_TSHD 
cmom4_ary_reg_sm_4t = cmom4_ary_reg_sm_4t1 NOT INTERACT RFDMYi 
cmom4_ary_reg_sm_4t_a = cmom4_ary_reg_sm_4t INTERACT mom4_ary_plus_a 
cmom4_ary_reg_sm_4t_a_non = cmom4_ary_reg_sm_4t_a INTERACT M5 
cmom4_ary_reg_sm_4t_non = cmom4_ary_reg_sm_4t INTERACT mom4_ary_plus 
cmom4_ary_reg_sm_4t_non_non = cmom4_ary_reg_sm_4t_non INTERACT M5 
cmom4_reg_sm_rf1 = mom4 NOT INTERACT MOMDMY_ARY 
cmom4_reg_sm_rf2 = cmom4_reg_sm_rf1 INTERACT RTMOMDMY 
cmom4_reg_sm_rf3 = cmom4_reg_sm_rf2 NOT INTERACT MOMDMY_MX 
cmom4_reg_sm_rf4 = cmom4_reg_sm_rf3 NOT INTERACT MOMDMY_2T 
cmom4_reg_sm_rf5 = cmom4_reg_sm_rf4 NOT INTERACT MOMDMY_PWi 
cmom4_reg_sm_rf6 = cmom4_reg_sm_rf5 NOT INTERACT MOMDMY_NTNi 
cmom4_reg_sm_rf7 = cmom4_reg_sm_rf6 NOT INTERACT MOMDMY_NWi 
cmom4_reg_sm_rf = cmom4_reg_sm_rf7 INTERACT RFMOMDMY_2T 
cmom4_reg_sm_rf_a = cmom4_reg_sm_rf INTERACT mom4_ary_plus_a 
cmom4_reg_sm_rf_a_non = cmom4_reg_sm_rf_a INTERACT M5 
cmom4_reg_sm_rf_non = cmom4_reg_sm_rf INTERACT mom4_ary_plus 
cmom4_reg_sm_rf_non_non = cmom4_reg_sm_rf_non INTERACT M5 
cmom4_reg_sm_4t_rf1 = cmom4_reg_sm_rf6 INTERACT MOMDMY_NWi 
cmom4_reg_sm_4t_rf2 = cmom4_reg_sm_4t_rf1 NOT INTERACT RFMOMDMY_2T 
cmom4_reg_sm_4t_rf = cmom4_reg_sm_4t_rf2 INTERACT RFDMYi 
cmom4_reg_sm_4t_rf_a = cmom4_reg_sm_4t_rf INTERACT mom4_ary_plus_a 
cmom4_reg_sm_4t_rf_a_non = cmom4_reg_sm_4t_rf_a INTERACT M5 
cmom4_reg_sm_4t_rf_non = cmom4_reg_sm_4t_rf INTERACT mom4_ary_plus 
cmom4_reg_sm_4t_rf_non_non = cmom4_reg_sm_4t_rf_non INTERACT M5 
mom5 = MOMDMY5 NOT INTERACT MOM_field6 
cmom5_ary_reg0 = MOMDMY_ARY INTERACT RTMOMDMY 
cmom5_ary_reg1 = cmom5_ary_reg0 NOT INTERACT MOMDMY_MX 
cmom5_ary_reg2 = cmom5_ary_reg1 NOT INTERACT MOMDMY_2T 
cmom5_ary_reg3 = cmom5_ary_reg2 NOT INTERACT MOMDMY_PWi 
cmom5_ary_reg4 = cmom5_ary_reg3 NOT INTERACT MOMDMY_NTNi 
cmom5_ary_reg5 = cmom5_ary_reg4 NOT INTERACT RFMOMDMY_2T 
cmom5_ary_reg6 = cmom5_ary_reg5 NOT INTERACT MOMDMY_NWi 
cmom5_ary_reg_nw1 = cmom5_ary_reg5 INTERACT MOMDMY_NWi 
cmom5_ary_reg_nw2 = cmom5_ary_reg_nw1 NOT INTERACT MOMDMY_TSHD 
cmom5_ary_reg_nw = cmom5_ary_reg_nw2 NOT INTERACT RFDMYi 
cmom5_ary_reg_nw_a = cmom5_ary_reg_nw INTERACT mom5_ary_plus_a 
cmom5_ary_reg_nw_non = cmom5_ary_reg_nw INTERACT mom5_ary_plus 
cmom5_ary_reg_sm = cmom5_ary_reg6 INTERACT MOMDMY_TSHD 
cmom5_ary_reg_sm_a = cmom5_ary_reg_sm INTERACT mom5_ary_plus_a 
cmom5_ary_reg_sm_a_non = cmom5_ary_reg_sm_a INTERACT M6 
cmom5_ary_reg_sm_non = cmom5_ary_reg_sm INTERACT mom5_ary_plus 
cmom5_ary_reg_sm_non_non = cmom5_ary_reg_sm_non INTERACT M6 
cmom5_ary_reg_sm_4t1 = cmom5_ary_reg_nw1 INTERACT MOMDMY_TSHD 
cmom5_ary_reg_sm_4t = cmom5_ary_reg_sm_4t1 NOT INTERACT RFDMYi 
cmom5_ary_reg_sm_4t_a = cmom5_ary_reg_sm_4t INTERACT mom5_ary_plus_a 
cmom5_ary_reg_sm_4t_a_non = cmom5_ary_reg_sm_4t_a INTERACT M6 
cmom5_ary_reg_sm_4t_non = cmom5_ary_reg_sm_4t INTERACT mom5_ary_plus 
cmom5_ary_reg_sm_4t_non_non = cmom5_ary_reg_sm_4t_non INTERACT M6 
cmom5_reg_sm_rf1 = mom5 NOT INTERACT MOMDMY_ARY 
cmom5_reg_sm_rf2 = cmom5_reg_sm_rf1 INTERACT RTMOMDMY 
cmom5_reg_sm_rf3 = cmom5_reg_sm_rf2 NOT INTERACT MOMDMY_MX 
cmom5_reg_sm_rf4 = cmom5_reg_sm_rf3 NOT INTERACT MOMDMY_2T 
cmom5_reg_sm_rf5 = cmom5_reg_sm_rf4 NOT INTERACT MOMDMY_PWi 
cmom5_reg_sm_rf6 = cmom5_reg_sm_rf5 NOT INTERACT MOMDMY_NTNi 
cmom5_reg_sm_rf7 = cmom5_reg_sm_rf6 NOT INTERACT MOMDMY_NWi 
cmom5_reg_sm_rf = cmom5_reg_sm_rf7 INTERACT RFMOMDMY_2T 
cmom5_reg_sm_rf_a = cmom5_reg_sm_rf INTERACT mom5_ary_plus_a 
cmom5_reg_sm_rf_a_non = cmom5_reg_sm_rf_a INTERACT M6 
cmom5_reg_sm_rf_non = cmom5_reg_sm_rf INTERACT mom5_ary_plus 
cmom5_reg_sm_rf_non_non = cmom5_reg_sm_rf_non INTERACT M6 
cmom5_reg_sm_4t_rf1 = cmom5_reg_sm_rf6 INTERACT MOMDMY_NWi 
cmom5_reg_sm_4t_rf2 = cmom5_reg_sm_4t_rf1 NOT INTERACT RFMOMDMY_2T 
cmom5_reg_sm_4t_rf = cmom5_reg_sm_4t_rf2 INTERACT RFDMYi 
cmom5_reg_sm_4t_rf_a = cmom5_reg_sm_4t_rf INTERACT mom5_ary_plus_a 
cmom5_reg_sm_4t_rf_a_non = cmom5_reg_sm_4t_rf_a INTERACT M6 
cmom5_reg_sm_4t_rf_non = cmom5_reg_sm_4t_rf INTERACT mom5_ary_plus 
cmom5_reg_sm_4t_rf_non_non = cmom5_reg_sm_4t_rf_non INTERACT M6 
mom6 = MOMDMY6 NOT INTERACT MOM_field7 
cmom6_ary_reg0 = MOMDMY_ARY INTERACT RTMOMDMY 
cmom6_ary_reg1 = cmom6_ary_reg0 NOT INTERACT MOMDMY_MX 
cmom6_ary_reg2 = cmom6_ary_reg1 NOT INTERACT MOMDMY_2T 
cmom6_ary_reg3 = cmom6_ary_reg2 NOT INTERACT MOMDMY_PWi 
cmom6_ary_reg4 = cmom6_ary_reg3 NOT INTERACT MOMDMY_NTNi 
cmom6_ary_reg5 = cmom6_ary_reg4 NOT INTERACT RFMOMDMY_2T 
cmom6_ary_reg6 = cmom6_ary_reg5 NOT INTERACT MOMDMY_NWi 
cmom6_ary_reg_nw1 = cmom6_ary_reg5 INTERACT MOMDMY_NWi 
cmom6_ary_reg_nw2 = cmom6_ary_reg_nw1 NOT INTERACT MOMDMY_TSHD 
cmom6_ary_reg_nw = cmom6_ary_reg_nw2 NOT INTERACT RFDMYi 
cmom6_ary_reg_nw_a = cmom6_ary_reg_nw INTERACT mom6_ary_plus_a 
cmom6_ary_reg_nw_non = cmom6_ary_reg_nw INTERACT mom6_ary_plus 
cmom6_ary_reg_sm = cmom6_ary_reg6 INTERACT MOMDMY_TSHD 
cmom6_ary_reg_sm_a = cmom6_ary_reg_sm INTERACT mom6_ary_plus_a 
cmom6_ary_reg_sm_a_non = cmom6_ary_reg_sm_a INTERACT M7 
cmom6_ary_reg_sm_non = cmom6_ary_reg_sm INTERACT mom6_ary_plus 
cmom6_ary_reg_sm_non_non = cmom6_ary_reg_sm_non INTERACT M7 
cmom6_ary_reg_sm_4t1 = cmom6_ary_reg_nw1 INTERACT MOMDMY_TSHD 
cmom6_ary_reg_sm_4t = cmom6_ary_reg_sm_4t1 NOT INTERACT RFDMYi 
cmom6_ary_reg_sm_4t_a = cmom6_ary_reg_sm_4t INTERACT mom6_ary_plus_a 
cmom6_ary_reg_sm_4t_a_non = cmom6_ary_reg_sm_4t_a INTERACT M7 
cmom6_ary_reg_sm_4t_non = cmom6_ary_reg_sm_4t INTERACT mom6_ary_plus 
cmom6_ary_reg_sm_4t_non_non = cmom6_ary_reg_sm_4t_non INTERACT M7 
cmom6_reg_sm_rf1 = mom6 NOT INTERACT MOMDMY_ARY 
cmom6_reg_sm_rf2 = cmom6_reg_sm_rf1 INTERACT RTMOMDMY 
cmom6_reg_sm_rf3 = cmom6_reg_sm_rf2 NOT INTERACT MOMDMY_MX 
cmom6_reg_sm_rf4 = cmom6_reg_sm_rf3 NOT INTERACT MOMDMY_2T 
cmom6_reg_sm_rf5 = cmom6_reg_sm_rf4 NOT INTERACT MOMDMY_PWi 
cmom6_reg_sm_rf6 = cmom6_reg_sm_rf5 NOT INTERACT MOMDMY_NTNi 
cmom6_reg_sm_rf7 = cmom6_reg_sm_rf6 NOT INTERACT MOMDMY_NWi 
cmom6_reg_sm_rf = cmom6_reg_sm_rf7 INTERACT RFMOMDMY_2T 
cmom6_reg_sm_rf_a = cmom6_reg_sm_rf INTERACT mom6_ary_plus_a 
cmom6_reg_sm_rf_a_non = cmom6_reg_sm_rf_a INTERACT M7 
cmom6_reg_sm_rf_non = cmom6_reg_sm_rf INTERACT mom6_ary_plus 
cmom6_reg_sm_rf_non_non = cmom6_reg_sm_rf_non INTERACT M7 
cmom6_reg_sm_4t_rf1 = cmom6_reg_sm_rf6 INTERACT MOMDMY_NWi 
cmom6_reg_sm_4t_rf2 = cmom6_reg_sm_4t_rf1 NOT INTERACT RFMOMDMY_2T 
cmom6_reg_sm_4t_rf = cmom6_reg_sm_4t_rf2 INTERACT RFDMYi 
cmom6_reg_sm_4t_rf_a = cmom6_reg_sm_4t_rf INTERACT mom6_ary_plus_a 
cmom6_reg_sm_4t_rf_a_non = cmom6_reg_sm_4t_rf_a INTERACT M7 
cmom6_reg_sm_4t_rf_non = cmom6_reg_sm_4t_rf INTERACT mom6_ary_plus 
cmom6_reg_sm_4t_rf_non_non = cmom6_reg_sm_4t_rf_non INTERACT M7 
mom7 = MOMDMY7 NOT INTERACT MOM_field8 
cmom7_ary_reg0 = MOMDMY_ARY INTERACT RTMOMDMY 
cmom7_ary_reg1 = cmom7_ary_reg0 NOT INTERACT MOMDMY_MX 
cmom7_ary_reg2 = cmom7_ary_reg1 NOT INTERACT MOMDMY_2T 
cmom7_ary_reg3 = cmom7_ary_reg2 NOT INTERACT MOMDMY_PWi 
cmom7_ary_reg4 = cmom7_ary_reg3 NOT INTERACT MOMDMY_NTNi 
cmom7_ary_reg5 = cmom7_ary_reg4 NOT INTERACT RFMOMDMY_2T 
cmom7_ary_reg6 = cmom7_ary_reg5 NOT INTERACT MOMDMY_NWi 
cmom7_ary_reg_nw1 = cmom7_ary_reg5 INTERACT MOMDMY_NWi 
cmom7_ary_reg_nw2 = cmom7_ary_reg_nw1 NOT INTERACT MOMDMY_TSHD 
cmom7_ary_reg_nw = cmom7_ary_reg_nw2 NOT INTERACT RFDMYi 
cmom7_ary_reg_nw_a = cmom7_ary_reg_nw INTERACT mom7_ary_plus_a 
cmom7_ary_reg_nw_non = cmom7_ary_reg_nw INTERACT mom7_ary_plus 
cmom7_ary_reg_sm = cmom7_ary_reg6 INTERACT MOMDMY_TSHD 
cmom7_ary_reg_sm_a = cmom7_ary_reg_sm INTERACT mom7_ary_plus_a 
cmom7_ary_reg_sm_a_non = cmom7_ary_reg_sm_a INTERACT M8 
cmom7_ary_reg_sm_non = cmom7_ary_reg_sm INTERACT mom7_ary_plus 
cmom7_ary_reg_sm_non_non = cmom7_ary_reg_sm_non INTERACT M8 
cmom7_ary_reg_sm_4t1 = cmom7_ary_reg_nw1 INTERACT MOMDMY_TSHD 
cmom7_ary_reg_sm_4t = cmom7_ary_reg_sm_4t1 NOT INTERACT RFDMYi 
cmom7_ary_reg_sm_4t_a = cmom7_ary_reg_sm_4t INTERACT mom7_ary_plus_a 
cmom7_ary_reg_sm_4t_a_non = cmom7_ary_reg_sm_4t_a INTERACT M8 
cmom7_ary_reg_sm_4t_non = cmom7_ary_reg_sm_4t INTERACT mom7_ary_plus 
cmom7_ary_reg_sm_4t_non_non = cmom7_ary_reg_sm_4t_non INTERACT M8 
cmom7_reg_sm_rf1 = mom7 NOT INTERACT MOMDMY_ARY 
cmom7_reg_sm_rf2 = cmom7_reg_sm_rf1 INTERACT RTMOMDMY 
cmom7_reg_sm_rf3 = cmom7_reg_sm_rf2 NOT INTERACT MOMDMY_MX 
cmom7_reg_sm_rf4 = cmom7_reg_sm_rf3 NOT INTERACT MOMDMY_2T 
cmom7_reg_sm_rf5 = cmom7_reg_sm_rf4 NOT INTERACT MOMDMY_PWi 
cmom7_reg_sm_rf6 = cmom7_reg_sm_rf5 NOT INTERACT MOMDMY_NTNi 
cmom7_reg_sm_rf7 = cmom7_reg_sm_rf6 NOT INTERACT MOMDMY_NWi 
cmom7_reg_sm_rf = cmom7_reg_sm_rf7 INTERACT RFMOMDMY_2T 
cmom7_reg_sm_rf_a = cmom7_reg_sm_rf INTERACT mom7_ary_plus_a 
cmom7_reg_sm_rf_a_non = cmom7_reg_sm_rf_a INTERACT M8 
cmom7_reg_sm_rf_non = cmom7_reg_sm_rf INTERACT mom7_ary_plus 
cmom7_reg_sm_rf_non_non = cmom7_reg_sm_rf_non INTERACT M8 
cmom7_reg_sm_4t_rf1 = cmom7_reg_sm_rf6 INTERACT MOMDMY_NWi 
cmom7_reg_sm_4t_rf2 = cmom7_reg_sm_4t_rf1 NOT INTERACT RFMOMDMY_2T 
cmom7_reg_sm_4t_rf = cmom7_reg_sm_4t_rf2 INTERACT RFDMYi 
cmom7_reg_sm_4t_rf_a = cmom7_reg_sm_4t_rf INTERACT mom7_ary_plus_a 
cmom7_reg_sm_4t_rf_a_non = cmom7_reg_sm_4t_rf_a INTERACT M8 
cmom7_reg_sm_4t_rf_non = cmom7_reg_sm_4t_rf INTERACT mom7_ary_plus 
cmom7_reg_sm_4t_rf_non_non = cmom7_reg_sm_4t_rf_non INTERACT M8 
mom8 = MOMDMY8 NOT INTERACT MOM_field9 
cmom8_ary_reg0 = MOMDMY_ARY INTERACT RTMOMDMY 
cmom8_ary_reg1 = cmom8_ary_reg0 NOT INTERACT MOMDMY_MX 
cmom8_ary_reg2 = cmom8_ary_reg1 NOT INTERACT MOMDMY_2T 
cmom8_ary_reg3 = cmom8_ary_reg2 NOT INTERACT MOMDMY_PWi 
cmom8_ary_reg4 = cmom8_ary_reg3 NOT INTERACT MOMDMY_NTNi 
cmom8_ary_reg5 = cmom8_ary_reg4 NOT INTERACT RFMOMDMY_2T 
cmom8_ary_reg6 = cmom8_ary_reg5 NOT INTERACT MOMDMY_NWi 
cmom8_ary_reg_nw1 = cmom8_ary_reg5 INTERACT MOMDMY_NWi 
cmom8_ary_reg_nw2 = cmom8_ary_reg_nw1 NOT INTERACT MOMDMY_TSHD 
cmom8_ary_reg_nw = cmom8_ary_reg_nw2 NOT INTERACT RFDMYi 
cmom8_ary_reg_nw_a = cmom8_ary_reg_nw INTERACT mom8_ary_plus_a 
cmom8_ary_reg_nw_non = cmom8_ary_reg_nw INTERACT mom8_ary_plus 
cmom8_ary_reg_sm = cmom8_ary_reg6 INTERACT MOMDMY_TSHD 
cmom8_ary_reg_sm_a = cmom8_ary_reg_sm INTERACT mom8_ary_plus_a 
cmom8_ary_reg_sm_a_non = cmom8_ary_reg_sm_a INTERACT M9 
cmom8_ary_reg_sm_non = cmom8_ary_reg_sm INTERACT mom8_ary_plus 
cmom8_ary_reg_sm_non_non = cmom8_ary_reg_sm_non INTERACT M9 
cmom8_ary_reg_sm_4t1 = cmom8_ary_reg_nw1 INTERACT MOMDMY_TSHD 
cmom8_ary_reg_sm_4t = cmom8_ary_reg_sm_4t1 NOT INTERACT RFDMYi 
cmom8_ary_reg_sm_4t_a = cmom8_ary_reg_sm_4t INTERACT mom8_ary_plus_a 
cmom8_ary_reg_sm_4t_a_non = cmom8_ary_reg_sm_4t_a INTERACT M9 
cmom8_ary_reg_sm_4t_non = cmom8_ary_reg_sm_4t INTERACT mom8_ary_plus 
cmom8_ary_reg_sm_4t_non_non = cmom8_ary_reg_sm_4t_non INTERACT M9 
cmom8_reg_sm_rf1 = mom8 NOT INTERACT MOMDMY_ARY 
cmom8_reg_sm_rf2 = cmom8_reg_sm_rf1 INTERACT RTMOMDMY 
cmom8_reg_sm_rf3 = cmom8_reg_sm_rf2 NOT INTERACT MOMDMY_MX 
cmom8_reg_sm_rf4 = cmom8_reg_sm_rf3 NOT INTERACT MOMDMY_2T 
cmom8_reg_sm_rf5 = cmom8_reg_sm_rf4 NOT INTERACT MOMDMY_PWi 
cmom8_reg_sm_rf6 = cmom8_reg_sm_rf5 NOT INTERACT MOMDMY_NTNi 
cmom8_reg_sm_rf7 = cmom8_reg_sm_rf6 NOT INTERACT MOMDMY_NWi 
cmom8_reg_sm_rf = cmom8_reg_sm_rf7 INTERACT RFMOMDMY_2T 
cmom8_reg_sm_rf_a = cmom8_reg_sm_rf INTERACT mom8_ary_plus_a 
cmom8_reg_sm_rf_a_non = cmom8_reg_sm_rf_a INTERACT M9 
cmom8_reg_sm_rf_non = cmom8_reg_sm_rf INTERACT mom8_ary_plus 
cmom8_reg_sm_rf_non_non = cmom8_reg_sm_rf_non INTERACT M9 
cmom8_reg_sm_4t_rf1 = cmom8_reg_sm_rf6 INTERACT MOMDMY_NWi 
cmom8_reg_sm_4t_rf2 = cmom8_reg_sm_4t_rf1 NOT INTERACT RFMOMDMY_2T 
cmom8_reg_sm_4t_rf = cmom8_reg_sm_4t_rf2 INTERACT RFDMYi 
cmom8_reg_sm_4t_rf_a = cmom8_reg_sm_4t_rf INTERACT mom8_ary_plus_a 
cmom8_reg_sm_4t_rf_a_non = cmom8_reg_sm_4t_rf_a INTERACT M9 
cmom8_reg_sm_4t_rf_non = cmom8_reg_sm_4t_rf INTERACT mom8_ary_plus 
cmom8_reg_sm_4t_rf_non_non = cmom8_reg_sm_4t_rf_non INTERACT M9 
mom9 = MOMDMY9 NOT INTERACT MOM_field10 
cmom9_ary_reg0 = MOMDMY_ARY INTERACT RTMOMDMY 
cmom9_ary_reg1 = cmom9_ary_reg0 NOT INTERACT MOMDMY_MX 
cmom9_ary_reg2 = cmom9_ary_reg1 NOT INTERACT MOMDMY_2T 
cmom9_ary_reg3 = cmom9_ary_reg2 NOT INTERACT MOMDMY_PWi 
cmom9_ary_reg4 = cmom9_ary_reg3 NOT INTERACT MOMDMY_NTNi 
cmom9_ary_reg5 = cmom9_ary_reg4 NOT INTERACT RFMOMDMY_2T 
cmom9_ary_reg6 = cmom9_ary_reg5 NOT INTERACT MOMDMY_NWi 
cmom9_ary_reg_nw1 = cmom9_ary_reg5 INTERACT MOMDMY_NWi 
cmom9_ary_reg_nw2 = cmom9_ary_reg_nw1 NOT INTERACT MOMDMY_TSHD 
cmom9_ary_reg_nw = cmom9_ary_reg_nw2 NOT INTERACT RFDMYi 
cmom9_ary_reg_nw_a = cmom9_ary_reg_nw INTERACT mom9_ary_plus_a 
cmom9_ary_reg_nw_non = cmom9_ary_reg_nw INTERACT mom9_ary_plus 
cmom9_ary_reg_sm = cmom9_ary_reg6 INTERACT MOMDMY_TSHD 
cmom9_ary_reg_sm_a = cmom9_ary_reg_sm INTERACT mom9_ary_plus_a 
cmom9_ary_reg_sm_a_non = cmom9_ary_reg_sm_a INTERACT M10 
cmom9_ary_reg_sm_non = cmom9_ary_reg_sm INTERACT mom9_ary_plus 
cmom9_ary_reg_sm_non_non = cmom9_ary_reg_sm_non INTERACT M10 
cmom9_ary_reg_sm_4t1 = cmom9_ary_reg_nw1 INTERACT MOMDMY_TSHD 
cmom9_ary_reg_sm_4t = cmom9_ary_reg_sm_4t1 NOT INTERACT RFDMYi 
cmom9_ary_reg_sm_4t_a = cmom9_ary_reg_sm_4t INTERACT mom9_ary_plus_a 
cmom9_ary_reg_sm_4t_a_non = cmom9_ary_reg_sm_4t_a INTERACT M10 
cmom9_ary_reg_sm_4t_non = cmom9_ary_reg_sm_4t INTERACT mom9_ary_plus 
cmom9_ary_reg_sm_4t_non_non = cmom9_ary_reg_sm_4t_non INTERACT M10 
cmom9_reg_sm_rf1 = mom9 NOT INTERACT MOMDMY_ARY 
cmom9_reg_sm_rf2 = cmom9_reg_sm_rf1 INTERACT RTMOMDMY 
cmom9_reg_sm_rf3 = cmom9_reg_sm_rf2 NOT INTERACT MOMDMY_MX 
cmom9_reg_sm_rf4 = cmom9_reg_sm_rf3 NOT INTERACT MOMDMY_2T 
cmom9_reg_sm_rf5 = cmom9_reg_sm_rf4 NOT INTERACT MOMDMY_PWi 
cmom9_reg_sm_rf6 = cmom9_reg_sm_rf5 NOT INTERACT MOMDMY_NTNi 
cmom9_reg_sm_rf7 = cmom9_reg_sm_rf6 NOT INTERACT MOMDMY_NWi 
cmom9_reg_sm_rf = cmom9_reg_sm_rf7 INTERACT RFMOMDMY_2T 
cmom9_reg_sm_rf_a = cmom9_reg_sm_rf INTERACT mom9_ary_plus_a 
cmom9_reg_sm_rf_a_non = cmom9_reg_sm_rf_a INTERACT M10 
cmom9_reg_sm_rf_non = cmom9_reg_sm_rf INTERACT mom9_ary_plus 
cmom9_reg_sm_rf_non_non = cmom9_reg_sm_rf_non INTERACT M10 
cmom9_reg_sm_4t_rf1 = cmom9_reg_sm_rf6 INTERACT MOMDMY_NWi 
cmom9_reg_sm_4t_rf2 = cmom9_reg_sm_4t_rf1 NOT INTERACT RFMOMDMY_2T 
cmom9_reg_sm_4t_rf = cmom9_reg_sm_4t_rf2 INTERACT RFDMYi 
cmom9_reg_sm_4t_rf_a = cmom9_reg_sm_4t_rf INTERACT mom9_ary_plus_a 
cmom9_reg_sm_4t_rf_a_non = cmom9_reg_sm_4t_rf_a INTERACT M10 
cmom9_reg_sm_4t_rf_non = cmom9_reg_sm_4t_rf INTERACT mom9_ary_plus 
cmom9_reg_sm_4t_rf_non_non = cmom9_reg_sm_4t_rf_non INTERACT M10 
mom10 = MOMDMY10 NOT INTERACT MOM_field11 
cmom10_ary_reg0 = MOMDMY_ARY INTERACT RTMOMDMY 
cmom10_ary_reg1 = cmom10_ary_reg0 NOT INTERACT MOMDMY_MX 
cmom10_ary_reg2 = cmom10_ary_reg1 NOT INTERACT MOMDMY_2T 
cmom10_ary_reg3 = cmom10_ary_reg2 NOT INTERACT MOMDMY_PWi 
cmom10_ary_reg4 = cmom10_ary_reg3 NOT INTERACT MOMDMY_NTNi 
cmom10_ary_reg5 = cmom10_ary_reg4 NOT INTERACT RFMOMDMY_2T 
cmom10_ary_reg6 = cmom10_ary_reg5 NOT INTERACT MOMDMY_NWi 
cmom10_ary_reg_nw1 = cmom10_ary_reg5 INTERACT MOMDMY_NWi 
cmom10_ary_reg_nw2 = cmom10_ary_reg_nw1 NOT INTERACT MOMDMY_TSHD 
cmom10_ary_reg_nw = cmom10_ary_reg_nw2 NOT INTERACT RFDMYi 
cmom10_ary_reg_nw_a = cmom10_ary_reg_nw INTERACT mom10_ary_plus_a 
cmom10_ary_reg_nw_non = cmom10_ary_reg_nw INTERACT mom10_ary_plus 
cmom10_ary_reg_sm = cmom10_ary_reg6 INTERACT MOMDMY_TSHD 
cmom10_ary_reg_sm_a = cmom10_ary_reg_sm INTERACT mom10_ary_plus_a 
cmom10_ary_reg_sm_a_non = cmom10_ary_reg_sm_a INTERACT M11 
cmom10_ary_reg_sm_non = cmom10_ary_reg_sm INTERACT mom10_ary_plus 
cmom10_ary_reg_sm_non_non = cmom10_ary_reg_sm_non INTERACT M11 
cmom10_ary_reg_sm_4t1 = cmom10_ary_reg_nw1 INTERACT MOMDMY_TSHD 
cmom10_ary_reg_sm_4t = cmom10_ary_reg_sm_4t1 NOT INTERACT RFDMYi 
cmom10_ary_reg_sm_4t_a = cmom10_ary_reg_sm_4t INTERACT mom10_ary_plus_a 
cmom10_ary_reg_sm_4t_a_non = cmom10_ary_reg_sm_4t_a INTERACT M11 
cmom10_ary_reg_sm_4t_non = cmom10_ary_reg_sm_4t INTERACT mom10_ary_plus 
cmom10_ary_reg_sm_4t_non_non = cmom10_ary_reg_sm_4t_non INTERACT M11 
cmom10_reg_sm_rf1 = mom10 NOT INTERACT MOMDMY_ARY 
cmom10_reg_sm_rf2 = cmom10_reg_sm_rf1 INTERACT RTMOMDMY 
cmom10_reg_sm_rf3 = cmom10_reg_sm_rf2 NOT INTERACT MOMDMY_MX 
cmom10_reg_sm_rf4 = cmom10_reg_sm_rf3 NOT INTERACT MOMDMY_2T 
cmom10_reg_sm_rf5 = cmom10_reg_sm_rf4 NOT INTERACT MOMDMY_PWi 
cmom10_reg_sm_rf6 = cmom10_reg_sm_rf5 NOT INTERACT MOMDMY_NTNi 
cmom10_reg_sm_rf7 = cmom10_reg_sm_rf6 NOT INTERACT MOMDMY_NWi 
cmom10_reg_sm_rf = cmom10_reg_sm_rf7 INTERACT RFMOMDMY_2T 
cmom10_reg_sm_rf_a = cmom10_reg_sm_rf INTERACT mom10_ary_plus_a 
cmom10_reg_sm_rf_a_non = cmom10_reg_sm_rf_a INTERACT M11 
cmom10_reg_sm_rf_non = cmom10_reg_sm_rf INTERACT mom10_ary_plus 
cmom10_reg_sm_rf_non_non = cmom10_reg_sm_rf_non INTERACT M11 
cmom10_reg_sm_4t_rf1 = cmom10_reg_sm_rf6 INTERACT MOMDMY_NWi 
cmom10_reg_sm_4t_rf2 = cmom10_reg_sm_4t_rf1 NOT INTERACT RFMOMDMY_2T 
cmom10_reg_sm_4t_rf = cmom10_reg_sm_4t_rf2 INTERACT RFDMYi 
cmom10_reg_sm_4t_rf_a = cmom10_reg_sm_4t_rf INTERACT mom10_ary_plus_a 
cmom10_reg_sm_4t_rf_a_non = cmom10_reg_sm_4t_rf_a INTERACT M11 
cmom10_reg_sm_4t_rf_non = cmom10_reg_sm_4t_rf INTERACT mom10_ary_plus 
cmom10_reg_sm_4t_rf_non_non = cmom10_reg_sm_4t_rf_non INTERACT M11 
mom11 = MOMDMY11 NOT INTERACT MOM_field12 
cmom11_ary_reg0 = MOMDMY_ARY INTERACT RTMOMDMY 
cmom11_ary_reg1 = cmom11_ary_reg0 NOT INTERACT MOMDMY_MX 
cmom11_ary_reg2 = cmom11_ary_reg1 NOT INTERACT MOMDMY_2T 
cmom11_ary_reg3 = cmom11_ary_reg2 NOT INTERACT MOMDMY_PWi 
cmom11_ary_reg4 = cmom11_ary_reg3 NOT INTERACT MOMDMY_NTNi 
cmom11_ary_reg5 = cmom11_ary_reg4 NOT INTERACT RFMOMDMY_2T 
cmom11_ary_reg6 = cmom11_ary_reg5 NOT INTERACT MOMDMY_NWi 
cmom11_ary_reg_nw1 = cmom11_ary_reg5 INTERACT MOMDMY_NWi 
cmom11_ary_reg_nw2 = cmom11_ary_reg_nw1 NOT INTERACT MOMDMY_TSHD 
cmom11_ary_reg_nw = cmom11_ary_reg_nw2 NOT INTERACT RFDMYi 
cmom11_ary_reg_nw_a = cmom11_ary_reg_nw INTERACT mom11_ary_plus_a 
cmom11_ary_reg_nw_non = cmom11_ary_reg_nw INTERACT mom11_ary_plus 
cmom11_ary_reg_sm = cmom11_ary_reg6 INTERACT MOMDMY_TSHD 
cmom11_ary_reg_sm_a = cmom11_ary_reg_sm INTERACT mom11_ary_plus_a 
cmom11_ary_reg_sm_a_non = cmom11_ary_reg_sm_a INTERACT M12 
cmom11_ary_reg_sm_non = cmom11_ary_reg_sm INTERACT mom11_ary_plus 
cmom11_ary_reg_sm_non_non = cmom11_ary_reg_sm_non INTERACT M12 
cmom11_ary_reg_sm_4t1 = cmom11_ary_reg_nw1 INTERACT MOMDMY_TSHD 
cmom11_ary_reg_sm_4t = cmom11_ary_reg_sm_4t1 NOT INTERACT RFDMYi 
cmom11_ary_reg_sm_4t_a = cmom11_ary_reg_sm_4t INTERACT mom11_ary_plus_a 
cmom11_ary_reg_sm_4t_a_non = cmom11_ary_reg_sm_4t_a INTERACT M12 
cmom11_ary_reg_sm_4t_non = cmom11_ary_reg_sm_4t INTERACT mom11_ary_plus 
cmom11_ary_reg_sm_4t_non_non = cmom11_ary_reg_sm_4t_non INTERACT M12 
cmom11_reg_sm_rf1 = mom11 NOT INTERACT MOMDMY_ARY 
cmom11_reg_sm_rf2 = cmom11_reg_sm_rf1 INTERACT RTMOMDMY 
cmom11_reg_sm_rf3 = cmom11_reg_sm_rf2 NOT INTERACT MOMDMY_MX 
cmom11_reg_sm_rf4 = cmom11_reg_sm_rf3 NOT INTERACT MOMDMY_2T 
cmom11_reg_sm_rf5 = cmom11_reg_sm_rf4 NOT INTERACT MOMDMY_PWi 
cmom11_reg_sm_rf6 = cmom11_reg_sm_rf5 NOT INTERACT MOMDMY_NTNi 
cmom11_reg_sm_rf7 = cmom11_reg_sm_rf6 NOT INTERACT MOMDMY_NWi 
cmom11_reg_sm_rf = cmom11_reg_sm_rf7 INTERACT RFMOMDMY_2T 
cmom11_reg_sm_rf_a = cmom11_reg_sm_rf INTERACT mom11_ary_plus_a 
cmom11_reg_sm_rf_a_non = cmom11_reg_sm_rf_a INTERACT M12 
cmom11_reg_sm_rf_non = cmom11_reg_sm_rf INTERACT mom11_ary_plus 
cmom11_reg_sm_rf_non_non = cmom11_reg_sm_rf_non INTERACT M12 
cmom11_reg_sm_4t_rf1 = cmom11_reg_sm_rf6 INTERACT MOMDMY_NWi 
cmom11_reg_sm_4t_rf2 = cmom11_reg_sm_4t_rf1 NOT INTERACT RFMOMDMY_2T 
cmom11_reg_sm_4t_rf = cmom11_reg_sm_4t_rf2 INTERACT RFDMYi 
cmom11_reg_sm_4t_rf_a = cmom11_reg_sm_4t_rf INTERACT mom11_ary_plus_a 
cmom11_reg_sm_4t_rf_a_non = cmom11_reg_sm_4t_rf_a INTERACT M12 
cmom11_reg_sm_4t_rf_non = cmom11_reg_sm_4t_rf INTERACT mom11_ary_plus 
cmom11_reg_sm_4t_rf_non_non = cmom11_reg_sm_4t_rf_non INTERACT M12 
mom12 = MOMDMY12 NOT INTERACT MOM_field13 
cmom12_ary_reg0 = MOMDMY_ARY INTERACT RTMOMDMY 
cmom12_ary_reg1 = cmom12_ary_reg0 NOT INTERACT MOMDMY_MX 
cmom12_ary_reg2 = cmom12_ary_reg1 NOT INTERACT MOMDMY_2T 
cmom12_ary_reg3 = cmom12_ary_reg2 NOT INTERACT MOMDMY_PWi 
cmom12_ary_reg4 = cmom12_ary_reg3 NOT INTERACT MOMDMY_NTNi 
cmom12_ary_reg5 = cmom12_ary_reg4 NOT INTERACT RFMOMDMY_2T 
cmom12_ary_reg6 = cmom12_ary_reg5 NOT INTERACT MOMDMY_NWi 
cmom12_ary_reg_nw1 = cmom12_ary_reg5 INTERACT MOMDMY_NWi 
cmom12_ary_reg_nw2 = cmom12_ary_reg_nw1 NOT INTERACT MOMDMY_TSHD 
cmom12_ary_reg_nw = cmom12_ary_reg_nw2 NOT INTERACT RFDMYi 
cmom12_ary_reg_nw_a = cmom12_ary_reg_nw INTERACT mom12_ary_plus_a 
cmom12_ary_reg_nw_non = cmom12_ary_reg_nw INTERACT mom12_ary_plus 
cmom12_ary_reg_sm = cmom12_ary_reg6 INTERACT MOMDMY_TSHD 
cmom12_ary_reg_sm_a = cmom12_ary_reg_sm INTERACT mom12_ary_plus_a 
cmom12_ary_reg_sm_a_non = cmom12_ary_reg_sm_a INTERACT M13 
cmom12_ary_reg_sm_non = cmom12_ary_reg_sm INTERACT mom12_ary_plus 
cmom12_ary_reg_sm_non_non = cmom12_ary_reg_sm_non INTERACT M13 
cmom12_ary_reg_sm_4t1 = cmom12_ary_reg_nw1 INTERACT MOMDMY_TSHD 
cmom12_ary_reg_sm_4t = cmom12_ary_reg_sm_4t1 NOT INTERACT RFDMYi 
cmom12_ary_reg_sm_4t_a = cmom12_ary_reg_sm_4t INTERACT mom12_ary_plus_a 
cmom12_ary_reg_sm_4t_a_non = cmom12_ary_reg_sm_4t_a INTERACT M13 
cmom12_ary_reg_sm_4t_non = cmom12_ary_reg_sm_4t INTERACT mom12_ary_plus 
cmom12_ary_reg_sm_4t_non_non = cmom12_ary_reg_sm_4t_non INTERACT M13 
cmom12_reg_sm_rf1 = mom12 NOT INTERACT MOMDMY_ARY 
cmom12_reg_sm_rf2 = cmom12_reg_sm_rf1 INTERACT RTMOMDMY 
cmom12_reg_sm_rf3 = cmom12_reg_sm_rf2 NOT INTERACT MOMDMY_MX 
cmom12_reg_sm_rf4 = cmom12_reg_sm_rf3 NOT INTERACT MOMDMY_2T 
cmom12_reg_sm_rf5 = cmom12_reg_sm_rf4 NOT INTERACT MOMDMY_PWi 
cmom12_reg_sm_rf6 = cmom12_reg_sm_rf5 NOT INTERACT MOMDMY_NTNi 
cmom12_reg_sm_rf7 = cmom12_reg_sm_rf6 NOT INTERACT MOMDMY_NWi 
cmom12_reg_sm_rf = cmom12_reg_sm_rf7 INTERACT RFMOMDMY_2T 
cmom12_reg_sm_rf_a = cmom12_reg_sm_rf INTERACT mom12_ary_plus_a 
cmom12_reg_sm_rf_a_non = cmom12_reg_sm_rf_a INTERACT M13 
cmom12_reg_sm_rf_non = cmom12_reg_sm_rf INTERACT mom12_ary_plus 
cmom12_reg_sm_rf_non_non = cmom12_reg_sm_rf_non INTERACT M13 
cmom12_reg_sm_4t_rf1 = cmom12_reg_sm_rf6 INTERACT MOMDMY_NWi 
cmom12_reg_sm_4t_rf2 = cmom12_reg_sm_4t_rf1 NOT INTERACT RFMOMDMY_2T 
cmom12_reg_sm_4t_rf = cmom12_reg_sm_4t_rf2 INTERACT RFDMYi 
cmom12_reg_sm_4t_rf_a = cmom12_reg_sm_4t_rf INTERACT mom12_ary_plus_a 
cmom12_reg_sm_4t_rf_a_non = cmom12_reg_sm_4t_rf_a INTERACT M13 
cmom12_reg_sm_4t_rf_non = cmom12_reg_sm_4t_rf INTERACT mom12_ary_plus 
cmom12_reg_sm_4t_rf_non_non = cmom12_reg_sm_4t_rf_non INTERACT M13 
//#############################################
//# CONNECTION                                #
//#############################################
CONNECT BPC M18 BY RV_MTOP_BPC
CONNECT BPC_GND_1 M18 BY RV_MTOP_BPC
CONNECT BPC_GND_2 M18 BY RV_MTOP_BPC
CONNECT BPC_GND_DMY_1 BPC_GND_1
CONNECT BPC_GND_DMY_1 M18 BY RV_MTOP_BPC
CONNECT BPC_GND_DMY_2 BPC_GND_2
CONNECT BPC_GND_DMY_2 M18 BY RV_MTOP_BPC
CONNECT BPC_HV1_1 M18 BY RV_MTOP_BPC_BOT
CONNECT BPC_HV2_2 M18 BY RV_MTOP_BPC_BOT
CONNECT BPC_LVHV_DMY_1 BPC_LV_1
CONNECT BPC_LVHV_DMY_1 M18 BY RV_MTOP_BPC_BOT
CONNECT BPC_LVHV_DMY_2 BPC_LV_2
CONNECT BPC_LVHV_DMY_2 M18 BY RV_MTOP_BPC_BOT
CONNECT BPC_LV_1 M18 BY RV_MTOP_BPC_BOT
CONNECT BPC_LV_2 M18 BY RV_MTOP_BPC_BOT
CONNECT Cu_RDL BPC_HV1_1 BY RV_BPC_BOT_RDL
CONNECT Cu_RDL BPC_HV2_2 BY RV_BPC_BOT_RDL
CONNECT Cu_RDL BPC_LVHV_DMY_1 BY RV_BPC_BOT_RDL
CONNECT Cu_RDL BPC_LVHV_DMY_2 BY RV_BPC_BOT_RDL
CONNECT Cu_RDL BPC_LV_1 BY RV_BPC_BOT_RDL
CONNECT Cu_RDL BPC_LV_2 BY RV_BPC_BOT_RDL
CONNECT Cu_RDL M18 BY Cu_RV
CONNECT Cu_RDL MPC BY RV_MPC_RDL
CONNECT Cu_RDL MPC_LV_1 BY RV_MPC_RDL
CONNECT Cu_RDL MPC_LV_2 BY RV_MPC_RDL
CONNECT Cu_RDL MPC_LV_DMY_1 BY RV_MPC_RDL
CONNECT Cu_RDL MPC_LV_DMY_2 BY RV_MPC_RDL
CONNECT Cu_RDL TPC BY RV_TPC_RDL
CONNECT Cu_RDL TPC_GND_1 BY RV_TPC_RDL
CONNECT Cu_RDL TPC_GND_2 BY RV_TPC_RDL
CONNECT Cu_RDL TPC_GND_DMY_1 BY RV_TPC_RDL
CONNECT Cu_RDL TPC_GND_DMY_2 BY RV_TPC_RDL
CONNECT M0_A MD_OD_N BY VD
CONNECT M0_A MD_OD_N_SRM BY VD
CONNECT M0_A MD_OD_P BY VD
CONNECT M0_A MD_OD_P_SRM BY VD
CONNECT M0_A MD_STI BY VD
CONNECT M0_A MD_STI_SRM BY VD
CONNECT M0_A VD2 BY M0_VD2_TAP
CONNECT M0_A mom0m1_a
CONNECT M0_A mom0m2_a
CONNECT M0_A mom0p1_a
CONNECT M0_A mom0p2_a
CONNECT M0_A mom0plus_a
CONNECT M0_B MD_OD_N BY VD
CONNECT M0_B MD_OD_N_SRM BY VD
CONNECT M0_B MD_OD_P BY VD
CONNECT M0_B MD_OD_P_SRM BY VD
CONNECT M0_B MD_STI BY VD
CONNECT M0_B MD_STI_SRM BY VD
CONNECT M0_B VD2 BY M0_VD2_TAP
CONNECT M0_B mom0m1_b
CONNECT M0_B mom0m2_b
CONNECT M0_B mom0minus_b
CONNECT M0_B mom0p1_b
CONNECT M0_B mom0p2_b
CONNECT M10 M9 BY VIA9
CONNECT M10 mom10_ary_minus
CONNECT M10 mom10_ary_plus
CONNECT M10 mom10m1
CONNECT M10 mom10m2
CONNECT M10 mom10minus
CONNECT M10 mom10p1
CONNECT M10 mom10p2
CONNECT M10 mom10plus
CONNECT M11 M10 BY VIA10
CONNECT M11 mom11_ary_minus
CONNECT M11 mom11_ary_plus
CONNECT M11 mom11m1
CONNECT M11 mom11m2
CONNECT M11 mom11minus
CONNECT M11 mom11p1
CONNECT M11 mom11p2
CONNECT M11 mom11plus
CONNECT M12 M11 BY VIA11
CONNECT M12 mom12_ary_minus
CONNECT M12 mom12_ary_plus
CONNECT M12 mom12m1
CONNECT M12 mom12m2
CONNECT M12 mom12minus
CONNECT M12 mom12p1
CONNECT M12 mom12p2
CONNECT M12 mom12plus
CONNECT M13 M12 BY VIA12
CONNECT M13 mom13m1
CONNECT M13 mom13m2
CONNECT M13 mom13minus
CONNECT M13 mom13p1
CONNECT M13 mom13p2
CONNECT M13 mom13plus
CONNECT M14 M13 BY VIA13
CONNECT M14 mom14m1
CONNECT M14 mom14m2
CONNECT M14 mom14minus
CONNECT M14 mom14p1
CONNECT M14 mom14p2
CONNECT M14 mom14plus
CONNECT M15 M14 BY VIA14
CONNECT M16 M15 BY VIA15
CONNECT M17 M16 BY VIA16
CONNECT M18 M17 BY VIA17
CONNECT M1_A M0_A BY VIA0
CONNECT M1_A M0_B BY VIA0
CONNECT M1_A mom1m1_a
CONNECT M1_A mom1m2_a
CONNECT M1_A mom1p1_a
CONNECT M1_A mom1p2_a
CONNECT M1_A mom1plus_a
CONNECT M1_B M0_A BY VIA0
CONNECT M1_B M0_B BY VIA0
CONNECT M1_B mom1m1_b
CONNECT M1_B mom1m2_b
CONNECT M1_B mom1minus_b
CONNECT M1_B mom1p1_b
CONNECT M1_B mom1p2_b
CONNECT M2_A M1_A BY VIA1
CONNECT M2_A M1_B BY VIA1
CONNECT M2_A mom2_ary_plus_a
CONNECT M2_A mom2m1_a
CONNECT M2_A mom2m2_a
CONNECT M2_A mom2p1_a
CONNECT M2_A mom2p2_a
CONNECT M2_A mom2plus_a
CONNECT M2_B M1_A BY VIA1
CONNECT M2_B M1_B BY VIA1
CONNECT M2_B mom2_ary_minus_b
CONNECT M2_B mom2m1_b
CONNECT M2_B mom2m2_b
CONNECT M2_B mom2minus_b
CONNECT M2_B mom2p1_b
CONNECT M2_B mom2p2_b
CONNECT M3 M2_A BY VIA2
CONNECT M3 M2_B BY VIA2
CONNECT M3 mom3_ary_minus
CONNECT M3 mom3_ary_plus
CONNECT M3 mom3m1
CONNECT M3 mom3m2
CONNECT M3 mom3minus
CONNECT M3 mom3p1
CONNECT M3 mom3p2
CONNECT M3 mom3plus
CONNECT M4 M3 BY VIA3
CONNECT M4 mom4_ary_minus
CONNECT M4 mom4_ary_plus
CONNECT M4 mom4m1
CONNECT M4 mom4m2
CONNECT M4 mom4minus
CONNECT M4 mom4p1
CONNECT M4 mom4p2
CONNECT M4 mom4plus
CONNECT M5_A M4 BY VIA4
CONNECT M5_A mom5_ary_plus_a
CONNECT M5_A mom5m1_a
CONNECT M5_A mom5m2_a
CONNECT M5_A mom5p1_a
CONNECT M5_A mom5p2_a
CONNECT M5_A mom5plus_a
CONNECT M5_B M4 BY VIA4
CONNECT M5_B mom5_ary_minus_b
CONNECT M5_B mom5m1_b
CONNECT M5_B mom5m2_b
CONNECT M5_B mom5minus_b
CONNECT M5_B mom5p1_b
CONNECT M5_B mom5p2_b
CONNECT M6 M5_A BY VIA5
CONNECT M6 M5_B BY VIA5
CONNECT M6 mom6_ary_minus
CONNECT M6 mom6_ary_plus
CONNECT M6 mom6m1
CONNECT M6 mom6m2
CONNECT M6 mom6minus
CONNECT M6 mom6p1
CONNECT M6 mom6p2
CONNECT M6 mom6plus
CONNECT M7 M6 BY VIA6
CONNECT M7 RH_TN_7 BY VTIN_6
CONNECT M7 mom7_ary_minus
CONNECT M7 mom7_ary_plus
CONNECT M7 mom7m1
CONNECT M7 mom7m2
CONNECT M7 mom7minus
CONNECT M7 mom7p1
CONNECT M7 mom7p2
CONNECT M7 mom7plus
CONNECT M8 M7 BY VIA7
CONNECT M8 mom8_ary_minus
CONNECT M8 mom8_ary_plus
CONNECT M8 mom8m1
CONNECT M8 mom8m2
CONNECT M8 mom8minus
CONNECT M8 mom8p1
CONNECT M8 mom8p2
CONNECT M8 mom8plus
CONNECT M9 M8 BY VIA8
CONNECT M9 mom9_ary_minus
CONNECT M9 mom9_ary_plus
CONNECT M9 mom9m1
CONNECT M9 mom9m2
CONNECT M9 mom9minus
CONNECT M9 mom9p1
CONNECT M9 mom9p2
CONNECT M9 mom9plus
CONNECT MD_OD_N MD_OD_N_SRM
CONNECT MD_OD_N MD_OD_P
CONNECT MD_OD_N MD_OD_P_SRM
CONNECT MD_OD_N MD_STI_SRM
CONNECT MD_OD_N tndiff BY n_odtap
CONNECT MD_OD_N tndiff_bjt BY n_odtap_bjt
CONNECT MD_OD_N tndiff_dio BY n_odtap
CONNECT MD_OD_N tndiff_sdi BY n_odtap
CONNECT MD_OD_N_SRM MD_STI_SRM
CONNECT MD_OD_N_SRM tndiff BY n_odtap_srm
CONNECT MD_OD_N_SRM tndiff_bjt BY n_odtap_srm
CONNECT MD_OD_N_SRM tndiff_dio BY n_odtap_srm
CONNECT MD_OD_P MD_OD_N_SRM
CONNECT MD_OD_P MD_OD_P_SRM
CONNECT MD_OD_P MD_STI_SRM
CONNECT MD_OD_P tpdiff BY p_odtap
CONNECT MD_OD_P tpdiff_bjt BY p_odtap_bjt
CONNECT MD_OD_P tpdiff_dio BY p_odtap
CONNECT MD_OD_P_SRM MD_OD_N_SRM
CONNECT MD_OD_P_SRM MD_STI_SRM
CONNECT MD_OD_P_SRM tpdiff BY p_odtap_srm
CONNECT MD_OD_P_SRM tpdiff_bjt BY p_odtap_srm
CONNECT MD_OD_P_SRM tpdiff_dio BY p_odtap_srm
CONNECT MD_STI MD_OD_N
CONNECT MD_STI MD_OD_N_SRM
CONNECT MD_STI MD_OD_P
CONNECT MD_STI MD_OD_P_SRM
CONNECT MD_STI MD_STI_SRM
CONNECT MP MD_OD_N_SRM BY MP_MD_TAP
CONNECT MP MD_OD_P_SRM BY MP_MD_TAP
CONNECT MP MD_STI_SRM BY MP_MD_TAP
CONNECT MPC M18 BY RV_MTOP_MPC
CONNECT MPC_LV_1 BPC_HV1_1 BY RV_BPC_BOT_MPC
CONNECT MPC_LV_1 BPC_LVHV_DMY_1 BY RV_BPC_BOT_MPC
CONNECT MPC_LV_1 BPC_LV_1 BY RV_BPC_BOT_MPC
CONNECT MPC_LV_1 M18 BY RV_MTOP_MPC
CONNECT MPC_LV_2 BPC_HV2_2 BY RV_BPC_BOT_MPC
CONNECT MPC_LV_2 BPC_LVHV_DMY_2 BY RV_BPC_BOT_MPC
CONNECT MPC_LV_2 BPC_LV_2 BY RV_BPC_BOT_MPC
CONNECT MPC_LV_2 M18 BY RV_MTOP_MPC
CONNECT MPC_LV_DMY_1 BPC_HV1_1 BY RV_BPC_BOT_MPC
CONNECT MPC_LV_DMY_1 BPC_LVHV_DMY_1 BY RV_BPC_BOT_MPC
CONNECT MPC_LV_DMY_1 BPC_LV_1 BY RV_BPC_BOT_MPC
CONNECT MPC_LV_DMY_1 M18 BY RV_MTOP_MPC
CONNECT MPC_LV_DMY_1 MPC_LV_1
CONNECT MPC_LV_DMY_2 BPC_HV2_2 BY RV_BPC_BOT_MPC
CONNECT MPC_LV_DMY_2 BPC_LVHV_DMY_2 BY RV_BPC_BOT_MPC
CONNECT MPC_LV_DMY_2 BPC_LV_2 BY RV_BPC_BOT_MPC
CONNECT MPC_LV_DMY_2 M18 BY RV_MTOP_MPC
CONNECT MPC_LV_DMY_2 MPC_LV_2
CONNECT TPC BPC BY RV_BPC_TPC
CONNECT TPC_GND_1 BPC_GND_1 BY RV_BPC_TPC
CONNECT TPC_GND_1 BPC_GND_DMY_1 BY RV_BPC_TPC
CONNECT TPC_GND_1 M18 BY RV_MTOP_TPC
CONNECT TPC_GND_2 BPC_GND_2 BY RV_BPC_TPC
CONNECT TPC_GND_2 BPC_GND_DMY_2 BY RV_BPC_TPC
CONNECT TPC_GND_2 M18 BY RV_MTOP_TPC
CONNECT TPC_GND_DMY_1 BPC_GND_1 BY RV_BPC_TPC
CONNECT TPC_GND_DMY_1 BPC_GND_DMY_1 BY RV_BPC_TPC
CONNECT TPC_GND_DMY_1 M18 BY RV_MTOP_TPC
CONNECT TPC_GND_DMY_1 TPC_GND_1
CONNECT TPC_GND_DMY_2 BPC_GND_2 BY RV_BPC_TPC
CONNECT TPC_GND_DMY_2 BPC_GND_DMY_2 BY RV_BPC_TPC
CONNECT TPC_GND_DMY_2 M18 BY RV_MTOP_TPC
CONNECT TPC_GND_DMY_2 TPC_GND_2
CONNECT VD2 MD_OD_N BY VD2_MD_TAP
CONNECT VD2 MD_OD_N_SRM BY VD2_MD_TAP
CONNECT VD2 MD_OD_P BY VD2_MD_TAP
CONNECT VD2 MD_OD_P_SRM BY VD2_MD_TAP
CONNECT VD2 MD_STI BY VD2_MD_TAP
CONNECT VD2 MD_STI_SRM BY VD2_MD_TAP
CONNECT cnbase1 tndiff BY nplug
CONNECT cnbase1 tndiff_bjt BY nplug
CONNECT mom10_ary_minus M11 BY VIA10
CONNECT mom10_ary_minus M9 BY VIA9
CONNECT mom10_ary_plus M11 BY VIA10
CONNECT mom10_ary_plus M9 BY VIA9
CONNECT mom11_ary_minus M10 BY VIA10
CONNECT mom11_ary_minus M12 BY VIA11
CONNECT mom11_ary_plus M10 BY VIA10
CONNECT mom11_ary_plus M12 BY VIA11
CONNECT mom12_ary_minus M11 BY VIA11
CONNECT mom12_ary_minus M13 BY VIA12
CONNECT mom12_ary_plus M11 BY VIA11
CONNECT mom12_ary_plus M13 BY VIA12
CONNECT mom2_ary_minus_b M1_A BY VIA1
CONNECT mom2_ary_minus_b M1_B BY VIA1
CONNECT mom2_ary_minus_b M3 BY VIA2
CONNECT mom2_ary_plus_a M1_A BY VIA1
CONNECT mom2_ary_plus_a M1_B BY VIA1
CONNECT mom2_ary_plus_a M3 BY VIA2
CONNECT mom3_ary_minus M2_A BY VIA2
CONNECT mom3_ary_minus M2_B BY VIA2
CONNECT mom3_ary_minus M4 BY VIA3
CONNECT mom3_ary_plus M2_A BY VIA2
CONNECT mom3_ary_plus M2_B BY VIA2
CONNECT mom3_ary_plus M4 BY VIA3
CONNECT mom4_ary_minus M3 BY VIA3
CONNECT mom4_ary_minus M5_A BY VIA4
CONNECT mom4_ary_minus M5_B BY VIA4
CONNECT mom4_ary_plus M3 BY VIA3
CONNECT mom4_ary_plus M5_A BY VIA4
CONNECT mom4_ary_plus M5_B BY VIA4
CONNECT mom5_ary_minus_b M4 BY VIA4
CONNECT mom5_ary_minus_b M6 BY VIA5
CONNECT mom5_ary_plus_a M4 BY VIA4
CONNECT mom5_ary_plus_a M6 BY VIA5
CONNECT mom6_ary_minus M5_A BY VIA5
CONNECT mom6_ary_minus M5_B BY VIA5
CONNECT mom6_ary_minus M7 BY VIA6
CONNECT mom6_ary_plus M5_A BY VIA5
CONNECT mom6_ary_plus M5_B BY VIA5
CONNECT mom6_ary_plus M7 BY VIA6
CONNECT mom7_ary_minus M6 BY VIA6
CONNECT mom7_ary_minus M8 BY VIA7
CONNECT mom7_ary_plus M6 BY VIA6
CONNECT mom7_ary_plus M8 BY VIA7
CONNECT mom8_ary_minus M7 BY VIA7
CONNECT mom8_ary_minus M9 BY VIA8
CONNECT mom8_ary_plus M7 BY VIA7
CONNECT mom8_ary_plus M9 BY VIA8
CONNECT mom9_ary_minus M10 BY VIA9
CONNECT mom9_ary_minus M8 BY VIA8
CONNECT mom9_ary_plus M10 BY VIA9
CONNECT mom9_ary_plus M8 BY VIA8
CONNECT n_fpoly_elvt M0_A BY VG
CONNECT n_fpoly_elvt M0_B BY VG
CONNECT n_fpoly_elvt n_fpoly_lvtll
CONNECT n_fpoly_elvt n_fpoly_srm
CONNECT n_fpoly_elvt n_fpoly_ulvtll
CONNECT n_fpoly_elvt n_gpoly_elvt
CONNECT n_fpoly_elvt n_pode_elvt
CONNECT n_fpoly_elvt p_fpoly_elvt
CONNECT n_fpoly_elvt p_fpoly_lvtll
CONNECT n_fpoly_elvt p_fpoly_srm
CONNECT n_fpoly_elvt p_fpoly_ulvtll
CONNECT n_fpoly_io M0_A BY VG
CONNECT n_fpoly_io M0_B BY VG
CONNECT n_fpoly_io n_gpoly_io
CONNECT n_fpoly_io n_gpoly_nocg_io
CONNECT n_fpoly_io n_pode_io
CONNECT n_fpoly_io p_fpoly_io
CONNECT n_fpoly_lvt M0_A BY VG
CONNECT n_fpoly_lvt M0_B BY VG
CONNECT n_fpoly_lvt n_fpoly_elvt
CONNECT n_fpoly_lvt n_fpoly_lvtll
CONNECT n_fpoly_lvt n_fpoly_srm
CONNECT n_fpoly_lvt n_fpoly_ulvt
CONNECT n_fpoly_lvt n_fpoly_ulvtll
CONNECT n_fpoly_lvt n_gpoly_lvt
CONNECT n_fpoly_lvt n_gpoly_nocg_lvt
CONNECT n_fpoly_lvt n_pode_lvt
CONNECT n_fpoly_lvt p_fpoly_elvt
CONNECT n_fpoly_lvt p_fpoly_lvt
CONNECT n_fpoly_lvt p_fpoly_lvtll
CONNECT n_fpoly_lvt p_fpoly_srm
CONNECT n_fpoly_lvt p_fpoly_ulvt
CONNECT n_fpoly_lvt p_fpoly_ulvtll
CONNECT n_fpoly_lvtll M0_A BY VG
CONNECT n_fpoly_lvtll M0_B BY VG
CONNECT n_fpoly_lvtll n_fpoly_srm
CONNECT n_fpoly_lvtll n_fpoly_ulvtll
CONNECT n_fpoly_lvtll n_gpoly_lvtll
CONNECT n_fpoly_lvtll n_pode_lvtll
CONNECT n_fpoly_lvtll p_fpoly_lvtll
CONNECT n_fpoly_lvtll p_fpoly_srm
CONNECT n_fpoly_lvtll p_fpoly_ulvtll
CONNECT n_fpoly_srm M0_A BY VG
CONNECT n_fpoly_srm M0_B BY VG
CONNECT n_fpoly_srm MP BY VG_MP
CONNECT n_fpoly_srm n_gpoly_srm
CONNECT n_fpoly_srm p_fpoly_srm
CONNECT n_fpoly_svt M0_A BY VG
CONNECT n_fpoly_svt M0_B BY VG
CONNECT n_fpoly_svt n_fpoly_elvt
CONNECT n_fpoly_svt n_fpoly_lvt
CONNECT n_fpoly_svt n_fpoly_lvtll
CONNECT n_fpoly_svt n_fpoly_srm
CONNECT n_fpoly_svt n_fpoly_ulvt
CONNECT n_fpoly_svt n_fpoly_ulvtll
CONNECT n_fpoly_svt n_gpoly_svt
CONNECT n_fpoly_svt n_pode_svt
CONNECT n_fpoly_svt p_fpoly_elvt
CONNECT n_fpoly_svt p_fpoly_lvt
CONNECT n_fpoly_svt p_fpoly_lvtll
CONNECT n_fpoly_svt p_fpoly_srm
CONNECT n_fpoly_svt p_fpoly_svt
CONNECT n_fpoly_svt p_fpoly_ulvt
CONNECT n_fpoly_svt p_fpoly_ulvtll
CONNECT n_fpoly_ulvt M0_A BY VG
CONNECT n_fpoly_ulvt M0_B BY VG
CONNECT n_fpoly_ulvt n_fpoly_elvt
CONNECT n_fpoly_ulvt n_fpoly_lvtll
CONNECT n_fpoly_ulvt n_fpoly_srm
CONNECT n_fpoly_ulvt n_fpoly_ulvtll
CONNECT n_fpoly_ulvt n_gpoly_ulvt
CONNECT n_fpoly_ulvt n_pode_ulvt
CONNECT n_fpoly_ulvt p_fpoly_elvt
CONNECT n_fpoly_ulvt p_fpoly_lvtll
CONNECT n_fpoly_ulvt p_fpoly_srm
CONNECT n_fpoly_ulvt p_fpoly_ulvt
CONNECT n_fpoly_ulvt p_fpoly_ulvtll
CONNECT n_fpoly_ulvtll M0_A BY VG
CONNECT n_fpoly_ulvtll M0_B BY VG
CONNECT n_fpoly_ulvtll n_fpoly_srm
CONNECT n_fpoly_ulvtll n_gpoly_ulvtll
CONNECT n_fpoly_ulvtll n_pode_ulvtll
CONNECT n_fpoly_ulvtll p_fpoly_srm
CONNECT n_fpoly_ulvtll p_fpoly_ulvtll
CONNECT n_gpoly_elvt M0_A BY VG
CONNECT n_gpoly_elvt M0_B BY VG
CONNECT n_gpoly_elvt n_pode_elvt
CONNECT n_gpoly_io M0_A BY VG
CONNECT n_gpoly_io M0_B BY VG
CONNECT n_gpoly_io n_pode_io
CONNECT n_gpoly_lvt M0_A BY VG
CONNECT n_gpoly_lvt M0_B BY VG
CONNECT n_gpoly_lvt n_pode_lvt
CONNECT n_gpoly_lvtll M0_A BY VG
CONNECT n_gpoly_lvtll M0_B BY VG
CONNECT n_gpoly_lvtll n_pode_lvtll
CONNECT n_gpoly_nocg_io M0_A BY VG
CONNECT n_gpoly_nocg_io M0_B BY VG
CONNECT n_gpoly_nocg_io n_pode_io
CONNECT n_gpoly_nocg_lvt M0_A BY VG
CONNECT n_gpoly_nocg_lvt M0_B BY VG
CONNECT n_gpoly_nocg_lvt n_pode_lvt
CONNECT n_gpoly_srm M0_A BY VG
CONNECT n_gpoly_srm M0_B BY VG
CONNECT n_gpoly_srm MP BY VG_MP
CONNECT n_gpoly_svt M0_A BY VG
CONNECT n_gpoly_svt M0_B BY VG
CONNECT n_gpoly_svt n_pode_svt
CONNECT n_gpoly_ulvt M0_A BY VG
CONNECT n_gpoly_ulvt M0_B BY VG
CONNECT n_gpoly_ulvt n_pode_ulvt
CONNECT n_gpoly_ulvtll M0_A BY VG
CONNECT n_gpoly_ulvtll M0_B BY VG
CONNECT n_gpoly_ulvtll n_pode_ulvtll
CONNECT n_pode_elvt M0_A BY VG
CONNECT n_pode_elvt M0_B BY VG
CONNECT n_pode_io M0_A BY VG
CONNECT n_pode_io M0_B BY VG
CONNECT n_pode_lvt M0_A BY VG
CONNECT n_pode_lvt M0_B BY VG
CONNECT n_pode_lvtll M0_A BY VG
CONNECT n_pode_lvtll M0_B BY VG
CONNECT n_pode_svt M0_A BY VG
CONNECT n_pode_svt M0_B BY VG
CONNECT n_pode_ulvt M0_A BY VG
CONNECT n_pode_ulvt M0_B BY VG
CONNECT n_pode_ulvtll M0_A BY VG
CONNECT n_pode_ulvtll M0_B BY VG
CONNECT nch_12_mac_gate M0_A BY VG
CONNECT nch_12_mac_gate M0_B BY VG
CONNECT nch_12_mac_gate_dnw M0_A BY VG
CONNECT nch_12_mac_gate_dnw M0_B BY VG
CONNECT nch_eflvt_mac_gate M0_A BY VG
CONNECT nch_eflvt_mac_gate M0_B BY VG
CONNECT nch_eflvt_mac_gate_dnw M0_A BY VG
CONNECT nch_eflvt_mac_gate_dnw M0_B BY VG
CONNECT nch_efsvt_mac_gate M0_A BY VG
CONNECT nch_efsvt_mac_gate M0_B BY VG
CONNECT nch_efsvt_mac_gate_dnw M0_A BY VG
CONNECT nch_efsvt_mac_gate_dnw M0_B BY VG
CONNECT nch_elvt_mac_gate M0_A BY VG
CONNECT nch_elvt_mac_gate M0_B BY VG
CONNECT nch_elvt_mac_gate_dnw M0_A BY VG
CONNECT nch_elvt_mac_gate_dnw M0_B BY VG
CONNECT nch_lvt_mac_gate M0_A BY VG
CONNECT nch_lvt_mac_gate M0_B BY VG
CONNECT nch_lvt_mac_gate_dnw M0_A BY VG
CONNECT nch_lvt_mac_gate_dnw M0_B BY VG
CONNECT nch_lvtll_mac_gate M0_A BY VG
CONNECT nch_lvtll_mac_gate M0_B BY VG
CONNECT nch_lvtll_mac_gate_dnw M0_A BY VG
CONNECT nch_lvtll_mac_gate_dnw M0_B BY VG
CONNECT nch_mpode12_mac_gate M0_A BY VG
CONNECT nch_mpode12_mac_gate M0_B BY VG
CONNECT nch_mpodeelvt_mac_gate M0_A BY VG
CONNECT nch_mpodeelvt_mac_gate M0_B BY VG
CONNECT nch_mpodelvt_mac_gate M0_A BY VG
CONNECT nch_mpodelvt_mac_gate M0_B BY VG
CONNECT nch_mpodelvtll_mac_gate M0_A BY VG
CONNECT nch_mpodelvtll_mac_gate M0_B BY VG
CONNECT nch_mpodesvt_mac_gate M0_A BY VG
CONNECT nch_mpodesvt_mac_gate M0_B BY VG
CONNECT nch_mpodeulvt_mac_gate M0_A BY VG
CONNECT nch_mpodeulvt_mac_gate M0_B BY VG
CONNECT nch_mpodeulvtll_mac_gate M0_A BY VG
CONNECT nch_mpodeulvtll_mac_gate M0_B BY VG
CONNECT nch_svt_mac_gate M0_A BY VG
CONNECT nch_svt_mac_gate M0_B BY VG
CONNECT nch_svt_mac_gate_dnw M0_A BY VG
CONNECT nch_svt_mac_gate_dnw M0_B BY VG
CONNECT nch_ulvt_mac_gate M0_A BY VG
CONNECT nch_ulvt_mac_gate M0_B BY VG
CONNECT nch_ulvt_mac_gate_dnw M0_A BY VG
CONNECT nch_ulvt_mac_gate_dnw M0_B BY VG
CONNECT nch_ulvtll_mac_gate M0_A BY VG
CONNECT nch_ulvtll_mac_gate M0_B BY VG
CONNECT nch_ulvtll_mac_gate_dnw M0_A BY VG
CONNECT nch_ulvtll_mac_gate_dnw M0_B BY VG
CONNECT ngate_hia12_mac M0_A BY VG
CONNECT ngate_hia12_mac M0_B BY VG
CONNECT ngate_pd_10trpsr_mac M0_A BY VG
CONNECT ngate_pd_10trpsr_mac M0_B BY VG
CONNECT ngate_pd_10trpsr_mac MP BY VG_MP
CONNECT ngate_pd_10tsr_mac M0_A BY VG
CONNECT ngate_pd_10tsr_mac M0_B BY VG
CONNECT ngate_pd_10tsr_mac MP BY VG_MP
CONNECT ngate_pd_8trpsr_mac M0_A BY VG
CONNECT ngate_pd_8trpsr_mac M0_B BY VG
CONNECT ngate_pd_8trpsr_mac MP BY VG_MP
CONNECT ngate_pd_8tsr_mac M0_A BY VG
CONNECT ngate_pd_8tsr_mac M0_B BY VG
CONNECT ngate_pd_8tsr_mac MP BY VG_MP
CONNECT ngate_pd_dpsr_mac M0_A BY VG
CONNECT ngate_pd_dpsr_mac M0_B BY VG
CONNECT ngate_pd_dpsr_mac MP BY VG_MP
CONNECT ngate_pd_hc8trpsr_mac M0_A BY VG
CONNECT ngate_pd_hc8trpsr_mac M0_B BY VG
CONNECT ngate_pd_hc8trpsr_mac MP BY VG_MP
CONNECT ngate_pd_hc8tsr_mac M0_A BY VG
CONNECT ngate_pd_hc8tsr_mac M0_B BY VG
CONNECT ngate_pd_hc8tsr_mac MP BY VG_MP
CONNECT ngate_pd_hcsr_mac M0_A BY VG
CONNECT ngate_pd_hcsr_mac M0_B BY VG
CONNECT ngate_pd_hcsr_mac MP BY VG_MP
CONNECT ngate_pd_hdsr_mac M0_A BY VG
CONNECT ngate_pd_hdsr_mac M0_B BY VG
CONNECT ngate_pd_hdsr_mac MP BY VG_MP
CONNECT ngate_pd_hshcsr_mac M0_A BY VG
CONNECT ngate_pd_hshcsr_mac M0_B BY VG
CONNECT ngate_pd_hshcsr_mac MP BY VG_MP
CONNECT ngate_pd_ulvtll10trpsr_mac M0_A BY VG
CONNECT ngate_pd_ulvtll10trpsr_mac M0_B BY VG
CONNECT ngate_pd_ulvtll10trpsr_mac MP BY VG_MP
CONNECT ngate_pd_ulvtll10tsr_mac M0_A BY VG
CONNECT ngate_pd_ulvtll10tsr_mac M0_B BY VG
CONNECT ngate_pd_ulvtll10tsr_mac MP BY VG_MP
CONNECT ngate_pd_ulvtll8trpsr_mac M0_A BY VG
CONNECT ngate_pd_ulvtll8trpsr_mac M0_B BY VG
CONNECT ngate_pd_ulvtll8trpsr_mac MP BY VG_MP
CONNECT ngate_pd_ulvtll8tsr_mac M0_A BY VG
CONNECT ngate_pd_ulvtll8tsr_mac M0_B BY VG
CONNECT ngate_pd_ulvtll8tsr_mac MP BY VG_MP
CONNECT ngate_pd_ulvtllhc8trpsr_mac M0_A BY VG
CONNECT ngate_pd_ulvtllhc8trpsr_mac M0_B BY VG
CONNECT ngate_pd_ulvtllhc8trpsr_mac MP BY VG_MP
CONNECT ngate_pd_ulvtllhc8tsr_mac M0_A BY VG
CONNECT ngate_pd_ulvtllhc8tsr_mac M0_B BY VG
CONNECT ngate_pd_ulvtllhc8tsr_mac MP BY VG_MP
CONNECT ngate_pg_10trpsr_mac M0_A BY VG
CONNECT ngate_pg_10trpsr_mac M0_B BY VG
CONNECT ngate_pg_10trpsr_mac MP BY VG_MP
CONNECT ngate_pg_10tsr_mac M0_A BY VG
CONNECT ngate_pg_10tsr_mac M0_B BY VG
CONNECT ngate_pg_10tsr_mac MP BY VG_MP
CONNECT ngate_pg_8trpsr_mac M0_A BY VG
CONNECT ngate_pg_8trpsr_mac M0_B BY VG
CONNECT ngate_pg_8trpsr_mac MP BY VG_MP
CONNECT ngate_pg_8tsr_mac M0_A BY VG
CONNECT ngate_pg_8tsr_mac M0_B BY VG
CONNECT ngate_pg_8tsr_mac MP BY VG_MP
CONNECT ngate_pg_dpsr_mac M0_A BY VG
CONNECT ngate_pg_dpsr_mac M0_B BY VG
CONNECT ngate_pg_dpsr_mac MP BY VG_MP
CONNECT ngate_pg_hc8trpsr_mac M0_A BY VG
CONNECT ngate_pg_hc8trpsr_mac M0_B BY VG
CONNECT ngate_pg_hc8trpsr_mac MP BY VG_MP
CONNECT ngate_pg_hc8tsr_mac M0_A BY VG
CONNECT ngate_pg_hc8tsr_mac M0_B BY VG
CONNECT ngate_pg_hc8tsr_mac MP BY VG_MP
CONNECT ngate_pg_hcsr_mac M0_A BY VG
CONNECT ngate_pg_hcsr_mac M0_B BY VG
CONNECT ngate_pg_hcsr_mac MP BY VG_MP
CONNECT ngate_pg_hdsr_mac M0_A BY VG
CONNECT ngate_pg_hdsr_mac M0_B BY VG
CONNECT ngate_pg_hdsr_mac MP BY VG_MP
CONNECT ngate_pg_hshcsr_mac M0_A BY VG
CONNECT ngate_pg_hshcsr_mac M0_B BY VG
CONNECT ngate_pg_hshcsr_mac MP BY VG_MP
CONNECT ngate_pg_ulvtll10trpsr_mac M0_A BY VG
CONNECT ngate_pg_ulvtll10trpsr_mac M0_B BY VG
CONNECT ngate_pg_ulvtll10trpsr_mac MP BY VG_MP
CONNECT ngate_pg_ulvtll10tsr_mac M0_A BY VG
CONNECT ngate_pg_ulvtll10tsr_mac M0_B BY VG
CONNECT ngate_pg_ulvtll10tsr_mac MP BY VG_MP
CONNECT ngate_pg_ulvtll8trpsr_mac M0_A BY VG
CONNECT ngate_pg_ulvtll8trpsr_mac M0_B BY VG
CONNECT ngate_pg_ulvtll8trpsr_mac MP BY VG_MP
CONNECT ngate_pg_ulvtll8tsr_mac M0_A BY VG
CONNECT ngate_pg_ulvtll8tsr_mac M0_B BY VG
CONNECT ngate_pg_ulvtll8tsr_mac MP BY VG_MP
CONNECT ngate_pg_ulvtllhc8trpsr_mac M0_A BY VG
CONNECT ngate_pg_ulvtllhc8trpsr_mac M0_B BY VG
CONNECT ngate_pg_ulvtllhc8trpsr_mac MP BY VG_MP
CONNECT ngate_pg_ulvtllhc8tsr_mac M0_A BY VG
CONNECT ngate_pg_ulvtllhc8tsr_mac M0_B BY VG
CONNECT ngate_pg_ulvtllhc8tsr_mac MP BY VG_MP
CONNECT npode_12_mac_gate M0_A BY VG
CONNECT npode_12_mac_gate M0_B BY VG
CONNECT npode_12_mac_gate nch_12_mac_gate
CONNECT npode_12_mac_gate nch_12_mac_gate_dnw
CONNECT npode_12_mac_gate nch_mpode12_mac_gate
CONNECT npode_eflvt_mac_gate M0_A BY VG
CONNECT npode_eflvt_mac_gate M0_B BY VG
CONNECT npode_eflvt_mac_gate nch_eflvt_mac_gate
CONNECT npode_eflvt_mac_gate nch_eflvt_mac_gate_dnw
CONNECT npode_efsvt_mac_gate M0_A BY VG
CONNECT npode_efsvt_mac_gate M0_B BY VG
CONNECT npode_efsvt_mac_gate nch_efsvt_mac_gate
CONNECT npode_efsvt_mac_gate nch_efsvt_mac_gate_dnw
CONNECT npode_elvt_mac_gate M0_A BY VG
CONNECT npode_elvt_mac_gate M0_B BY VG
CONNECT npode_elvt_mac_gate nch_elvt_mac_gate
CONNECT npode_elvt_mac_gate nch_elvt_mac_gate_dnw
CONNECT npode_elvt_mac_gate nch_mpodeelvt_mac_gate
CONNECT npode_lvt_mac_gate M0_A BY VG
CONNECT npode_lvt_mac_gate M0_B BY VG
CONNECT npode_lvt_mac_gate nch_lvt_mac_gate
CONNECT npode_lvt_mac_gate nch_lvt_mac_gate_dnw
CONNECT npode_lvt_mac_gate nch_mpodelvt_mac_gate
CONNECT npode_lvtll_mac_gate M0_A BY VG
CONNECT npode_lvtll_mac_gate M0_B BY VG
CONNECT npode_lvtll_mac_gate nch_lvtll_mac_gate
CONNECT npode_lvtll_mac_gate nch_lvtll_mac_gate_dnw
CONNECT npode_lvtll_mac_gate nch_mpodelvtll_mac_gate
CONNECT npode_svt_mac_gate M0_A BY VG
CONNECT npode_svt_mac_gate M0_B BY VG
CONNECT npode_svt_mac_gate nch_mpodesvt_mac_gate
CONNECT npode_svt_mac_gate nch_svt_mac_gate
CONNECT npode_svt_mac_gate nch_svt_mac_gate_dnw
CONNECT npode_ulvt_mac_gate M0_A BY VG
CONNECT npode_ulvt_mac_gate M0_B BY VG
CONNECT npode_ulvt_mac_gate nch_mpodeulvt_mac_gate
CONNECT npode_ulvt_mac_gate nch_ulvt_mac_gate
CONNECT npode_ulvt_mac_gate nch_ulvt_mac_gate_dnw
CONNECT npode_ulvtll_mac_gate M0_A BY VG
CONNECT npode_ulvtll_mac_gate M0_B BY VG
CONNECT npode_ulvtll_mac_gate nch_mpodeulvtll_mac_gate
CONNECT npode_ulvtll_mac_gate nch_ulvtll_mac_gate
CONNECT npode_ulvtll_mac_gate nch_ulvtll_mac_gate_dnw
CONNECT p_fpoly_elvt M0_A BY VG
CONNECT p_fpoly_elvt M0_B BY VG
CONNECT p_fpoly_elvt n_fpoly_lvtll
CONNECT p_fpoly_elvt n_fpoly_srm
CONNECT p_fpoly_elvt n_fpoly_ulvtll
CONNECT p_fpoly_elvt p_fpoly_lvtll
CONNECT p_fpoly_elvt p_fpoly_srm
CONNECT p_fpoly_elvt p_fpoly_ulvtll
CONNECT p_fpoly_elvt p_gpoly_elvt
CONNECT p_fpoly_elvt p_pode_elvt
CONNECT p_fpoly_io M0_A BY VG
CONNECT p_fpoly_io M0_B BY VG
CONNECT p_fpoly_io p_gpoly_io
CONNECT p_fpoly_io p_gpoly_nocg_io
CONNECT p_fpoly_io p_pode_io
CONNECT p_fpoly_lvt M0_A BY VG
CONNECT p_fpoly_lvt M0_B BY VG
CONNECT p_fpoly_lvt n_fpoly_elvt
CONNECT p_fpoly_lvt n_fpoly_lvtll
CONNECT p_fpoly_lvt n_fpoly_srm
CONNECT p_fpoly_lvt n_fpoly_ulvt
CONNECT p_fpoly_lvt n_fpoly_ulvtll
CONNECT p_fpoly_lvt p_fpoly_elvt
CONNECT p_fpoly_lvt p_fpoly_lvtll
CONNECT p_fpoly_lvt p_fpoly_srm
CONNECT p_fpoly_lvt p_fpoly_ulvt
CONNECT p_fpoly_lvt p_fpoly_ulvtll
CONNECT p_fpoly_lvt p_gpoly_lvt
CONNECT p_fpoly_lvt p_gpoly_nocg_lvt
CONNECT p_fpoly_lvt p_pode_lvt
CONNECT p_fpoly_lvtll M0_A BY VG
CONNECT p_fpoly_lvtll M0_B BY VG
CONNECT p_fpoly_lvtll n_fpoly_srm
CONNECT p_fpoly_lvtll n_fpoly_ulvtll
CONNECT p_fpoly_lvtll p_fpoly_srm
CONNECT p_fpoly_lvtll p_fpoly_ulvtll
CONNECT p_fpoly_lvtll p_gpoly_lvtll
CONNECT p_fpoly_lvtll p_pode_lvtll
CONNECT p_fpoly_srm M0_A BY VG
CONNECT p_fpoly_srm M0_B BY VG
CONNECT p_fpoly_srm MP BY VG_MP
CONNECT p_fpoly_srm p_gpoly_srm
CONNECT p_fpoly_svt M0_A BY VG
CONNECT p_fpoly_svt M0_B BY VG
CONNECT p_fpoly_svt n_fpoly_elvt
CONNECT p_fpoly_svt n_fpoly_lvt
CONNECT p_fpoly_svt n_fpoly_lvtll
CONNECT p_fpoly_svt n_fpoly_srm
CONNECT p_fpoly_svt n_fpoly_ulvt
CONNECT p_fpoly_svt n_fpoly_ulvtll
CONNECT p_fpoly_svt p_fpoly_elvt
CONNECT p_fpoly_svt p_fpoly_lvt
CONNECT p_fpoly_svt p_fpoly_lvtll
CONNECT p_fpoly_svt p_fpoly_srm
CONNECT p_fpoly_svt p_fpoly_ulvt
CONNECT p_fpoly_svt p_fpoly_ulvtll
CONNECT p_fpoly_svt p_gpoly_svt
CONNECT p_fpoly_svt p_pode_svt
CONNECT p_fpoly_ulvt M0_A BY VG
CONNECT p_fpoly_ulvt M0_B BY VG
CONNECT p_fpoly_ulvt n_fpoly_elvt
CONNECT p_fpoly_ulvt n_fpoly_lvtll
CONNECT p_fpoly_ulvt n_fpoly_srm
CONNECT p_fpoly_ulvt n_fpoly_ulvtll
CONNECT p_fpoly_ulvt p_fpoly_elvt
CONNECT p_fpoly_ulvt p_fpoly_lvtll
CONNECT p_fpoly_ulvt p_fpoly_srm
CONNECT p_fpoly_ulvt p_fpoly_ulvtll
CONNECT p_fpoly_ulvt p_gpoly_ulvt
CONNECT p_fpoly_ulvt p_pode_ulvt
CONNECT p_fpoly_ulvtll M0_A BY VG
CONNECT p_fpoly_ulvtll M0_B BY VG
CONNECT p_fpoly_ulvtll n_fpoly_srm
CONNECT p_fpoly_ulvtll p_fpoly_srm
CONNECT p_fpoly_ulvtll p_gpoly_ulvtll
CONNECT p_fpoly_ulvtll p_pode_ulvtll
CONNECT p_gpoly_elvt M0_A BY VG
CONNECT p_gpoly_elvt M0_B BY VG
CONNECT p_gpoly_elvt p_pode_elvt
CONNECT p_gpoly_io M0_A BY VG
CONNECT p_gpoly_io M0_B BY VG
CONNECT p_gpoly_io p_pode_io
CONNECT p_gpoly_lvt M0_A BY VG
CONNECT p_gpoly_lvt M0_B BY VG
CONNECT p_gpoly_lvt p_pode_lvt
CONNECT p_gpoly_lvtll M0_A BY VG
CONNECT p_gpoly_lvtll M0_B BY VG
CONNECT p_gpoly_lvtll p_pode_lvtll
CONNECT p_gpoly_nocg_io M0_A BY VG
CONNECT p_gpoly_nocg_io M0_B BY VG
CONNECT p_gpoly_nocg_io p_pode_io
CONNECT p_gpoly_nocg_lvt M0_A BY VG
CONNECT p_gpoly_nocg_lvt M0_B BY VG
CONNECT p_gpoly_nocg_lvt p_pode_lvt
CONNECT p_gpoly_srm M0_A BY VG
CONNECT p_gpoly_srm M0_B BY VG
CONNECT p_gpoly_srm MP BY VG_MP
CONNECT p_gpoly_svt M0_A BY VG
CONNECT p_gpoly_svt M0_B BY VG
CONNECT p_gpoly_svt p_pode_svt
CONNECT p_gpoly_ulvt M0_A BY VG
CONNECT p_gpoly_ulvt M0_B BY VG
CONNECT p_gpoly_ulvt p_pode_ulvt
CONNECT p_gpoly_ulvtll M0_A BY VG
CONNECT p_gpoly_ulvtll M0_B BY VG
CONNECT p_gpoly_ulvtll p_pode_ulvtll
CONNECT p_pode_elvt M0_A BY VG
CONNECT p_pode_elvt M0_B BY VG
CONNECT p_pode_io M0_A BY VG
CONNECT p_pode_io M0_B BY VG
CONNECT p_pode_lvt M0_A BY VG
CONNECT p_pode_lvt M0_B BY VG
CONNECT p_pode_lvtll M0_A BY VG
CONNECT p_pode_lvtll M0_B BY VG
CONNECT p_pode_svt M0_A BY VG
CONNECT p_pode_svt M0_B BY VG
CONNECT p_pode_ulvt M0_A BY VG
CONNECT p_pode_ulvt M0_B BY VG
CONNECT p_pode_ulvtll M0_A BY VG
CONNECT p_pode_ulvtll M0_B BY VG
CONNECT pch_12_mac_gate M0_A BY VG
CONNECT pch_12_mac_gate M0_B BY VG
CONNECT pch_eflvt_mac_gate M0_A BY VG
CONNECT pch_eflvt_mac_gate M0_B BY VG
CONNECT pch_efsvt_mac_gate M0_A BY VG
CONNECT pch_efsvt_mac_gate M0_B BY VG
CONNECT pch_elvt_mac_gate M0_A BY VG
CONNECT pch_elvt_mac_gate M0_B BY VG
CONNECT pch_lvt_mac_gate M0_A BY VG
CONNECT pch_lvt_mac_gate M0_B BY VG
CONNECT pch_lvtll_mac_gate M0_A BY VG
CONNECT pch_lvtll_mac_gate M0_B BY VG
CONNECT pch_mpode12_mac_gate M0_A BY VG
CONNECT pch_mpode12_mac_gate M0_B BY VG
CONNECT pch_mpodeelvt_mac_gate M0_A BY VG
CONNECT pch_mpodeelvt_mac_gate M0_B BY VG
CONNECT pch_mpodelvt_mac_gate M0_A BY VG
CONNECT pch_mpodelvt_mac_gate M0_B BY VG
CONNECT pch_mpodelvtll_mac_gate M0_A BY VG
CONNECT pch_mpodelvtll_mac_gate M0_B BY VG
CONNECT pch_mpodesvt_mac_gate M0_A BY VG
CONNECT pch_mpodesvt_mac_gate M0_B BY VG
CONNECT pch_mpodeulvt_mac_gate M0_A BY VG
CONNECT pch_mpodeulvt_mac_gate M0_B BY VG
CONNECT pch_mpodeulvtll_mac_gate M0_A BY VG
CONNECT pch_mpodeulvtll_mac_gate M0_B BY VG
CONNECT pch_svt_mac_gate M0_A BY VG
CONNECT pch_svt_mac_gate M0_B BY VG
CONNECT pch_ulvt_mac_gate M0_A BY VG
CONNECT pch_ulvt_mac_gate M0_B BY VG
CONNECT pch_ulvtll_mac_gate M0_A BY VG
CONNECT pch_ulvtll_mac_gate M0_B BY VG
CONNECT pgate_pu_10tsr_mac M0_A BY VG
CONNECT pgate_pu_10tsr_mac M0_B BY VG
CONNECT pgate_pu_10tsr_mac MP BY VG_MP
CONNECT pgate_pu_8tsr_mac M0_A BY VG
CONNECT pgate_pu_8tsr_mac M0_B BY VG
CONNECT pgate_pu_8tsr_mac MP BY VG_MP
CONNECT pgate_pu_dpsr_mac M0_A BY VG
CONNECT pgate_pu_dpsr_mac M0_B BY VG
CONNECT pgate_pu_dpsr_mac MP BY VG_MP
CONNECT pgate_pu_hc8tsr_mac M0_A BY VG
CONNECT pgate_pu_hc8tsr_mac M0_B BY VG
CONNECT pgate_pu_hc8tsr_mac MP BY VG_MP
CONNECT pgate_pu_hcsr_mac M0_A BY VG
CONNECT pgate_pu_hcsr_mac M0_B BY VG
CONNECT pgate_pu_hcsr_mac MP BY VG_MP
CONNECT pgate_pu_hdsr_mac M0_A BY VG
CONNECT pgate_pu_hdsr_mac M0_B BY VG
CONNECT pgate_pu_hdsr_mac MP BY VG_MP
CONNECT pgate_pu_hshcsr_mac M0_A BY VG
CONNECT pgate_pu_hshcsr_mac M0_B BY VG
CONNECT pgate_pu_hshcsr_mac MP BY VG_MP
CONNECT pgate_pu_ulvtll10tsr_mac M0_A BY VG
CONNECT pgate_pu_ulvtll10tsr_mac M0_B BY VG
CONNECT pgate_pu_ulvtll10tsr_mac MP BY VG_MP
CONNECT pgate_pu_ulvtll8tsr_mac M0_A BY VG
CONNECT pgate_pu_ulvtll8tsr_mac M0_B BY VG
CONNECT pgate_pu_ulvtll8tsr_mac MP BY VG_MP
CONNECT pgate_pu_ulvtllhc8tsr_mac M0_A BY VG
CONNECT pgate_pu_ulvtllhc8tsr_mac M0_B BY VG
CONNECT pgate_pu_ulvtllhc8tsr_mac MP BY VG_MP
CONNECT ppode_12_mac_gate M0_A BY VG
CONNECT ppode_12_mac_gate M0_B BY VG
CONNECT ppode_12_mac_gate pch_12_mac_gate
CONNECT ppode_12_mac_gate pch_mpode12_mac_gate
CONNECT ppode_eflvt_mac_gate M0_A BY VG
CONNECT ppode_eflvt_mac_gate M0_B BY VG
CONNECT ppode_eflvt_mac_gate pch_eflvt_mac_gate
CONNECT ppode_efsvt_mac_gate M0_A BY VG
CONNECT ppode_efsvt_mac_gate M0_B BY VG
CONNECT ppode_efsvt_mac_gate pch_efsvt_mac_gate
CONNECT ppode_elvt_mac_gate M0_A BY VG
CONNECT ppode_elvt_mac_gate M0_B BY VG
CONNECT ppode_elvt_mac_gate pch_elvt_mac_gate
CONNECT ppode_elvt_mac_gate pch_mpodeelvt_mac_gate
CONNECT ppode_lvt_mac_gate M0_A BY VG
CONNECT ppode_lvt_mac_gate M0_B BY VG
CONNECT ppode_lvt_mac_gate pch_lvt_mac_gate
CONNECT ppode_lvt_mac_gate pch_mpodelvt_mac_gate
CONNECT ppode_lvtll_mac_gate M0_A BY VG
CONNECT ppode_lvtll_mac_gate M0_B BY VG
CONNECT ppode_lvtll_mac_gate pch_lvtll_mac_gate
CONNECT ppode_lvtll_mac_gate pch_mpodelvtll_mac_gate
CONNECT ppode_svt_mac_gate M0_A BY VG
CONNECT ppode_svt_mac_gate M0_B BY VG
CONNECT ppode_svt_mac_gate pch_mpodesvt_mac_gate
CONNECT ppode_svt_mac_gate pch_svt_mac_gate
CONNECT ppode_ulvt_mac_gate M0_A BY VG
CONNECT ppode_ulvt_mac_gate M0_B BY VG
CONNECT ppode_ulvt_mac_gate pch_mpodeulvt_mac_gate
CONNECT ppode_ulvt_mac_gate pch_ulvt_mac_gate
CONNECT ppode_ulvtll_mac_gate M0_A BY VG
CONNECT ppode_ulvtll_mac_gate M0_B BY VG
CONNECT ppode_ulvtll_mac_gate pch_mpodeulvtll_mac_gate
CONNECT ppode_ulvtll_mac_gate pch_ulvtll_mac_gate
CONNECT tndiff tiod
CONNECT tndiff tndiff_bjt
CONNECT tndiff tndiff_dio
CONNECT tndiff tndiff_sdi
CONNECT tndiff tpdiff
CONNECT tndiff_sdi tiod
CONNECT tpdiff tiod
CONNECT tpdiff tpdiff_bjt
CONNECT tpdiff tpdiff_dio
CONNECT vargt M0_A BY VG
CONNECT vargt M0_B BY VG
CONNECT vargt_12 M0_A BY VG
CONNECT vargt_12 M0_B BY VG
#IFNDEF CCI_DFM_RULE
CONNECT ntap tndiff
CONNECT ntap tndiff_RC
CONNECT ntap tndiff_bjt
CONNECT ntap tndiff_dio
CONNECT ntap tndiff_sdi
CONNECT ptap tpdiff
CONNECT ptap tpdiff_RC
CONNECT ptap tpdiff_bjt
CONNECT ptap tpdiff_dio
#ENDIF

#IFDEF CCI_DFM_RULE
CONNECT  tpdiff_dio psub BY pplug
CONNECT  nxwell DNW BY dnwc
CONNECT  tpdiff_bjt psub BY pplug
CONNECT  tpdiff_bjt coll1 BY pplug
CONNECT  tndiff_sdi nxwell BY nplug
CONNECT  tpdiff psub BY pplug
CONNECT  tpdiff coll1 BY pplug
CONNECT  tndiff_dio nxwell BY nplug
CONNECT  psub psub_term BY psub_term_plug
CONNECT  tndiff_bjt nxwell BY nplug
CONNECT  tndiff nxwell BY nplug
#ELSE
#IFNDEF NW_RING
  SCONNECT tpdiff_dio n_psub BY n_pplug
#ENDIF
SCONNECT tpdiff_dio psub BY pplug
SCONNECT nxwell DNW BY dnwc
#IFNDEF NW_RING
  SCONNECT tpdiff_bjt n_psub BY n_pplug
#ENDIF
SCONNECT tpdiff_bjt psub BY pplug
SCONNECT tpdiff_bjt coll1 BY pplug
SCONNECT tndiff_sdi nxwell BY nplug
#IFNDEF NW_RING
  SCONNECT tpdiff n_psub BY n_pplug
#ENDIF
SCONNECT tpdiff psub BY pplug
SCONNECT tpdiff coll1 BY pplug
SCONNECT tndiff_dio nxwell BY nplug
SCONNECT psub psub_term BY psub_term_plug
SCONNECT tndiff_bjt nxwell BY nplug
SCONNECT tndiff nxwell BY nplug
#ENDIF
/* Modify poly interconnect for CCI extraction */  
#IFDEF CCI_DFM_RULE
#IFDEF MULTI_DEVICE_EXTRACTION
OD_id = COPY OD
CONNECT OD_id
OD_p = DFM PROPERTY OD_id
    [ ODNET = NETID(OD_id) ]
#ENDIF
#ENDIF
all_mos_gates = ((ppode_efsvt_mac_gate OR (npode_efsvt_mac_gate OR (ppode_eflvt_mac_gate OR (npode_eflvt_mac_gate OR (ppode_12_mac_gate OR (ppode_ulvtll_mac_gate OR (ppode_lvtll_mac_gate OR (ppode_elvt_mac_gate OR (ppode_ulvt_mac_gate OR (ppode_lvt_mac_gate OR (ppode_svt_mac_gate OR (npode_12_mac_gate OR (npode_ulvtll_mac_gate OR (npode_lvtll_mac_gate OR (npode_elvt_mac_gate OR (npode_ulvt_mac_gate OR (npode_lvt_mac_gate OR (npode_svt_mac_gate OR (pch_mpode12_mac_gate OR (pch_mpodeulvtll_mac_gate OR (pch_mpodelvtll_mac_gate OR (pch_mpodeelvt_mac_gate OR (pch_mpodeulvt_mac_gate OR (pch_mpodelvt_mac_gate OR (pch_mpodesvt_mac_gate OR (nch_mpode12_mac_gate OR (nch_mpodeulvtll_mac_gate OR (nch_mpodelvtll_mac_gate OR (nch_mpodeelvt_mac_gate OR (nch_mpodeulvt_mac_gate OR (nch_mpodelvt_mac_gate OR (nch_mpodesvt_mac_gate OR (pgate_pu_dpsr_mac OR (ngate_pd_dpsr_mac OR (ngate_pg_dpsr_mac OR (ngate_pd_ulvtll10trpsr_mac OR (ngate_pg_ulvtll10trpsr_mac OR (pgate_pu_ulvtll10tsr_mac OR (ngate_pd_ulvtll10tsr_mac OR (ngate_pg_ulvtll10tsr_mac OR (ngate_pd_10trpsr_mac OR (ngate_pg_10trpsr_mac OR (pgate_pu_10tsr_mac OR (ngate_pd_10tsr_mac OR (ngate_pg_10tsr_mac OR (ngate_pd_ulvtllhc8trpsr_mac OR (ngate_pg_ulvtllhc8trpsr_mac OR (pgate_pu_ulvtllhc8tsr_mac OR (ngate_pd_ulvtllhc8tsr_mac OR (ngate_pg_ulvtllhc8tsr_mac OR (ngate_pd_ulvtll8trpsr_mac OR (ngate_pg_ulvtll8trpsr_mac OR (pgate_pu_ulvtll8tsr_mac OR (ngate_pd_ulvtll8tsr_mac OR (ngate_pg_ulvtll8tsr_mac OR (ngate_pd_hc8trpsr_mac OR (ngate_pg_hc8trpsr_mac OR (pgate_pu_hc8tsr_mac OR (ngate_pd_hc8tsr_mac OR (ngate_pg_hc8tsr_mac OR (ngate_pd_8trpsr_mac OR (ngate_pg_8trpsr_mac OR (pgate_pu_8tsr_mac OR (ngate_pd_8tsr_mac OR (ngate_pg_8tsr_mac OR (pgate_pu_hshcsr_mac OR (ngate_pd_hshcsr_mac OR (ngate_pg_hshcsr_mac OR (pgate_pu_hcsr_mac OR (ngate_pd_hcsr_mac OR (ngate_pg_hcsr_mac OR (pgate_pu_hdsr_mac OR (ngate_pd_hdsr_mac OR (ngate_pg_hdsr_mac OR (pch_efsvt_mac_gate OR (nch_efsvt_mac_gate OR (pch_eflvt_mac_gate OR (nch_eflvt_mac_gate OR (pch_12_mac_gate OR (pch_ulvtll_mac_gate OR (pch_lvtll_mac_gate OR (pch_elvt_mac_gate OR (pch_ulvt_mac_gate OR (pch_lvt_mac_gate OR (pch_svt_mac_gate OR (ngate_hia12_mac OR (nch_efsvt_mac_gate_dnw OR (nch_eflvt_mac_gate_dnw OR (nch_12_mac_gate_dnw OR (nch_ulvtll_mac_gate_dnw OR (nch_lvtll_mac_gate_dnw OR (nch_elvt_mac_gate_dnw OR (nch_ulvt_mac_gate_dnw OR (nch_lvt_mac_gate_dnw OR (nch_svt_mac_gate_dnw OR (nch_12_mac_gate OR (nch_ulvtll_mac_gate OR (nch_lvtll_mac_gate OR (nch_elvt_mac_gate OR (nch_ulvt_mac_gate OR (nch_svt_mac_gate OR nch_lvt_mac_gate))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) OR vargt) OR vargt_12
tndiff_gates = tndiff_all INTERACT all_mos_gates
tpdiff_gates = tpdiff_all INTERACT all_mos_gates

all_diode_form = COPY nwdio_r
tndiff_diode = tndiff_all INTERACT all_diode_form
tpdiff_diode = tpdiff_all INTERACT all_diode_form

all_rdiff_form = var_nw_rf12_nw OR (var_nw_rf_nw OR (var_nw_rf12 OR (var_nw_rf OR (ppode_efsvt_mac_gate_edge OR (npode_efsvt_mac_gate_edge OR (ppode_eflvt_mac_gate_edge OR (npode_eflvt_mac_gate_edge OR (ppode_12_mac_gate_edge OR (ppode_ulvtll_mac_gate_edge OR (ppode_lvtll_mac_gate_edge OR (ppode_elvt_mac_gate_edge OR (ppode_ulvt_mac_gate_edge OR (ppode_lvt_mac_gate_edge OR (ppode_svt_mac_gate_edge OR (npode_12_mac_gate_edge OR (npode_ulvtll_mac_gate_edge OR (npode_lvtll_mac_gate_edge OR (npode_elvt_mac_gate_edge OR (npode_ulvt_mac_gate_edge OR (npode_svt_mac_gate_edge OR npode_lvt_mac_gate_edge))))))))))))))))))))
tndiff_r = tndiff_all INTERACT all_rdiff_form
tpdiff_r = tpdiff_all INTERACT all_rdiff_form

tndiff_RC = tndiff_all NOT ((tndiff_gates OR tndiff_diode) OR tndiff_r)
tndiff = tndiff_all NOT tndiff_RC

tpdiff_RC = tpdiff_all NOT ((tpdiff_gates OR tpdiff_diode) OR tpdiff_r)
tpdiff = tpdiff_all NOT tpdiff_RC


 /* SPECIAL CONNECTIONS FOR CCI */ 

CONNECT tndiff tndiff_RC
CONNECT MD_OD_N tndiff_RC BY n_odtap 
CONNECT MD_OD_N_SRM tndiff_RC BY n_odtap_srm 
CONNECT cnbase1 tndiff_RC BY nplug 
CONNECT tndiff_RC tiod 
CONNECT tndiff_RC tndiff_bjt 
CONNECT tndiff_RC tndiff_dio 
CONNECT tndiff_RC tndiff_sdi 
CONNECT tndiff_RC tpdiff 

#IFDEF CCI_DFM_RULE
CONNECT tndiff_RC nxwell BY nplug 
#ELSE
SCONNECT tndiff_RC nxwell BY nplug 
#ENDIF
#IFDEF CCI_DFM_RULE
CONNECT tpdiff_RC coll1 BY pplug 
CONNECT tpdiff_RC psub BY pplug 
#ELSE
SCONNECT tpdiff_RC coll1 BY pplug 
#IFNDEF NW_RING
  SCONNECT tpdiff_RC n_psub BY n_pplug 
#ENDIF
SCONNECT tpdiff_RC psub BY pplug 
#ENDIF
CONNECT tpdiff tpdiff_RC
CONNECT tpdiff_RC tndiff_RC
CONNECT MD_OD_P tpdiff_RC BY p_odtap 
CONNECT MD_OD_P_SRM tpdiff_RC BY p_odtap_srm 
CONNECT tndiff tpdiff_RC 
CONNECT tpdiff_RC tiod 
CONNECT tpdiff_RC tpdiff_bjt 
CONNECT tpdiff_RC tpdiff_dio 

CONNECT nch_12_mac_gate_dnw n_fpoly_io
CONNECT nch_12_mac_gate n_fpoly_io
CONNECT nch_eflvt_mac_gate_dnw n_fpoly_lvt
CONNECT nch_eflvt_mac_gate n_fpoly_lvt
CONNECT nch_efsvt_mac_gate_dnw n_fpoly_svt
CONNECT nch_efsvt_mac_gate n_fpoly_svt
CONNECT nch_elvt_mac_gate_dnw n_fpoly_elvt
CONNECT nch_elvt_mac_gate n_fpoly_elvt
CONNECT nch_lvt_mac_gate_dnw n_fpoly_lvt
CONNECT nch_lvt_mac_gate n_fpoly_lvt
CONNECT nch_lvtll_mac_gate_dnw n_fpoly_lvtll
CONNECT nch_lvtll_mac_gate n_fpoly_lvtll
CONNECT nch_mpode12_mac_gate n_fpoly_io
CONNECT nch_mpodeelvt_mac_gate n_fpoly_elvt
CONNECT nch_mpodelvt_mac_gate n_fpoly_lvt
CONNECT nch_mpodelvtll_mac_gate n_fpoly_lvtll
CONNECT nch_mpodesvt_mac_gate n_fpoly_svt
CONNECT nch_mpodeulvt_mac_gate n_fpoly_ulvt
CONNECT nch_mpodeulvtll_mac_gate n_fpoly_ulvtll
CONNECT nch_svt_mac_gate_dnw n_fpoly_svt
CONNECT nch_svt_mac_gate n_fpoly_svt
CONNECT nch_ulvt_mac_gate_dnw n_fpoly_ulvt
CONNECT nch_ulvt_mac_gate n_fpoly_ulvt
CONNECT nch_ulvtll_mac_gate_dnw n_fpoly_ulvtll
CONNECT nch_ulvtll_mac_gate n_fpoly_ulvtll
CONNECT ngate_pd_10trpsr_mac n_fpoly_srm
CONNECT ngate_pd_10tsr_mac n_fpoly_srm
CONNECT ngate_pd_8trpsr_mac n_fpoly_srm
CONNECT ngate_pd_8tsr_mac n_fpoly_srm
CONNECT ngate_pd_dpsr_mac n_fpoly_srm
CONNECT ngate_pd_hc8trpsr_mac n_fpoly_srm
CONNECT ngate_pd_hc8tsr_mac n_fpoly_srm
CONNECT ngate_pd_hcsr_mac n_fpoly_srm
CONNECT ngate_pd_hdsr_mac n_fpoly_srm
CONNECT ngate_pd_hshcsr_mac n_fpoly_srm
CONNECT ngate_pd_ulvtll10trpsr_mac n_fpoly_srm
CONNECT ngate_pd_ulvtll10tsr_mac n_fpoly_srm
CONNECT ngate_pd_ulvtll8trpsr_mac n_fpoly_srm
CONNECT ngate_pd_ulvtll8tsr_mac n_fpoly_srm
CONNECT ngate_pd_ulvtllhc8trpsr_mac n_fpoly_srm
CONNECT ngate_pd_ulvtllhc8tsr_mac n_fpoly_srm
CONNECT ngate_pg_10trpsr_mac n_fpoly_srm
CONNECT ngate_pg_10tsr_mac n_fpoly_srm
CONNECT ngate_pg_8trpsr_mac n_fpoly_srm
CONNECT ngate_pg_8tsr_mac n_fpoly_srm
CONNECT ngate_pg_dpsr_mac n_fpoly_srm
CONNECT ngate_pg_hc8trpsr_mac n_fpoly_srm
CONNECT ngate_pg_hc8tsr_mac n_fpoly_srm
CONNECT ngate_pg_hcsr_mac n_fpoly_srm
CONNECT ngate_pg_hdsr_mac n_fpoly_srm
CONNECT ngate_pg_hshcsr_mac n_fpoly_srm
CONNECT ngate_pg_ulvtll10trpsr_mac n_fpoly_srm
CONNECT ngate_pg_ulvtll10tsr_mac n_fpoly_srm
CONNECT ngate_pg_ulvtll8trpsr_mac n_fpoly_srm
CONNECT ngate_pg_ulvtll8tsr_mac n_fpoly_srm
CONNECT ngate_pg_ulvtllhc8trpsr_mac n_fpoly_srm
CONNECT ngate_pg_ulvtllhc8tsr_mac n_fpoly_srm
CONNECT pch_12_mac_gate p_fpoly_io
CONNECT pch_eflvt_mac_gate p_fpoly_lvt
CONNECT pch_efsvt_mac_gate p_fpoly_svt
CONNECT pch_elvt_mac_gate p_fpoly_elvt
CONNECT pch_lvt_mac_gate p_fpoly_lvt
CONNECT pch_lvtll_mac_gate p_fpoly_lvtll
CONNECT pch_mpode12_mac_gate p_fpoly_io
CONNECT pch_mpodeelvt_mac_gate p_fpoly_elvt
CONNECT pch_mpodelvt_mac_gate p_fpoly_lvt
CONNECT pch_mpodelvtll_mac_gate p_fpoly_lvtll
CONNECT pch_mpodesvt_mac_gate p_fpoly_svt
CONNECT pch_mpodeulvt_mac_gate p_fpoly_ulvt
CONNECT pch_mpodeulvtll_mac_gate p_fpoly_ulvtll
CONNECT pch_svt_mac_gate p_fpoly_svt
CONNECT pch_ulvt_mac_gate p_fpoly_ulvt
CONNECT pch_ulvtll_mac_gate p_fpoly_ulvtll
CONNECT pgate_pu_10tsr_mac p_fpoly_srm
CONNECT pgate_pu_8tsr_mac p_fpoly_srm
CONNECT pgate_pu_dpsr_mac p_fpoly_srm
CONNECT pgate_pu_hc8tsr_mac p_fpoly_srm
CONNECT pgate_pu_hcsr_mac p_fpoly_srm
CONNECT pgate_pu_hdsr_mac p_fpoly_srm
CONNECT pgate_pu_hshcsr_mac p_fpoly_srm
CONNECT pgate_pu_ulvtll10tsr_mac p_fpoly_srm
CONNECT pgate_pu_ulvtll8tsr_mac p_fpoly_srm
CONNECT pgate_pu_ulvtllhc8tsr_mac p_fpoly_srm
CONNECT n_fpoly_ulvt vargt
CONNECT n_fpoly_io vargt_12
CONNECT n_fpoly_io npode_12_mac_gate
CONNECT n_fpoly_lvt npode_eflvt_mac_gate
CONNECT n_fpoly_svt npode_efsvt_mac_gate
CONNECT n_fpoly_elvt npode_elvt_mac_gate
CONNECT n_fpoly_lvt npode_lvt_mac_gate
CONNECT n_fpoly_lvtll npode_lvtll_mac_gate
CONNECT n_fpoly_svt npode_svt_mac_gate
CONNECT n_fpoly_ulvt npode_ulvt_mac_gate
CONNECT n_fpoly_ulvtll npode_ulvtll_mac_gate
CONNECT p_fpoly_io ppode_12_mac_gate
CONNECT p_fpoly_lvt ppode_eflvt_mac_gate
CONNECT p_fpoly_svt ppode_efsvt_mac_gate
CONNECT p_fpoly_elvt ppode_elvt_mac_gate
CONNECT p_fpoly_lvt ppode_lvt_mac_gate
CONNECT p_fpoly_lvtll ppode_lvtll_mac_gate
CONNECT p_fpoly_svt ppode_svt_mac_gate
CONNECT p_fpoly_ulvt ppode_ulvt_mac_gate
CONNECT p_fpoly_ulvtll ppode_ulvtll_mac_gate
CONNECT ngate_hia12_mac n_fpoly_io

//#############################################
//# FORM DEVICE                               #
//#############################################

#IFNDEF LVS_DECK
INCLUDE ./DFM/dfm_device

DEVICE LDDN(nch_hia12_mac) ngate_hia12_mac tndiff_sdi(D) ngate_hia12_mac(G) tndiff(S) psub(B) <nthin> netlist model nch_hia12_mac netlist element "X" [
  property L,AS,AD,PD,PS,NRD,NRS,nfin,dfm_flag
   dfm_flag = 1
   SCALE = PRESCALE
   W=(perimeter_coincide(ngate_hia12_mac, tndiff ) + perimeter_coincide(ngate_hia12_mac, tndiff_sdi)) / 2
   L=area(ngate_hia12_mac) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH_IO) / FIN_PITCH_IO) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
   NRS = 0
   NRD = 0
]
#IFDEF MULTI_DEVICE_EXTRACTION
nch_hia12_mac_ODN_layer = DEVICE LAYER LDDN(nch_hia12_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_hia12_mac"
       ]
LVS ANNOTATE DEVICES nch_hia12_mac_ODN_layer
#ENDIF

DEVICE MN(nch_12_dnw_mac) nch_12_mac_gate_dnw nch_12_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) <nthin>  <matching_aux> netlist model nch_12_mac netlist element "X" [
  property L,AS,AD,PD,PS,NRD,NRS,nfin,dfm_flag
   #IFDEF MATCHFLAG
   ,matchingflag, edgeflag
   #ENDIF
   dfm_flag = 1
   SCALE = PRESCALE
   W=(perimeter_coincide(nch_12_mac_gate_dnw, tndiff ) + perimeter_inside(nch_12_mac_gate_dnw, tndiff)) / 2
   L=area(nch_12_mac_gate_dnw) / W
   #IFDEF MATCHFLAG
      matching_region = DFM_NUMERIC_VALUE(matching_aux,"matching_region")
      if(matching_region > 1.5){
         matchingflag = 1
         edgeflag = 1
      } else if (matching_region > 0.5) {
         matchingflag = 1
         edgeflag = 0
      } else {
         matchingflag = 0
         edgeflag = 0
      }
   #ENDIF
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH_IO) / FIN_PITCH_IO) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
   NRS = 0
   NRD = 0
]
#IFDEF MULTI_DEVICE_EXTRACTION
nch_12_dnw_mac_ODN_layer = DEVICE LAYER MN(nch_12_dnw_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_12_dnw_mac"
       ]
LVS ANNOTATE DEVICES nch_12_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_12_mac) nch_12_mac_gate nch_12_mac_gate(G) tndiff(S) tndiff(D) psub(B) <nthin>  <matching_aux> netlist model nch_12_mac netlist element "X" [
  property L,AS,AD,PD,PS,NRD,NRS,nfin,dfm_flag
   #IFDEF MATCHFLAG
   ,matchingflag, edgeflag
   #ENDIF
   dfm_flag = 1
   SCALE = PRESCALE
   W=(perimeter_coincide(nch_12_mac_gate, tndiff ) + perimeter_inside(nch_12_mac_gate, tndiff)) / 2
   L=area(nch_12_mac_gate) / W
   #IFDEF MATCHFLAG
      matching_region = DFM_NUMERIC_VALUE(matching_aux,"matching_region")
      if(matching_region > 1.5){
         matchingflag = 1
         edgeflag = 1
      } else if (matching_region > 0.5) {
         matchingflag = 1
         edgeflag = 0
      } else {
         matchingflag = 0
         edgeflag = 0
      }
   #ENDIF
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH_IO) / FIN_PITCH_IO) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
   NRS = 0
   NRD = 0
]
#IFDEF MULTI_DEVICE_EXTRACTION
nch_12_mac_ODN_layer = DEVICE LAYER MN(nch_12_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_12_mac"
       ]
LVS ANNOTATE DEVICES nch_12_mac_ODN_layer
#ENDIF

DEVICE MN(nch_eflvt_dnw_mac) nch_eflvt_mac_gate_dnw nch_eflvt_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) netlist model nch_eflvt_mac netlist element "X" CMACRO dfm_nmos_core "LN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_eflvt_dnw_mac_ODN_layer = DEVICE LAYER MN(nch_eflvt_dnw_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_eflvt_dnw_mac"
       ]
LVS ANNOTATE DEVICES nch_eflvt_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_eflvt_mac) nch_eflvt_mac_gate nch_eflvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_eflvt_mac netlist element "X" CMACRO dfm_nmos_core "LN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_eflvt_mac_ODN_layer = DEVICE LAYER MN(nch_eflvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_eflvt_mac"
       ]
LVS ANNOTATE DEVICES nch_eflvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_efsvt_dnw_mac) nch_efsvt_mac_gate_dnw nch_efsvt_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) netlist model nch_efsvt_mac netlist element "X" CMACRO dfm_nmos_core "SN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_efsvt_dnw_mac_ODN_layer = DEVICE LAYER MN(nch_efsvt_dnw_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_efsvt_dnw_mac"
       ]
LVS ANNOTATE DEVICES nch_efsvt_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_efsvt_mac) nch_efsvt_mac_gate nch_efsvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_efsvt_mac netlist element "X" CMACRO dfm_nmos_core "SN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_efsvt_mac_ODN_layer = DEVICE LAYER MN(nch_efsvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_efsvt_mac"
       ]
LVS ANNOTATE DEVICES nch_efsvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_elvt_dnw_mac) nch_elvt_mac_gate_dnw nch_elvt_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) netlist model nch_elvt_mac netlist element "X" CMACRO dfm_nmos_core "ELN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_elvt_dnw_mac_ODN_layer = DEVICE LAYER MN(nch_elvt_dnw_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_elvt_dnw_mac"
       ]
LVS ANNOTATE DEVICES nch_elvt_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_elvt_mac) nch_elvt_mac_gate nch_elvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_elvt_mac netlist element "X" CMACRO dfm_nmos_core "ELN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_elvt_mac_ODN_layer = DEVICE LAYER MN(nch_elvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_elvt_mac"
       ]
LVS ANNOTATE DEVICES nch_elvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_lvt_dnw_mac) nch_lvt_mac_gate_dnw nch_lvt_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) netlist model nch_lvt_mac netlist element "X" CMACRO dfm_nmos_core "LN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_lvt_dnw_mac_ODN_layer = DEVICE LAYER MN(nch_lvt_dnw_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_lvt_dnw_mac"
       ]
LVS ANNOTATE DEVICES nch_lvt_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_lvt_mac) nch_lvt_mac_gate nch_lvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_lvt_mac netlist element "X" CMACRO dfm_nmos_core "LN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_lvt_mac_ODN_layer = DEVICE LAYER MN(nch_lvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_lvt_mac"
       ]
LVS ANNOTATE DEVICES nch_lvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_lvtll_dnw_mac) nch_lvtll_mac_gate_dnw nch_lvtll_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) netlist model nch_lvtll_mac netlist element "X" CMACRO dfm_nmos_core "LNLL"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_lvtll_dnw_mac_ODN_layer = DEVICE LAYER MN(nch_lvtll_dnw_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_lvtll_dnw_mac"
       ]
LVS ANNOTATE DEVICES nch_lvtll_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_lvtll_mac) nch_lvtll_mac_gate nch_lvtll_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_lvtll_mac netlist element "X" CMACRO dfm_nmos_core "LNLL"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_lvtll_mac_ODN_layer = DEVICE LAYER MN(nch_lvtll_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_lvtll_mac"
       ]
LVS ANNOTATE DEVICES nch_lvtll_mac_ODN_layer
#ENDIF

DEVICE MN(nch_mpode12_mac) nch_mpode12_mac_gate nch_mpode12_mac_gate(G) tndiff(S) tndiff(D) psub(B) <nthin>  <matching_aux> netlist model nch_mpode12_mac netlist element "X" [
  property L,AS,AD,PD,PS,NRD,NRS,nfin,dfm_flag
   #IFDEF MATCHFLAG
   ,matchingflag, edgeflag
   #ENDIF
   dfm_flag = 1
   SCALE = PRESCALE
   W=(perimeter_coincide(nch_mpode12_mac_gate, tndiff ) + perimeter_inside(nch_mpode12_mac_gate, tndiff)) / 2
   L=area(nch_mpode12_mac_gate) / W
   #IFDEF MATCHFLAG
      matching_region = DFM_NUMERIC_VALUE(matching_aux,"matching_region")
      if(matching_region > 1.5){
         matchingflag = 1
         edgeflag = 1
      } else if (matching_region > 0.5) {
         matchingflag = 1
         edgeflag = 0
      } else {
         matchingflag = 0
         edgeflag = 0
      }
   #ENDIF
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH_IO) / FIN_PITCH_IO) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   PI_D_OD = perimeter_inside(D,nthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
   NRS = 0
   NRD = 0
]
#IFDEF MULTI_DEVICE_EXTRACTION
nch_mpode12_mac_ODN_layer = DEVICE LAYER MN(nch_mpode12_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_mpode12_mac"
       ]
LVS ANNOTATE DEVICES nch_mpode12_mac_ODN_layer
#ENDIF

DEVICE MN(nch_mpodeelvt_mac) nch_mpodeelvt_mac_gate nch_mpodeelvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_mpodeelvt_mac netlist element "X" CMACRO dfm_nmos_core "ELN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_mpodeelvt_mac_ODN_layer = DEVICE LAYER MN(nch_mpodeelvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_mpodeelvt_mac"
       ]
LVS ANNOTATE DEVICES nch_mpodeelvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_mpodelvt_mac) nch_mpodelvt_mac_gate nch_mpodelvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_mpodelvt_mac netlist element "X" CMACRO dfm_nmos_core "LN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_mpodelvt_mac_ODN_layer = DEVICE LAYER MN(nch_mpodelvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_mpodelvt_mac"
       ]
LVS ANNOTATE DEVICES nch_mpodelvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_mpodelvtll_mac) nch_mpodelvtll_mac_gate nch_mpodelvtll_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_mpodelvtll_mac netlist element "X" CMACRO dfm_nmos_core "LNLL"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_mpodelvtll_mac_ODN_layer = DEVICE LAYER MN(nch_mpodelvtll_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_mpodelvtll_mac"
       ]
LVS ANNOTATE DEVICES nch_mpodelvtll_mac_ODN_layer
#ENDIF

DEVICE MN(nch_mpodesvt_mac) nch_mpodesvt_mac_gate nch_mpodesvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_mpodesvt_mac netlist element "X" CMACRO dfm_nmos_core "SN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_mpodesvt_mac_ODN_layer = DEVICE LAYER MN(nch_mpodesvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_mpodesvt_mac"
       ]
LVS ANNOTATE DEVICES nch_mpodesvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_mpodeulvt_mac) nch_mpodeulvt_mac_gate nch_mpodeulvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_mpodeulvt_mac netlist element "X" CMACRO dfm_nmos_core "ULN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_mpodeulvt_mac_ODN_layer = DEVICE LAYER MN(nch_mpodeulvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_mpodeulvt_mac"
       ]
LVS ANNOTATE DEVICES nch_mpodeulvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_mpodeulvtll_mac) nch_mpodeulvtll_mac_gate nch_mpodeulvtll_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_mpodeulvtll_mac netlist element "X" CMACRO dfm_nmos_core "ULNLL"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_mpodeulvtll_mac_ODN_layer = DEVICE LAYER MN(nch_mpodeulvtll_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_mpodeulvtll_mac"
       ]
LVS ANNOTATE DEVICES nch_mpodeulvtll_mac_ODN_layer
#ENDIF

DEVICE MN(nch_svt_dnw_mac) nch_svt_mac_gate_dnw nch_svt_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) netlist model nch_svt_mac netlist element "X" CMACRO dfm_nmos_core "SN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_svt_dnw_mac_ODN_layer = DEVICE LAYER MN(nch_svt_dnw_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_svt_dnw_mac"
       ]
LVS ANNOTATE DEVICES nch_svt_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_svt_mac) nch_svt_mac_gate nch_svt_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_svt_mac netlist element "X" CMACRO dfm_nmos_core "SN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_svt_mac_ODN_layer = DEVICE LAYER MN(nch_svt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_svt_mac"
       ]
LVS ANNOTATE DEVICES nch_svt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_ulvt_dnw_mac) nch_ulvt_mac_gate_dnw nch_ulvt_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) netlist model nch_ulvt_mac netlist element "X" CMACRO dfm_nmos_core "ULN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_ulvt_dnw_mac_ODN_layer = DEVICE LAYER MN(nch_ulvt_dnw_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_ulvt_dnw_mac"
       ]
LVS ANNOTATE DEVICES nch_ulvt_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_ulvt_mac) nch_ulvt_mac_gate nch_ulvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_ulvt_mac netlist element "X" CMACRO dfm_nmos_core "ULN"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_ulvt_mac_ODN_layer = DEVICE LAYER MN(nch_ulvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_ulvt_mac"
       ]
LVS ANNOTATE DEVICES nch_ulvt_mac_ODN_layer
#ENDIF

DEVICE MN(nch_ulvtll_dnw_mac) nch_ulvtll_mac_gate_dnw nch_ulvtll_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) netlist model nch_ulvtll_mac netlist element "X" CMACRO dfm_nmos_core "ULNLL"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_ulvtll_dnw_mac_ODN_layer = DEVICE LAYER MN(nch_ulvtll_dnw_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_ulvtll_dnw_mac"
       ]
LVS ANNOTATE DEVICES nch_ulvtll_dnw_mac_ODN_layer
#ENDIF

DEVICE MN(nch_ulvtll_mac) nch_ulvtll_mac_gate nch_ulvtll_mac_gate(G) tndiff(S) tndiff(D) psub(B) netlist model nch_ulvtll_mac netlist element "X" CMACRO dfm_nmos_core "ULNLL"
#IFDEF MULTI_DEVICE_EXTRACTION
nch_ulvtll_mac_ODN_layer = DEVICE LAYER MN(nch_ulvtll_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "nch_ulvtll_mac"
       ]
LVS ANNOTATE DEVICES nch_ulvtll_mac_ODN_layer
#ENDIF

DEVICE MN(nchpd_10trpsr_mac) ngate_pd_10trpsr_mac ngate_pd_10trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_10trpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_10trpsr_mac)/2
   L = area(ngate_pd_10trpsr_mac)/W1
]

DEVICE MN(nchpd_10tsr_mac) ngate_pd_10tsr_mac ngate_pd_10tsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_10tsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_10tsr_mac)/2
   L = area(ngate_pd_10tsr_mac)/W1
]

DEVICE MN(nchpd_8trpsr_mac) ngate_pd_8trpsr_mac ngate_pd_8trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_8trpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_8trpsr_mac)/2
   L = area(ngate_pd_8trpsr_mac)/W1
]

DEVICE MN(nchpd_8tsr_mac) ngate_pd_8tsr_mac ngate_pd_8tsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_8tsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_8tsr_mac)/2
   L = area(ngate_pd_8tsr_mac)/W1
]

DEVICE MN(nchpd_dpsr_mac) ngate_pd_dpsr_mac ngate_pd_dpsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_dpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_dpsr_mac)/2
   L = area(ngate_pd_dpsr_mac)/W1
]

DEVICE MN(nchpd_hc8trpsr_mac) ngate_pd_hc8trpsr_mac ngate_pd_hc8trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_hc8trpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_hc8trpsr_mac)/2
   L = area(ngate_pd_hc8trpsr_mac)/W1
]

DEVICE MN(nchpd_hc8tsr_mac) ngate_pd_hc8tsr_mac ngate_pd_hc8tsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_hc8tsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_hc8tsr_mac)/2
   L = area(ngate_pd_hc8tsr_mac)/W1
]

DEVICE MN(nchpd_hcsr_mac) ngate_pd_hcsr_mac ngate_pd_hcsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_hcsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_hcsr_mac)/2
   L = area(ngate_pd_hcsr_mac)/W1
]

DEVICE MN(nchpd_hdsr_mac) ngate_pd_hdsr_mac ngate_pd_hdsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_hdsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_hdsr_mac)/2
   L = area(ngate_pd_hdsr_mac)/W1
]

DEVICE MN(nchpd_hshcsr_mac) ngate_pd_hshcsr_mac ngate_pd_hshcsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_hshcsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_hshcsr_mac)/2
   L = area(ngate_pd_hshcsr_mac)/W1
]

DEVICE MN(nchpd_ulvtll10trpsr_mac) ngate_pd_ulvtll10trpsr_mac ngate_pd_ulvtll10trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_ulvtll10trpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_ulvtll10trpsr_mac)/2
   L = area(ngate_pd_ulvtll10trpsr_mac)/W1
]

DEVICE MN(nchpd_ulvtll10tsr_mac) ngate_pd_ulvtll10tsr_mac ngate_pd_ulvtll10tsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_ulvtll10tsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_ulvtll10tsr_mac)/2
   L = area(ngate_pd_ulvtll10tsr_mac)/W1
]

DEVICE MN(nchpd_ulvtll8trpsr_mac) ngate_pd_ulvtll8trpsr_mac ngate_pd_ulvtll8trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_ulvtll8trpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_ulvtll8trpsr_mac)/2
   L = area(ngate_pd_ulvtll8trpsr_mac)/W1
]

DEVICE MN(nchpd_ulvtll8tsr_mac) ngate_pd_ulvtll8tsr_mac ngate_pd_ulvtll8tsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_ulvtll8tsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_ulvtll8tsr_mac)/2
   L = area(ngate_pd_ulvtll8tsr_mac)/W1
]

DEVICE MN(nchpd_ulvtllhc8trpsr_mac) ngate_pd_ulvtllhc8trpsr_mac ngate_pd_ulvtllhc8trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_ulvtllhc8trpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_ulvtllhc8trpsr_mac)/2
   L = area(ngate_pd_ulvtllhc8trpsr_mac)/W1
]

DEVICE MN(nchpd_ulvtllhc8tsr_mac) ngate_pd_ulvtllhc8tsr_mac ngate_pd_ulvtllhc8tsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpd_ulvtllhc8tsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_ulvtllhc8tsr_mac)/2
   L = area(ngate_pd_ulvtllhc8tsr_mac)/W1
]

DEVICE MN(nchpg_10trpsr_mac) ngate_pg_10trpsr_mac ngate_pg_10trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_10trpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_10trpsr_mac)/2
   L = area(ngate_pg_10trpsr_mac)/W1
]

DEVICE MN(nchpg_10tsr_mac) ngate_pg_10tsr_mac ngate_pg_10tsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_10tsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_10tsr_mac)/2
   L = area(ngate_pg_10tsr_mac)/W1
]

DEVICE MN(nchpg_8trpsr_mac) ngate_pg_8trpsr_mac ngate_pg_8trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_8trpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_8trpsr_mac)/2
   L = area(ngate_pg_8trpsr_mac)/W1
]

DEVICE MN(nchpg_8tsr_mac) ngate_pg_8tsr_mac ngate_pg_8tsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_8tsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_8tsr_mac)/2
   L = area(ngate_pg_8tsr_mac)/W1
]

DEVICE MN(nchpg_dpsr_mac) ngate_pg_dpsr_mac ngate_pg_dpsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_dpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_dpsr_mac)/2
   L = area(ngate_pg_dpsr_mac)/W1
]

DEVICE MN(nchpg_hc8trpsr_mac) ngate_pg_hc8trpsr_mac ngate_pg_hc8trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_hc8trpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_hc8trpsr_mac)/2
   L = area(ngate_pg_hc8trpsr_mac)/W1
]

DEVICE MN(nchpg_hc8tsr_mac) ngate_pg_hc8tsr_mac ngate_pg_hc8tsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_hc8tsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_hc8tsr_mac)/2
   L = area(ngate_pg_hc8tsr_mac)/W1
]

DEVICE MN(nchpg_hcsr_mac) ngate_pg_hcsr_mac ngate_pg_hcsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_hcsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_hcsr_mac)/2
   L = area(ngate_pg_hcsr_mac)/W1
]

DEVICE MN(nchpg_hdsr_mac) ngate_pg_hdsr_mac ngate_pg_hdsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_hdsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_hdsr_mac)/2
   L = area(ngate_pg_hdsr_mac)/W1
]

DEVICE MN(nchpg_hshcsr_mac) ngate_pg_hshcsr_mac ngate_pg_hshcsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_hshcsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_hshcsr_mac)/2
   L = area(ngate_pg_hshcsr_mac)/W1
]

DEVICE MN(nchpg_ulvtll10trpsr_mac) ngate_pg_ulvtll10trpsr_mac ngate_pg_ulvtll10trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_ulvtll10trpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_ulvtll10trpsr_mac)/2
   L = area(ngate_pg_ulvtll10trpsr_mac)/W1
]

DEVICE MN(nchpg_ulvtll10tsr_mac) ngate_pg_ulvtll10tsr_mac ngate_pg_ulvtll10tsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_ulvtll10tsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_ulvtll10tsr_mac)/2
   L = area(ngate_pg_ulvtll10tsr_mac)/W1
]

DEVICE MN(nchpg_ulvtll8trpsr_mac) ngate_pg_ulvtll8trpsr_mac ngate_pg_ulvtll8trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_ulvtll8trpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_ulvtll8trpsr_mac)/2
   L = area(ngate_pg_ulvtll8trpsr_mac)/W1
]

DEVICE MN(nchpg_ulvtll8tsr_mac) ngate_pg_ulvtll8tsr_mac ngate_pg_ulvtll8tsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_ulvtll8tsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_ulvtll8tsr_mac)/2
   L = area(ngate_pg_ulvtll8tsr_mac)/W1
]

DEVICE MN(nchpg_ulvtllhc8trpsr_mac) ngate_pg_ulvtllhc8trpsr_mac ngate_pg_ulvtllhc8trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_ulvtllhc8trpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_ulvtllhc8trpsr_mac)/2
   L = area(ngate_pg_ulvtllhc8trpsr_mac)/W1
]

DEVICE MN(nchpg_ulvtllhc8tsr_mac) ngate_pg_ulvtllhc8tsr_mac ngate_pg_ulvtllhc8tsr_mac(G) tndiff(S) tndiff(D) psub(B) <nthin>  <ODs> netlist model nchpg_ulvtllhc8tsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_ulvtllhc8tsr_mac)/2
   L = area(ngate_pg_ulvtllhc8tsr_mac)/W1
]

DEVICE MP(pch_12_mac) pch_12_mac_gate pch_12_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin>  <matching_aux> netlist model pch_12_mac netlist element "X" [
  property L,AS,AD,PD,PS,NRD,NRS,nfin,dfm_flag
   #IFDEF MATCHFLAG
   ,matchingflag, edgeflag
   #ENDIF
   dfm_flag = 1
   SCALE = PRESCALE
   W=(perimeter_coincide(pch_12_mac_gate, tpdiff ) + perimeter_inside(pch_12_mac_gate, tpdiff)) / 2
   L=area(pch_12_mac_gate) / W
   #IFDEF MATCHFLAG
      matching_region = DFM_NUMERIC_VALUE(matching_aux,"matching_region")
      if(matching_region > 1.5){
         matchingflag = 1
         edgeflag = 1
      } else if (matching_region > 0.5) {
         matchingflag = 1
         edgeflag = 0
      } else {
         matchingflag = 0
         edgeflag = 0
      }
   #ENDIF
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH_IO) / FIN_PITCH_IO) + 1.01 )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
   NRS = 0
   NRD = 0
]
#IFDEF MULTI_DEVICE_EXTRACTION
pch_12_mac_ODN_layer = DEVICE LAYER MP(pch_12_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_12_mac"
       ]
LVS ANNOTATE DEVICES pch_12_mac_ODN_layer
#ENDIF

DEVICE MP(pch_eflvt_mac) pch_eflvt_mac_gate pch_eflvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_eflvt_mac netlist element "X" CMACRO dfm_pmos "LP"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_eflvt_mac_ODN_layer = DEVICE LAYER MP(pch_eflvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_eflvt_mac"
       ]
LVS ANNOTATE DEVICES pch_eflvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_efsvt_mac) pch_efsvt_mac_gate pch_efsvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_efsvt_mac netlist element "X" CMACRO dfm_pmos "SP"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_efsvt_mac_ODN_layer = DEVICE LAYER MP(pch_efsvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_efsvt_mac"
       ]
LVS ANNOTATE DEVICES pch_efsvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_elvt_mac) pch_elvt_mac_gate pch_elvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_elvt_mac netlist element "X" CMACRO dfm_pmos "ELP"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_elvt_mac_ODN_layer = DEVICE LAYER MP(pch_elvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_elvt_mac"
       ]
LVS ANNOTATE DEVICES pch_elvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_lvt_mac) pch_lvt_mac_gate pch_lvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_lvt_mac netlist element "X" CMACRO dfm_pmos "LP"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_lvt_mac_ODN_layer = DEVICE LAYER MP(pch_lvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_lvt_mac"
       ]
LVS ANNOTATE DEVICES pch_lvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_lvtll_mac) pch_lvtll_mac_gate pch_lvtll_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_lvtll_mac netlist element "X" CMACRO dfm_pmos "LPLL"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_lvtll_mac_ODN_layer = DEVICE LAYER MP(pch_lvtll_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_lvtll_mac"
       ]
LVS ANNOTATE DEVICES pch_lvtll_mac_ODN_layer
#ENDIF

DEVICE MP(pch_mpode12_mac) pch_mpode12_mac_gate pch_mpode12_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin>  <matching_aux> netlist model pch_mpode12_mac netlist element "X" [
  property L,AS,AD,PD,PS,NRD,NRS,nfin,dfm_flag
   #IFDEF MATCHFLAG
   ,matchingflag, edgeflag
   #ENDIF
   dfm_flag = 1
   SCALE = PRESCALE
   W=(perimeter_coincide(pch_mpode12_mac_gate, tpdiff ) + perimeter_inside(pch_mpode12_mac_gate, tpdiff)) / 2
   L=area(pch_mpode12_mac_gate) / W
   #IFDEF MATCHFLAG
      matching_region = DFM_NUMERIC_VALUE(matching_aux,"matching_region")
      if(matching_region > 1.5){
         matchingflag = 1
         edgeflag = 1
      } else if (matching_region > 0.5) {
         matchingflag = 1
         edgeflag = 0
      } else {
         matchingflag = 0
         edgeflag = 0
      }
   #ENDIF
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH_IO) / FIN_PITCH_IO) + 1.01 )
   PI_S_OD = perimeter_inside(S,pthin)
   PI_D_OD = perimeter_inside(D,pthin)
   IF(PI_S_OD == 0) {
    AD = area(D) * W / PI_D_OD
    AS = AD
    PD = perimeter(D) * W /PI_D_OD
    PS = PD } 
   ELSE IF(PI_D_OD == 0) {
    AS = area(S) * W / PI_S_OD
    AD = AS
    PS = perimeter(S) * W /PI_S_OD
    PD = PS } 
   ELSE {
    AS = area(S) * W / PI_S_OD
    AD = area(D) * W / PI_D_OD
    PS = perimeter(S) * W /PI_S_OD
    PD = perimeter(D) * W /PI_D_OD }
   NRS = 0
   NRD = 0
]
#IFDEF MULTI_DEVICE_EXTRACTION
pch_mpode12_mac_ODN_layer = DEVICE LAYER MP(pch_mpode12_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_mpode12_mac"
       ]
LVS ANNOTATE DEVICES pch_mpode12_mac_ODN_layer
#ENDIF

DEVICE MP(pch_mpodeelvt_mac) pch_mpodeelvt_mac_gate pch_mpodeelvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_mpodeelvt_mac netlist element "X" CMACRO dfm_pmos "ELP"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_mpodeelvt_mac_ODN_layer = DEVICE LAYER MP(pch_mpodeelvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_mpodeelvt_mac"
       ]
LVS ANNOTATE DEVICES pch_mpodeelvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_mpodelvt_mac) pch_mpodelvt_mac_gate pch_mpodelvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_mpodelvt_mac netlist element "X" CMACRO dfm_pmos "LP"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_mpodelvt_mac_ODN_layer = DEVICE LAYER MP(pch_mpodelvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_mpodelvt_mac"
       ]
LVS ANNOTATE DEVICES pch_mpodelvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_mpodelvtll_mac) pch_mpodelvtll_mac_gate pch_mpodelvtll_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_mpodelvtll_mac netlist element "X" CMACRO dfm_pmos "LPLL"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_mpodelvtll_mac_ODN_layer = DEVICE LAYER MP(pch_mpodelvtll_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_mpodelvtll_mac"
       ]
LVS ANNOTATE DEVICES pch_mpodelvtll_mac_ODN_layer
#ENDIF

DEVICE MP(pch_mpodesvt_mac) pch_mpodesvt_mac_gate pch_mpodesvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_mpodesvt_mac netlist element "X" CMACRO dfm_pmos "SP"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_mpodesvt_mac_ODN_layer = DEVICE LAYER MP(pch_mpodesvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_mpodesvt_mac"
       ]
LVS ANNOTATE DEVICES pch_mpodesvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_mpodeulvt_mac) pch_mpodeulvt_mac_gate pch_mpodeulvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_mpodeulvt_mac netlist element "X" CMACRO dfm_pmos "ULP"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_mpodeulvt_mac_ODN_layer = DEVICE LAYER MP(pch_mpodeulvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_mpodeulvt_mac"
       ]
LVS ANNOTATE DEVICES pch_mpodeulvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_mpodeulvtll_mac) pch_mpodeulvtll_mac_gate pch_mpodeulvtll_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_mpodeulvtll_mac netlist element "X" CMACRO dfm_pmos "ULPLL"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_mpodeulvtll_mac_ODN_layer = DEVICE LAYER MP(pch_mpodeulvtll_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_mpodeulvtll_mac"
       ]
LVS ANNOTATE DEVICES pch_mpodeulvtll_mac_ODN_layer
#ENDIF

DEVICE MP(pch_svt_mac) pch_svt_mac_gate pch_svt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_svt_mac netlist element "X" CMACRO dfm_pmos "SP"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_svt_mac_ODN_layer = DEVICE LAYER MP(pch_svt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_svt_mac"
       ]
LVS ANNOTATE DEVICES pch_svt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_ulvt_mac) pch_ulvt_mac_gate pch_ulvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_ulvt_mac netlist element "X" CMACRO dfm_pmos "ULP"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_ulvt_mac_ODN_layer = DEVICE LAYER MP(pch_ulvt_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_ulvt_mac"
       ]
LVS ANNOTATE DEVICES pch_ulvt_mac_ODN_layer
#ENDIF

DEVICE MP(pch_ulvtll_mac) pch_ulvtll_mac_gate pch_ulvtll_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) netlist model pch_ulvtll_mac netlist element "X" CMACRO dfm_pmos "ULPLL"
#IFDEF MULTI_DEVICE_EXTRACTION
pch_ulvtll_mac_ODN_layer = DEVICE LAYER MP(pch_ulvtll_mac) ANNOTATE OD_p
       [PROPERTY ODN, pname
       ODN = DFM_NUM_VAL( OD_p, ODNET)
       pname = "pch_ulvtll_mac"
       ]
LVS ANNOTATE DEVICES pch_ulvtll_mac_ODN_layer
#ENDIF

DEVICE MP(pchpu_10tsr_mac) pgate_pu_10tsr_mac pgate_pu_10tsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin>  <ODs> netlist model pchpu_10tsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_10tsr_mac)/2
   L = area(pgate_pu_10tsr_mac)/W1
]

DEVICE MP(pchpu_8tsr_mac) pgate_pu_8tsr_mac pgate_pu_8tsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin>  <ODs> netlist model pchpu_8tsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_8tsr_mac)/2
   L = area(pgate_pu_8tsr_mac)/W1
]

DEVICE MP(pchpu_dpsr_mac) pgate_pu_dpsr_mac pgate_pu_dpsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin>  <ODs> netlist model pchpu_dpsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_dpsr_mac)/2
   L = area(pgate_pu_dpsr_mac)/W1
]

DEVICE MP(pchpu_hc8tsr_mac) pgate_pu_hc8tsr_mac pgate_pu_hc8tsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin>  <ODs> netlist model pchpu_hc8tsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_hc8tsr_mac)/2
   L = area(pgate_pu_hc8tsr_mac)/W1
]

DEVICE MP(pchpu_hcsr_mac) pgate_pu_hcsr_mac pgate_pu_hcsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin>  <ODs> netlist model pchpu_hcsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_hcsr_mac)/2
   L = area(pgate_pu_hcsr_mac)/W1
]

DEVICE MP(pchpu_hdsr_mac) pgate_pu_hdsr_mac pgate_pu_hdsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin>  <ODs> netlist model pchpu_hdsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_hdsr_mac)/2
   L = area(pgate_pu_hdsr_mac)/W1
]

DEVICE MP(pchpu_hshcsr_mac) pgate_pu_hshcsr_mac pgate_pu_hshcsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin>  <ODs> netlist model pchpu_hshcsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_hshcsr_mac)/2
   L = area(pgate_pu_hshcsr_mac)/W1
]

DEVICE MP(pchpu_ulvtll10tsr_mac) pgate_pu_ulvtll10tsr_mac pgate_pu_ulvtll10tsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin>  <ODs> netlist model pchpu_ulvtll10tsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_ulvtll10tsr_mac)/2
   L = area(pgate_pu_ulvtll10tsr_mac)/W1
]

DEVICE MP(pchpu_ulvtll8tsr_mac) pgate_pu_ulvtll8tsr_mac pgate_pu_ulvtll8tsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin>  <ODs> netlist model pchpu_ulvtll8tsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_ulvtll8tsr_mac)/2
   L = area(pgate_pu_ulvtll8tsr_mac)/W1
]

DEVICE MP(pchpu_ulvtllhc8tsr_mac) pgate_pu_ulvtllhc8tsr_mac pgate_pu_ulvtllhc8tsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <pthin>  <ODs> netlist model pchpu_ulvtllhc8tsr_mac netlist element "X" [
   property nfin,L
   SCALE = PRESCALE
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_ulvtllhc8tsr_mac)/2
   L = area(pgate_pu_ulvtllhc8tsr_mac)/W1
]

#ELSE
DEVICE LDDN(nch_hia12_mac)  ngate_hia12_mac tndiff_sdi(D) ngate_hia12_mac(G) tndiff(S) psub(B) 
[
   property nfin,L
   W = (perimeter_coincide(ngate_hia12_mac, tndiff ) + perimeter_coincide(ngate_hia12_mac, tndiff_sdi)) / 2
   L = area(ngate_hia12_mac) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH_IO) / FIN_PITCH_IO) + 1.01 )
]
DEVICE MN(nch_12_dnw_mac) nch_12_mac_gate_dnw nch_12_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B)   
[
   property nfin,L
   W=(perimeter_coincide(nch_12_mac_gate_dnw, tndiff ) + perimeter_inside(nch_12_mac_gate_dnw, tndiff)) / 2 
   L=area(nch_12_mac_gate_dnw) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH_IO) / FIN_PITCH_IO) + 1.01 )
]
DEVICE MN(nch_12_mac) nch_12_mac_gate nch_12_mac_gate(G) tndiff(S) tndiff(D) psub(B)   
[
   property nfin,L
   W=(perimeter_coincide(nch_12_mac_gate, tndiff ) + perimeter_inside(nch_12_mac_gate, tndiff)) / 2 
   L=area(nch_12_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH_IO) / FIN_PITCH_IO) + 1.01 )
]
DEVICE MN(nch_eflvt_dnw_mac) nch_eflvt_mac_gate_dnw nch_eflvt_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(nch_eflvt_mac_gate_dnw, tndiff ) + perimeter_inside(nch_eflvt_mac_gate_dnw, tndiff)) / 2 
   L=area(nch_eflvt_mac_gate_dnw) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MN(nch_eflvt_mac) nch_eflvt_mac_gate nch_eflvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(nch_eflvt_mac_gate, tndiff ) + perimeter_inside(nch_eflvt_mac_gate, tndiff)) / 2 
   L=area(nch_eflvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MN(nch_efsvt_dnw_mac) nch_efsvt_mac_gate_dnw nch_efsvt_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(nch_efsvt_mac_gate_dnw, tndiff ) + perimeter_inside(nch_efsvt_mac_gate_dnw, tndiff)) / 2 
   L=area(nch_efsvt_mac_gate_dnw) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MN(nch_efsvt_mac) nch_efsvt_mac_gate nch_efsvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(nch_efsvt_mac_gate, tndiff ) + perimeter_inside(nch_efsvt_mac_gate, tndiff)) / 2 
   L=area(nch_efsvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MN(nch_elvt_dnw_mac) nch_elvt_mac_gate_dnw nch_elvt_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(nch_elvt_mac_gate_dnw, tndiff ) + perimeter_inside(nch_elvt_mac_gate_dnw, tndiff)) / 2 
   L=area(nch_elvt_mac_gate_dnw) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MN(nch_elvt_mac) nch_elvt_mac_gate nch_elvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(nch_elvt_mac_gate, tndiff ) + perimeter_inside(nch_elvt_mac_gate, tndiff)) / 2 
   L=area(nch_elvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MN(nch_lvt_dnw_mac) nch_lvt_mac_gate_dnw nch_lvt_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(nch_lvt_mac_gate_dnw, tndiff ) + perimeter_inside(nch_lvt_mac_gate_dnw, tndiff)) / 2 
   L=area(nch_lvt_mac_gate_dnw) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MN(nch_lvt_mac) nch_lvt_mac_gate nch_lvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(nch_lvt_mac_gate, tndiff ) + perimeter_inside(nch_lvt_mac_gate, tndiff)) / 2 
   L=area(nch_lvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MN(nch_lvtll_dnw_mac) nch_lvtll_mac_gate_dnw nch_lvtll_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(nch_lvtll_mac_gate_dnw, tndiff ) + perimeter_inside(nch_lvtll_mac_gate_dnw, tndiff)) / 2 
   L=area(nch_lvtll_mac_gate_dnw) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MN(nch_lvtll_mac) nch_lvtll_mac_gate nch_lvtll_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(nch_lvtll_mac_gate, tndiff ) + perimeter_inside(nch_lvtll_mac_gate, tndiff)) / 2 
   L=area(nch_lvtll_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MN(nch_mpode12_mac) nch_mpode12_mac_gate nch_mpode12_mac_gate(G) tndiff(S) tndiff(D) psub(B)   
[
   property nfin,L
   W=(perimeter_coincide(nch_mpode12_mac_gate, tndiff ) + perimeter_inside(nch_mpode12_mac_gate, tndiff)) / 2 
   L=area(nch_mpode12_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH_IO) / FIN_PITCH_IO) + 1.01 )
]
DEVICE MN(nch_mpodeelvt_mac) nch_mpodeelvt_mac_gate nch_mpodeelvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(nch_mpodeelvt_mac_gate, tndiff ) + perimeter_inside(nch_mpodeelvt_mac_gate, tndiff)) / 2 
   L=area(nch_mpodeelvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MN(nch_mpodelvt_mac) nch_mpodelvt_mac_gate nch_mpodelvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(nch_mpodelvt_mac_gate, tndiff ) + perimeter_inside(nch_mpodelvt_mac_gate, tndiff)) / 2 
   L=area(nch_mpodelvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MN(nch_mpodelvtll_mac) nch_mpodelvtll_mac_gate nch_mpodelvtll_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(nch_mpodelvtll_mac_gate, tndiff ) + perimeter_inside(nch_mpodelvtll_mac_gate, tndiff)) / 2 
   L=area(nch_mpodelvtll_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MN(nch_mpodesvt_mac) nch_mpodesvt_mac_gate nch_mpodesvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(nch_mpodesvt_mac_gate, tndiff ) + perimeter_inside(nch_mpodesvt_mac_gate, tndiff)) / 2 
   L=area(nch_mpodesvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MN(nch_mpodeulvt_mac) nch_mpodeulvt_mac_gate nch_mpodeulvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(nch_mpodeulvt_mac_gate, tndiff ) + perimeter_inside(nch_mpodeulvt_mac_gate, tndiff)) / 2 
   L=area(nch_mpodeulvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MN(nch_mpodeulvtll_mac) nch_mpodeulvtll_mac_gate nch_mpodeulvtll_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(nch_mpodeulvtll_mac_gate, tndiff ) + perimeter_inside(nch_mpodeulvtll_mac_gate, tndiff)) / 2 
   L=area(nch_mpodeulvtll_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MN(nch_svt_dnw_mac) nch_svt_mac_gate_dnw nch_svt_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(nch_svt_mac_gate_dnw, tndiff ) + perimeter_inside(nch_svt_mac_gate_dnw, tndiff)) / 2 
   L=area(nch_svt_mac_gate_dnw) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MN(nch_svt_mac) nch_svt_mac_gate nch_svt_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(nch_svt_mac_gate, tndiff ) + perimeter_inside(nch_svt_mac_gate, tndiff)) / 2 
   L=area(nch_svt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MN(nch_ulvt_dnw_mac) nch_ulvt_mac_gate_dnw nch_ulvt_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(nch_ulvt_mac_gate_dnw, tndiff ) + perimeter_inside(nch_ulvt_mac_gate_dnw, tndiff)) / 2 
   L=area(nch_ulvt_mac_gate_dnw) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MN(nch_ulvt_mac) nch_ulvt_mac_gate nch_ulvt_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(nch_ulvt_mac_gate, tndiff ) + perimeter_inside(nch_ulvt_mac_gate, tndiff)) / 2 
   L=area(nch_ulvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MN(nch_ulvtll_dnw_mac) nch_ulvtll_mac_gate_dnw nch_ulvtll_mac_gate_dnw(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(nch_ulvtll_mac_gate_dnw, tndiff ) + perimeter_inside(nch_ulvtll_mac_gate_dnw, tndiff)) / 2 
   L=area(nch_ulvtll_mac_gate_dnw) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MN(nch_ulvtll_mac) nch_ulvtll_mac_gate nch_ulvtll_mac_gate(G) tndiff(S) tndiff(D) psub(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(nch_ulvtll_mac_gate, tndiff ) + perimeter_inside(nch_ulvtll_mac_gate, tndiff)) / 2 
   L=area(nch_ulvtll_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MN(nchpd_10trpsr_mac) ngate_pd_10trpsr_mac ngate_pd_10trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_10trpsr_mac)/2
   L = area(ngate_pd_10trpsr_mac)/W1
]
DEVICE MN(nchpd_10tsr_mac) ngate_pd_10tsr_mac ngate_pd_10tsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_10tsr_mac)/2
   L = area(ngate_pd_10tsr_mac)/W1
]
DEVICE MN(nchpd_8trpsr_mac) ngate_pd_8trpsr_mac ngate_pd_8trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_8trpsr_mac)/2
   L = area(ngate_pd_8trpsr_mac)/W1
]
DEVICE MN(nchpd_8tsr_mac) ngate_pd_8tsr_mac ngate_pd_8tsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_8tsr_mac)/2
   L = area(ngate_pd_8tsr_mac)/W1
]
DEVICE MN(nchpd_dpsr_mac) ngate_pd_dpsr_mac ngate_pd_dpsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_dpsr_mac)/2
   L = area(ngate_pd_dpsr_mac)/W1
]
DEVICE MN(nchpd_hc8trpsr_mac) ngate_pd_hc8trpsr_mac ngate_pd_hc8trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_hc8trpsr_mac)/2
   L = area(ngate_pd_hc8trpsr_mac)/W1
]
DEVICE MN(nchpd_hc8tsr_mac) ngate_pd_hc8tsr_mac ngate_pd_hc8tsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_hc8tsr_mac)/2
   L = area(ngate_pd_hc8tsr_mac)/W1
]
DEVICE MN(nchpd_hcsr_mac) ngate_pd_hcsr_mac ngate_pd_hcsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_hcsr_mac)/2
   L = area(ngate_pd_hcsr_mac)/W1
]
DEVICE MN(nchpd_hdsr_mac) ngate_pd_hdsr_mac ngate_pd_hdsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_hdsr_mac)/2
   L = area(ngate_pd_hdsr_mac)/W1
]
DEVICE MN(nchpd_hshcsr_mac) ngate_pd_hshcsr_mac ngate_pd_hshcsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_hshcsr_mac)/2
   L = area(ngate_pd_hshcsr_mac)/W1
]
DEVICE MN(nchpd_ulvtll10trpsr_mac) ngate_pd_ulvtll10trpsr_mac ngate_pd_ulvtll10trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_ulvtll10trpsr_mac)/2
   L = area(ngate_pd_ulvtll10trpsr_mac)/W1
]
DEVICE MN(nchpd_ulvtll10tsr_mac) ngate_pd_ulvtll10tsr_mac ngate_pd_ulvtll10tsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_ulvtll10tsr_mac)/2
   L = area(ngate_pd_ulvtll10tsr_mac)/W1
]
DEVICE MN(nchpd_ulvtll8trpsr_mac) ngate_pd_ulvtll8trpsr_mac ngate_pd_ulvtll8trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_ulvtll8trpsr_mac)/2
   L = area(ngate_pd_ulvtll8trpsr_mac)/W1
]
DEVICE MN(nchpd_ulvtll8tsr_mac) ngate_pd_ulvtll8tsr_mac ngate_pd_ulvtll8tsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_ulvtll8tsr_mac)/2
   L = area(ngate_pd_ulvtll8tsr_mac)/W1
]
DEVICE MN(nchpd_ulvtllhc8trpsr_mac) ngate_pd_ulvtllhc8trpsr_mac ngate_pd_ulvtllhc8trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_ulvtllhc8trpsr_mac)/2
   L = area(ngate_pd_ulvtllhc8trpsr_mac)/W1
]
DEVICE MN(nchpd_ulvtllhc8tsr_mac) ngate_pd_ulvtllhc8tsr_mac ngate_pd_ulvtllhc8tsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pd_ulvtllhc8tsr_mac)/2
   L = area(ngate_pd_ulvtllhc8tsr_mac)/W1
]
DEVICE MN(nchpg_10trpsr_mac) ngate_pg_10trpsr_mac ngate_pg_10trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_10trpsr_mac)/2
   L = area(ngate_pg_10trpsr_mac)/W1
]
DEVICE MN(nchpg_10tsr_mac) ngate_pg_10tsr_mac ngate_pg_10tsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_10tsr_mac)/2
   L = area(ngate_pg_10tsr_mac)/W1
]
DEVICE MN(nchpg_8trpsr_mac) ngate_pg_8trpsr_mac ngate_pg_8trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_8trpsr_mac)/2
   L = area(ngate_pg_8trpsr_mac)/W1
]
DEVICE MN(nchpg_8tsr_mac) ngate_pg_8tsr_mac ngate_pg_8tsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_8tsr_mac)/2
   L = area(ngate_pg_8tsr_mac)/W1
]
DEVICE MN(nchpg_dpsr_mac) ngate_pg_dpsr_mac ngate_pg_dpsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_dpsr_mac)/2
   L = area(ngate_pg_dpsr_mac)/W1
]
DEVICE MN(nchpg_hc8trpsr_mac) ngate_pg_hc8trpsr_mac ngate_pg_hc8trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_hc8trpsr_mac)/2
   L = area(ngate_pg_hc8trpsr_mac)/W1
]
DEVICE MN(nchpg_hc8tsr_mac) ngate_pg_hc8tsr_mac ngate_pg_hc8tsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_hc8tsr_mac)/2
   L = area(ngate_pg_hc8tsr_mac)/W1
]
DEVICE MN(nchpg_hcsr_mac) ngate_pg_hcsr_mac ngate_pg_hcsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_hcsr_mac)/2
   L = area(ngate_pg_hcsr_mac)/W1
]
DEVICE MN(nchpg_hdsr_mac) ngate_pg_hdsr_mac ngate_pg_hdsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_hdsr_mac)/2
   L = area(ngate_pg_hdsr_mac)/W1
]
DEVICE MN(nchpg_hshcsr_mac) ngate_pg_hshcsr_mac ngate_pg_hshcsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_hshcsr_mac)/2
   L = area(ngate_pg_hshcsr_mac)/W1
]
DEVICE MN(nchpg_ulvtll10trpsr_mac) ngate_pg_ulvtll10trpsr_mac ngate_pg_ulvtll10trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_ulvtll10trpsr_mac)/2
   L = area(ngate_pg_ulvtll10trpsr_mac)/W1
]
DEVICE MN(nchpg_ulvtll10tsr_mac) ngate_pg_ulvtll10tsr_mac ngate_pg_ulvtll10tsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_ulvtll10tsr_mac)/2
   L = area(ngate_pg_ulvtll10tsr_mac)/W1
]
DEVICE MN(nchpg_ulvtll8trpsr_mac) ngate_pg_ulvtll8trpsr_mac ngate_pg_ulvtll8trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_ulvtll8trpsr_mac)/2
   L = area(ngate_pg_ulvtll8trpsr_mac)/W1
]
DEVICE MN(nchpg_ulvtll8tsr_mac) ngate_pg_ulvtll8tsr_mac ngate_pg_ulvtll8tsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_ulvtll8tsr_mac)/2
   L = area(ngate_pg_ulvtll8tsr_mac)/W1
]
DEVICE MN(nchpg_ulvtllhc8trpsr_mac) ngate_pg_ulvtllhc8trpsr_mac ngate_pg_ulvtllhc8trpsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_ulvtllhc8trpsr_mac)/2
   L = area(ngate_pg_ulvtllhc8trpsr_mac)/W1
]
DEVICE MN(nchpg_ulvtllhc8tsr_mac) ngate_pg_ulvtllhc8tsr_mac ngate_pg_ulvtllhc8tsr_mac(G) tndiff(S) tndiff(D) psub(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tndiff,ngate_pg_ulvtllhc8tsr_mac)/2
   L = area(ngate_pg_ulvtllhc8tsr_mac)/W1
]
DEVICE MP(pch_12_mac) pch_12_mac_gate pch_12_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B)   
[
   property nfin,L
   W=(perimeter_coincide(pch_12_mac_gate, tpdiff ) + perimeter_inside(pch_12_mac_gate, tpdiff)) / 2 
   L=area(pch_12_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH_IO) / FIN_PITCH_IO) + 1.01 )
]
DEVICE MP(pch_eflvt_mac) pch_eflvt_mac_gate pch_eflvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(pch_eflvt_mac_gate, tpdiff ) + perimeter_inside(pch_eflvt_mac_gate, tpdiff)) / 2 
   L=area(pch_eflvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MP(pch_efsvt_mac) pch_efsvt_mac_gate pch_efsvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(pch_efsvt_mac_gate, tpdiff ) + perimeter_inside(pch_efsvt_mac_gate, tpdiff)) / 2 
   L=area(pch_efsvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MP(pch_elvt_mac) pch_elvt_mac_gate pch_elvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(pch_elvt_mac_gate, tpdiff ) + perimeter_inside(pch_elvt_mac_gate, tpdiff)) / 2 
   L=area(pch_elvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MP(pch_lvt_mac) pch_lvt_mac_gate pch_lvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(pch_lvt_mac_gate, tpdiff ) + perimeter_inside(pch_lvt_mac_gate, tpdiff)) / 2 
   L=area(pch_lvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MP(pch_lvtll_mac) pch_lvtll_mac_gate pch_lvtll_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(pch_lvtll_mac_gate, tpdiff ) + perimeter_inside(pch_lvtll_mac_gate, tpdiff)) / 2 
   L=area(pch_lvtll_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MP(pch_mpode12_mac) pch_mpode12_mac_gate pch_mpode12_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B)   
[
   property nfin,L
   W=(perimeter_coincide(pch_mpode12_mac_gate, tpdiff ) + perimeter_inside(pch_mpode12_mac_gate, tpdiff)) / 2 
   L=area(pch_mpode12_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH_IO) / FIN_PITCH_IO) + 1.01 )
]
DEVICE MP(pch_mpodeelvt_mac) pch_mpodeelvt_mac_gate pch_mpodeelvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(pch_mpodeelvt_mac_gate, tpdiff ) + perimeter_inside(pch_mpodeelvt_mac_gate, tpdiff)) / 2 
   L=area(pch_mpodeelvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MP(pch_mpodelvt_mac) pch_mpodelvt_mac_gate pch_mpodelvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(pch_mpodelvt_mac_gate, tpdiff ) + perimeter_inside(pch_mpodelvt_mac_gate, tpdiff)) / 2 
   L=area(pch_mpodelvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MP(pch_mpodelvtll_mac) pch_mpodelvtll_mac_gate pch_mpodelvtll_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(pch_mpodelvtll_mac_gate, tpdiff ) + perimeter_inside(pch_mpodelvtll_mac_gate, tpdiff)) / 2 
   L=area(pch_mpodelvtll_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MP(pch_mpodesvt_mac) pch_mpodesvt_mac_gate pch_mpodesvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(pch_mpodesvt_mac_gate, tpdiff ) + perimeter_inside(pch_mpodesvt_mac_gate, tpdiff)) / 2 
   L=area(pch_mpodesvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MP(pch_mpodeulvt_mac) pch_mpodeulvt_mac_gate pch_mpodeulvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(pch_mpodeulvt_mac_gate, tpdiff ) + perimeter_inside(pch_mpodeulvt_mac_gate, tpdiff)) / 2 
   L=area(pch_mpodeulvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MP(pch_mpodeulvtll_mac) pch_mpodeulvtll_mac_gate pch_mpodeulvtll_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(pch_mpodeulvtll_mac_gate, tpdiff ) + perimeter_inside(pch_mpodeulvtll_mac_gate, tpdiff)) / 2 
   L=area(pch_mpodeulvtll_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MP(pch_svt_mac) pch_svt_mac_gate pch_svt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(pch_svt_mac_gate, tpdiff ) + perimeter_inside(pch_svt_mac_gate, tpdiff)) / 2 
   L=area(pch_svt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MP(pch_ulvt_mac) pch_ulvt_mac_gate pch_ulvt_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(pch_ulvt_mac_gate, tpdiff ) + perimeter_inside(pch_ulvt_mac_gate, tpdiff)) / 2 
   L=area(pch_ulvt_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MP(pch_ulvtll_mac) pch_ulvtll_mac_gate pch_ulvtll_mac_gate(G) tpdiff(S) tpdiff(D) nxwell(B) <ppitch_aux>   
[
   property nfin,L,ppitch
   W=(perimeter_coincide(pch_ulvtll_mac_gate, tpdiff ) + perimeter_inside(pch_ulvtll_mac_gate, tpdiff)) / 2 
   L=area(pch_ulvtll_mac_gate) / W
   nfin=TRUNC( ((W * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   ppitch = DFM_NUMERIC_VALUE(ppitch_aux,"ppitch")
]
DEVICE MP(pchpu_10tsr_mac) pgate_pu_10tsr_mac pgate_pu_10tsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_10tsr_mac)/2
   L = area(pgate_pu_10tsr_mac)/W1
]
DEVICE MP(pchpu_8tsr_mac) pgate_pu_8tsr_mac pgate_pu_8tsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_8tsr_mac)/2
   L = area(pgate_pu_8tsr_mac)/W1
]
DEVICE MP(pchpu_dpsr_mac) pgate_pu_dpsr_mac pgate_pu_dpsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_dpsr_mac)/2
   L = area(pgate_pu_dpsr_mac)/W1
]
DEVICE MP(pchpu_hc8tsr_mac) pgate_pu_hc8tsr_mac pgate_pu_hc8tsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_hc8tsr_mac)/2
   L = area(pgate_pu_hc8tsr_mac)/W1
]
DEVICE MP(pchpu_hcsr_mac) pgate_pu_hcsr_mac pgate_pu_hcsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_hcsr_mac)/2
   L = area(pgate_pu_hcsr_mac)/W1
]
DEVICE MP(pchpu_hdsr_mac) pgate_pu_hdsr_mac pgate_pu_hdsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_hdsr_mac)/2
   L = area(pgate_pu_hdsr_mac)/W1
]
DEVICE MP(pchpu_hshcsr_mac) pgate_pu_hshcsr_mac pgate_pu_hshcsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_hshcsr_mac)/2
   L = area(pgate_pu_hshcsr_mac)/W1
]
DEVICE MP(pchpu_ulvtll10tsr_mac) pgate_pu_ulvtll10tsr_mac pgate_pu_ulvtll10tsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_ulvtll10tsr_mac)/2
   L = area(pgate_pu_ulvtll10tsr_mac)/W1
]
DEVICE MP(pchpu_ulvtll8tsr_mac) pgate_pu_ulvtll8tsr_mac pgate_pu_ulvtll8tsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_ulvtll8tsr_mac)/2
   L = area(pgate_pu_ulvtll8tsr_mac)/W1
]
DEVICE MP(pchpu_ulvtllhc8tsr_mac) pgate_pu_ulvtllhc8tsr_mac pgate_pu_ulvtllhc8tsr_mac(G) tpdiff(S) tpdiff(D) nxwell(B) <ODs>   
[
   property nfin,L
   nfin = count(ODs)
   W1 = perimeter_coincide(tpdiff,pgate_pu_ulvtllhc8tsr_mac)/2
   L = area(pgate_pu_ulvtllhc8tsr_mac)/W1
]

#ENDIF

#IFDEF FILTER_MPODE
LVS FILTER MN(nch_mpode12_mac)       OPEN LAYOUT SOURCE
LVS FILTER MN(nch_mpodeelvt_mac)     OPEN LAYOUT SOURCE
LVS FILTER MN(nch_mpodelvt_mac)      OPEN LAYOUT SOURCE
LVS FILTER MN(nch_mpodelvtll_mac)    OPEN LAYOUT SOURCE
LVS FILTER MN(nch_mpodesvt_mac)      OPEN LAYOUT SOURCE
LVS FILTER MN(nch_mpodeulvt_mac)     OPEN LAYOUT SOURCE
LVS FILTER MN(nch_mpodeulvtll_mac)   OPEN LAYOUT SOURCE
LVS FILTER MP(pch_mpode12_mac)       OPEN LAYOUT SOURCE
LVS FILTER MP(pch_mpodeelvt_mac)     OPEN LAYOUT SOURCE
LVS FILTER MP(pch_mpodelvt_mac)      OPEN LAYOUT SOURCE
LVS FILTER MP(pch_mpodelvtll_mac)    OPEN LAYOUT SOURCE
LVS FILTER MP(pch_mpodesvt_mac)      OPEN LAYOUT SOURCE
LVS FILTER MP(pch_mpodeulvt_mac)     OPEN LAYOUT SOURCE
LVS FILTER MP(pch_mpodeulvtll_mac)   OPEN LAYOUT SOURCE
#ENDIF

TRACE PROPERTY LDDN(nch_hia12_mac) L L MOS_Lerr
TRACE PROPERTY LDDN(nch_hia12_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_12_dnw_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_12_dnw_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_12_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_12_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_eflvt_dnw_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_eflvt_dnw_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_eflvt_dnw_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_eflvt_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_eflvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_eflvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_efsvt_dnw_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_efsvt_dnw_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_efsvt_dnw_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_efsvt_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_efsvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_efsvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_elvt_dnw_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_elvt_dnw_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_elvt_dnw_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_elvt_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_elvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_elvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_lvt_dnw_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_lvt_dnw_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_lvt_dnw_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_lvt_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_lvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_lvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_lvtll_dnw_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_lvtll_dnw_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_lvtll_dnw_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_lvtll_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_lvtll_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_lvtll_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_mpode12_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_mpode12_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_mpodeelvt_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_mpodeelvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_mpodeelvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_mpodelvt_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_mpodelvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_mpodelvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_mpodelvtll_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_mpodelvtll_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_mpodelvtll_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_mpodesvt_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_mpodesvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_mpodesvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_mpodeulvt_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_mpodeulvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_mpodeulvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_mpodeulvtll_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_mpodeulvtll_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_mpodeulvtll_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_svt_dnw_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_svt_dnw_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_svt_dnw_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_svt_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_svt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_svt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_ulvt_dnw_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_ulvt_dnw_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_ulvt_dnw_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_ulvt_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_ulvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_ulvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_ulvtll_dnw_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_ulvtll_dnw_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_ulvtll_dnw_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nch_ulvtll_mac) L L MOS_Lerr
TRACE PROPERTY MN(nch_ulvtll_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nch_ulvtll_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MN(nchpd_10trpsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_10trpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_10tsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_10tsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_8trpsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_8trpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_8tsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_8tsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_dpsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_dpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_hc8trpsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_hc8trpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_hc8tsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_hc8tsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_hcsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_hcsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_hdsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_hdsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_hshcsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_hshcsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_ulvtll10trpsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_ulvtll10trpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_ulvtll10tsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_ulvtll10tsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_ulvtll8trpsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_ulvtll8trpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_ulvtll8tsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_ulvtll8tsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_ulvtllhc8trpsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_ulvtllhc8trpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpd_ulvtllhc8tsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpd_ulvtllhc8tsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_10trpsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_10trpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_10tsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_10tsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_8trpsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_8trpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_8tsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_8tsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_dpsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_dpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_hc8trpsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_hc8trpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_hc8tsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_hc8tsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_hcsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_hcsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_hdsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_hdsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_hshcsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_hshcsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_ulvtll10trpsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_ulvtll10trpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_ulvtll10tsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_ulvtll10tsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_ulvtll8trpsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_ulvtll8trpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_ulvtll8tsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_ulvtll8tsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_ulvtllhc8trpsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_ulvtllhc8trpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MN(nchpg_ulvtllhc8tsr_mac) L L MOS_Lerr
TRACE PROPERTY MN(nchpg_ulvtllhc8tsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_12_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_12_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_eflvt_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_eflvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_eflvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_efsvt_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_efsvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_efsvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_elvt_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_elvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_elvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_lvt_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_lvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_lvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_lvtll_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_lvtll_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_lvtll_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_mpode12_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_mpode12_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_mpodeelvt_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_mpodeelvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_mpodeelvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_mpodelvt_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_mpodelvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_mpodelvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_mpodelvtll_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_mpodelvtll_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_mpodelvtll_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_mpodesvt_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_mpodesvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_mpodesvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_mpodeulvt_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_mpodeulvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_mpodeulvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_mpodeulvtll_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_mpodeulvtll_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_mpodeulvtll_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_svt_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_svt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_svt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_ulvt_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_ulvt_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_ulvt_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pch_ulvtll_mac) L L MOS_Lerr
TRACE PROPERTY MP(pch_ulvtll_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pch_ulvtll_mac) ppitch ppitch MOS_PPITCHerr
TRACE PROPERTY MP(pchpu_10tsr_mac) L L MOS_Lerr
TRACE PROPERTY MP(pchpu_10tsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pchpu_8tsr_mac) L L MOS_Lerr
TRACE PROPERTY MP(pchpu_8tsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pchpu_dpsr_mac) L L MOS_Lerr
TRACE PROPERTY MP(pchpu_dpsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pchpu_hc8tsr_mac) L L MOS_Lerr
TRACE PROPERTY MP(pchpu_hc8tsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pchpu_hcsr_mac) L L MOS_Lerr
TRACE PROPERTY MP(pchpu_hcsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pchpu_hdsr_mac) L L MOS_Lerr
TRACE PROPERTY MP(pchpu_hdsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pchpu_hshcsr_mac) L L MOS_Lerr
TRACE PROPERTY MP(pchpu_hshcsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pchpu_ulvtll10tsr_mac) L L MOS_Lerr
TRACE PROPERTY MP(pchpu_ulvtll10tsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pchpu_ulvtll8tsr_mac) L L MOS_Lerr
TRACE PROPERTY MP(pchpu_ulvtll8tsr_mac) nfin nfin MOS_NFINerr
TRACE PROPERTY MP(pchpu_ulvtllhc8tsr_mac) L L MOS_Lerr
TRACE PROPERTY MP(pchpu_ulvtllhc8tsr_mac) nfin nfin MOS_NFINerr
DEVICE Q(pnp_i1_mac) cemit_io_i1_mac coll1 cnbase1 tpdiff_bjt netlist element "X" netlist model pnp_i1_mac
DEVICE Q(pnp_i2_mac) cemit_io_i2_mac coll1 cnbase1 tpdiff_bjt netlist element "X" netlist model pnp_i2_mac
DEVICE Q(pnp_p1_mac) cemit_io_p1_mac psub_term nxwell tpdiff_bjt netlist element "X" netlist model pnp_p1_mac
DEVICE D(nwdio) nwdio_r psub nxwell netlist model nwdio
  TRACE PROPERTY D(nwdio) A A DIO_Aerr

// User define devices 
//

//

//

//

//

//

//

//

//

//

#IFDEF extract_dnwpsub
DEVICE D(dnwpsub) dnwdio psub_term DNW [
   property a, pj
   a = area(DNW)
   pj = perimeter(DNW) 
]
TRACE PROPERTY D(dnwpsub) a a DIOWELL_Aerr
#ENDIF

DEVICE efuse_m0 m0efuse M0_A(PLUS) M0_A(MINUS) (PLUS MINUS) [
property l,w
  w = perimeter_coincide(m0efuse,M0_A)/2
  l = area(m0efuse)/w
]
TRACE PROPERTY efuse_m0 w w RES_Werr
TRACE PROPERTY efuse_m0 l l RES_Lerr

DEVICE efuse_m1 m1efuse M1_A(PLUS) M1_A(MINUS) (PLUS MINUS) [
property l,w
  w = perimeter_coincide(m1efuse,M1_A)/2
  l = area(m1efuse)/w
]
TRACE PROPERTY efuse_m1 w w RES_Werr
TRACE PROPERTY efuse_m1 l l RES_Lerr

DEVICE efuse_m4 m4efuse M4(PLUS) M4(MINUS) (PLUS MINUS) [
property l,w
  w = perimeter_coincide(m4efuse,M4)/2
  l = area(m4efuse)/w
]
TRACE PROPERTY efuse_m4 w w RES_Werr
TRACE PROPERTY efuse_m4 l l RES_Lerr

DEVICE efuse_mx m2efuse M2_A(PLUS) M2_A(MINUS) (PLUS MINUS) [
property l,w
  w = perimeter_coincide(m2efuse,M2_A)/2
  l = area(m2efuse)/w
]
TRACE PROPERTY efuse_mx w w RES_Werr
TRACE PROPERTY efuse_mx l l RES_Lerr

DEVICE mimcap_shp1_4tlv shpmim1_reg_4tlv TPC_GND_1(MTP) MPC_LV_1(MMP) BPC_GND_1(MBP) BPC_LV_1(MBP_LV) <SHPMIM_MT_LV> <SHPMIM_MB_LV> <SHPMIM_BB_LV> [
  property area_mt_mim, area_mb_mim, area_blv_mim

  area_mt_mim = area(SHPMIM_MT_LV)
  area_mb_mim = area(SHPMIM_MB_LV)
  area_blv_mim = area(SHPMIM_BB_LV)

]
TRACE PROPERTY mimcap_shp1_4tlv area_mt_mim area_mt_mim MIMCAP_Aerr
TRACE PROPERTY mimcap_shp1_4tlv area_mb_mim area_mb_mim MIMCAP_Aerr
TRACE PROPERTY mimcap_shp1_4tlv area_blv_mim area_blv_mim MIMCAP_Aerr

DEVICE mimcap_shp1_5thv shpmim1_reg_5thv TPC_GND_1(MTP) MPC_LV_1(MMP) BPC_GND_1(MBP) BPC_LV_1(MBP_LV) BPC_HV1_1(MBP_HV) <SHPMIM_MT_LV> <SHPMIM_MB_LV> <SHPMIM_BB_LV> <SHPMIM_MBB_HV1> [
  property area_mt_mim, area_mb_mim, area_blv_mim, area_mbhv_mim

  area_mt_mim = area(SHPMIM_MT_LV)
  area_mb_mim = area(SHPMIM_MB_LV)
  area_blv_mim = area(SHPMIM_BB_LV)
  area_mbhv_mim = area(SHPMIM_MBB_HV1)

]
TRACE PROPERTY mimcap_shp1_5thv area_mt_mim area_mt_mim MIMCAP_Aerr
TRACE PROPERTY mimcap_shp1_5thv area_mb_mim area_mb_mim MIMCAP_Aerr
TRACE PROPERTY mimcap_shp1_5thv area_blv_mim area_blv_mim MIMCAP_Aerr
TRACE PROPERTY mimcap_shp1_5thv area_mbhv_mim area_mbhv_mim MIMCAP_Aerr

DEVICE mimcap_shp2_4thv shpmim21_reg_4thv TPC_GND_2(MTP) MPC_LV_2(MMP) BPC_GND_2(MBP) BPC_HV2_2(MBP_HV) <SHPMIM_MT_LV> <SHPMIM_MB_LV> <SHPMIM_BB_HV2> [
  property area_mt_mim, area_mb_mim, area_bhv_mim

  area_mt_mim  = area(SHPMIM_MT_LV)
  area_mb_mim  = area(SHPMIM_MB_LV)
  area_bhv_mim = area(SHPMIM_BB_HV2)

]
TRACE PROPERTY mimcap_shp2_4thv area_mt_mim area_mt_mim MIMCAP_Aerr
TRACE PROPERTY mimcap_shp2_4thv area_mb_mim area_mb_mim MIMCAP_Aerr
TRACE PROPERTY mimcap_shp2_4thv area_bhv_mim area_bhv_mim MIMCAP_Aerr

DEVICE mimcap_shp2_4tlv shpmim2_reg_4tlv TPC_GND_2(MTP) MPC_LV_2(MMP) BPC_GND_2(MBP) BPC_LV_2(MBP_LV) <SHPMIM_MT_LV> <SHPMIM_MB_LV> <SHPMIM_BB_LV> [
  property area_mt_mim, area_mb_mim, area_blv_mim

  area_mt_mim = area(SHPMIM_MT_LV)
  area_mb_mim = area(SHPMIM_MB_LV)
  area_blv_mim = area(SHPMIM_BB_LV)

]
TRACE PROPERTY mimcap_shp2_4tlv area_mt_mim area_mt_mim MIMCAP_Aerr
TRACE PROPERTY mimcap_shp2_4tlv area_mb_mim area_mb_mim MIMCAP_Aerr
TRACE PROPERTY mimcap_shp2_4tlv area_blv_mim area_blv_mim MIMCAP_Aerr

DEVICE mimcap_shp2_5thv shpmim2_reg_5thv TPC_GND_2(MTP) MPC_LV_2(MMP) BPC_GND_2(MBP) BPC_LV_2(MBP_LV) BPC_HV2_2(MBP_HV) <SHPMIM_MT_LV> <SHPMIM_MB_LV> <SHPMIM_BB_LV> <SHPMIM_BB_HV2> [
  property area_mt_mim, area_mb_mim, area_blv_mim, area_bhv_mim

  area_mt_mim = area(SHPMIM_MT_LV)
  area_mb_mim = area(SHPMIM_MB_LV)
  area_blv_mim = area(SHPMIM_BB_LV)
  area_bhv_mim = area(SHPMIM_BB_HV2)

]
TRACE PROPERTY mimcap_shp2_5thv area_mt_mim area_mt_mim MIMCAP_Aerr
TRACE PROPERTY mimcap_shp2_5thv area_mb_mim area_mb_mim MIMCAP_Aerr
TRACE PROPERTY mimcap_shp2_5thv area_blv_mim area_blv_mim MIMCAP_Aerr
TRACE PROPERTY mimcap_shp2_5thv area_bhv_mim area_bhv_mim MIMCAP_Aerr

DEVICE mimcap_sin_shd_3t shdmim_reg TPC(MTP) MPC(MMP) BPC(MBP) <SHDMIM_TOP> <SHDMIM_BOT> [
  property area_top_mim, area_bot_mim

  area_top_mim = area(SHDMIM_TOP)
  area_bot_mim = area(SHDMIM_BOT)

]
TRACE PROPERTY mimcap_sin_shd_3t area_top_mim area_top_mim MIMCAP_Aerr
TRACE PROPERTY mimcap_sin_shd_3t area_bot_mim area_bot_mim MIMCAP_Aerr



















DEVICE crtmom_wo cmom0_reg_psub mom0plus_a(PLUS) mom0minus_b(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 0
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom0_reg_nw mom0plus_a(PLUS) mom0minus_b(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 0
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_2t cmom0_reg_2t mom0plus_a(PLUS) mom0minus_b(MINUS) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxc
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 0
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_wo_mx cmom0_mx_reg_psub_a mom0p1_a(PLUS1) mom0m1_b(MINUS1) mom0p2_a(PLUS2) mom0m2_b(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 0
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom0_mx_reg_psub_b mom0p1_b(PLUS1) mom0m1_a(MINUS1) mom0p2_b(PLUS2) mom0m2_a(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 0
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom0_mx_reg_nw_a mom0p1_a(PLUS1) mom0m1_b(MINUS1) mom0p2_a(PLUS2) mom0m2_b(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 0
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom0_mx_reg_nw_b mom0p1_b(PLUS1) mom0m1_a(MINUS1) mom0p2_b(PLUS2) mom0m2_a(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 0
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_mx_4t cmom0_mx_reg_4t_a mom0p1_a(PLUS1) mom0m1_b(MINUS1) mom0p2_a(PLUS2) mom0m2_b(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxc,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 0
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_mx_4t cmom0_mx_reg_4t_b mom0p1_b(PLUS1) mom0m1_a(MINUS1) mom0p2_b(PLUS2) mom0m2_a(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxc,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 0
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_wo_rf cmom0_rf_reg_psub mom0plus_a(PLUS) mom0minus_b(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 0
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom0_rf_reg_nw mom0plus_a(PLUS) mom0minus_b(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 0
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]





DEVICE crtmom_wo cmom1_reg_psub mom1plus_a(PLUS) mom1minus_b(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 1
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom1_reg_nw mom1plus_a(PLUS) mom1minus_b(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 1
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_2t cmom1_reg_2t mom1plus_a(PLUS) mom1minus_b(MINUS) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxc
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 1
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_wo_mx cmom1_mx_reg_psub_a mom1p1_a(PLUS1) mom1m1_b(MINUS1) mom1p2_a(PLUS2) mom1m2_b(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 1
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom1_mx_reg_psub_b mom1p1_b(PLUS1) mom1m1_a(MINUS1) mom1p2_b(PLUS2) mom1m2_a(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 1
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom1_mx_reg_nw_a mom1p1_a(PLUS1) mom1m1_b(MINUS1) mom1p2_a(PLUS2) mom1m2_b(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 1
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom1_mx_reg_nw_b mom1p1_b(PLUS1) mom1m1_a(MINUS1) mom1p2_b(PLUS2) mom1m2_a(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 1
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_mx_4t cmom1_mx_reg_4t_a mom1p1_a(PLUS1) mom1m1_b(MINUS1) mom1p2_a(PLUS2) mom1m2_b(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxc,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 1
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_mx_4t cmom1_mx_reg_4t_b mom1p1_b(PLUS1) mom1m1_a(MINUS1) mom1p2_b(PLUS2) mom1m2_a(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxc,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 1
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_wo_rf cmom1_rf_reg_psub mom1plus_a(PLUS) mom1minus_b(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 1
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom1_rf_reg_nw mom1plus_a(PLUS) mom1minus_b(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 1
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]





DEVICE crtmom_wo cmom2_reg_psub mom2plus_a(PLUS) mom2minus_b(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 2
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom2_reg_nw mom2plus_a(PLUS) mom2minus_b(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 2
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_2t cmom2_reg_2t mom2plus_a(PLUS) mom2minus_b(MINUS) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxc
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 2
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_wo_mx cmom2_mx_reg_psub_a mom2p1_a(PLUS1) mom2m1_b(MINUS1) mom2p2_a(PLUS2) mom2m2_b(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 2
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom2_mx_reg_psub_b mom2p1_b(PLUS1) mom2m1_a(MINUS1) mom2p2_b(PLUS2) mom2m2_a(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 2
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom2_mx_reg_nw_a mom2p1_a(PLUS1) mom2m1_b(MINUS1) mom2p2_a(PLUS2) mom2m2_b(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 2
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom2_mx_reg_nw_b mom2p1_b(PLUS1) mom2m1_a(MINUS1) mom2p2_b(PLUS2) mom2m2_a(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 2
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_mx_4t cmom2_mx_reg_4t_a mom2p1_a(PLUS1) mom2m1_b(MINUS1) mom2p2_a(PLUS2) mom2m2_b(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxc,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 2
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_mx_4t cmom2_mx_reg_4t_b mom2p1_b(PLUS1) mom2m1_a(MINUS1) mom2p2_b(PLUS2) mom2m2_a(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxc,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 2
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_wo_rf cmom2_rf_reg_psub mom2plus_a(PLUS) mom2minus_b(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 2
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom2_rf_reg_nw mom2plus_a(PLUS) mom2minus_b(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 2
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]





DEVICE crtmom_wo cmom3_reg_psub_non mom3plus(PLUS) mom3minus(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 3
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom3_reg_nw_non mom3plus(PLUS) mom3minus(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 3
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_2t cmom3_reg_2t_non mom3plus(PLUS) mom3minus(MINUS) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxc
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 3
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom3_mx_reg_psub_non mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 3
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom3_mx_reg_nw_non mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 3
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_mx_4t cmom3_mx_reg_4t_non mom3p1(PLUS1) mom3m1(MINUS1) mom3p2(PLUS2) mom3m2(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxc,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 3
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_wo_rf cmom3_rf_reg_psub_non mom3plus(PLUS) mom3minus(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 3
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom3_rf_reg_nw_non mom3plus(PLUS) mom3minus(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 3
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]





DEVICE crtmom_wo cmom4_reg_psub_non mom4plus(PLUS) mom4minus(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 4
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom4_reg_nw_non mom4plus(PLUS) mom4minus(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 4
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_2t cmom4_reg_2t_non mom4plus(PLUS) mom4minus(MINUS) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxc
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 4
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom4_mx_reg_psub_non mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 4
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom4_mx_reg_nw_non mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 4
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_mx_4t cmom4_mx_reg_4t_non mom4p1(PLUS1) mom4m1(MINUS1) mom4p2(PLUS2) mom4m2(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxc,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 4
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_wo_rf cmom4_rf_reg_psub_non mom4plus(PLUS) mom4minus(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 4
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom4_rf_reg_nw_non mom4plus(PLUS) mom4minus(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 4
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]





DEVICE crtmom_wo cmom5_reg_psub mom5plus_a(PLUS) mom5minus_b(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 5
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom5_reg_nw mom5plus_a(PLUS) mom5minus_b(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 5
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_2t cmom5_reg_2t mom5plus_a(PLUS) mom5minus_b(MINUS) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxc
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 5
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_wo_mx cmom5_mx_reg_psub_a mom5p1_a(PLUS1) mom5m1_b(MINUS1) mom5p2_a(PLUS2) mom5m2_b(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 5
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom5_mx_reg_psub_b mom5p1_b(PLUS1) mom5m1_a(MINUS1) mom5p2_b(PLUS2) mom5m2_a(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 5
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom5_mx_reg_nw_a mom5p1_a(PLUS1) mom5m1_b(MINUS1) mom5p2_a(PLUS2) mom5m2_b(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 5
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom5_mx_reg_nw_b mom5p1_b(PLUS1) mom5m1_a(MINUS1) mom5p2_b(PLUS2) mom5m2_a(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 5
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_mx_4t cmom5_mx_reg_4t_a mom5p1_a(PLUS1) mom5m1_b(MINUS1) mom5p2_a(PLUS2) mom5m2_b(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxc,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 5
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_mx_4t cmom5_mx_reg_4t_b mom5p1_b(PLUS1) mom5m1_a(MINUS1) mom5p2_b(PLUS2) mom5m2_a(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxc,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 5
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_wo_rf cmom5_rf_reg_psub mom5plus_a(PLUS) mom5minus_b(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 5
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom5_rf_reg_nw mom5plus_a(PLUS) mom5minus_b(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 5
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]





DEVICE crtmom_wo cmom6_reg_psub_non mom6plus(PLUS) mom6minus(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 6
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom6_reg_nw_non mom6plus(PLUS) mom6minus(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 6
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_2t cmom6_reg_2t_non mom6plus(PLUS) mom6minus(MINUS) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxc
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 6
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom6_mx_reg_psub_non mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 6
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom6_mx_reg_nw_non mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 6
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_mx_4t cmom6_mx_reg_4t_non mom6p1(PLUS1) mom6m1(MINUS1) mom6p2(PLUS2) mom6m2(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxc,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 6
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_wo_rf cmom6_rf_reg_psub_non mom6plus(PLUS) mom6minus(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 6
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom6_rf_reg_nw_non mom6plus(PLUS) mom6minus(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 6
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]





DEVICE crtmom_wo cmom7_reg_psub_non mom7plus(PLUS) mom7minus(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 7
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom7_reg_nw_non mom7plus(PLUS) mom7minus(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 7
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_2t cmom7_reg_2t_non mom7plus(PLUS) mom7minus(MINUS) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxc
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 7
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom7_mx_reg_psub_non mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 7
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom7_mx_reg_nw_non mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 7
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_mx_4t cmom7_mx_reg_4t_non mom7p1(PLUS1) mom7m1(MINUS1) mom7p2(PLUS2) mom7m2(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxc,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 7
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_wo_rf cmom7_rf_reg_psub_non mom7plus(PLUS) mom7minus(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 7
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom7_rf_reg_nw_non mom7plus(PLUS) mom7minus(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 7
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]





DEVICE crtmom_wo cmom8_reg_psub_non mom8plus(PLUS) mom8minus(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 8
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom8_reg_nw_non mom8plus(PLUS) mom8minus(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 8
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_2t cmom8_reg_2t_non mom8plus(PLUS) mom8minus(MINUS) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxc
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 8
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom8_mx_reg_psub_non mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 8
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom8_mx_reg_nw_non mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 8
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_mx_4t cmom8_mx_reg_4t_non mom8p1(PLUS1) mom8m1(MINUS1) mom8p2(PLUS2) mom8m2(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxc,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 8
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_wo_rf cmom8_rf_reg_psub_non mom8plus(PLUS) mom8minus(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 8
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom8_rf_reg_nw_non mom8plus(PLUS) mom8minus(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 8
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]





DEVICE crtmom_wo cmom9_reg_psub_non mom9plus(PLUS) mom9minus(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 9
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom9_reg_nw_non mom9plus(PLUS) mom9minus(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 9
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_2t cmom9_reg_2t_non mom9plus(PLUS) mom9minus(MINUS) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxc
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 9
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom9_mx_reg_psub_non mom9p1(PLUS1) mom9m1(MINUS1) mom9p2(PLUS2) mom9m2(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 9
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom9_mx_reg_nw_non mom9p1(PLUS1) mom9m1(MINUS1) mom9p2(PLUS2) mom9m2(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 9
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_mx_4t cmom9_mx_reg_4t_non mom9p1(PLUS1) mom9m1(MINUS1) mom9p2(PLUS2) mom9m2(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxc,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 9
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_wo_rf cmom9_rf_reg_psub_non mom9plus(PLUS) mom9minus(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 9
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom9_rf_reg_nw_non mom9plus(PLUS) mom9minus(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 9
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]





DEVICE crtmom_wo cmom10_reg_psub_non mom10plus(PLUS) mom10minus(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 10
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom10_reg_nw_non mom10plus(PLUS) mom10minus(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 10
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_2t cmom10_reg_2t_non mom10plus(PLUS) mom10minus(MINUS) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxc
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 10
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom10_mx_reg_psub_non mom10p1(PLUS1) mom10m1(MINUS1) mom10p2(PLUS2) mom10m2(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 10
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom10_mx_reg_nw_non mom10p1(PLUS1) mom10m1(MINUS1) mom10p2(PLUS2) mom10m2(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 10
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_mx_4t cmom10_mx_reg_4t_non mom10p1(PLUS1) mom10m1(MINUS1) mom10p2(PLUS2) mom10m2(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxc,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 10
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_wo_rf cmom10_rf_reg_psub_non mom10plus(PLUS) mom10minus(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 10
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom10_rf_reg_nw_non mom10plus(PLUS) mom10minus(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 10
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]





DEVICE crtmom_wo cmom11_reg_psub_non mom11plus(PLUS) mom11minus(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 11
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom11_reg_nw_non mom11plus(PLUS) mom11minus(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 11
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_2t cmom11_reg_2t_non mom11plus(PLUS) mom11minus(MINUS) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxc
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 11
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom11_mx_reg_psub_non mom11p1(PLUS1) mom11m1(MINUS1) mom11p2(PLUS2) mom11m2(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 11
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom11_mx_reg_nw_non mom11p1(PLUS1) mom11m1(MINUS1) mom11p2(PLUS2) mom11m2(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 11
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_mx_4t cmom11_mx_reg_4t_non mom11p1(PLUS1) mom11m1(MINUS1) mom11p2(PLUS2) mom11m2(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxc,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 11
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_wo_rf cmom11_rf_reg_psub_non mom11plus(PLUS) mom11minus(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 11
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom11_rf_reg_nw_non mom11plus(PLUS) mom11minus(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 11
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]





DEVICE crtmom_wo cmom12_reg_psub_non mom12plus(PLUS) mom12minus(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 12
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom12_reg_nw_non mom12plus(PLUS) mom12minus(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 12
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_2t cmom12_reg_2t_non mom12plus(PLUS) mom12minus(MINUS) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxc
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 12
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom12_mx_reg_psub_non mom12p1(PLUS1) mom12m1(MINUS1) mom12p2(PLUS2) mom12m2(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 12
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom12_mx_reg_nw_non mom12p1(PLUS1) mom12m1(MINUS1) mom12p2(PLUS2) mom12m2(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 12
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_mx_4t cmom12_mx_reg_4t_non mom12p1(PLUS1) mom12m1(MINUS1) mom12p2(PLUS2) mom12m2(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxc,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 12
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_wo_rf cmom12_rf_reg_psub_non mom12plus(PLUS) mom12minus(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 12
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom12_rf_reg_nw_non mom12plus(PLUS) mom12minus(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 12
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]





DEVICE crtmom_wo cmom13_reg_psub_non mom13plus(PLUS) mom13minus(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 13
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom13_reg_nw_non mom13plus(PLUS) mom13minus(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 13
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_2t cmom13_reg_2t_non mom13plus(PLUS) mom13minus(MINUS) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxc
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 13
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom13_mx_reg_psub_non mom13p1(PLUS1) mom13m1(MINUS1) mom13p2(PLUS2) mom13m2(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 13
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom13_mx_reg_nw_non mom13p1(PLUS1) mom13m1(MINUS1) mom13p2(PLUS2) mom13m2(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 13
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_mx_4t cmom13_mx_reg_4t_non mom13p1(PLUS1) mom13m1(MINUS1) mom13p2(PLUS2) mom13m2(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxc,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 13
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_wo_rf cmom13_rf_reg_psub_non mom13plus(PLUS) mom13minus(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 13
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom13_rf_reg_nw_non mom13plus(PLUS) mom13minus(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 13
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]





DEVICE crtmom_wo cmom14_reg_psub_non mom14plus(PLUS) mom14minus(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 14
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo cmom14_reg_nw_non mom14plus(PLUS) mom14minus(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 14
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_2t cmom14_reg_2t_non mom14plus(PLUS) mom14minus(MINUS) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,vapmod,spm,nv,nh,n_mxc
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 14
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_wo_mx cmom14_mx_reg_psub_non mom14p1(PLUS1) mom14m1(MINUS1) mom14p2(PLUS2) mom14m2(MINUS2) psub(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 14
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_wo_mx cmom14_mx_reg_nw_non mom14p1(PLUS1) mom14m1(MINUS1) mom14p2(PLUS2) mom14m2(MINUS2) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 14
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_mx_4t cmom14_mx_reg_4t_non mom14p1(PLUS1) mom14m1(MINUS1) mom14p2(PLUS2) mom14m2(MINUS2) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_LAYER_18> <MOMDMY_NV> <MOMDMY_NH>  [
    property stm,spm,multi,vapmod,n_mxc,nv,nh
    mf1 = count(MOMDMY_all)
    multi = mf1/2
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = 14
    spm = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_wo_rf cmom14_rf_reg_psub_non mom14plus(PLUS) mom14minus(MINUS) psub(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 14
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]
DEVICE crtmom_wo_rf cmom14_rf_reg_nw_non mom14plus(PLUS) mom14minus(MINUS) nxwell(BULK) <MOMDMY_MXC> <MOMDMY_VAP> <MOM_LAYER_18> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,vapmod,spm,nv,nh,n_mxc,shield
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / 2 - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / 2 - 0.1) / 0.04
    stm     = 14
    spm     = TRUNC((( perimeter(MOM_LAYER_18) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / 2 - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }
    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / 2 - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
]



DEVICE crtmom_ary cmom2_ary_reg_nw_a mom2_ary_plus_a(PLUS) mom2_ary_minus_b(MINUS) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 2
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_ary_sm cmom2_ary_reg_sm_a_non mom2_ary_plus_a(PLUS) mom2_ary_minus_b(MINUS) M3(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 2
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_ary_sm_4t cmom2_ary_reg_sm_4t_a_non mom2_ary_plus_a(PLUS) mom2_ary_minus_b(MINUS) nxwell(BULK) M3(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 2
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_sm_rf cmom2_reg_sm_rf_a_non mom2_ary_plus_a(PLUS) mom2_ary_minus_b(MINUS) M3(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 2
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_sm_4t_rf cmom2_reg_sm_4t_rf_a_non mom2_ary_plus_a(PLUS) mom2_ary_minus_b(MINUS) nxwell(BULK) M3(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 2
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_ary cmom3_ary_reg_nw_non mom3_ary_plus(PLUS) mom3_ary_minus(MINUS) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 3
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_ary_sm cmom3_ary_reg_sm_non_non mom3_ary_plus(PLUS) mom3_ary_minus(MINUS) M4(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 3
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_ary_sm_4t cmom3_ary_reg_sm_4t_non_non mom3_ary_plus(PLUS) mom3_ary_minus(MINUS) nxwell(BULK) M4(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 3
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_sm_rf cmom3_reg_sm_rf_non_non mom3_ary_plus(PLUS) mom3_ary_minus(MINUS) M4(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 3
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_sm_4t_rf cmom3_reg_sm_4t_rf_non_non mom3_ary_plus(PLUS) mom3_ary_minus(MINUS) nxwell(BULK) M4(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 3
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_ary cmom4_ary_reg_nw_non mom4_ary_plus(PLUS) mom4_ary_minus(MINUS) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 4
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]


DEVICE crtmom_ary cmom5_ary_reg_nw_a mom5_ary_plus_a(PLUS) mom5_ary_minus_b(MINUS) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 5
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_ary_sm cmom5_ary_reg_sm_a_non mom5_ary_plus_a(PLUS) mom5_ary_minus_b(MINUS) M6(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 5
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_ary_sm_4t cmom5_ary_reg_sm_4t_a_non mom5_ary_plus_a(PLUS) mom5_ary_minus_b(MINUS) nxwell(BULK) M6(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 5
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_sm_rf cmom5_reg_sm_rf_a_non mom5_ary_plus_a(PLUS) mom5_ary_minus_b(MINUS) M6(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 5
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_sm_4t_rf cmom5_reg_sm_4t_rf_a_non mom5_ary_plus_a(PLUS) mom5_ary_minus_b(MINUS) nxwell(BULK) M6(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 5
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_ary cmom6_ary_reg_nw_non mom6_ary_plus(PLUS) mom6_ary_minus(MINUS) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 6
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_ary_sm cmom6_ary_reg_sm_non_non mom6_ary_plus(PLUS) mom6_ary_minus(MINUS) M7(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 6
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_ary_sm_4t cmom6_ary_reg_sm_4t_non_non mom6_ary_plus(PLUS) mom6_ary_minus(MINUS) nxwell(BULK) M7(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 6
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_sm_rf cmom6_reg_sm_rf_non_non mom6_ary_plus(PLUS) mom6_ary_minus(MINUS) M7(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 6
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_sm_4t_rf cmom6_reg_sm_4t_rf_non_non mom6_ary_plus(PLUS) mom6_ary_minus(MINUS) nxwell(BULK) M7(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 6
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_ary cmom7_ary_reg_nw_non mom7_ary_plus(PLUS) mom7_ary_minus(MINUS) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 7
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_ary_sm cmom7_ary_reg_sm_non_non mom7_ary_plus(PLUS) mom7_ary_minus(MINUS) M8(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 7
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_ary_sm_4t cmom7_ary_reg_sm_4t_non_non mom7_ary_plus(PLUS) mom7_ary_minus(MINUS) nxwell(BULK) M8(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 7
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_sm_rf cmom7_reg_sm_rf_non_non mom7_ary_plus(PLUS) mom7_ary_minus(MINUS) M8(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 7
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_sm_4t_rf cmom7_reg_sm_4t_rf_non_non mom7_ary_plus(PLUS) mom7_ary_minus(MINUS) nxwell(BULK) M8(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 7
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_ary cmom8_ary_reg_nw_non mom8_ary_plus(PLUS) mom8_ary_minus(MINUS) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 8
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_ary_sm cmom8_ary_reg_sm_non_non mom8_ary_plus(PLUS) mom8_ary_minus(MINUS) M9(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 8
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_ary_sm_4t cmom8_ary_reg_sm_4t_non_non mom8_ary_plus(PLUS) mom8_ary_minus(MINUS) nxwell(BULK) M9(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 8
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_sm_rf cmom8_reg_sm_rf_non_non mom8_ary_plus(PLUS) mom8_ary_minus(MINUS) M9(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 8
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_sm_4t_rf cmom8_reg_sm_4t_rf_non_non mom8_ary_plus(PLUS) mom8_ary_minus(MINUS) nxwell(BULK) M9(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 8
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_ary cmom9_ary_reg_nw_non mom9_ary_plus(PLUS) mom9_ary_minus(MINUS) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 9
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_ary_sm cmom9_ary_reg_sm_non_non mom9_ary_plus(PLUS) mom9_ary_minus(MINUS) M10(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 9
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_ary_sm_4t cmom9_ary_reg_sm_4t_non_non mom9_ary_plus(PLUS) mom9_ary_minus(MINUS) nxwell(BULK) M10(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 9
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_sm_rf cmom9_reg_sm_rf_non_non mom9_ary_plus(PLUS) mom9_ary_minus(MINUS) M10(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 9
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_sm_4t_rf cmom9_reg_sm_4t_rf_non_non mom9_ary_plus(PLUS) mom9_ary_minus(MINUS) nxwell(BULK) M10(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 9
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_ary cmom10_ary_reg_nw_non mom10_ary_plus(PLUS) mom10_ary_minus(MINUS) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 10
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_ary_sm cmom10_ary_reg_sm_non_non mom10_ary_plus(PLUS) mom10_ary_minus(MINUS) M11(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 10
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_ary_sm_4t cmom10_ary_reg_sm_4t_non_non mom10_ary_plus(PLUS) mom10_ary_minus(MINUS) nxwell(BULK) M11(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 10
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_sm_rf cmom10_reg_sm_rf_non_non mom10_ary_plus(PLUS) mom10_ary_minus(MINUS) M11(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 10
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_sm_4t_rf cmom10_reg_sm_4t_rf_non_non mom10_ary_plus(PLUS) mom10_ary_minus(MINUS) nxwell(BULK) M11(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 10
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_ary cmom11_ary_reg_nw_non mom11_ary_plus(PLUS) mom11_ary_minus(MINUS) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 11
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_ary_sm cmom11_ary_reg_sm_non_non mom11_ary_plus(PLUS) mom11_ary_minus(MINUS) M12(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 11
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_ary_sm_4t cmom11_ary_reg_sm_4t_non_non mom11_ary_plus(PLUS) mom11_ary_minus(MINUS) nxwell(BULK) M12(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 11
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_sm_rf cmom11_reg_sm_rf_non_non mom11_ary_plus(PLUS) mom11_ary_minus(MINUS) M12(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 11
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_sm_4t_rf cmom11_reg_sm_4t_rf_non_non mom11_ary_plus(PLUS) mom11_ary_minus(MINUS) nxwell(BULK) M12(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 11
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_ary cmom12_ary_reg_nw_non mom12_ary_plus(PLUS) mom12_ary_minus(MINUS) nxwell(BULK) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 12
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_ary_sm cmom12_ary_reg_sm_non_non mom12_ary_plus(PLUS) mom12_ary_minus(MINUS) M13(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 12
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_ary_sm_4t cmom12_ary_reg_sm_4t_non_non mom12_ary_plus(PLUS) mom12_ary_minus(MINUS) nxwell(BULK) M13(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> <MOMDMY_ARYX> <MOMDMY_ARYY> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh,aryx,aryy
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 12
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)
    aryx   = (( perimeter(MOMDMY_ARYX) * (1e+6) ) / 2 - 0.2) / 0.4
    aryy   = (( perimeter(MOMDMY_ARYY) * (1e+6) ) / 2 - 0.2) / 0.4

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]
DEVICE crtmom_sm_rf cmom12_reg_sm_rf_non_non mom12_ary_plus(PLUS) mom12_ary_minus(MINUS) M13(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 12
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]

DEVICE crtmom_sm_4t_rf cmom12_reg_sm_4t_rf_non_non mom12_ary_plus(PLUS) mom12_ary_minus(MINUS) nxwell(BULK) M13(TOP) <MOMDMY_all> <MOMDMY_VAP> <MOMDMY_MXC> <MOM_tbs_LAYER_10> <SHIELD_LAYER> <MOMDMY_NV> <MOMDMY_NH> [
    property stm,spm,shield,n_mxc,vapmod,nv,nh
    mf1 = count(MOMDMY_all)
    nv      = (( perimeter(MOMDMY_NV) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    nh      = (( perimeter(MOMDMY_NH) * (1e+6) ) / (mf1*2) - 0.1) / 0.04
    stm = TRUNC((( perimeter(MOM_tbs_LAYER_10) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99) - 1
    spm = 12
    shield = TRUNC((( perimeter(SHIELD_LAYER) * (1e+6) ) / 2 ) / MINGRID_RECT1 - 0.99)

    vapmod1 = ( perimeter(MOMDMY_VAP) * (1e+6) ) / (mf1*2) - 0.05
    if( vapmod1 < 0.051 ) {
	vapmod = 0
    } else {
	vapmod = vapmod1 / 0.1
    }

    n_mxc1    = ( perimeter(MOMDMY_MXC) * (1e+6) ) / (mf1*2) - 0.05
    if( n_mxc1 < 0.051 ) { 
	n_mxc = 0
    } else {
	n_mxc = n_mxc1 / 0.1
    }
]



TRACE PROPERTY crtmom_wo stm      stm      0
TRACE PROPERTY crtmom_wo spm      spm      0
TRACE PROPERTY crtmom_wo vapmod   vapmod   0
TRACE PROPERTY crtmom_wo nv       nv       0
TRACE PROPERTY crtmom_wo nh       nh       0
TRACE PROPERTY crtmom_wo n_mxc    n_mxc    0
TRACE PROPERTY crtmom_wo shield   shield   0

TRACE PROPERTY crtmom_2t stm      stm      0
TRACE PROPERTY crtmom_2t spm      spm      0
TRACE PROPERTY crtmom_2t vapmod   vapmod   0
TRACE PROPERTY crtmom_2t nv       nv       0
TRACE PROPERTY crtmom_2t nh       nh       0
TRACE PROPERTY crtmom_2t n_mxc    n_mxc    0

TRACE PROPERTY crtmom_wo_mx stm      stm      0
TRACE PROPERTY crtmom_wo_mx spm      spm      0
TRACE PROPERTY crtmom_wo_mx vapmod   vapmod   0
TRACE PROPERTY crtmom_wo_mx nv       nv       0
TRACE PROPERTY crtmom_wo_mx nh       nh       0
TRACE PROPERTY crtmom_wo_mx n_mxc    n_mxc    0
TRACE PROPERTY crtmom_wo_mx shield   shield   0
TRACE PROPERTY crtmom_wo_mx multi    multi    0

TRACE PROPERTY crtmom_mx_4t stm      stm      0
TRACE PROPERTY crtmom_mx_4t spm      spm      0
TRACE PROPERTY crtmom_mx_4t vapmod   vapmod   0
TRACE PROPERTY crtmom_mx_4t nv       nv       0
TRACE PROPERTY crtmom_mx_4t nh       nh       0
TRACE PROPERTY crtmom_mx_4t n_mxc    n_mxc    0
TRACE PROPERTY crtmom_mx_4t multi    multi    0

TRACE PROPERTY crtmom_wo_rf stm      stm      0
TRACE PROPERTY crtmom_wo_rf spm      spm      0
TRACE PROPERTY crtmom_wo_rf vapmod   vapmod   0
TRACE PROPERTY crtmom_wo_rf nv       nv       0
TRACE PROPERTY crtmom_wo_rf nh       nh       0
TRACE PROPERTY crtmom_wo_rf n_mxc    n_mxc    0
TRACE PROPERTY crtmom_wo_rf shield   shield   0

TRACE PROPERTY crtmom_ary stm      stm      0
TRACE PROPERTY crtmom_ary spm      spm      0
TRACE PROPERTY crtmom_ary vapmod   vapmod   0
TRACE PROPERTY crtmom_ary nv       nv       0
TRACE PROPERTY crtmom_ary nh       nh       0
TRACE PROPERTY crtmom_ary n_mxc    n_mxc    0
TRACE PROPERTY crtmom_ary shield   shield   0
TRACE PROPERTY crtmom_ary aryx     aryx    0
TRACE PROPERTY crtmom_ary aryy     aryy    0

TRACE PROPERTY crtmom_ary_sm stm      stm      0
TRACE PROPERTY crtmom_ary_sm spm      spm      0
TRACE PROPERTY crtmom_ary_sm vapmod   vapmod   0
TRACE PROPERTY crtmom_ary_sm nv       nv       0
TRACE PROPERTY crtmom_ary_sm nh       nh       0
TRACE PROPERTY crtmom_ary_sm n_mxc    n_mxc    0
TRACE PROPERTY crtmom_ary_sm shield   shield   0
TRACE PROPERTY crtmom_ary_sm aryx     aryx    0
TRACE PROPERTY crtmom_ary_sm aryy     aryy    0

TRACE PROPERTY crtmom_ary_sm_4t stm      stm      0
TRACE PROPERTY crtmom_ary_sm_4t spm      spm      0
TRACE PROPERTY crtmom_ary_sm_4t vapmod   vapmod   0
TRACE PROPERTY crtmom_ary_sm_4t nv       nv       0
TRACE PROPERTY crtmom_ary_sm_4t nh       nh       0
TRACE PROPERTY crtmom_ary_sm_4t n_mxc    n_mxc    0
TRACE PROPERTY crtmom_ary_sm_4t shield   shield   0
TRACE PROPERTY crtmom_ary_sm_4t aryx     aryx    0
TRACE PROPERTY crtmom_ary_sm_4t aryy     aryy    0

TRACE PROPERTY crtmom_sm_rf stm      stm      0
TRACE PROPERTY crtmom_sm_rf spm      spm      0
TRACE PROPERTY crtmom_sm_rf vapmod   vapmod   0
TRACE PROPERTY crtmom_sm_rf nv       nv       0
TRACE PROPERTY crtmom_sm_rf nh       nh       0
TRACE PROPERTY crtmom_sm_rf n_mxc    n_mxc    0
TRACE PROPERTY crtmom_sm_rf shield   shield   0

TRACE PROPERTY crtmom_sm_4t_rf stm      stm      0
TRACE PROPERTY crtmom_sm_4t_rf spm      spm      0
TRACE PROPERTY crtmom_sm_4t_rf vapmod   vapmod   0
TRACE PROPERTY crtmom_sm_4t_rf nv       nv       0
TRACE PROPERTY crtmom_sm_4t_rf nh       nh       0
TRACE PROPERTY crtmom_sm_4t_rf n_mxc    n_mxc    0
TRACE PROPERTY crtmom_sm_4t_rf shield   shield   0


DEVICE moscap_rf var_nw_rf n_gpoly_ulvt(GATE) tndiff(BULK) psub(GNODE) <vargt_rf> <nthin> [
  property lr,br,gr,nfin
  gr = count(nthin)
  br = count(vargt_rf)/gr
  wr = (perimeter_coincide(vargt_rf,tndiff)/2)/(br*gr)
  lr = (area(vargt_rf)/wr)/(br*gr)
  nfin = TRUNC( ((wr * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
]
TRACE PROPERTY moscap_rf nfin nfin MOSCAP_NFINerr
TRACE PROPERTY moscap_rf lr   lr MOSCAP_Lerr
TRACE PROPERTY moscap_rf br   br 0
TRACE PROPERTY moscap_rf gr   gr 0

DEVICE moscap_rf12 var_nw_rf12 n_gpoly_io(GATE) tndiff(BULK) psub(GNODE) <vargt_rf> <nthin> [
  property lr,br,gr,nfin
  gr = count(nthin)
  br = count(vargt_rf)/gr
  wr = (perimeter_coincide(vargt_rf,tndiff)/2)/(br*gr)
  lr = (area(vargt_rf)/wr)/(br*gr)
  nfin = TRUNC( ((wr * 1e6 - FIN_WIDTH_IO) / FIN_PITCH_IO) + 1.01 )
]
TRACE PROPERTY moscap_rf12 nfin nfin MOSCAP_NFINerr
TRACE PROPERTY moscap_rf12 lr   lr MOSCAP_Lerr
TRACE PROPERTY moscap_rf12 br   br 0
TRACE PROPERTY moscap_rf12 gr   gr 0

DEVICE moscap_rf12_nw var_nw_rf12_nw n_gpoly_io(GATE) tndiff(BULK) psub(GNODE) <vargt_rf> <nthin> [
  property lr,br,gr,nfin
  gr = count(nthin)
  br = count(vargt_rf)/gr
  wr = (perimeter_coincide(vargt_rf,tndiff)/2)/(br*gr)
  lr = (area(vargt_rf)/wr)/(br*gr)
  nfin = TRUNC( ((wr * 1e6 - FIN_WIDTH_IO) / FIN_PITCH_IO) + 1.01 )
]
TRACE PROPERTY moscap_rf12_nw nfin nfin MOSCAP_NFINerr
TRACE PROPERTY moscap_rf12_nw lr   lr MOSCAP_Lerr
TRACE PROPERTY moscap_rf12_nw br   br 0
TRACE PROPERTY moscap_rf12_nw gr   gr 0

DEVICE moscap_rf_nw var_nw_rf_nw n_gpoly_ulvt(GATE) tndiff(BULK) psub(GNODE) <vargt_rf> <nthin> [
  property lr,br,gr,nfin
  gr = count(nthin)
  br = count(vargt_rf)/gr
  wr = (perimeter_coincide(vargt_rf,tndiff)/2)/(br*gr)
  lr = (area(vargt_rf)/wr)/(br*gr)
  nfin = TRUNC( ((wr * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
]
TRACE PROPERTY moscap_rf_nw nfin nfin MOSCAP_NFINerr
TRACE PROPERTY moscap_rf_nw lr   lr MOSCAP_Lerr
TRACE PROPERTY moscap_rf_nw br   br 0
TRACE PROPERTY moscap_rf_nw gr   gr 0


DEVICE ndio_12_mac ndio_12_r psub(PLUS) tndiff_dio(MINUS) [
	property nfin, l
	diffn = count(tndiff_dio)
	w = perimeter_inside(tndiff_dio,ndio_12_r) / 2 / diffn
	l = area(ndio_12_r) / w
        nfin = TRUNC( (( w * 1e6 - FIN_WIDTH_IO ) / FIN_PITCH_IO ) + 1.01 )	
]
TRACE PROPERTY ndio_12_mac nfin   nfin   DIO_NFINerr
TRACE PROPERTY ndio_12_mac l      l      DIO_Lerr


DEVICE ndio_12_ntn_mac ndio_12_ntn_r psub(PLUS) tndiff_dio(MINUS) [
	property nfin, l
	diffn = count(tndiff_dio)
	w = perimeter_inside(tndiff_dio,ndio_12_ntn_r) / 2 / diffn
	l = area(ndio_12_ntn_r) / w
        nfin = TRUNC( (( w * 1e6 - FIN_WIDTH_IO ) / FIN_PITCH_IO ) + 1.01 )	
]
TRACE PROPERTY ndio_12_ntn_mac nfin   nfin   DIO_NFINerr
TRACE PROPERTY ndio_12_ntn_mac l      l      DIO_Lerr

DEVICE ndio_hia12_mac hia12_ndio_r psub(PLUS) tndiff_dio(MINUS) <hia_dio_ngate> <ndiff_hdio> [
  property l,nfin,nf
  nf = count(ndiff_hdio)
  nr = count(tndiff_dio)
  w = perimeter_coincide(tndiff_dio,hia_dio_ngate)/nr/2
  nfin = TRUNC( ((w * 1e6 - FIN_WIDTH_IO) / FIN_PITCH_IO) + 1.01 )
  l = area(ndiff_hdio)/nf/w
]
TRACE PROPERTY ndio_hia12_mac nfin  nfin  DIO_NFINerr
TRACE PROPERTY ndio_hia12_mac l     l     DIO_Lerr
TRACE PROPERTY ndio_hia12_mac nf    nf    0

DEVICE ndio_hia12_ntn_mac hia12_ndio_ntn_r psub(PLUS) tndiff_dio(MINUS) <hia_dio_ngate> <ndiff_hdio_ntn> [
  property l,nfin,nf
  nf = count(ndiff_hdio_ntn)
  nr = count(tndiff_dio)
  w = perimeter_coincide(tndiff_dio,hia_dio_ngate)/nr/2
  nfin = TRUNC( ((w * 1e6 - FIN_WIDTH_IO) / FIN_PITCH_IO) + 1.01 )
  l = area(ndiff_hdio_ntn)/nf/w
]
TRACE PROPERTY ndio_hia12_ntn_mac nfin  nfin  DIO_NFINerr
TRACE PROPERTY ndio_hia12_ntn_mac l     l     DIO_Lerr
TRACE PROPERTY ndio_hia12_ntn_mac nf    nf    0


DEVICE ndio_mac ndio_r psub(PLUS) tndiff_dio(MINUS) [
	property nfin, l
	diffn = count(tndiff_dio)
	w = perimeter_inside(tndiff_dio,ndio_r) / 2 / diffn
	l = area(ndio_r) / w
        nfin = TRUNC( (( w * 1e6 - FIN_WIDTH ) / FIN_PITCH ) + 1.01 )	
]
TRACE PROPERTY ndio_mac nfin   nfin   DIO_NFINerr
TRACE PROPERTY ndio_mac l      l      DIO_Lerr

DEVICE nmoscap vargt vargt(PLUS) tndiff(MINUS) <nthin> [
       property lr,nfin
       lr = perimeter_coincide(vargt,nthin)/2
       wr = area(vargt)/lr
       nfin = TRUNC( ((wr * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
]
TRACE PROPERTY nmoscap nfin nfin MOSCAP_NFINerr
TRACE PROPERTY nmoscap lr   lr   MOSCAP_Lerr

DEVICE nmoscap_12 vargt_12 vargt_12(PLUS) tndiff(MINUS) <nthin> [
       property lr,nfin
       lr = perimeter_coincide(vargt_12,nthin)/2
       wr = area(vargt_12)/lr
       nfin = TRUNC( ((wr * 1e6 - FIN_WIDTH_IO) / FIN_PITCH_IO) + 1.01 )
]
TRACE PROPERTY nmoscap_12 nfin nfin MOSCAP_NFINerr
TRACE PROPERTY nmoscap_12 lr   lr   MOSCAP_Lerr

#IFDEF CCI_DFM_RULE
DEVICE npode_12_mac npode_12_mac_gate_edge tndiff(S) npode_12_mac_gate(G) psub(B) <nthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(npode_12_mac_gate_edge, npode_12_mac_gate) 
   l  = area(npode_12_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH_IO) / FIN_PITCH_IO) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE npode_12_mac npode_12_mac_gate_edge tndiff(S) npode_12_mac_gate(G) psub(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(npode_12_mac_gate_edge, npode_12_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH_IO) / FIN_PITCH_IO) + 1.01 )
   l  = area(npode_12_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY npode_12_mac nfin nfin MOS_NFINerr
TRACE PROPERTY npode_12_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER npode_12_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF CCI_DFM_RULE
DEVICE npode_eflvt_mac npode_eflvt_mac_gate_edge tndiff(S) npode_eflvt_mac_gate(G) psub(B) <nthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(npode_eflvt_mac_gate_edge, npode_eflvt_mac_gate) 
   l  = area(npode_eflvt_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE npode_eflvt_mac npode_eflvt_mac_gate_edge tndiff(S) npode_eflvt_mac_gate(G) psub(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(npode_eflvt_mac_gate_edge, npode_eflvt_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(npode_eflvt_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY npode_eflvt_mac nfin nfin MOS_NFINerr
TRACE PROPERTY npode_eflvt_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER npode_eflvt_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF CCI_DFM_RULE
DEVICE npode_efsvt_mac npode_efsvt_mac_gate_edge tndiff(S) npode_efsvt_mac_gate(G) psub(B) <nthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(npode_efsvt_mac_gate_edge, npode_efsvt_mac_gate) 
   l  = area(npode_efsvt_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE npode_efsvt_mac npode_efsvt_mac_gate_edge tndiff(S) npode_efsvt_mac_gate(G) psub(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(npode_efsvt_mac_gate_edge, npode_efsvt_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(npode_efsvt_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY npode_efsvt_mac nfin nfin MOS_NFINerr
TRACE PROPERTY npode_efsvt_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER npode_efsvt_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF CCI_DFM_RULE
DEVICE npode_elvt_mac npode_elvt_mac_gate_edge tndiff(S) npode_elvt_mac_gate(G) psub(B) <nthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(npode_elvt_mac_gate_edge, npode_elvt_mac_gate) 
   l  = area(npode_elvt_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE npode_elvt_mac npode_elvt_mac_gate_edge tndiff(S) npode_elvt_mac_gate(G) psub(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(npode_elvt_mac_gate_edge, npode_elvt_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(npode_elvt_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY npode_elvt_mac nfin nfin MOS_NFINerr
TRACE PROPERTY npode_elvt_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER npode_elvt_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF CCI_DFM_RULE
DEVICE npode_lvt_mac npode_lvt_mac_gate_edge tndiff(S) npode_lvt_mac_gate(G) psub(B) <nthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(npode_lvt_mac_gate_edge, npode_lvt_mac_gate) 
   l  = area(npode_lvt_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE npode_lvt_mac npode_lvt_mac_gate_edge tndiff(S) npode_lvt_mac_gate(G) psub(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(npode_lvt_mac_gate_edge, npode_lvt_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(npode_lvt_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY npode_lvt_mac nfin nfin MOS_NFINerr
TRACE PROPERTY npode_lvt_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER npode_lvt_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF CCI_DFM_RULE
DEVICE npode_lvtll_mac npode_lvtll_mac_gate_edge tndiff(S) npode_lvtll_mac_gate(G) psub(B) <nthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(npode_lvtll_mac_gate_edge, npode_lvtll_mac_gate) 
   l  = area(npode_lvtll_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE npode_lvtll_mac npode_lvtll_mac_gate_edge tndiff(S) npode_lvtll_mac_gate(G) psub(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(npode_lvtll_mac_gate_edge, npode_lvtll_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(npode_lvtll_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY npode_lvtll_mac nfin nfin MOS_NFINerr
TRACE PROPERTY npode_lvtll_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER npode_lvtll_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF CCI_DFM_RULE
DEVICE npode_svt_mac npode_svt_mac_gate_edge tndiff(S) npode_svt_mac_gate(G) psub(B) <nthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(npode_svt_mac_gate_edge, npode_svt_mac_gate) 
   l  = area(npode_svt_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE npode_svt_mac npode_svt_mac_gate_edge tndiff(S) npode_svt_mac_gate(G) psub(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(npode_svt_mac_gate_edge, npode_svt_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(npode_svt_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY npode_svt_mac nfin nfin MOS_NFINerr
TRACE PROPERTY npode_svt_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER npode_svt_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF CCI_DFM_RULE
DEVICE npode_ulvt_mac npode_ulvt_mac_gate_edge tndiff(S) npode_ulvt_mac_gate(G) psub(B) <nthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(npode_ulvt_mac_gate_edge, npode_ulvt_mac_gate) 
   l  = area(npode_ulvt_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE npode_ulvt_mac npode_ulvt_mac_gate_edge tndiff(S) npode_ulvt_mac_gate(G) psub(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(npode_ulvt_mac_gate_edge, npode_ulvt_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(npode_ulvt_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY npode_ulvt_mac nfin nfin MOS_NFINerr
TRACE PROPERTY npode_ulvt_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER npode_ulvt_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF CCI_DFM_RULE
DEVICE npode_ulvtll_mac npode_ulvtll_mac_gate_edge tndiff(S) npode_ulvtll_mac_gate(G) psub(B) <nthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(npode_ulvtll_mac_gate_edge, npode_ulvtll_mac_gate) 
   l  = area(npode_ulvtll_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,nthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE npode_ulvtll_mac npode_ulvtll_mac_gate_edge tndiff(S) npode_ulvtll_mac_gate(G) psub(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(npode_ulvtll_mac_gate_edge, npode_ulvtll_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(npode_ulvtll_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY npode_ulvtll_mac nfin nfin MOS_NFINerr
TRACE PROPERTY npode_ulvtll_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER npode_ulvtll_mac OPEN LAYOUT SOURCE
#ENDIF



DEVICE pdio_12_mac pdio_12_r tpdiff_dio(PLUS) nxwell(MINUS) [
	property nfin, l
	diffn = count(tpdiff_dio)
	w = perimeter_inside(tpdiff_dio,pdio_12_r) / 2 / diffn
	l = area(pdio_12_r) / w
        nfin = TRUNC( (( w * 1e6 - FIN_WIDTH_IO ) / FIN_PITCH_IO ) + 1.01 )	
]
TRACE PROPERTY pdio_12_mac nfin   nfin   DIO_NFINerr
TRACE PROPERTY pdio_12_mac l      l      DIO_Lerr

DEVICE pdio_hia12_mac hia12_pdio_r tpdiff_dio(PLUS) nxwell(MINUS) <hia_dio_pgate> <pdiff_hdio> [
  property l,nfin,nf
  nf = count(pdiff_hdio)
  nr = count(tpdiff_dio)
  w = perimeter_coincide(tpdiff_dio,hia_dio_pgate)/nr/2
  nfin = TRUNC( ((w * 1e6 - FIN_WIDTH_IO) / FIN_PITCH_IO) + 1.01 )
  l = area(pdiff_hdio)/nf/w
]
TRACE PROPERTY pdio_hia12_mac nfin  nfin  DIO_NFINerr
TRACE PROPERTY pdio_hia12_mac l     l     DIO_Lerr
TRACE PROPERTY pdio_hia12_mac nf    nf    0


DEVICE pdio_mac pdio_r tpdiff_dio(PLUS) nxwell(MINUS) [
	property nfin, l
	diffn = count(tpdiff_dio)
	w = perimeter_inside(tpdiff_dio,pdio_r) / 2 / diffn
	l = area(pdio_r) / w
        nfin = TRUNC( (( w * 1e6 - FIN_WIDTH ) / FIN_PITCH ) + 1.01 )	
]
TRACE PROPERTY pdio_mac nfin   nfin   DIO_NFINerr
TRACE PROPERTY pdio_mac l      l      DIO_Lerr

#IFDEF extract_pnwdio
DEVICE D(pnwdio) pnwdio_r_wo_dnw psub nxwell netlist model nwdio
DEVICE D(pnwdio) pnwdio_r_wi_dnw psub nxwell <DNW> netlist model nwdio [
   property a, pj
   a = area(pnwdio_r_wi_dnw)
   pj = perimeter(pnwdio_r_wi_dnw) - perimeter_coincide(pnwdio_r_wi_dnw,DNW)
]    
LVS FILTER D(pnwdio) OPEN LAYOUT
#ENDIF

#IFDEF CCI_DFM_RULE
DEVICE ppode_12_mac ppode_12_mac_gate_edge tpdiff(S) ppode_12_mac_gate(G) nxwell(B) <pthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(ppode_12_mac_gate_edge, ppode_12_mac_gate) 
   l  = area(ppode_12_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH_IO) / FIN_PITCH_IO) + 1.01 )
   PI_S_OD = perimeter_inside(S,pthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE ppode_12_mac ppode_12_mac_gate_edge tpdiff(S) ppode_12_mac_gate(G) nxwell(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(ppode_12_mac_gate_edge, ppode_12_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH_IO) / FIN_PITCH_IO) + 1.01 )
   l  = area(ppode_12_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY ppode_12_mac nfin nfin MOS_NFINerr
TRACE PROPERTY ppode_12_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER ppode_12_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF CCI_DFM_RULE
DEVICE ppode_eflvt_mac ppode_eflvt_mac_gate_edge tpdiff(S) ppode_eflvt_mac_gate(G) nxwell(B) <pthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(ppode_eflvt_mac_gate_edge, ppode_eflvt_mac_gate) 
   l  = area(ppode_eflvt_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,pthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE ppode_eflvt_mac ppode_eflvt_mac_gate_edge tpdiff(S) ppode_eflvt_mac_gate(G) nxwell(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(ppode_eflvt_mac_gate_edge, ppode_eflvt_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(ppode_eflvt_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY ppode_eflvt_mac nfin nfin MOS_NFINerr
TRACE PROPERTY ppode_eflvt_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER ppode_eflvt_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF CCI_DFM_RULE
DEVICE ppode_efsvt_mac ppode_efsvt_mac_gate_edge tpdiff(S) ppode_efsvt_mac_gate(G) nxwell(B) <pthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(ppode_efsvt_mac_gate_edge, ppode_efsvt_mac_gate) 
   l  = area(ppode_efsvt_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,pthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE ppode_efsvt_mac ppode_efsvt_mac_gate_edge tpdiff(S) ppode_efsvt_mac_gate(G) nxwell(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(ppode_efsvt_mac_gate_edge, ppode_efsvt_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(ppode_efsvt_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY ppode_efsvt_mac nfin nfin MOS_NFINerr
TRACE PROPERTY ppode_efsvt_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER ppode_efsvt_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF CCI_DFM_RULE
DEVICE ppode_elvt_mac ppode_elvt_mac_gate_edge tpdiff(S) ppode_elvt_mac_gate(G) nxwell(B) <pthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(ppode_elvt_mac_gate_edge, ppode_elvt_mac_gate) 
   l  = area(ppode_elvt_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,pthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE ppode_elvt_mac ppode_elvt_mac_gate_edge tpdiff(S) ppode_elvt_mac_gate(G) nxwell(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(ppode_elvt_mac_gate_edge, ppode_elvt_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(ppode_elvt_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY ppode_elvt_mac nfin nfin MOS_NFINerr
TRACE PROPERTY ppode_elvt_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER ppode_elvt_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF CCI_DFM_RULE
DEVICE ppode_lvt_mac ppode_lvt_mac_gate_edge tpdiff(S) ppode_lvt_mac_gate(G) nxwell(B) <pthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(ppode_lvt_mac_gate_edge, ppode_lvt_mac_gate) 
   l  = area(ppode_lvt_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,pthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE ppode_lvt_mac ppode_lvt_mac_gate_edge tpdiff(S) ppode_lvt_mac_gate(G) nxwell(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(ppode_lvt_mac_gate_edge, ppode_lvt_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(ppode_lvt_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY ppode_lvt_mac nfin nfin MOS_NFINerr
TRACE PROPERTY ppode_lvt_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER ppode_lvt_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF CCI_DFM_RULE
DEVICE ppode_lvtll_mac ppode_lvtll_mac_gate_edge tpdiff(S) ppode_lvtll_mac_gate(G) nxwell(B) <pthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(ppode_lvtll_mac_gate_edge, ppode_lvtll_mac_gate) 
   l  = area(ppode_lvtll_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,pthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE ppode_lvtll_mac ppode_lvtll_mac_gate_edge tpdiff(S) ppode_lvtll_mac_gate(G) nxwell(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(ppode_lvtll_mac_gate_edge, ppode_lvtll_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(ppode_lvtll_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY ppode_lvtll_mac nfin nfin MOS_NFINerr
TRACE PROPERTY ppode_lvtll_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER ppode_lvtll_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF CCI_DFM_RULE
DEVICE ppode_svt_mac ppode_svt_mac_gate_edge tpdiff(S) ppode_svt_mac_gate(G) nxwell(B) <pthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(ppode_svt_mac_gate_edge, ppode_svt_mac_gate) 
   l  = area(ppode_svt_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,pthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE ppode_svt_mac ppode_svt_mac_gate_edge tpdiff(S) ppode_svt_mac_gate(G) nxwell(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(ppode_svt_mac_gate_edge, ppode_svt_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(ppode_svt_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY ppode_svt_mac nfin nfin MOS_NFINerr
TRACE PROPERTY ppode_svt_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER ppode_svt_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF CCI_DFM_RULE
DEVICE ppode_ulvt_mac ppode_ulvt_mac_gate_edge tpdiff(S) ppode_ulvt_mac_gate(G) nxwell(B) <pthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(ppode_ulvt_mac_gate_edge, ppode_ulvt_mac_gate) 
   l  = area(ppode_ulvt_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,pthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE ppode_ulvt_mac ppode_ulvt_mac_gate_edge tpdiff(S) ppode_ulvt_mac_gate(G) nxwell(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(ppode_ulvt_mac_gate_edge, ppode_ulvt_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(ppode_ulvt_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY ppode_ulvt_mac nfin nfin MOS_NFINerr
TRACE PROPERTY ppode_ulvt_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER ppode_ulvt_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF CCI_DFM_RULE
DEVICE ppode_ulvtll_mac ppode_ulvtll_mac_gate_edge tpdiff(S) ppode_ulvtll_mac_gate(G) nxwell(B) <pthin> 
[
   PROPERTY l,nfin,as,ps,dfm_flag
   dfm_flag = 1
   w  = perimeter_coincide(ppode_ulvtll_mac_gate_edge, ppode_ulvtll_mac_gate) 
   l  = area(ppode_ulvtll_mac_gate) / w
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   PI_S_OD = perimeter_inside(S,pthin)
   as = area(S) * w / PI_S_OD
   ps = perimeter(S) * w / PI_S_OD 
]
#ELSE
DEVICE ppode_ulvtll_mac ppode_ulvtll_mac_gate_edge tpdiff(S) ppode_ulvtll_mac_gate(G) nxwell(B)
[
   PROPERTY nfin,l
   w  = perimeter_coincide(ppode_ulvtll_mac_gate_edge, ppode_ulvtll_mac_gate)
   nfin = TRUNC( ((w * 1e6 - FIN_WIDTH) / FIN_PITCH) + 1.01 )
   l  = area(ppode_ulvtll_mac_gate) / w 
]
#ENDIF

TRACE PROPERTY ppode_ulvtll_mac nfin nfin MOS_NFINerr
TRACE PROPERTY ppode_ulvtll_mac l    l    MOS_Lerr
#IFDEF FILTER_PODE
LVS FILTER ppode_ulvtll_mac OPEN LAYOUT SOURCE
#ENDIF


#IFDEF extract_pwdnw
DEVICE D(pwdnw) rwdio_wi_nxwell psub DNW <nxwell> [
   property a, pj
   a = area(rwdio_wi_nxwell)
   pj = perimeter_coincide(rwdio_wi_nxwell,nxwell)
]   

DEVICE D(pwdnw) rwdio_wo_nxwell psub DNW [
   property a, pj
   a = area(rwdio_wo_nxwell)
   pj = 0
]   

TRACE PROPERTY D(pwdnw) a a DIOWELL_Aerr 
#ENDIF





DEVICE rhim rhim_r7 RH_TN_7(PLUS) RH_TN_7(MINUS) <rhim_aux> (PLUS MINUS) [
property l,w,x_hiem_
  w = perimeter_coincide(rhim_r7,RH_TN_7)/2
  l = area(rhim_r7)/w
  x_hiem_ = DFM_NUMERIC_VALUE(rhim_aux,"hi_em")
]












TRACE PROPERTY rhim w w RES_Werr
TRACE PROPERTY rhim l l RES_Lerr
TRACE PROPERTY rhim x_hiem_ x_hiem_ RES_HIEMerr

DEVICE rmsp mt0res_a M0_A(PLUS) M0_A(MINUS) netlist model rmsp (PLUS MINUS) 
DEVICE rmsp mt0res_b M0_B(PLUS) M0_B(MINUS) netlist model rmsp (PLUS MINUS) 

DEVICE rmsp mt1res_a M1_A(PLUS) M1_A(MINUS) netlist model rmsp (PLUS MINUS) 
DEVICE rmsp mt1res_b M1_B(PLUS) M1_B(MINUS) netlist model rmsp (PLUS MINUS) 

DEVICE rmsp mt2res_a M2_A(PLUS) M2_A(MINUS) netlist model rmsp (PLUS MINUS) 
DEVICE rmsp mt2res_b M2_B(PLUS) M2_B(MINUS) netlist model rmsp (PLUS MINUS) 

DEVICE rmsp mt3res_noab M3(PLUS) M3(MINUS) netlist model rmsp (PLUS MINUS) 

DEVICE rmsp mt4res_noab M4(PLUS) M4(MINUS) netlist model rmsp (PLUS MINUS) 

DEVICE rmsp mt5res_a M5_A(PLUS) M5_A(MINUS) netlist model rmsp (PLUS MINUS) 
DEVICE rmsp mt5res_b M5_B(PLUS) M5_B(MINUS) netlist model rmsp (PLUS MINUS) 

DEVICE rmsp mt6res_noab M6(PLUS) M6(MINUS) netlist model rmsp (PLUS MINUS) 

DEVICE rmsp mt7res_noab M7(PLUS) M7(MINUS) netlist model rmsp (PLUS MINUS) 

DEVICE rmsp mt8res_noab M8(PLUS) M8(MINUS) netlist model rmsp (PLUS MINUS) 

DEVICE rmsp mt9res_noab M9(PLUS) M9(MINUS) netlist model rmsp (PLUS MINUS) 

DEVICE rmsp mt10res_noab M10(PLUS) M10(MINUS) netlist model rmsp (PLUS MINUS) 

DEVICE rmsp mt11res_noab M11(PLUS) M11(MINUS) netlist model rmsp (PLUS MINUS) 

DEVICE rmsp mt12res_noab M12(PLUS) M12(MINUS) netlist model rmsp (PLUS MINUS) 

DEVICE rmsp mt13res_noab M13(PLUS) M13(MINUS) netlist model rmsp (PLUS MINUS) 

DEVICE rmsp mt14res_noab M14(PLUS) M14(MINUS) netlist model rmsp (PLUS MINUS) 

DEVICE rmsp mt15res_noab M15(PLUS) M15(MINUS) netlist model rmsp (PLUS MINUS) 

DEVICE rmsp mt16res_noab M16(PLUS) M16(MINUS) netlist model rmsp (PLUS MINUS) 

DEVICE rmsp mt17res_noab M17(PLUS) M17(MINUS) netlist model rmsp (PLUS MINUS) 

DEVICE rmsp mt18res_noab M18(PLUS) M18(MINUS) netlist model rmsp (PLUS MINUS) 

DEVICE rmsp mtCures Cu_RDL(PLUS) Cu_RDL(MINUS) netlist model rmsp (PLUS MINUS) 

#IFDEF CCI_DFM_RULE
#IFDEF MULTI_DEVICE_EXTRACTION
ERC TVF do_Perc_ADP Perc_ADP_properties annotate_adp_properties

TVF FUNCTION Perc_ADP_properties [/*
    package require CalibreLVS_ERC_TVF

    proc annotate_adp_properties {} {

#IFDEF FLICKER_CORNER_EXTRACTION
     erc::setup_parallel_device_parameters -devices { MN(nch_12_dnw_mac) MN(nch_12_mac) MN(nch_elvt_dnw_mac) MN(nch_elvt_mac) MN(nch_lvt_dnw_mac) MN(nch_lvt_mac) MN(nch_lvtll_dnw_mac) MN(nch_lvtll_mac) MN(nch_mpode12_mac) MN(nch_mpodeelvt_mac) MN(nch_mpodelvt_mac) MN(nch_mpodelvtll_mac) MN(nch_mpodesvt_mac) MN(nch_mpodeulvt_mac) MN(nch_mpodeulvtll_mac) MN(nch_svt_dnw_mac) MN(nch_svt_mac) MN(nch_ulvt_dnw_mac) MN(nch_ulvt_mac) MN(nch_ulvtll_dnw_mac) MN(nch_ulvtll_mac) MP(pch_12_mac) MP(pch_elvt_mac) MP(pch_lvt_mac) MP(pch_lvtll_mac) MP(pch_mpode12_mac) MP(pch_mpodeelvt_mac) MP(pch_mpodelvt_mac) MP(pch_mpodelvtll_mac) MP(pch_mpodesvt_mac) MP(pch_mpodeulvt_mac) MP(pch_mpodeulvtll_mac) MP(pch_svt_mac) MP(pch_ulvt_mac) MP(pch_ulvtll_mac)  } -total { total { L NFIN } }
     erc::execute_parallel_device_parameters 
#ENDIF
#IFDEF SELF_HEATING_EFFECT_EXTRACTION
     erc::setup_device_parameters -devices { MN(nch_svt_mac) MN(nch_lvt_mac) MN(nch_ulvt_mac) MN(nch_elvt_mac) MN(nch_lvtll_mac) MN(nch_ulvtll_mac) MN(nch_12_mac) MN(nch_svt_dnw_mac) MN(nch_lvt_dnw_mac) MN(nch_ulvt_dnw_mac) MN(nch_elvt_dnw_mac) MN(nch_lvtll_dnw_mac) MN(nch_ulvtll_dnw_mac) MN(nch_12_dnw_mac) MN(nch_eflvt_dnw_mac) MN(nch_efsvt_dnw_mac) LDDN(nch_hia12_mac) MP(pch_svt_mac) MP(pch_lvt_mac) MP(pch_ulvt_mac) MP(pch_elvt_mac) MP(pch_lvtll_mac) MP(pch_ulvtll_mac) MP(pch_12_mac) MN(nch_eflvt_mac) MP(pch_eflvt_mac) MN(nch_efsvt_mac) MP(pch_efsvt_mac) MN(nch_mpodesvt_mac) MN(nch_mpodelvt_mac) MN(nch_mpodeulvt_mac) MN(nch_mpodeelvt_mac) MN(nch_mpodelvtll_mac) MN(nch_mpodeulvtll_mac) MN(nch_mpode12_mac) MP(pch_mpodesvt_mac) MP(pch_mpodelvt_mac) MP(pch_mpodeulvt_mac) MP(pch_mpodeelvt_mac) MP(pch_mpodelvtll_mac) MP(pch_mpodeulvtll_mac) MP(pch_mpode12_mac)  } -odind odind -globalx gpocrdx -globaly gpocrdy
     erc::execute_parameters 
#ENDIF
    }
*/]
#ENDIF
#ENDIF
TVF FUNCTION device_function [/*

    package require CalibreLVS_DEVICE_DFM
    namespace import device::*
    proc catching_expr { arg } {
      	#puts "called catching_expr"
      	set rtval 0.0
      	if { [ catch {
            set rtval [ expr $arg ]
      	} result ] } {
            global errorCode
            set tmpError $errorCode
            #puts $result
            if { [ string match "ARITH UNDERFLOW *" $errorCode ] } {
            	#puts "$errorCode error caught during expr"
            	set rtval 0.0
            } elseif { [ string match "ARITH OVERFLOW *" $errorCode ] } {
	    	#puts "$errorCode error caught during expr"
            	set rtval 1e200
            } else {
            	#puts "error propagated during expr"
            	error $result $tmpError
            }
      	}
      	return $rtval
    }

    proc calc_lod_sasb { dfm_vec drawn_width drawn_length units scale } {
       set measurments [ dfm_vec_measurements $dfm_vec ]
       set accum 0.0
       set Wsi [expr {[$drawn_width]*[$scale]} ]
       set Lsi [expr {[$drawn_length]*[$scale]} ]
       foreach segment $measurments {
           foreach { pw sa } $segment {
	        set pw [ expr {$pw*[$units]*[$scale]} ]
		set sa [ expr {$sa*[$units]*[$scale]} ]
		set val [expr {($pw/$Wsi)*1.0/($sa+0.5*$Lsi)} ]
                set accum [ expr {$accum + $val} ]
            }
        }
               return [ expr { ((1.0/$accum)-0.5*$Lsi)/[$scale] } ]
    }

*/]
#IFNDEF LVS_DECK
INCLUDE ./DFM/odSpace.encrypt
#ENDIF
// Serve X-resistor as an built-in resistor (for PATHCHK)
LVS DEVICE TYPE RESISTOR rhim rmsp [POS=PLUS NEG=MINUS]

#IFDEF LVS_DECK
//#############################################
//# ERC CHECK                                 #
//#############################################
all_plug = COPY plug_sel2 
all_nplug = all_plug AND nplug1 
all_pplug = all_plug AND pplug1 
MD_invalid = MDx NOT MD_valid 
check_region = MDx INTERACT MD_invalid 
MD_ntap_region1 = MDx AND all_nplug 
MD_ntap_region = MD_ntap_region1 AND check_region 
MD_ptap_region1 = MDx AND all_pplug 
MD_ptap_region = MD_ptap_region1 AND check_region 
sr_dod_cut_psub2a = PSUB2 INTERACT PSUB2_final >= 2
sr_dod_cut_psub2b = sr_dod_s INTERACT sr_dod_cut_psub2a 
sr_dod_cut_psub2 = sr_dod_cut_psub2b INTERACT PSUB2_final >= 2
erc_nmos_gate_tndiff_gnd = core_nmos_gates TOUCH N2tndiff 
tndiff_virtual_gnd1 = tndiff TOUCH erc_nmos_gate_tndiff_gnd 
tndiff_virtual_gnd2 = tndiff_virtual_gnd1 NOT N2tndiff 
tndiff_virtual_gnd = tndiff_virtual_gnd2 NOT N1tndiff 
erc_pmos_gate_tpdiff_pwr = core_pmos_gates TOUCH N1tpdiff 
tpdiff_virtual_pwr1 = tpdiff TOUCH erc_pmos_gate_tpdiff_pwr 
tpdiff_virtual_pwr2 = tpdiff_virtual_pwr1 NOT N1tpdiff 
tpdiff_virtual_pwr = tpdiff_virtual_pwr2 NOT N2tpdiff 

tpdiff_drain = STAMP tpdiff_virtual_pwr BY tpdiff
tndiff_virtual_pwr = NET AREA RATIO tndiff tpdiff_drain > 0
tndiff_pwr_pre = tndiff_virtual_pwr OR N1tndiff 
#IFDEF MNPP_MPGG_VIRT_PWR_ENABLE 
tndiff_pwr = COPY tndiff_pwr_pre
#ELSE
tndiff_pwr = COPY N1tndiff
#ENDIF

tndiff_drain = STAMP tndiff_virtual_gnd BY tndiff
tpdiff_virtual_gnd = NET AREA RATIO tpdiff tndiff_drain > 0
tpdiff_gnd_pre = tpdiff_virtual_gnd OR N2tpdiff 
#IFDEF MNPP_MPGG_VIRT_PWR_ENABLE 
tpdiff_gnd = COPY tpdiff_gnd_pre
#ELSE
tpdiff_gnd = COPY N2tpdiff
#ENDIF
core_nmos_gates_w_pwr_sd = core_nmos_gates INTERACT tndiff_pwr == 2
core_pmos_gates_w_gnd_sd = core_pmos_gates INTERACT tpdiff_gnd == 2
gate_conn_to_tndiff = EXT core_nmos_gates_w_pwr_sd tndiff <= 0.0005 CONNECTED REGION ABUT == 0
mnpp_nmos_gates = core_nmos_gates NOT INTERACT gate_conn_to_tndiff == 2
gate_conn_to_tpdiff = EXT core_pmos_gates_w_gnd_sd tpdiff <= 0.0005 CONNECTED REGION ABUT == 0
mpgg_pmos_gates = core_pmos_gates NOT INTERACT gate_conn_to_tpdiff == 2
erc_nmpode_gates_1 = mnpp_nmos_gates AND PODE_GATEi 
erc_nfet_gates_1 = mnpp_nmos_gates NOT erc_nmpode_gates_1 
erc_pmpode_gates_1 = mpgg_pmos_gates AND PODE_GATEi 
erc_pfet_gates_1 = mpgg_pmos_gates NOT erc_pmpode_gates_1 
erc_nfet_gates_waive = erc_nfet_gates_1 NOT LUPVTWDMY 
erc_pfet_gates_waive = erc_pfet_gates_1 NOT LUPVTWDMY 
#IFDEF MNPP_MPGG_LAYER_WAIVER_ENABLE 
erc_nfet_gates = COPY erc_nfet_gates_waive
#ELSE
erc_nfet_gates = COPY erc_nfet_gates_1
#ENDIF
#IFDEF MNPP_MPGG_LAYER_WAIVER_ENABLE 
erc_pfet_gates = COPY erc_pfet_gates_waive
#ELSE
erc_pfet_gates = COPY erc_pfet_gates_1
#ENDIF
erc_nmpode_gates_waive = erc_nmpode_gates_1 NOT LUPVTWDMY 
erc_pmpode_gates_waive = erc_pmpode_gates_1 NOT LUPVTWDMY 
#IFDEF MNPP_MPGG_LAYER_WAIVER_ENABLE 
erc_nmpode_gates = COPY erc_nmpode_gates_waive
#ELSE
erc_nmpode_gates = COPY erc_nmpode_gates_1
#ENDIF
#IFDEF MNPP_MPGG_LAYER_WAIVER_ENABLE 
erc_pmpode_gates = COPY erc_pmpode_gates_waive
#ELSE
erc_pmpode_gates = COPY erc_pmpode_gates_1
#ENDIF
// Reports regions on a DNW layer that connect to more than one node.
LVS SOFTCHK DNW CONTACT
// Reports regions on a psub_term layer that connect to more than one node.
LVS SOFTCHK psub_term CONTACT
// Reports regions on a nxwell layer that connect to more than one node.
LVS SOFTCHK nxwell CONTACT
// Reports regions on a coll1 layer that connect to more than one node.
LVS SOFTCHK coll1 CONTACT
// Reports regions on a n_psub layer that connect to more than one node.
#IFNDEF NW_RING
	LVS SOFTCHK n_psub CONTACT
#ENDIF
// Reports regions on a psub layer that connect to more than one node.
LVS SOFTCHK psub CONTACT
#IFDEF PICKUP_CHECK
GROUP ERC_PICKUP_CHECK pickup.n_to_p_MD pickup.n_to_n_MD pickup.p_to_p_MD
ERC SELECT CHECK ERC_PICKUP_CHECK
pickup.n_to_p_MD { @ Dummy MD inside Dummy N-pickup connect to Dummy P-pickup cross WELL path
  
  MD_ntap = STAMP MD_ntap_region BY nxwell
  MD_ptap = STAMP MD_ptap_region BY psub
  pickup_n_to_p_MD1 = check_region INTERACT MD_ntap 
  pickup_n_to_p_MD2 = pickup_n_to_p_MD1 INTERACT MD_ptap 
  pickup_n_to_p_MD = pickup_n_to_p_MD2 AND MDx 
  COPY pickup_n_to_p_MD
}
pickup.n_to_n_MD { @ Dummy MD inside Dummy N-pickup connect to Dummy N-pickup cross WELL path
  
  MD_ntap = STAMP MD_ntap_region BY nxwell
  MD_ptap = STAMP MD_ptap_region BY psub
  pickup_n_to_n_MD1 = check_region INTERACT MD_ntap >= 2 BY NET
  pickup_n_to_n_MD2 = pickup_n_to_n_MD1 NOT INTERACT MD_ptap 
  pickup_n_to_n_MD = pickup_n_to_n_MD2 AND MDx 
  COPY pickup_n_to_n_MD
}
pickup.p_to_p_MD { @ Dummy MD inside Dummy P-pickup connect to Dummy P-pickup cross WELL path
  
  MD_ntap = STAMP MD_ntap_region BY nxwell
  MD_ptap = STAMP MD_ptap_region BY psub
  pickup_p_to_p_MD1 = check_region INTERACT MD_ptap >= 2 BY NET
  pickup_p_to_p_MD2 = pickup_p_to_p_MD1 NOT INTERACT MD_ntap 
  pickup_p_to_p_MD = pickup_p_to_p_MD2 AND MDx 
  COPY pickup_p_to_p_MD
}
#ENDIF
#IFDEF PSUB2_ERC_CHECK
GROUP ERC_PSUB2_ERC_CHECK SRDOD_CUT_PSUB2
ERC SELECT CHECK ERC_PSUB2_ERC_CHECK
SRDOD_CUT_PSUB2 { @ SR_DOD cut PSUB2 check
  COPY sr_dod_cut_psub2
}
#ENDIF
#IFDEF unexpected_device_checking_SHPMIM_client
GROUP ERC_unexpected_device_checking_SHPMIM_client UnexpectedDev.SHPMIM_client
ERC SELECT CHECK ERC_unexpected_device_checking_SHPMIM_client
UnexpectedDev.SHPMIM_client { @ Unexpected SHPMIM-client device
  shp1_out = shpmim1_reg_4tlv OR shpmim1_reg_5thv 
  COPY shp1_out
}
#ENDIF
#IFDEF METAL_MAIN_CHECK
GROUP ERC_METAL_MAIN_CHECK metal0_main_check metal1_main_check metal2_main_check metal3_main_check metal4_main_check metal5_main_check metal6_main_check metal7_main_check metal8_main_check metal9_main_check metal10_main_check metal11_main_check metal12_main_check metal13_main_check metal14_main_check metal15_main_check metal16_main_check metal17_main_check metal18_main_check
ERC SELECT CHECK ERC_METAL_MAIN_CHECK
metal0_main_check { @ Use non-color main metal layer MAIN_M0
  COPY MAIN_M0
}
metal1_main_check { @ Use non-color main metal layer MAIN_M1
  COPY MAIN_M1
}
metal2_main_check { @ Use non-color main metal layer MAIN_M2
  COPY MAIN_M2
}
metal3_main_check { @ Use non-color main metal layer MAIN_M3
  COPY MAIN_M3
}
metal4_main_check { @ Use non-color main metal layer MAIN_M4
  COPY MAIN_M4
}
metal5_main_check { @ Use non-color main metal layer MAIN_M5
  COPY MAIN_M5
}
metal6_main_check { @ Use non-color main metal layer MAIN_M6
  COPY MAIN_M6
}
metal7_main_check { @ Use non-color main metal layer MAIN_M7
  COPY MAIN_M7
}
metal8_main_check { @ Use non-color main metal layer MAIN_M8
  COPY MAIN_M8
}
metal9_main_check { @ Use non-color main metal layer MAIN_M9
  COPY MAIN_M9
}
metal10_main_check { @ Use non-color main metal layer MAIN_M10
  COPY MAIN_M10
}
metal11_main_check { @ Use non-color main metal layer MAIN_M11
  COPY MAIN_M11
}
metal12_main_check { @ Use non-color main metal layer MAIN_M12
  COPY MAIN_M12
}
metal13_main_check { @ Use non-color main metal layer MAIN_M13
  COPY MAIN_M13
}
metal14_main_check { @ Use non-color main metal layer MAIN_M14
  COPY MAIN_M14
}
metal15_main_check { @ Use non-color main metal layer MAIN_M15
  COPY MAIN_M15
}
metal16_main_check { @ Use non-color main metal layer MAIN_M16
  COPY MAIN_M16
}
metal17_main_check { @ Use non-color main metal layer MAIN_M17
  COPY MAIN_M17
}
metal18_main_check { @ Use non-color main metal layer MAIN_M18
  COPY MAIN_M18
}
#ENDIF
#IFDEF MPODE_MNPP_MPGG_CHECK
GROUP ERC_MPODE_MNPP_MPGG_CHECK mnpp_mpode mpgg_mpode
ERC SELECT CHECK ERC_MPODE_MNPP_MPGG_CHECK
mnpp_mpode { @ NMOS MPODE S/D connected to power
  tndiff_psub_tie = tndiff AND psub CONNECTED
  sd_tndiff_psub_tie = erc_nmpode_gates INTERACT tndiff_psub_tie == 2
  result_tmp = erc_nmpode_gates INTERACT tndiff_pwr == 2
  result = result_tmp NOT sd_tndiff_psub_tie 
  COPY result
}
mpgg_mpode { @ PMOS MPODE S/D connected to ground
  tpdiff_nxwell_tie = tpdiff AND nxwell CONNECTED
  sd_tpdiff_nxwell_tie = erc_pmpode_gates INTERACT tpdiff_nxwell_tie == 2
  result_tmp = erc_pmpode_gates INTERACT tpdiff_gnd == 2
  result = result_tmp NOT sd_tpdiff_nxwell_tie 
  COPY result
}
#ENDIF
#IFDEF unrecognized_device_checking
GROUP ERC_unrecognized_device_checking unrecognized_mos unrecognized_ndio unrecognized_pdio unrecognized_bjt unrecognized_rh_tn
ERC SELECT CHECK ERC_unrecognized_device_checking
unrecognized_mos { @ unrecognized check for MOS
  COPY unrecognized_mos
}
unrecognized_ndio { @ unrecognized check for NDIO
  COPY unrecognized_ndio
}
unrecognized_pdio { @ unrecognized check for PDIO
  COPY unrecognized_pdio
}
unrecognized_bjt { @ unrecognized check for BJT
  COPY unrecognized_bjt
}
unrecognized_rh_tn { @ unrecognized check for HiR resistor
  COPY unrecognized_rh_tn
}
#ENDIF
#IFDEF unexpected_device_checking_SHPMIM_server
GROUP ERC_unexpected_device_checking_SHPMIM_server UnexpectedDev.SHPMIM_server
ERC SELECT CHECK ERC_unexpected_device_checking_SHPMIM_server
UnexpectedDev.SHPMIM_server { @ Unexpected SHPMIM-server device
  shp2_out1 = shpmim21_reg_4thv OR shpmim2_reg_4tlv 
  shp2_out = shp2_out1 OR shpmim2_reg_5thv 
  COPY shp2_out
}
#ENDIF
#IFDEF unexpected_device_checking_SHDMIM
GROUP ERC_unexpected_device_checking_SHDMIM UnexpectedDev.SHDMIM
ERC SELECT CHECK ERC_unexpected_device_checking_SHDMIM
UnexpectedDev.SHDMIM { @ Unexpected SHDMIM device
  COPY shdmim_reg
}
#ENDIF
#IFDEF REGMOS_MNPP_MPGG_CHECK
GROUP ERC_REGMOS_MNPP_MPGG_CHECK mnpp mpgg
ERC SELECT CHECK ERC_REGMOS_MNPP_MPGG_CHECK
mnpp { @ NMOS S/D connected to power
  tndiff_psub_tie = tndiff AND psub CONNECTED
  sd_tndiff_psub_tie = erc_nfet_gates INTERACT tndiff_psub_tie == 2
  result_tmp = erc_nfet_gates INTERACT tndiff_pwr == 2
  result = result_tmp NOT sd_tndiff_psub_tie 
  COPY result
}
mpgg { @ PMOS S/D connected to ground
  tpdiff_nxwell_tie = tpdiff AND nxwell CONNECTED
  sd_tpdiff_nxwell_tie = erc_pfet_gates INTERACT tpdiff_nxwell_tie == 2
  result_tmp = erc_pfet_gates INTERACT tpdiff_gnd == 2
  result = result_tmp NOT sd_tpdiff_nxwell_tie 
  COPY result
}
#ENDIF
CONNECT core_nmos_gates n_fpoly_svt
CONNECT core_nmos_gates n_fpoly_lvtll
CONNECT core_nmos_gates n_fpoly_lvt
CONNECT core_nmos_gates n_fpoly_ulvtll
CONNECT core_nmos_gates n_fpoly_ulvt
CONNECT core_nmos_gates n_fpoly_elvt
CONNECT core_nmos_gates n_fpoly_io
CONNECT core_nmos_gates n_fpoly_srm
CONNECT core_pmos_gates p_fpoly_svt
CONNECT core_pmos_gates p_fpoly_lvtll
CONNECT core_pmos_gates p_fpoly_lvt
CONNECT core_pmos_gates p_fpoly_ulvtll
CONNECT core_pmos_gates p_fpoly_ulvt
CONNECT core_pmos_gates p_fpoly_elvt
CONNECT core_pmos_gates p_fpoly_io
CONNECT core_pmos_gates p_fpoly_srm

#IFDEF WELL_TO_PG_CHECK
GROUP ERC_WELL_TO_PG_CHECK  npvss49 ppvdd49
ERC SELECT CHECK ERC_WELL_TO_PG_CHECK
#ENDIF

#IFDEF GATE_TO_PG_CHECK
GROUP ERC_GATE_TO_PG_CHECK  npvss150 ppvdd150
ERC SELECT CHECK ERC_GATE_TO_PG_CHECK
#ENDIF

#IFDEF DS_TO_PG_CHECK
GROUP ERC_DS_TO_PG_CHECK  mnpg mppg mnpgldd
ERC SELECT CHECK ERC_DS_TO_PG_CHECK
#ENDIF

#IFDEF FLOATING_WELL_CHECK
GROUP ERC_FLOATING_WELL_CHECK  floating.nxwell_float floating.psub
ERC SELECT CHECK ERC_FLOATING_WELL_CHECK
#ENDIF

//MOS erc_nmos_gates S/D connect to POWER&GROUND --mnpg*/
N1tndiff = NET tndiff POWER_NAME
T1tndiff = erc_nmos_gates TOUCH N1tndiff
N2tndiff = NET tndiff GROUND_NAME
T2tndiff = erc_nmos_gates TOUCH N2tndiff

#IFDEF DS_TO_PG_CHECK
mnpg { @ MOS connected to both power and ground
  (T1tndiff AND T2tndiff) NOT SDI
}
#ENDIF

//MOS erc_pmos_gates S/D connect to POWER&GROUND --mppg*/
N1tpdiff = NET tpdiff POWER_NAME
T1tpdiff = erc_pmos_gates TOUCH N1tpdiff
N2tpdiff = NET tpdiff GROUND_NAME
T2tpdiff = erc_pmos_gates TOUCH N2tpdiff

#IFDEF DS_TO_PG_CHECK
mppg { @ MOS connected to both power and ground
  (T1tpdiff AND T2tpdiff) NOT SDI
}
#ENDIF

//MOS erc_nmos_gates S/D connect to POWER&GROUND --mnpgldd*/
N1tndiff_mnpglddA = NET tndiff POWER_NAME
T1tndiff_mnpglddA = erc_nmos_gates TOUCH N1tndiff_mnpglddA
N2tndiff_sdi_mnpglddA = NET tndiff_sdi GROUND_NAME
T2tndiff_sdi_mnpglddA = erc_nmos_gates TOUCH N2tndiff_sdi_mnpglddA

N1tndiff_sdi_mnpglddB = NET tndiff_sdi POWER_NAME
T1tndiff_sdi_mnpglddB = erc_nmos_gates TOUCH N1tndiff_sdi_mnpglddB
N2tndiff_mnpglddB = NET tndiff GROUND_NAME
T2tndiff_mnpglddB = erc_nmos_gates TOUCH N2tndiff_mnpglddB

#IFDEF DS_TO_PG_CHECK
mnpgldd { @ MOS connected to both power and ground
  (T1tndiff_mnpglddA AND T2tndiff_sdi_mnpglddA ) OR (T1tndiff_sdi_mnpglddB AND T2tndiff_mnpglddB )
}
#ENDIF

#IFDEF FLOATING_WELL_CHECK
SCONNECT tndiff nxwell_float by nplug
SCONNECT tndiff_dio nxwell_float by nplug
SCONNECT tndiff_bjt nxwell_float by nplug
SCONNECT tndiff_RC nxwell_float by nplug
floating.nxwell_float { @ nxwell_float is not connected to POWER
  no_power_path = PATHCHK !POWER nxwell_float PORTS ALSO
  direct_connect_ground = NET nxwell_float GROUND_NAME
  no_power_path or direct_connect_ground
}
#ENDIF

#IFDEF FLOATING_WELL_CHECK
floating.psub { @ psub is not connected to GROUND
  no_ground_path = PATHCHK !GROUND psub PORTS ALSO
  direct_connect_power = NET psub POWER_NAME
  no_ground_path or direct_connect_power
}
#ENDIF
gate1_not_IO2_GND = NET gate1_not_IO2_not_IO1 GROUND_NAME

#IFDEF GATE_TO_PG_CHECK
// Core gate connect to ground 
npvss150 { @ gate1_not_IO2 connected to GROUND
  gate1_not_IO2_GND_pmos = gate1_not_IO2_GND INTERACT N1tpdiff
  gate1_not_IO2_GND_nmos = gate1_not_IO2_GND INTERACT N1tndiff
  nxwell_PWR = NET nxwell POWER_NAME
  psub_PWR = NET psub POWER_NAME
  psub_GND = NET psub GROUND_NAME

  gate1_not_IO2_GND_pmos_filter1_1 = gate1_not_IO2_GND_pmos INTERACT N1tpdiff == 2
  gate1_not_IO2_GND_pmos_filter1 = gate1_not_IO2_GND_pmos_filter1_1 INTERACT nxwell_PWR

  gate1_not_IO2_GND_nmos_filter1_1 = gate1_not_IO2_GND_nmos INTERACT N1tndiff == 2
  gate1_not_IO2_GND_nmos_filter1 = gate1_not_IO2_GND_nmos_filter1_1 INTERACT psub_PWR

  gate1_not_IO2_GND_nmos_filter2_1 = gate1_not_IO2_GND_nmos INTERACT N2tndiff
  gate1_not_IO2_GND_nmos_filter2 = gate1_not_IO2_GND_nmos_filter2_1 INTERACT psub_GND

  gate1_not_IO2_GND_nmos_filter3_1 = gate1_not_IO2_GND_nmos INTERACT N1tndiff == 2
  gate1_not_IO2_GND_nmos_filter3 = gate1_not_IO2_GND_nmos_filter3_1 INTERACT (nxwell_PWR AND VARi)

  ((((gate1_not_IO2_GND_pmos OR gate1_not_IO2_GND_nmos) NOT gate1_not_IO2_GND_pmos_filter1) NOT gate1_not_IO2_GND_nmos_filter1) NOT gate1_not_IO2_GND_nmos_filter2) NOT gate1_not_IO2_GND_nmos_filter3
}
#ENDIF

#IFDEF WELL_TO_PG_CHECK
// ntap connect to ground 
npvss49 { @ ntap connected to GROUND
  ntap_not_var = ntap NOT VARi
  NET ntap_not_var GROUND_NAME
}
#ENDIF

#IFDEF PATH_CHECK
// Nodes with a path to ground but not power 
ERC PATHCHK GROUND && !POWER
#ENDIF

#IFDEF PATH_CHECK
// Nodes with a path to power but not ground 
ERC PATHCHK POWER && !GROUND
#ENDIF

#IFDEF PATH_CHECK
// Nodes without a path to power and ground 
ERC PATHCHK !POWER && !GROUND NOFLOAT
#ENDIF

#IFDEF PATH_CHECK
ERC PATHCHK !LABELED NOFLOAT
#ENDIF
gate1_not_IO2_not_IO1 = COPY gate1_not_IO2
CONNECT gate1_not_IO2_not_IO1 n_fpoly_elvt
CONNECT gate1_not_IO2_not_IO1 n_fpoly_io
CONNECT gate1_not_IO2_not_IO1 n_fpoly_lvt
CONNECT gate1_not_IO2_not_IO1 n_fpoly_lvtll
CONNECT gate1_not_IO2_not_IO1 n_fpoly_srm
CONNECT gate1_not_IO2_not_IO1 n_fpoly_svt
CONNECT gate1_not_IO2_not_IO1 n_fpoly_ulvt
CONNECT gate1_not_IO2_not_IO1 n_fpoly_ulvtll
CONNECT gate1_not_IO2_not_IO1 p_fpoly_elvt
CONNECT gate1_not_IO2_not_IO1 p_fpoly_io
CONNECT gate1_not_IO2_not_IO1 p_fpoly_lvt
CONNECT gate1_not_IO2_not_IO1 p_fpoly_lvtll
CONNECT gate1_not_IO2_not_IO1 p_fpoly_srm
CONNECT gate1_not_IO2_not_IO1 p_fpoly_svt
CONNECT gate1_not_IO2_not_IO1 p_fpoly_ulvt
CONNECT gate1_not_IO2_not_IO1 p_fpoly_ulvtll
gate1_not_IO2_PWR = NET gate1_not_IO2_not_IO1 POWER_NAME

#IFDEF GATE_TO_PG_CHECK
// Core gate connect to power 
ppvdd150 { @ gate1_not_IO2 connected to POWER
  gate1_not_IO2_PWR_pmos = gate1_not_IO2_PWR INTERACT N2tpdiff
  gate1_not_IO2_PWR_nmos = gate1_not_IO2_PWR INTERACT N2tndiff
  nxwell_GND = NET nxwell GROUND_NAME
  nxwell_PWR = NET nxwell POWER_NAME
  psub_GND = NET psub GROUND_NAME

  gate1_not_IO2_PWR_pmos_filter1_1 = gate1_not_IO2_PWR_pmos INTERACT N2tpdiff == 2
  gate1_not_IO2_PWR_pmos_filter1 = gate1_not_IO2_PWR_pmos_filter1_1 INTERACT nxwell_GND

  gate1_not_IO2_PWR_nmos_filter1_1 = gate1_not_IO2_PWR_nmos INTERACT N2tndiff == 2
  gate1_not_IO2_PWR_nmos_filter1 = gate1_not_IO2_PWR_nmos_filter1_1 INTERACT psub_GND

  gate1_not_IO2_PWR_pmos_filter2_1 = gate1_not_IO2_PWR_pmos INTERACT N1tpdiff
  gate1_not_IO2_PWR_pmos_filter2 = gate1_not_IO2_PWR_pmos_filter2_1 INTERACT nxwell_PWR

  gate1_not_IO2_PWR_nmos_filter3_1 = gate1_not_IO2_PWR_nmos INTERACT N2tndiff == 2
  gate1_not_IO2_PWR_nmos_filter3 = gate1_not_IO2_PWR_nmos_filter3_1 INTERACT (nxwell_GND AND VARi)

  ((((gate1_not_IO2_PWR_pmos OR gate1_not_IO2_PWR_nmos) NOT gate1_not_IO2_PWR_pmos_filter1) NOT gate1_not_IO2_PWR_nmos_filter1) NOT gate1_not_IO2_PWR_pmos_filter2 ) NOT gate1_not_IO2_PWR_nmos_filter3
}
#ENDIF

#IFDEF WELL_TO_PG_CHECK
// ptap connect to power 
ppvdd49 { @ ptap connected to POWER
  NET ptap POWER_NAME
}
#ENDIF
#IFDEF LVSDMY4_CHECK
LVSDMY4_DNW_CHECK { @ The LVSDMY4 layer is used in LVS deck to identify logic N-Type MOS within the DNW only. Not recommend that LVSDMY4 layer is used without DNW layer
    nmos_gates_1 = all_mos_gates  NOT PP
    nmos_gates_2 = nmos_gates_1  NOT SRM
    nmos_gates_3 = nmos_gates_2  NOT VAR
    nmos_gates   = nmos_gates_3  NOT PODE_GATE
    LVSDMY4_not_DNW = LVSDMY4 NOT DNW
    LVSDMY4_not_DNW INTERACT nmos_gates
}
ERC SELECT CHECK LVSDMY4_DNW_CHECK
#ENDIF

CONNECT all_abut_npode_gate n_fpoly_svt
CONNECT all_abut_npode_gate n_fpoly_lvt
CONNECT all_abut_npode_gate n_fpoly_ulvt
CONNECT all_abut_npode_gate n_fpoly_elvt
CONNECT all_abut_npode_gate n_fpoly_lvtll
CONNECT all_abut_npode_gate n_fpoly_ulvtll
CONNECT all_abut_npode_gate n_fpoly_io
CONNECT all_abut_npode_gate n_fpoly_srm
CONNECT all_abut_ppode_gate p_fpoly_svt
CONNECT all_abut_ppode_gate p_fpoly_lvt
CONNECT all_abut_ppode_gate p_fpoly_ulvt
CONNECT all_abut_ppode_gate p_fpoly_elvt
CONNECT all_abut_ppode_gate p_fpoly_lvtll
CONNECT all_abut_ppode_gate p_fpoly_ulvtll
CONNECT all_abut_ppode_gate p_fpoly_io
CONNECT all_abut_ppode_gate p_fpoly_srm

POx_no_vg            = POx NOT INTERACT VG
POx_no_vg_bridge     = POx_no_vg INTERACT ODx == 1
MDx_no_VD            = MDx NOT INTERACT VD
MDx_no_VD_VD2        = MDx_no_VD NOT INTERACT VD2
MDx_no_VD_VD2_bridge = MDx_no_VD_VD2 INTERACT ODx == 1

tndiff_pode           = tndiff INTERACT npode_gate
tndiff_pode_no_conn   = tndiff_pode INTERACT MDx_no_VD_VD2_bridge

tpdiff_pode           = tpdiff INTERACT ppode_gate
tpdiff_pode_no_conn   = tpdiff_pode INTERACT MDx_no_VD_VD2_bridge

PODE.R.9.2_P { @ 4-terminal PODE_GATE PMOS must be turned off and connected to POWER
  ds_tie      = all_abut_ppode_gate INTERACT tpdiff == 1 BY NET
  gs_no_conn1 = all_abut_ppode_gate INTERACT POx_no_vg_bridge
  gs_no_conn  = gs_no_conn1 INTERACT tpdiff_pode_no_conn
  (( NOT NET all_abut_ppode_gate POWER_NAME ) NOT ds_tie ) NOT gs_no_conn
}
PODE.R.9.2_N { @ 4-terminal PODE_GATE NMOS must be turned off and connected to GROUND
  ds_tie      = all_abut_npode_gate INTERACT tndiff == 1 BY NET
  gs_no_conn1 = all_abut_npode_gate INTERACT POx_no_vg_bridge
  gs_no_conn  = gs_no_conn1 INTERACT tndiff_pode_no_conn
  (( NOT NET all_abut_npode_gate GROUND_NAME ) NOT ds_tie ) NOT gs_no_conn
}
ERC SELECT CHECK PODE.R.9.2_P PODE.R.9.2_N 


#ENDIF
////////////////////////////////////////////////////////////////////////////////
// STRAINED SILICON SEARCH DISTANCES
////////////////////////////////////////////////////////////////////////////////
CONNECT all_sd tndiff
CONNECT all_sd tpdiff
}

package require CalibreDFM_DEVICE
set device:normalize_xy 1
### max_sp, max_sp2, max_sd : for PSE
# maximum search distance for gate-to-1st-poly spacing
set device::max_sp    3
# maximum search distance for gate-to-2nd-poly spacing
set device::max_sp2   4
# maximum search distance for gate-to-diffusion enclosure
set device::max_sd    2
### max_sp, max_se, max_sf, max_sle, max_slf : for Boundary
# maximum search distance for gate-to-layer1 enclosure (sides)
set device::max_se    5
# maximum search distance for gate-to-2nd-layer1 spacing (sides)
set device::max_sf    6
# maximum search distance for gate-to-layer1 enclosure (ends)
set device::max_sle   5
# maximum search distance for gate-to-2nd-layer1 spacing (ends)
set device::max_slf   6
### max_sp, max_sode, max_sodf, max_sodlf : for OD-OD
# maximum search distance for gate-to-1st-OD (sides)
set device::max_sode  2
# maximum search distance for gate-to-2nd-OD (sides)
set device::max_sodf  6
# maximum search distance for gate-to-2nd-OD (ends)
set device::max_sodlf 4
# sizing up vale for gate when measuring gate-to-2nd-OD (ends)
set device::lat_sodlf 0.028

tvf::SETLAYER lod_PROP = [
   device::n3_lod_measurements -gate gate_mac -sd all_sd -od OD -max_od 2
]
tvf::SETLAYER npb_PROP = [
   device::n3_npb_measurements -gate gate_mac -sd all_sd -od ALL_OD -np NPi -pp PPi -max_od 2 -max_npb 3 -def_snpb1_absent 2 -def_snpb2_absent 3 -def_snpb1_gt_sodb 1E+12 -def_snpb2_gt_sodb 2E+12 
]
# maximum search distance for gate to poly measurement (L-dir)
set device::max_pse  3
set device::max_sod  0.01
# maximum search distance for gate to OD measurement (W-dir)
set device::max_eod  3
set device::max_swell  0.01
set device::max_ewell  0.01
set device::max_pxe  5
set device::max_pmet  5
set device::max_m0  0.01
set device::max_md1  0.01
set device::max_md2  0.01
set device::max_v0  0.01
set device::wx1  0.01
# sizing up value for gate when measuring gate-to-2nd-OD (W-dir)
set device::lx1  0.023
set device::lx2  0.01
# shifting gate edge to avoid segment merge, precision 10000 is required
set device::n20_shift_val  0.0002
set device::skip_cmod  1
set device::max_multi_layer 1

set device::skip_netid 1

tvf::SETLAYER gate_COR_ose_y = [
   device::n20_measurements -gate gate_mac -sd all_sd -active OD_ose_y -poly POx -skip_l_dir_od 1 
]

tvf::SETLAYER gate_xvtmbe = [
   device::multi_layer_measurements -gate gate_mac -sd all_sd                              \
                                    -layers { POx     VTSN    VTLN    VTULN   VTELN   VTLNLL  VTULNLL   VTSP    VTLP    VTULP   VTELP   VTLPLL  VTULPLL  VTSN    VTLN    VTULN   VTELN   VTLNLL  VTULNLL   VTSP    VTLP    VTULP   VTELP   VTLPLL  VTULPLL   }    \
                                    -types  { {enc 1} {ext 1} {ext 1} {ext 1} {ext 1} {ext 1} {ext 1} {ext 1} {ext 1} {ext 1} {ext 1} {ext 1} {ext 1} {enc 1} {enc 1} {enc 1} {enc 1} {enc 1}   {enc 1} {enc 1} {enc 1} {enc 1} {enc 1} {enc 1} {enc 1}   }      
]
tvf::SETLAYER iso_cpode_p = [
   device::iso_cpode_measurements -gate gate_mac -sd all_sd -cpode iso_cpode -od ALL_OD -max_search 2 -max_len_extend 0.001 -default_cpode_len 0.13 -max_cpode_width 0.003
]
tvf::setlayer cpo_aux = [ device::n3_cpo_measurements -gate gate_mac -sd all_sd -po_bc POz -po_ac POx -cpo CPO -lx 1.1 -max_cpo 1 -max_jog 0.002 -shift_val 0.0001]
